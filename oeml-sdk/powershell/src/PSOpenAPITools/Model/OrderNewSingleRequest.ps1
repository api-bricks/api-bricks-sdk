#
# OEML - REST API
# This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=""https://postman.coinapi.io/"" target=""_blank"">https://postman.coinapi.io/</a>       
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The new order message.

.PARAMETER ExchangeId
Exchange identifier used to identify the routing destination.
.PARAMETER ClientOrderId
The unique identifier of the order assigned by the client.
.PARAMETER SymbolIdExchange
Exchange symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
.PARAMETER SymbolIdCoinapi
CoinAPI symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
.PARAMETER AmountOrder
Order quantity.
.PARAMETER Price
Order price.
.PARAMETER Side
No description available.
.PARAMETER OrderType
No description available.
.PARAMETER TimeInForce
No description available.
.PARAMETER ExpireTime
Expiration time. Conditionaly required for orders with time_in_force = `GOOD_TILL_TIME_EXCHANGE` or `GOOD_TILL_TIME_OEML`.
.PARAMETER ExecInst
Order execution instructions are documented in the separate section: <a href=""#oeml-order-params-exec"">OEML / Starter Guide / Order parameters / Execution instructions</a> 
.OUTPUTS

OrderNewSingleRequest<PSCustomObject>
#>

function Initialize-OrderNewSingleRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientOrderId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolIdExchange},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SymbolIdCoinapi},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${AmountOrder},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${Price},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Side},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OrderType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TimeInForce},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ExpireTime},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("MAKER_OR_CANCEL", "AUCTION_ONLY", "INDICATION_OF_INTEREST")]
        [String[]]
        ${ExecInst}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OrderNewSingleRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ExchangeId) {
            throw "invalid value for 'ExchangeId', 'ExchangeId' cannot be null."
        }

        if (!$ClientOrderId) {
            throw "invalid value for 'ClientOrderId', 'ClientOrderId' cannot be null."
        }

        if (!$AmountOrder) {
            throw "invalid value for 'AmountOrder', 'AmountOrder' cannot be null."
        }

        if (!$Price) {
            throw "invalid value for 'Price', 'Price' cannot be null."
        }

        if (!$Side) {
            throw "invalid value for 'Side', 'Side' cannot be null."
        }

        if (!$OrderType) {
            throw "invalid value for 'OrderType', 'OrderType' cannot be null."
        }

        if (!$TimeInForce) {
            throw "invalid value for 'TimeInForce', 'TimeInForce' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "exchange_id" = ${ExchangeId}
            "client_order_id" = ${ClientOrderId}
            "symbol_id_exchange" = ${SymbolIdExchange}
            "symbol_id_coinapi" = ${SymbolIdCoinapi}
            "amount_order" = ${AmountOrder}
            "price" = ${Price}
            "side" = ${Side}
            "order_type" = ${OrderType}
            "time_in_force" = ${TimeInForce}
            "expire_time" = ${ExpireTime}
            "exec_inst" = ${ExecInst}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderNewSingleRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderNewSingleRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderNewSingleRequest<PSCustomObject>
#>
function ConvertFrom-JsonToOrderNewSingleRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OrderNewSingleRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderNewSingleRequest
        $AllProperties = ("exchange_id", "client_order_id", "symbol_id_exchange", "symbol_id_coinapi", "amount_order", "price", "side", "order_type", "time_in_force", "expire_time", "exec_inst")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `exchange_id` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_id"))) {
            throw "Error! JSON cannot be serialized due to the required property `exchange_id` missing."
        } else {
            $ExchangeId = $JsonParameters.PSobject.Properties["exchange_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client_order_id"))) {
            throw "Error! JSON cannot be serialized due to the required property `client_order_id` missing."
        } else {
            $ClientOrderId = $JsonParameters.PSobject.Properties["client_order_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_order"))) {
            throw "Error! JSON cannot be serialized due to the required property `amount_order` missing."
        } else {
            $AmountOrder = $JsonParameters.PSobject.Properties["amount_order"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price"))) {
            throw "Error! JSON cannot be serialized due to the required property `price` missing."
        } else {
            $Price = $JsonParameters.PSobject.Properties["price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "side"))) {
            throw "Error! JSON cannot be serialized due to the required property `side` missing."
        } else {
            $Side = $JsonParameters.PSobject.Properties["side"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "order_type"))) {
            throw "Error! JSON cannot be serialized due to the required property `order_type` missing."
        } else {
            $OrderType = $JsonParameters.PSobject.Properties["order_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_in_force"))) {
            throw "Error! JSON cannot be serialized due to the required property `time_in_force` missing."
        } else {
            $TimeInForce = $JsonParameters.PSobject.Properties["time_in_force"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id_exchange"))) { #optional property not found
            $SymbolIdExchange = $null
        } else {
            $SymbolIdExchange = $JsonParameters.PSobject.Properties["symbol_id_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol_id_coinapi"))) { #optional property not found
            $SymbolIdCoinapi = $null
        } else {
            $SymbolIdCoinapi = $JsonParameters.PSobject.Properties["symbol_id_coinapi"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expire_time"))) { #optional property not found
            $ExpireTime = $null
        } else {
            $ExpireTime = $JsonParameters.PSobject.Properties["expire_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exec_inst"))) { #optional property not found
            $ExecInst = $null
        } else {
            $ExecInst = $JsonParameters.PSobject.Properties["exec_inst"].value
        }

        $PSO = [PSCustomObject]@{
            "exchange_id" = ${ExchangeId}
            "client_order_id" = ${ClientOrderId}
            "symbol_id_exchange" = ${SymbolIdExchange}
            "symbol_id_coinapi" = ${SymbolIdCoinapi}
            "amount_order" = ${AmountOrder}
            "price" = ${Price}
            "side" = ${Side}
            "order_type" = ${OrderType}
            "time_in_force" = ${TimeInForce}
            "expire_time" = ${ExpireTime}
            "exec_inst" = ${ExecInst}
        }

        return $PSO
    }

}

