#
# OEML - REST API
# This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=""https://postman.coinapi.io/"" target=""_blank"">https://postman.coinapi.io/</a>       
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The order execution report message.

.PARAMETER ClientOrderIdFormatExchange
The unique identifier of the order assigned by the client converted to the exchange order tag format for the purpose of tracking it.
.PARAMETER ExchangeOrderId
Unique identifier of the order assigned by the exchange or executing system.
.PARAMETER AmountOpen
Quantity open for further execution. `amount_open` = `amount_order` - `amount_filled`
.PARAMETER AmountFilled
Total quantity filled.
.PARAMETER AvgPx
Calculated average price of all fills on this order.
.PARAMETER Status
No description available.
.PARAMETER StatusHistory
Timestamped history of order status changes.
.PARAMETER ErrorMessage
Error message.
.PARAMETER Fills
Relay fill information on working orders.
.OUTPUTS

OrderExecutionReportAllOf<PSCustomObject>
#>

function Initialize-OrderExecutionReportAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ClientOrderIdFormatExchange},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeOrderId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${AmountOpen},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${AmountFilled},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${AvgPx},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[][]]
        ${StatusHistory},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ErrorMessage},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Fills}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => OrderExecutionReportAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$ClientOrderIdFormatExchange) {
            throw "invalid value for 'ClientOrderIdFormatExchange', 'ClientOrderIdFormatExchange' cannot be null."
        }

        if (!$AmountOpen) {
            throw "invalid value for 'AmountOpen', 'AmountOpen' cannot be null."
        }

        if (!$AmountFilled) {
            throw "invalid value for 'AmountFilled', 'AmountFilled' cannot be null."
        }

        if (!$Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "client_order_id_format_exchange" = ${ClientOrderIdFormatExchange}
            "exchange_order_id" = ${ExchangeOrderId}
            "amount_open" = ${AmountOpen}
            "amount_filled" = ${AmountFilled}
            "avg_px" = ${AvgPx}
            "status" = ${Status}
            "status_history" = ${StatusHistory}
            "error_message" = ${ErrorMessage}
            "fills" = ${Fills}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to OrderExecutionReportAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to OrderExecutionReportAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

OrderExecutionReportAllOf<PSCustomObject>
#>
function ConvertFrom-JsonToOrderExecutionReportAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => OrderExecutionReportAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in OrderExecutionReportAllOf
        $AllProperties = ("client_order_id_format_exchange", "exchange_order_id", "amount_open", "amount_filled", "avg_px", "status", "status_history", "error_message", "fills")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property `client_order_id_format_exchange` missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client_order_id_format_exchange"))) {
            throw "Error! JSON cannot be serialized due to the required property `client_order_id_format_exchange` missing."
        } else {
            $ClientOrderIdFormatExchange = $JsonParameters.PSobject.Properties["client_order_id_format_exchange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_open"))) {
            throw "Error! JSON cannot be serialized due to the required property `amount_open` missing."
        } else {
            $AmountOpen = $JsonParameters.PSobject.Properties["amount_open"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_filled"))) {
            throw "Error! JSON cannot be serialized due to the required property `amount_filled` missing."
        } else {
            $AmountFilled = $JsonParameters.PSobject.Properties["amount_filled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property `status` missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_order_id"))) { #optional property not found
            $ExchangeOrderId = $null
        } else {
            $ExchangeOrderId = $JsonParameters.PSobject.Properties["exchange_order_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avg_px"))) { #optional property not found
            $AvgPx = $null
        } else {
            $AvgPx = $JsonParameters.PSobject.Properties["avg_px"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status_history"))) { #optional property not found
            $StatusHistory = $null
        } else {
            $StatusHistory = $JsonParameters.PSobject.Properties["status_history"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "error_message"))) { #optional property not found
            $ErrorMessage = $null
        } else {
            $ErrorMessage = $JsonParameters.PSobject.Properties["error_message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fills"))) { #optional property not found
            $Fills = $null
        } else {
            $Fills = $JsonParameters.PSobject.Properties["fills"].value
        }

        $PSO = [PSCustomObject]@{
            "client_order_id_format_exchange" = ${ClientOrderIdFormatExchange}
            "exchange_order_id" = ${ExchangeOrderId}
            "amount_open" = ${AmountOpen}
            "amount_filled" = ${AmountFilled}
            "avg_px" = ${AvgPx}
            "status" = ${Status}
            "status_history" = ${StatusHistory}
            "error_message" = ${ErrorMessage}
            "fills" = ${Fills}
        }

        return $PSO
    }

}

