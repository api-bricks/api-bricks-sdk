{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       

   The version of the OpenAPI document: v1
   Contact: support@coinapi.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.Fills exposing (Fills, decoder, encode, encodeWithTag, toString)

import DateOnly exposing (DateOnly)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias Fills =
    { time : Maybe (DateOnly)
    , price : Maybe (Float)
    , amount : Maybe (Float)
    }


decoder : Decoder Fills
decoder =
    Decode.succeed Fills
        |> optional "time" (Decode.nullable DateOnly.decoder) Nothing
        |> optional "price" (Decode.nullable Decode.float) Nothing
        |> optional "amount" (Decode.nullable Decode.float) Nothing



encode : Fills -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> Fills -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : Fills -> List (String, Encode.Value)
encodePairs model =
    [ ( "time", Maybe.withDefault Encode.null (Maybe.map DateOnly.encode model.time) )
    , ( "price", Maybe.withDefault Encode.null (Maybe.map Encode.float model.price) )
    , ( "amount", Maybe.withDefault Encode.null (Maybe.map Encode.float model.amount) )
    ]



toString : Fills -> String
toString =
    Encode.encode 0 << encode




