{-
   OEML - REST API
   This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       

   The version of the OpenAPI document: v1
   Contact: support@coinapi.io

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.OrderExecutionReportAllOf exposing (OrderExecutionReportAllOf, decoder, encode, encodeWithTag, toString)

import Data.OrdStatus as OrdStatus exposing (OrdStatus)
import Data.Fills as Fills exposing (Fills)
import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


{-| The order execution report message.
-}
type alias OrderExecutionReportAllOf =
    { clientOrderIdFormatExchange : String
    , exchangeOrderId : Maybe (String)
    , amountOpen : Float
    , amountFilled : Float
    , avgPx : Maybe (Float)
    , status : OrdStatus
    , statusHistory : Maybe ((List (List String)))
    , errorMessage : Maybe (String)
    , fills : Maybe ((List Fills))
    }


decoder : Decoder OrderExecutionReportAllOf
decoder =
    Decode.succeed OrderExecutionReportAllOf
        |> required "client_order_id_format_exchange" Decode.string
        |> optional "exchange_order_id" (Decode.nullable Decode.string) Nothing
        |> required "amount_open" Decode.float
        |> required "amount_filled" Decode.float
        |> optional "avg_px" (Decode.nullable Decode.float) Nothing
        |> required "status" OrdStatus.decoder
        |> optional "status_history" (Decode.nullable (Decode.list (Decode.list Decode.string))) Nothing
        |> optional "error_message" (Decode.nullable Decode.string) Nothing
        |> optional "fills" (Decode.nullable (Decode.list Fills.decoder)) Nothing



encode : OrderExecutionReportAllOf -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> OrderExecutionReportAllOf -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : OrderExecutionReportAllOf -> List (String, Encode.Value)
encodePairs model =
    [ ( "client_order_id_format_exchange", Encode.string model.clientOrderIdFormatExchange )
    , ( "exchange_order_id", Maybe.withDefault Encode.null (Maybe.map Encode.string model.exchangeOrderId) )
    , ( "amount_open", Encode.float model.amountOpen )
    , ( "amount_filled", Encode.float model.amountFilled )
    , ( "avg_px", Maybe.withDefault Encode.null (Maybe.map Encode.float model.avgPx) )
    , ( "status", OrdStatus.encode model.status )
    , ( "status_history", Maybe.withDefault Encode.null (Maybe.map (Encode.list (Encode.list Encode.string)) model.statusHistory) )
    , ( "error_message", Maybe.withDefault Encode.null (Maybe.map Encode.string model.errorMessage) )
    , ( "fills", Maybe.withDefault Encode.null (Maybe.map (Encode.list Fills.encode) model.fills) )
    ]



toString : OrderExecutionReportAllOf -> String
toString =
    Encode.encode 0 << encode




