=begin
#OEML - REST API

#This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  # The order execution report object.
  class OrderExecutionReport
    # Exchange identifier used to identify the routing destination.
    attr_accessor :exchange_id

    # The unique identifier of the order assigned by the client.
    attr_accessor :client_order_id

    # Exchange symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
    attr_accessor :symbol_id_exchange

    # CoinAPI symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
    attr_accessor :symbol_id_coinapi

    # Order quantity.
    attr_accessor :amount_order

    # Order price.
    attr_accessor :price

    attr_accessor :side

    attr_accessor :order_type

    attr_accessor :time_in_force

    # Expiration time. Conditionaly required for orders with time_in_force = `GOOD_TILL_TIME_EXCHANGE` or `GOOD_TILL_TIME_OEML`.
    attr_accessor :expire_time

    # Order execution instructions are documented in the separate section: <a href=\"#oeml-order-params-exec\">OEML / Starter Guide / Order parameters / Execution instructions</a> 
    attr_accessor :exec_inst

    # The unique identifier of the order assigned by the client converted to the exchange order tag format for the purpose of tracking it.
    attr_accessor :client_order_id_format_exchange

    # Unique identifier of the order assigned by the exchange or executing system.
    attr_accessor :exchange_order_id

    # Quantity open for further execution. `amount_open` = `amount_order` - `amount_filled`
    attr_accessor :amount_open

    # Total quantity filled.
    attr_accessor :amount_filled

    # Calculated average price of all fills on this order.
    attr_accessor :avg_px

    attr_accessor :status

    # Timestamped history of order status changes.
    attr_accessor :status_history

    # Error message.
    attr_accessor :error_message

    # Relay fill information on working orders.
    attr_accessor :fills

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'exchange_id' => :'exchange_id',
        :'client_order_id' => :'client_order_id',
        :'symbol_id_exchange' => :'symbol_id_exchange',
        :'symbol_id_coinapi' => :'symbol_id_coinapi',
        :'amount_order' => :'amount_order',
        :'price' => :'price',
        :'side' => :'side',
        :'order_type' => :'order_type',
        :'time_in_force' => :'time_in_force',
        :'expire_time' => :'expire_time',
        :'exec_inst' => :'exec_inst',
        :'client_order_id_format_exchange' => :'client_order_id_format_exchange',
        :'exchange_order_id' => :'exchange_order_id',
        :'amount_open' => :'amount_open',
        :'amount_filled' => :'amount_filled',
        :'avg_px' => :'avg_px',
        :'status' => :'status',
        :'status_history' => :'status_history',
        :'error_message' => :'error_message',
        :'fills' => :'fills'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'exchange_id' => :'String',
        :'client_order_id' => :'String',
        :'symbol_id_exchange' => :'String',
        :'symbol_id_coinapi' => :'String',
        :'amount_order' => :'Float',
        :'price' => :'Float',
        :'side' => :'OrdSide',
        :'order_type' => :'OrdType',
        :'time_in_force' => :'TimeInForce',
        :'expire_time' => :'Date',
        :'exec_inst' => :'Array<String>',
        :'client_order_id_format_exchange' => :'String',
        :'exchange_order_id' => :'String',
        :'amount_open' => :'Float',
        :'amount_filled' => :'Float',
        :'avg_px' => :'Float',
        :'status' => :'OrdStatus',
        :'status_history' => :'Array<Array<String>>',
        :'error_message' => :'String',
        :'fills' => :'Array<Fills>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'OrderExecutionReportAllOf',
      :'OrderNewSingleRequest'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderExecutionReport` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderExecutionReport`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'exchange_id')
        self.exchange_id = attributes[:'exchange_id']
      end

      if attributes.key?(:'client_order_id')
        self.client_order_id = attributes[:'client_order_id']
      end

      if attributes.key?(:'symbol_id_exchange')
        self.symbol_id_exchange = attributes[:'symbol_id_exchange']
      end

      if attributes.key?(:'symbol_id_coinapi')
        self.symbol_id_coinapi = attributes[:'symbol_id_coinapi']
      end

      if attributes.key?(:'amount_order')
        self.amount_order = attributes[:'amount_order']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'side')
        self.side = attributes[:'side']
      end

      if attributes.key?(:'order_type')
        self.order_type = attributes[:'order_type']
      end

      if attributes.key?(:'time_in_force')
        self.time_in_force = attributes[:'time_in_force']
      end

      if attributes.key?(:'expire_time')
        self.expire_time = attributes[:'expire_time']
      end

      if attributes.key?(:'exec_inst')
        if (value = attributes[:'exec_inst']).is_a?(Array)
          self.exec_inst = value
        end
      end

      if attributes.key?(:'client_order_id_format_exchange')
        self.client_order_id_format_exchange = attributes[:'client_order_id_format_exchange']
      end

      if attributes.key?(:'exchange_order_id')
        self.exchange_order_id = attributes[:'exchange_order_id']
      end

      if attributes.key?(:'amount_open')
        self.amount_open = attributes[:'amount_open']
      end

      if attributes.key?(:'amount_filled')
        self.amount_filled = attributes[:'amount_filled']
      end

      if attributes.key?(:'avg_px')
        self.avg_px = attributes[:'avg_px']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_history')
        if (value = attributes[:'status_history']).is_a?(Array)
          self.status_history = value
        end
      end

      if attributes.key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.key?(:'fills')
        if (value = attributes[:'fills']).is_a?(Array)
          self.fills = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @exchange_id.nil?
        invalid_properties.push('invalid value for "exchange_id", exchange_id cannot be nil.')
      end

      if @client_order_id.nil?
        invalid_properties.push('invalid value for "client_order_id", client_order_id cannot be nil.')
      end

      if @amount_order.nil?
        invalid_properties.push('invalid value for "amount_order", amount_order cannot be nil.')
      end

      if @price.nil?
        invalid_properties.push('invalid value for "price", price cannot be nil.')
      end

      if @side.nil?
        invalid_properties.push('invalid value for "side", side cannot be nil.')
      end

      if @order_type.nil?
        invalid_properties.push('invalid value for "order_type", order_type cannot be nil.')
      end

      if @time_in_force.nil?
        invalid_properties.push('invalid value for "time_in_force", time_in_force cannot be nil.')
      end

      if @client_order_id_format_exchange.nil?
        invalid_properties.push('invalid value for "client_order_id_format_exchange", client_order_id_format_exchange cannot be nil.')
      end

      if @amount_open.nil?
        invalid_properties.push('invalid value for "amount_open", amount_open cannot be nil.')
      end

      if @amount_filled.nil?
        invalid_properties.push('invalid value for "amount_filled", amount_filled cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @exchange_id.nil?
      return false if @client_order_id.nil?
      return false if @amount_order.nil?
      return false if @price.nil?
      return false if @side.nil?
      return false if @order_type.nil?
      return false if @time_in_force.nil?
      return false if @client_order_id_format_exchange.nil?
      return false if @amount_open.nil?
      return false if @amount_filled.nil?
      return false if @status.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          exchange_id == o.exchange_id &&
          client_order_id == o.client_order_id &&
          symbol_id_exchange == o.symbol_id_exchange &&
          symbol_id_coinapi == o.symbol_id_coinapi &&
          amount_order == o.amount_order &&
          price == o.price &&
          side == o.side &&
          order_type == o.order_type &&
          time_in_force == o.time_in_force &&
          expire_time == o.expire_time &&
          exec_inst == o.exec_inst &&
          client_order_id_format_exchange == o.client_order_id_format_exchange &&
          exchange_order_id == o.exchange_order_id &&
          amount_open == o.amount_open &&
          amount_filled == o.amount_filled &&
          avg_px == o.avg_px &&
          status == o.status &&
          status_history == o.status_history &&
          error_message == o.error_message &&
          fills == o.fills
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [exchange_id, client_order_id, symbol_id_exchange, symbol_id_coinapi, amount_order, price, side, order_type, time_in_force, expire_time, exec_inst, client_order_id_format_exchange, exchange_order_id, amount_open, amount_filled, avg_px, status, status_history, error_message, fills].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
