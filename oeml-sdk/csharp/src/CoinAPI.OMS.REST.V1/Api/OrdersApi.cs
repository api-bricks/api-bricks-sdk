/* 
 * OEML - REST API
 *
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using CoinAPI.OMS.REST.V1.Client;
using CoinAPI.OMS.REST.V1.Model;

namespace CoinAPI.OMS.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <returns>Message</returns>
        Message V1OrdersCancelAllPost (OrderCancelAllRequest orderCancelAllRequest);

        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> V1OrdersCancelAllPostWithHttpInfo (OrderCancelAllRequest orderCancelAllRequest);
        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <returns>OrderExecutionReport</returns>
        OrderExecutionReport V1OrdersCancelPost (OrderCancelSingleRequest orderCancelSingleRequest);

        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        ApiResponse<OrderExecutionReport> V1OrdersCancelPostWithHttpInfo (OrderCancelSingleRequest orderCancelSingleRequest);
        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <returns>List&lt;OrderExecutionReport&gt;</returns>
        List<OrderExecutionReport> V1OrdersGet (string exchangeId = default(string));

        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderExecutionReport&gt;</returns>
        ApiResponse<List<OrderExecutionReport>> V1OrdersGetWithHttpInfo (string exchangeId = default(string));
        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <returns>OrderExecutionReport</returns>
        OrderExecutionReport V1OrdersPost (OrderNewSingleRequest orderNewSingleRequest);

        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        ApiResponse<OrderExecutionReport> V1OrdersPostWithHttpInfo (OrderNewSingleRequest orderNewSingleRequest);
        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <returns>OrderExecutionReport</returns>
        OrderExecutionReport V1OrdersStatusClientOrderIdGet (string clientOrderId);

        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        ApiResponse<OrderExecutionReport> V1OrdersStatusClientOrderIdGetWithHttpInfo (string clientOrderId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> V1OrdersCancelAllPostAsync (OrderCancelAllRequest orderCancelAllRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> V1OrdersCancelAllPostWithHttpInfoAsync (OrderCancelAllRequest orderCancelAllRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrderExecutionReport</returns>
        System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersCancelPostAsync (OrderCancelSingleRequest orderCancelSingleRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersCancelPostWithHttpInfoAsync (OrderCancelSingleRequest orderCancelSingleRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;OrderExecutionReport&gt;</returns>
        System.Threading.Tasks.Task<List<OrderExecutionReport>> V1OrdersGetAsync (string exchangeId = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;OrderExecutionReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderExecutionReport>>> V1OrdersGetWithHttpInfoAsync (string exchangeId = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrderExecutionReport</returns>
        System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersPostAsync (OrderNewSingleRequest orderNewSingleRequest, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersPostWithHttpInfoAsync (OrderNewSingleRequest orderNewSingleRequest, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrderExecutionReport</returns>
        System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersStatusClientOrderIdGetAsync (string clientOrderId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersStatusClientOrderIdGetWithHttpInfoAsync (string clientOrderId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private CoinAPI.OMS.REST.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(String basePath)
        {
            this.Configuration = new CoinAPI.OMS.REST.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CoinAPI.OMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrdersApi()
        {
            this.Configuration = CoinAPI.OMS.REST.V1.Client.Configuration.Default;

            ExceptionFactory = CoinAPI.OMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(CoinAPI.OMS.REST.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CoinAPI.OMS.REST.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CoinAPI.OMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.OMS.REST.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.OMS.REST.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <returns>Message</returns>
        public Message V1OrdersCancelAllPost (OrderCancelAllRequest orderCancelAllRequest)
        {
             ApiResponse<Message> localVarResponse = V1OrdersCancelAllPostWithHttpInfo(orderCancelAllRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <returns>ApiResponse of Message</returns>
        public ApiResponse<Message> V1OrdersCancelAllPostWithHttpInfo (OrderCancelAllRequest orderCancelAllRequest)
        {
            // verify the required parameter 'orderCancelAllRequest' is set
            if (orderCancelAllRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderCancelAllRequest' when calling OrdersApi->V1OrdersCancelAllPost");

            var localVarPath = "/v1/orders/cancel/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderCancelAllRequest != null && orderCancelAllRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderCancelAllRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderCancelAllRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> V1OrdersCancelAllPostAsync (OrderCancelAllRequest orderCancelAllRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Message> localVarResponse = await V1OrdersCancelAllPostWithHttpInfoAsync(orderCancelAllRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Message>> V1OrdersCancelAllPostWithHttpInfoAsync (OrderCancelAllRequest orderCancelAllRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orderCancelAllRequest' is set
            if (orderCancelAllRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderCancelAllRequest' when calling OrdersApi->V1OrdersCancelAllPost");

            var localVarPath = "/v1/orders/cancel/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderCancelAllRequest != null && orderCancelAllRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderCancelAllRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderCancelAllRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Message>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Message) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Message)));
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <returns>OrderExecutionReport</returns>
        public OrderExecutionReport V1OrdersCancelPost (OrderCancelSingleRequest orderCancelSingleRequest)
        {
             ApiResponse<OrderExecutionReport> localVarResponse = V1OrdersCancelPostWithHttpInfo(orderCancelSingleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        public ApiResponse<OrderExecutionReport> V1OrdersCancelPostWithHttpInfo (OrderCancelSingleRequest orderCancelSingleRequest)
        {
            // verify the required parameter 'orderCancelSingleRequest' is set
            if (orderCancelSingleRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderCancelSingleRequest' when calling OrdersApi->V1OrdersCancelPost");

            var localVarPath = "/v1/orders/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderCancelSingleRequest != null && orderCancelSingleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderCancelSingleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderCancelSingleRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderExecutionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderExecutionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderExecutionReport)));
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrderExecutionReport</returns>
        public async System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersCancelPostAsync (OrderCancelSingleRequest orderCancelSingleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OrderExecutionReport> localVarResponse = await V1OrdersCancelPostWithHttpInfoAsync(orderCancelSingleRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersCancelPostWithHttpInfoAsync (OrderCancelSingleRequest orderCancelSingleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orderCancelSingleRequest' is set
            if (orderCancelSingleRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderCancelSingleRequest' when calling OrdersApi->V1OrdersCancelPost");

            var localVarPath = "/v1/orders/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderCancelSingleRequest != null && orderCancelSingleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderCancelSingleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderCancelSingleRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderExecutionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderExecutionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderExecutionReport)));
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <returns>List&lt;OrderExecutionReport&gt;</returns>
        public List<OrderExecutionReport> V1OrdersGet (string exchangeId = default(string))
        {
             ApiResponse<List<OrderExecutionReport>> localVarResponse = V1OrdersGetWithHttpInfo(exchangeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderExecutionReport&gt;</returns>
        public ApiResponse<List<OrderExecutionReport>> V1OrdersGetWithHttpInfo (string exchangeId = default(string))
        {

            var localVarPath = "/v1/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange_id", exchangeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderExecutionReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OrderExecutionReport>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderExecutionReport>)));
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;OrderExecutionReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderExecutionReport>> V1OrdersGetAsync (string exchangeId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<OrderExecutionReport>> localVarResponse = await V1OrdersGetWithHttpInfoAsync(exchangeId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;OrderExecutionReport&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OrderExecutionReport>>> V1OrdersGetWithHttpInfoAsync (string exchangeId = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (exchangeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exchange_id", exchangeId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<OrderExecutionReport>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<OrderExecutionReport>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<OrderExecutionReport>)));
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <returns>OrderExecutionReport</returns>
        public OrderExecutionReport V1OrdersPost (OrderNewSingleRequest orderNewSingleRequest)
        {
             ApiResponse<OrderExecutionReport> localVarResponse = V1OrdersPostWithHttpInfo(orderNewSingleRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        public ApiResponse<OrderExecutionReport> V1OrdersPostWithHttpInfo (OrderNewSingleRequest orderNewSingleRequest)
        {
            // verify the required parameter 'orderNewSingleRequest' is set
            if (orderNewSingleRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderNewSingleRequest' when calling OrdersApi->V1OrdersPost");

            var localVarPath = "/v1/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderNewSingleRequest != null && orderNewSingleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderNewSingleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderNewSingleRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderExecutionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderExecutionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderExecutionReport)));
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrderExecutionReport</returns>
        public async System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersPostAsync (OrderNewSingleRequest orderNewSingleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OrderExecutionReport> localVarResponse = await V1OrdersPostWithHttpInfoAsync(orderNewSingleRequest, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersPostWithHttpInfoAsync (OrderNewSingleRequest orderNewSingleRequest, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orderNewSingleRequest' is set
            if (orderNewSingleRequest == null)
                throw new ApiException(400, "Missing required parameter 'orderNewSingleRequest' when calling OrdersApi->V1OrdersPost");

            var localVarPath = "/v1/orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "appliction/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderNewSingleRequest != null && orderNewSingleRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(orderNewSingleRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = orderNewSingleRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderExecutionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderExecutionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderExecutionReport)));
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <returns>OrderExecutionReport</returns>
        public OrderExecutionReport V1OrdersStatusClientOrderIdGet (string clientOrderId)
        {
             ApiResponse<OrderExecutionReport> localVarResponse = V1OrdersStatusClientOrderIdGetWithHttpInfo(clientOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        public ApiResponse<OrderExecutionReport> V1OrdersStatusClientOrderIdGetWithHttpInfo (string clientOrderId)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling OrdersApi->V1OrdersStatusClientOrderIdGet");

            var localVarPath = "/v1/orders/status/{client_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("client_order_id", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersStatusClientOrderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderExecutionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderExecutionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderExecutionReport)));
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrderExecutionReport</returns>
        public async System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersStatusClientOrderIdGetAsync (string clientOrderId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OrderExecutionReport> localVarResponse = await V1OrdersStatusClientOrderIdGetWithHttpInfoAsync(clientOrderId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersStatusClientOrderIdGetWithHttpInfoAsync (string clientOrderId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new ApiException(400, "Missing required parameter 'clientOrderId' when calling OrdersApi->V1OrdersStatusClientOrderIdGet");

            var localVarPath = "/v1/orders/status/{client_order_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientOrderId != null) localVarPathParams.Add("client_order_id", this.Configuration.ApiClient.ParameterToString(clientOrderId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1OrdersStatusClientOrderIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrderExecutionReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrderExecutionReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrderExecutionReport)));
        }

    }
}
