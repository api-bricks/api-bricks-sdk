/*
 * OEML - REST API
 *
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CoinAPI.OMS.REST.V1.Client;
using CoinAPI.OMS.REST.V1.Api;
using CoinAPI.OMS.REST.V1.Model;

namespace CoinAPI.OMS.REST.V1.Test
{
    /// <summary>
    ///  Class for testing OrdersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OrdersApiTests
    {
        private OrdersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new OrdersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of OrdersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' OrdersApi
            //Assert.IsInstanceOf(typeof(OrdersApi), instance);
        }

        
        /// <summary>
        /// Test V1OrdersCancelAllPost
        /// </summary>
        [Test]
        public void V1OrdersCancelAllPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderCancelAllRequest orderCancelAllRequest = null;
            //var response = instance.V1OrdersCancelAllPost(orderCancelAllRequest);
            //Assert.IsInstanceOf(typeof(MessageReject), response, "response is MessageReject");
        }
        
        /// <summary>
        /// Test V1OrdersCancelPost
        /// </summary>
        [Test]
        public void V1OrdersCancelPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderCancelSingleRequest orderCancelSingleRequest = null;
            //var response = instance.V1OrdersCancelPost(orderCancelSingleRequest);
            //Assert.IsInstanceOf(typeof(OrderExecutionReport), response, "response is OrderExecutionReport");
        }
        
        /// <summary>
        /// Test V1OrdersGet
        /// </summary>
        [Test]
        public void V1OrdersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string exchangeId = null;
            //var response = instance.V1OrdersGet(exchangeId);
            //Assert.IsInstanceOf(typeof(List<OrderExecutionReport>), response, "response is List<OrderExecutionReport>");
        }
        
        /// <summary>
        /// Test V1OrdersPost
        /// </summary>
        [Test]
        public void V1OrdersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OrderNewSingleRequest orderNewSingleRequest = null;
            //var response = instance.V1OrdersPost(orderNewSingleRequest);
            //Assert.IsInstanceOf(typeof(OrderExecutionReport), response, "response is OrderExecutionReport");
        }
        
        /// <summary>
        /// Test V1OrdersStatusClientOrderIdGet
        /// </summary>
        [Test]
        public void V1OrdersStatusClientOrderIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientOrderId = null;
            //var response = instance.V1OrdersStatusClientOrderIdGet(clientOrderId);
            //Assert.IsInstanceOf(typeof(OrderExecutionReport), response, "response is OrderExecutionReport");
        }
        
    }

}
