/*
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol.\nThis API is also available in the Postman application: <a href="https://postman.coinapi.io/" target="_blank">https://postman.coinapi.io/</a>      \n
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * The order execution report object.
 */
public class OASOrderExecutionReport implements OASOrderNewSingleRequest, OASOrderExecutionReportAllOf, OAS.MappedProperties {
    /**
     * Exchange identifier used to identify the routing destination.
     * @return exchangeId
     */
    public String exchangeId { get; set; }

    /**
     * The unique identifier of the order assigned by the client.
     * @return clientOrderId
     */
    public String clientOrderId { get; set; }

    /**
     * Exchange symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
     * @return symbolIdExchange
     */
    public String symbolIdExchange { get; set; }

    /**
     * CoinAPI symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
     * @return symbolIdCoinapi
     */
    public String symbolIdCoinapi { get; set; }

    /**
     * Order quantity.
     * @return amountOrder
     */
    public Double amountOrder { get; set; }

    /**
     * Order price.
     * @return price
     */
    public Double price { get; set; }

    /**
     * Get side
     * @return side
     */
    public OASOrdSide side { get; set; }

    /**
     * Get orderType
     * @return orderType
     */
    public OASOrdType orderType { get; set; }

    /**
     * Get timeInForce
     * @return timeInForce
     */
    public OASTimeInForce timeInForce { get; set; }

    /**
     * Expiration time. Conditionaly required for orders with time_in_force = `GOOD_TILL_TIME_EXCHANGE` or `GOOD_TILL_TIME_OEML`.
     * @return expireTime
     */
    public Date expireTime { get; set; }

    /**
     * Gets or Sets execInst
     */
    public enum ExecInstEnum {
        MAKER_OR_CANCEL,
        AUCTION_ONLY,
        INDICATION_OF_INTEREST
    }

    /**
     * Order execution instructions are documented in the separate section: <a href="#oeml-order-params-exec">OEML / Starter Guide / Order parameters / Execution instructions</a>\n
     * @return execInst
     */
    public List<ExecInstEnum> execInst { get; set; }

    /**
     * The unique identifier of the order assigned by the client converted to the exchange order tag format for the purpose of tracking it.
     * @return clientOrderIdFormatExchange
     */
    public String clientOrderIdFormatExchange { get; set; }

    /**
     * Unique identifier of the order assigned by the exchange or executing system.
     * @return exchangeOrderId
     */
    public String exchangeOrderId { get; set; }

    /**
     * Quantity open for further execution. `amount_open` = `amount_order` - `amount_filled`
     * @return amountOpen
     */
    public Double amountOpen { get; set; }

    /**
     * Total quantity filled.
     * @return amountFilled
     */
    public Double amountFilled { get; set; }

    /**
     * Calculated average price of all fills on this order.
     * @return avgPx
     */
    public Double avgPx { get; set; }

    /**
     * Get status
     * @return status
     */
    public OASOrdStatus status { get; set; }

    /**
     * Timestamped history of order status changes.
     * @return statusHistory
     */
    public List<List<String>> statusHistory { get; set; }

    /**
     * Error message.
     * @return errorMessage
     */
    public String errorMessage { get; set; }

    /**
     * Relay fill information on working orders.
     * @return fills
     */
    public List<OASFills> fills { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst',
        'client_order_id_format_exchange' => 'clientOrderIdFormatExchange',
        'exchange_order_id' => 'exchangeOrderId',
        'amount_open' => 'amountOpen',
        'amount_filled' => 'amountFilled',
        'avg_px' => 'avgPx',
        'status_history' => 'statusHistory',
        'error_message' => 'errorMessage'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASOrderExecutionReport() {
        execInst = new List<ExecInstEnum>();
        statusHistory = new List<List<String>>();
        fills = new List<OASFills>();
    }

    public static OASOrderExecutionReport getExample() {
        OASOrderExecutionReport orderExecutionReport = new OASOrderExecutionReport();
          orderExecutionReport.exchangeId = 'KRAKEN';
          orderExecutionReport.clientOrderId = '6ab36bc1-344d-432e-ac6d-0bf44ee64c2b';
          orderExecutionReport.symbolIdExchange = 'XBT/USDT';
          orderExecutionReport.symbolIdCoinapi = 'KRAKEN_SPOT_BTC_USDT';
          orderExecutionReport.amountOrder = 0.045;
          orderExecutionReport.price = 0.0783;
          orderExecutionReport.side = OASOrdSide.getExample();
          orderExecutionReport.orderType = OASOrdType.getExample();
          orderExecutionReport.timeInForce = OASTimeInForce.getExample();
          orderExecutionReport.expireTime = Date.getExample();
          orderExecutionReport.execInst = List<ExecInstEnum>.LIST_EXECINSTENUM_NEW_LIST_STRING_MAKER_OR_CANCEL_;
          orderExecutionReport.clientOrderIdFormatExchange = 'f81211e2-27c4-b86a-8143-01088ba9222c';
          orderExecutionReport.exchangeOrderId = '3456456754';
          orderExecutionReport.amountOpen = 0.22;
          orderExecutionReport.amountFilled = 0.0;
          orderExecutionReport.avgPx = 0.0783;
          orderExecutionReport.status = OASOrdStatus.getExample();
          orderExecutionReport.statusHistory = new List<List<String>>{new List<String>{'[["RECEIVED","2020-05-27T11:16:20.1677709Z"],["REJECTED","2020-05-27T11:16:20.1677710Z"]]'}};
          orderExecutionReport.errorMessage = '{"result":"error","reason":"InsufficientFunds","message":"Failed to place buy order on symbol \'BTCUSD\' for price $7,000.00 and quantity 0.22 BTC due to insufficient funds"}';
          orderExecutionReport.fills = new List<OASFills>{OASFills.getExample()};
        return orderExecutionReport;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrderExecutionReport) {           
            OASOrderExecutionReport orderExecutionReport = (OASOrderExecutionReport) obj;
            return this.exchangeId == orderExecutionReport.exchangeId
                && this.clientOrderId == orderExecutionReport.clientOrderId
                && this.symbolIdExchange == orderExecutionReport.symbolIdExchange
                && this.symbolIdCoinapi == orderExecutionReport.symbolIdCoinapi
                && this.amountOrder == orderExecutionReport.amountOrder
                && this.price == orderExecutionReport.price
                && this.side == orderExecutionReport.side
                && this.orderType == orderExecutionReport.orderType
                && this.timeInForce == orderExecutionReport.timeInForce
                && this.expireTime == orderExecutionReport.expireTime
                && this.execInst == orderExecutionReport.execInst
                && this.clientOrderIdFormatExchange == orderExecutionReport.clientOrderIdFormatExchange
                && this.exchangeOrderId == orderExecutionReport.exchangeOrderId
                && this.amountOpen == orderExecutionReport.amountOpen
                && this.amountFilled == orderExecutionReport.amountFilled
                && this.avgPx == orderExecutionReport.avgPx
                && this.status == orderExecutionReport.status
                && this.statusHistory == orderExecutionReport.statusHistory
                && this.errorMessage == orderExecutionReport.errorMessage
                && this.fills == orderExecutionReport.fills;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (exchangeId == null ? 0 : System.hashCode(exchangeId));
        hashCode = (17 * hashCode) + (clientOrderId == null ? 0 : System.hashCode(clientOrderId));
        hashCode = (17 * hashCode) + (symbolIdExchange == null ? 0 : System.hashCode(symbolIdExchange));
        hashCode = (17 * hashCode) + (symbolIdCoinapi == null ? 0 : System.hashCode(symbolIdCoinapi));
        hashCode = (17 * hashCode) + (amountOrder == null ? 0 : System.hashCode(amountOrder));
        hashCode = (17 * hashCode) + (price == null ? 0 : System.hashCode(price));
        hashCode = (17 * hashCode) + (side == null ? 0 : System.hashCode(side));
        hashCode = (17 * hashCode) + (orderType == null ? 0 : System.hashCode(orderType));
        hashCode = (17 * hashCode) + (timeInForce == null ? 0 : System.hashCode(timeInForce));
        hashCode = (17 * hashCode) + (expireTime == null ? 0 : System.hashCode(expireTime));
        hashCode = (17 * hashCode) + (execInst == null ? 0 : System.hashCode(execInst));
        hashCode = (17 * hashCode) + (clientOrderIdFormatExchange == null ? 0 : System.hashCode(clientOrderIdFormatExchange));
        hashCode = (17 * hashCode) + (exchangeOrderId == null ? 0 : System.hashCode(exchangeOrderId));
        hashCode = (17 * hashCode) + (amountOpen == null ? 0 : System.hashCode(amountOpen));
        hashCode = (17 * hashCode) + (amountFilled == null ? 0 : System.hashCode(amountFilled));
        hashCode = (17 * hashCode) + (avgPx == null ? 0 : System.hashCode(avgPx));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        hashCode = (17 * hashCode) + (statusHistory == null ? 0 : System.hashCode(statusHistory));
        hashCode = (17 * hashCode) + (errorMessage == null ? 0 : System.hashCode(errorMessage));
        hashCode = (17 * hashCode) + (fills == null ? 0 : System.hashCode(fills));
        return hashCode;
    }
}

