/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderExecutionReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderExecutionReport::OAIOrderExecutionReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderExecutionReport::OAIOrderExecutionReport() {
    this->initializeModel();
}

OAIOrderExecutionReport::~OAIOrderExecutionReport() {}

void OAIOrderExecutionReport::initializeModel() {

    m_exchange_id_isSet = false;
    m_exchange_id_isValid = false;

    m_client_order_id_isSet = false;
    m_client_order_id_isValid = false;

    m_symbol_id_exchange_isSet = false;
    m_symbol_id_exchange_isValid = false;

    m_symbol_id_coinapi_isSet = false;
    m_symbol_id_coinapi_isValid = false;

    m_amount_order_isSet = false;
    m_amount_order_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_side_isSet = false;
    m_side_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_time_in_force_isSet = false;
    m_time_in_force_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_exec_inst_isSet = false;
    m_exec_inst_isValid = false;

    m_client_order_id_format_exchange_isSet = false;
    m_client_order_id_format_exchange_isValid = false;

    m_exchange_order_id_isSet = false;
    m_exchange_order_id_isValid = false;

    m_amount_open_isSet = false;
    m_amount_open_isValid = false;

    m_amount_filled_isSet = false;
    m_amount_filled_isValid = false;

    m_avg_px_isSet = false;
    m_avg_px_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_history_isSet = false;
    m_status_history_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_fills_isSet = false;
    m_fills_isValid = false;
}

void OAIOrderExecutionReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderExecutionReport::fromJsonObject(QJsonObject json) {

    m_exchange_id_isValid = ::OpenAPI::fromJsonValue(exchange_id, json[QString("exchange_id")]);
    m_exchange_id_isSet = !json[QString("exchange_id")].isNull() && m_exchange_id_isValid;

    m_client_order_id_isValid = ::OpenAPI::fromJsonValue(client_order_id, json[QString("client_order_id")]);
    m_client_order_id_isSet = !json[QString("client_order_id")].isNull() && m_client_order_id_isValid;

    m_symbol_id_exchange_isValid = ::OpenAPI::fromJsonValue(symbol_id_exchange, json[QString("symbol_id_exchange")]);
    m_symbol_id_exchange_isSet = !json[QString("symbol_id_exchange")].isNull() && m_symbol_id_exchange_isValid;

    m_symbol_id_coinapi_isValid = ::OpenAPI::fromJsonValue(symbol_id_coinapi, json[QString("symbol_id_coinapi")]);
    m_symbol_id_coinapi_isSet = !json[QString("symbol_id_coinapi")].isNull() && m_symbol_id_coinapi_isValid;

    m_amount_order_isValid = ::OpenAPI::fromJsonValue(amount_order, json[QString("amount_order")]);
    m_amount_order_isSet = !json[QString("amount_order")].isNull() && m_amount_order_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_side_isValid = ::OpenAPI::fromJsonValue(side, json[QString("side")]);
    m_side_isSet = !json[QString("side")].isNull() && m_side_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(order_type, json[QString("order_type")]);
    m_order_type_isSet = !json[QString("order_type")].isNull() && m_order_type_isValid;

    m_time_in_force_isValid = ::OpenAPI::fromJsonValue(time_in_force, json[QString("time_in_force")]);
    m_time_in_force_isSet = !json[QString("time_in_force")].isNull() && m_time_in_force_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(expire_time, json[QString("expire_time")]);
    m_expire_time_isSet = !json[QString("expire_time")].isNull() && m_expire_time_isValid;

    m_exec_inst_isValid = ::OpenAPI::fromJsonValue(exec_inst, json[QString("exec_inst")]);
    m_exec_inst_isSet = !json[QString("exec_inst")].isNull() && m_exec_inst_isValid;

    m_client_order_id_format_exchange_isValid = ::OpenAPI::fromJsonValue(client_order_id_format_exchange, json[QString("client_order_id_format_exchange")]);
    m_client_order_id_format_exchange_isSet = !json[QString("client_order_id_format_exchange")].isNull() && m_client_order_id_format_exchange_isValid;

    m_exchange_order_id_isValid = ::OpenAPI::fromJsonValue(exchange_order_id, json[QString("exchange_order_id")]);
    m_exchange_order_id_isSet = !json[QString("exchange_order_id")].isNull() && m_exchange_order_id_isValid;

    m_amount_open_isValid = ::OpenAPI::fromJsonValue(amount_open, json[QString("amount_open")]);
    m_amount_open_isSet = !json[QString("amount_open")].isNull() && m_amount_open_isValid;

    m_amount_filled_isValid = ::OpenAPI::fromJsonValue(amount_filled, json[QString("amount_filled")]);
    m_amount_filled_isSet = !json[QString("amount_filled")].isNull() && m_amount_filled_isValid;

    m_avg_px_isValid = ::OpenAPI::fromJsonValue(avg_px, json[QString("avg_px")]);
    m_avg_px_isSet = !json[QString("avg_px")].isNull() && m_avg_px_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    if(json["status_history"].isArray()){
        auto arr = json["status_history"].toArray();
        m_status_history_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QString> item;
                m_status_history_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_status_history_isSet = !jval.isNull() && m_status_history_isValid;
                status_history.push_back(item);
            }
        }
    }

    m_error_message_isValid = ::OpenAPI::fromJsonValue(error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_fills_isValid = ::OpenAPI::fromJsonValue(fills, json[QString("fills")]);
    m_fills_isSet = !json[QString("fills")].isNull() && m_fills_isValid;
}

QString OAIOrderExecutionReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderExecutionReport::asJsonObject() const {
    QJsonObject obj;
    if (m_exchange_id_isSet) {
        obj.insert(QString("exchange_id"), ::OpenAPI::toJsonValue(exchange_id));
    }
    if (m_client_order_id_isSet) {
        obj.insert(QString("client_order_id"), ::OpenAPI::toJsonValue(client_order_id));
    }
    if (m_symbol_id_exchange_isSet) {
        obj.insert(QString("symbol_id_exchange"), ::OpenAPI::toJsonValue(symbol_id_exchange));
    }
    if (m_symbol_id_coinapi_isSet) {
        obj.insert(QString("symbol_id_coinapi"), ::OpenAPI::toJsonValue(symbol_id_coinapi));
    }
    if (m_amount_order_isSet) {
        obj.insert(QString("amount_order"), ::OpenAPI::toJsonValue(amount_order));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(price));
    }
    if (side.isSet()) {
        obj.insert(QString("side"), ::OpenAPI::toJsonValue(side));
    }
    if (order_type.isSet()) {
        obj.insert(QString("order_type"), ::OpenAPI::toJsonValue(order_type));
    }
    if (time_in_force.isSet()) {
        obj.insert(QString("time_in_force"), ::OpenAPI::toJsonValue(time_in_force));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expire_time"), ::OpenAPI::toJsonValue(expire_time));
    }
    if (exec_inst.size() > 0) {
        obj.insert(QString("exec_inst"), ::OpenAPI::toJsonValue(exec_inst));
    }
    if (m_client_order_id_format_exchange_isSet) {
        obj.insert(QString("client_order_id_format_exchange"), ::OpenAPI::toJsonValue(client_order_id_format_exchange));
    }
    if (m_exchange_order_id_isSet) {
        obj.insert(QString("exchange_order_id"), ::OpenAPI::toJsonValue(exchange_order_id));
    }
    if (m_amount_open_isSet) {
        obj.insert(QString("amount_open"), ::OpenAPI::toJsonValue(amount_open));
    }
    if (m_amount_filled_isSet) {
        obj.insert(QString("amount_filled"), ::OpenAPI::toJsonValue(amount_filled));
    }
    if (m_avg_px_isSet) {
        obj.insert(QString("avg_px"), ::OpenAPI::toJsonValue(avg_px));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (status_history.size() > 0) {
        
        obj.insert(QString("status_history"), toJsonValue(status_history));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(error_message));
    }
    if (fills.size() > 0) {
        obj.insert(QString("fills"), ::OpenAPI::toJsonValue(fills));
    }
    return obj;
}

QString OAIOrderExecutionReport::getExchangeId() const {
    return exchange_id;
}
void OAIOrderExecutionReport::setExchangeId(const QString &exchange_id) {
    this->exchange_id = exchange_id;
    this->m_exchange_id_isSet = true;
}

bool OAIOrderExecutionReport::is_exchange_id_Set() const{
    return m_exchange_id_isSet;
}

bool OAIOrderExecutionReport::is_exchange_id_Valid() const{
    return m_exchange_id_isValid;
}

QString OAIOrderExecutionReport::getClientOrderId() const {
    return client_order_id;
}
void OAIOrderExecutionReport::setClientOrderId(const QString &client_order_id) {
    this->client_order_id = client_order_id;
    this->m_client_order_id_isSet = true;
}

bool OAIOrderExecutionReport::is_client_order_id_Set() const{
    return m_client_order_id_isSet;
}

bool OAIOrderExecutionReport::is_client_order_id_Valid() const{
    return m_client_order_id_isValid;
}

QString OAIOrderExecutionReport::getSymbolIdExchange() const {
    return symbol_id_exchange;
}
void OAIOrderExecutionReport::setSymbolIdExchange(const QString &symbol_id_exchange) {
    this->symbol_id_exchange = symbol_id_exchange;
    this->m_symbol_id_exchange_isSet = true;
}

bool OAIOrderExecutionReport::is_symbol_id_exchange_Set() const{
    return m_symbol_id_exchange_isSet;
}

bool OAIOrderExecutionReport::is_symbol_id_exchange_Valid() const{
    return m_symbol_id_exchange_isValid;
}

QString OAIOrderExecutionReport::getSymbolIdCoinapi() const {
    return symbol_id_coinapi;
}
void OAIOrderExecutionReport::setSymbolIdCoinapi(const QString &symbol_id_coinapi) {
    this->symbol_id_coinapi = symbol_id_coinapi;
    this->m_symbol_id_coinapi_isSet = true;
}

bool OAIOrderExecutionReport::is_symbol_id_coinapi_Set() const{
    return m_symbol_id_coinapi_isSet;
}

bool OAIOrderExecutionReport::is_symbol_id_coinapi_Valid() const{
    return m_symbol_id_coinapi_isValid;
}

double OAIOrderExecutionReport::getAmountOrder() const {
    return amount_order;
}
void OAIOrderExecutionReport::setAmountOrder(const double &amount_order) {
    this->amount_order = amount_order;
    this->m_amount_order_isSet = true;
}

bool OAIOrderExecutionReport::is_amount_order_Set() const{
    return m_amount_order_isSet;
}

bool OAIOrderExecutionReport::is_amount_order_Valid() const{
    return m_amount_order_isValid;
}

double OAIOrderExecutionReport::getPrice() const {
    return price;
}
void OAIOrderExecutionReport::setPrice(const double &price) {
    this->price = price;
    this->m_price_isSet = true;
}

bool OAIOrderExecutionReport::is_price_Set() const{
    return m_price_isSet;
}

bool OAIOrderExecutionReport::is_price_Valid() const{
    return m_price_isValid;
}

OAIOrdSide OAIOrderExecutionReport::getSide() const {
    return side;
}
void OAIOrderExecutionReport::setSide(const OAIOrdSide &side) {
    this->side = side;
    this->m_side_isSet = true;
}

bool OAIOrderExecutionReport::is_side_Set() const{
    return m_side_isSet;
}

bool OAIOrderExecutionReport::is_side_Valid() const{
    return m_side_isValid;
}

OAIOrdType OAIOrderExecutionReport::getOrderType() const {
    return order_type;
}
void OAIOrderExecutionReport::setOrderType(const OAIOrdType &order_type) {
    this->order_type = order_type;
    this->m_order_type_isSet = true;
}

bool OAIOrderExecutionReport::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAIOrderExecutionReport::is_order_type_Valid() const{
    return m_order_type_isValid;
}

OAITimeInForce OAIOrderExecutionReport::getTimeInForce() const {
    return time_in_force;
}
void OAIOrderExecutionReport::setTimeInForce(const OAITimeInForce &time_in_force) {
    this->time_in_force = time_in_force;
    this->m_time_in_force_isSet = true;
}

bool OAIOrderExecutionReport::is_time_in_force_Set() const{
    return m_time_in_force_isSet;
}

bool OAIOrderExecutionReport::is_time_in_force_Valid() const{
    return m_time_in_force_isValid;
}

QDate OAIOrderExecutionReport::getExpireTime() const {
    return expire_time;
}
void OAIOrderExecutionReport::setExpireTime(const QDate &expire_time) {
    this->expire_time = expire_time;
    this->m_expire_time_isSet = true;
}

bool OAIOrderExecutionReport::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIOrderExecutionReport::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QList<QString> OAIOrderExecutionReport::getExecInst() const {
    return exec_inst;
}
void OAIOrderExecutionReport::setExecInst(const QList<QString> &exec_inst) {
    this->exec_inst = exec_inst;
    this->m_exec_inst_isSet = true;
}

bool OAIOrderExecutionReport::is_exec_inst_Set() const{
    return m_exec_inst_isSet;
}

bool OAIOrderExecutionReport::is_exec_inst_Valid() const{
    return m_exec_inst_isValid;
}

QString OAIOrderExecutionReport::getClientOrderIdFormatExchange() const {
    return client_order_id_format_exchange;
}
void OAIOrderExecutionReport::setClientOrderIdFormatExchange(const QString &client_order_id_format_exchange) {
    this->client_order_id_format_exchange = client_order_id_format_exchange;
    this->m_client_order_id_format_exchange_isSet = true;
}

bool OAIOrderExecutionReport::is_client_order_id_format_exchange_Set() const{
    return m_client_order_id_format_exchange_isSet;
}

bool OAIOrderExecutionReport::is_client_order_id_format_exchange_Valid() const{
    return m_client_order_id_format_exchange_isValid;
}

QString OAIOrderExecutionReport::getExchangeOrderId() const {
    return exchange_order_id;
}
void OAIOrderExecutionReport::setExchangeOrderId(const QString &exchange_order_id) {
    this->exchange_order_id = exchange_order_id;
    this->m_exchange_order_id_isSet = true;
}

bool OAIOrderExecutionReport::is_exchange_order_id_Set() const{
    return m_exchange_order_id_isSet;
}

bool OAIOrderExecutionReport::is_exchange_order_id_Valid() const{
    return m_exchange_order_id_isValid;
}

double OAIOrderExecutionReport::getAmountOpen() const {
    return amount_open;
}
void OAIOrderExecutionReport::setAmountOpen(const double &amount_open) {
    this->amount_open = amount_open;
    this->m_amount_open_isSet = true;
}

bool OAIOrderExecutionReport::is_amount_open_Set() const{
    return m_amount_open_isSet;
}

bool OAIOrderExecutionReport::is_amount_open_Valid() const{
    return m_amount_open_isValid;
}

double OAIOrderExecutionReport::getAmountFilled() const {
    return amount_filled;
}
void OAIOrderExecutionReport::setAmountFilled(const double &amount_filled) {
    this->amount_filled = amount_filled;
    this->m_amount_filled_isSet = true;
}

bool OAIOrderExecutionReport::is_amount_filled_Set() const{
    return m_amount_filled_isSet;
}

bool OAIOrderExecutionReport::is_amount_filled_Valid() const{
    return m_amount_filled_isValid;
}

double OAIOrderExecutionReport::getAvgPx() const {
    return avg_px;
}
void OAIOrderExecutionReport::setAvgPx(const double &avg_px) {
    this->avg_px = avg_px;
    this->m_avg_px_isSet = true;
}

bool OAIOrderExecutionReport::is_avg_px_Set() const{
    return m_avg_px_isSet;
}

bool OAIOrderExecutionReport::is_avg_px_Valid() const{
    return m_avg_px_isValid;
}

OAIOrdStatus OAIOrderExecutionReport::getStatus() const {
    return status;
}
void OAIOrderExecutionReport::setStatus(const OAIOrdStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIOrderExecutionReport::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrderExecutionReport::is_status_Valid() const{
    return m_status_isValid;
}

QList<QList<QString>> OAIOrderExecutionReport::getStatusHistory() const {
    return status_history;
}
void OAIOrderExecutionReport::setStatusHistory(const QList<QList<QString>> &status_history) {
    this->status_history = status_history;
    this->m_status_history_isSet = true;
}

bool OAIOrderExecutionReport::is_status_history_Set() const{
    return m_status_history_isSet;
}

bool OAIOrderExecutionReport::is_status_history_Valid() const{
    return m_status_history_isValid;
}

QString OAIOrderExecutionReport::getErrorMessage() const {
    return error_message;
}
void OAIOrderExecutionReport::setErrorMessage(const QString &error_message) {
    this->error_message = error_message;
    this->m_error_message_isSet = true;
}

bool OAIOrderExecutionReport::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIOrderExecutionReport::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QList<OAIFills> OAIOrderExecutionReport::getFills() const {
    return fills;
}
void OAIOrderExecutionReport::setFills(const QList<OAIFills> &fills) {
    this->fills = fills;
    this->m_fills_isSet = true;
}

bool OAIOrderExecutionReport::is_fills_Set() const{
    return m_fills_isSet;
}

bool OAIOrderExecutionReport::is_fills_Valid() const{
    return m_fills_isValid;
}

bool OAIOrderExecutionReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exchange_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_id_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbol_id_coinapi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (side.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (order_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (time_in_force.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (exec_inst.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_order_id_format_exchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_filled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avg_px_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (status_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (fills.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderExecutionReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_exchange_id_isValid && m_client_order_id_isValid && m_amount_order_isValid && m_price_isValid && m_side_isValid && m_order_type_isValid && m_time_in_force_isValid && m_client_order_id_format_exchange_isValid && m_amount_open_isValid && m_amount_filled_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
