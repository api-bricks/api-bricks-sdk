/*
 * OEML - REST API
 *
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CoinAPI.OMS.API.SDK.Client;
using CoinAPI.OMS.API.SDK.Model;

namespace CoinAPI.OMS.API.SDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <returns>Message</returns>
        Message V1OrdersCancelAllPost(OrderCancelAllRequest orderCancelAllRequest);

        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> V1OrdersCancelAllPostWithHttpInfo(OrderCancelAllRequest orderCancelAllRequest);
        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <returns>OrderExecutionReport</returns>
        OrderExecutionReport V1OrdersCancelPost(OrderCancelSingleRequest orderCancelSingleRequest);

        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        ApiResponse<OrderExecutionReport> V1OrdersCancelPostWithHttpInfo(OrderCancelSingleRequest orderCancelSingleRequest);
        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <returns>List&lt;OrderExecutionReport&gt;</returns>
        List<OrderExecutionReport> V1OrdersGet(string exchangeId = default(string));

        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderExecutionReport&gt;</returns>
        ApiResponse<List<OrderExecutionReport>> V1OrdersGetWithHttpInfo(string exchangeId = default(string));
        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <returns>OrderExecutionReport</returns>
        OrderExecutionReport V1OrdersPost(OrderNewSingleRequest orderNewSingleRequest);

        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        ApiResponse<OrderExecutionReport> V1OrdersPostWithHttpInfo(OrderNewSingleRequest orderNewSingleRequest);
        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <returns>OrderExecutionReport</returns>
        OrderExecutionReport V1OrdersStatusClientOrderIdGet(string clientOrderId);

        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        ApiResponse<OrderExecutionReport> V1OrdersStatusClientOrderIdGetWithHttpInfo(string clientOrderId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> V1OrdersCancelAllPostAsync(OrderCancelAllRequest orderCancelAllRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> V1OrdersCancelAllPostWithHttpInfoAsync(OrderCancelAllRequest orderCancelAllRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersCancelPostAsync(OrderCancelSingleRequest orderCancelSingleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersCancelPostWithHttpInfoAsync(OrderCancelSingleRequest orderCancelSingleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderExecutionReport&gt;</returns>
        System.Threading.Tasks.Task<List<OrderExecutionReport>> V1OrdersGetAsync(string exchangeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderExecutionReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderExecutionReport>>> V1OrdersGetWithHttpInfoAsync(string exchangeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersPostAsync(OrderNewSingleRequest orderNewSingleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersPostWithHttpInfoAsync(OrderNewSingleRequest orderNewSingleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersStatusClientOrderIdGetAsync(string clientOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersStatusClientOrderIdGetWithHttpInfoAsync(string clientOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private CoinAPI.OMS.API.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(String basePath)
        {
            this.Configuration = CoinAPI.OMS.API.SDK.Client.Configuration.MergeConfigurations(
                CoinAPI.OMS.API.SDK.Client.GlobalConfiguration.Instance,
                new CoinAPI.OMS.API.SDK.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CoinAPI.OMS.API.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.OMS.API.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CoinAPI.OMS.API.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(CoinAPI.OMS.API.SDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CoinAPI.OMS.API.SDK.Client.Configuration.MergeConfigurations(
                CoinAPI.OMS.API.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CoinAPI.OMS.API.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.OMS.API.SDK.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CoinAPI.OMS.API.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(CoinAPI.OMS.API.SDK.Client.ISynchronousClient client, CoinAPI.OMS.API.SDK.Client.IAsynchronousClient asyncClient, CoinAPI.OMS.API.SDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CoinAPI.OMS.API.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CoinAPI.OMS.API.SDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CoinAPI.OMS.API.SDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.OMS.API.SDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.OMS.API.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <returns>Message</returns>
        public Message V1OrdersCancelAllPost(OrderCancelAllRequest orderCancelAllRequest)
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<Message> localVarResponse = V1OrdersCancelAllPostWithHttpInfo(orderCancelAllRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <returns>ApiResponse of Message</returns>
        public CoinAPI.OMS.API.SDK.Client.ApiResponse<Message> V1OrdersCancelAllPostWithHttpInfo(OrderCancelAllRequest orderCancelAllRequest)
        {
            // verify the required parameter 'orderCancelAllRequest' is set
            if (orderCancelAllRequest == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'orderCancelAllRequest' when calling OrdersApi->V1OrdersCancelAllPost");

            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = orderCancelAllRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Message>("/v1/orders/cancel/all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> V1OrdersCancelAllPostAsync(OrderCancelAllRequest orderCancelAllRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<Message> localVarResponse = await V1OrdersCancelAllPostWithHttpInfoAsync(orderCancelAllRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.OMS.API.SDK.Client.ApiResponse<Message>> V1OrdersCancelAllPostWithHttpInfoAsync(OrderCancelAllRequest orderCancelAllRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderCancelAllRequest' is set
            if (orderCancelAllRequest == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'orderCancelAllRequest' when calling OrdersApi->V1OrdersCancelAllPost");


            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };


            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = orderCancelAllRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Message>("/v1/orders/cancel/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <returns>OrderExecutionReport</returns>
        public OrderExecutionReport V1OrdersCancelPost(OrderCancelSingleRequest orderCancelSingleRequest)
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport> localVarResponse = V1OrdersCancelPostWithHttpInfo(orderCancelSingleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        public CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport> V1OrdersCancelPostWithHttpInfo(OrderCancelSingleRequest orderCancelSingleRequest)
        {
            // verify the required parameter 'orderCancelSingleRequest' is set
            if (orderCancelSingleRequest == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'orderCancelSingleRequest' when calling OrdersApi->V1OrdersCancelPost");

            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = orderCancelSingleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderExecutionReport>("/v1/orders/cancel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        public async System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersCancelPostAsync(OrderCancelSingleRequest orderCancelSingleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport> localVarResponse = await V1OrdersCancelPostWithHttpInfoAsync(orderCancelSingleRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport>> V1OrdersCancelPostWithHttpInfoAsync(OrderCancelSingleRequest orderCancelSingleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderCancelSingleRequest' is set
            if (orderCancelSingleRequest == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'orderCancelSingleRequest' when calling OrdersApi->V1OrdersCancelPost");


            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };


            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = orderCancelSingleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderExecutionReport>("/v1/orders/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <returns>List&lt;OrderExecutionReport&gt;</returns>
        public List<OrderExecutionReport> V1OrdersGet(string exchangeId = default(string))
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<List<OrderExecutionReport>> localVarResponse = V1OrdersGetWithHttpInfo(exchangeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <returns>ApiResponse of List&lt;OrderExecutionReport&gt;</returns>
        public CoinAPI.OMS.API.SDK.Client.ApiResponse<List<OrderExecutionReport>> V1OrdersGetWithHttpInfo(string exchangeId = default(string))
        {
            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (exchangeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.OMS.API.SDK.Client.ClientUtils.ParameterToMultiMap("", "exchange_id", exchangeId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OrderExecutionReport>>("/v1/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderExecutionReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderExecutionReport>> V1OrdersGetAsync(string exchangeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<List<OrderExecutionReport>> localVarResponse = await V1OrdersGetWithHttpInfoAsync(exchangeId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderExecutionReport&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.OMS.API.SDK.Client.ApiResponse<List<OrderExecutionReport>>> V1OrdersGetWithHttpInfoAsync(string exchangeId = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };


            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (exchangeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.OMS.API.SDK.Client.ClientUtils.ParameterToMultiMap("", "exchange_id", exchangeId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OrderExecutionReport>>("/v1/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <returns>OrderExecutionReport</returns>
        public OrderExecutionReport V1OrdersPost(OrderNewSingleRequest orderNewSingleRequest)
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport> localVarResponse = V1OrdersPostWithHttpInfo(orderNewSingleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        public CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport> V1OrdersPostWithHttpInfo(OrderNewSingleRequest orderNewSingleRequest)
        {
            // verify the required parameter 'orderNewSingleRequest' is set
            if (orderNewSingleRequest == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'orderNewSingleRequest' when calling OrdersApi->V1OrdersPost");

            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = orderNewSingleRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderExecutionReport>("/v1/orders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        public async System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersPostAsync(OrderNewSingleRequest orderNewSingleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport> localVarResponse = await V1OrdersPostWithHttpInfoAsync(orderNewSingleRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport>> V1OrdersPostWithHttpInfoAsync(OrderNewSingleRequest orderNewSingleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderNewSingleRequest' is set
            if (orderNewSingleRequest == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'orderNewSingleRequest' when calling OrdersApi->V1OrdersPost");


            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "appliction/json"
            };


            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = orderNewSingleRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderExecutionReport>("/v1/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <returns>OrderExecutionReport</returns>
        public OrderExecutionReport V1OrdersStatusClientOrderIdGet(string clientOrderId)
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport> localVarResponse = V1OrdersStatusClientOrderIdGetWithHttpInfo(clientOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        public CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport> V1OrdersStatusClientOrderIdGetWithHttpInfo(string clientOrderId)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'clientOrderId' when calling OrdersApi->V1OrdersStatusClientOrderIdGet");

            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("client_order_id", CoinAPI.OMS.API.SDK.Client.ClientUtils.ParameterToString(clientOrderId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderExecutionReport>("/v1/orders/status/{client_order_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersStatusClientOrderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        public async System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersStatusClientOrderIdGetAsync(string clientOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport> localVarResponse = await V1OrdersStatusClientOrderIdGetWithHttpInfoAsync(clientOrderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.OMS.API.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.OMS.API.SDK.Client.ApiResponse<OrderExecutionReport>> V1OrdersStatusClientOrderIdGetWithHttpInfoAsync(string clientOrderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
                throw new CoinAPI.OMS.API.SDK.Client.ApiException(400, "Missing required parameter 'clientOrderId' when calling OrdersApi->V1OrdersStatusClientOrderIdGet");


            CoinAPI.OMS.API.SDK.Client.RequestOptions localVarRequestOptions = new CoinAPI.OMS.API.SDK.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoinAPI.OMS.API.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("client_order_id", CoinAPI.OMS.API.SDK.Client.ClientUtils.ParameterToString(clientOrderId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderExecutionReport>("/v1/orders/status/{client_order_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersStatusClientOrderIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
