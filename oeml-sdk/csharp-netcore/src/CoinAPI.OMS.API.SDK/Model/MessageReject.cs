/*
 * OEML - REST API
 *
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.OMS.API.SDK.Client.OpenAPIDateConverter;

namespace CoinAPI.OMS.API.SDK.Model
{
    /// <summary>
    /// MessageReject
    /// </summary>
    [DataContract(Name = "MessageReject")]
    public partial class MessageReject : IEquatable<MessageReject>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets RejectReason
        /// </summary>
        [DataMember(Name = "reject_reason", EmitDefaultValue = false)]
        public RejectReason? RejectReason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageReject" /> class.
        /// </summary>
        /// <param name="type">Message type, constant..</param>
        /// <param name="rejectReason">rejectReason.</param>
        /// <param name="exchangeId">If the message related to exchange, then the identifier of the exchange will be provided..</param>
        /// <param name="message">Message text..</param>
        /// <param name="rejectedMessage">Value of rejected request, if available..</param>
        public MessageReject(string type = default(string), RejectReason? rejectReason = default(RejectReason?), string exchangeId = default(string), string message = default(string), string rejectedMessage = default(string))
        {
            this.Type = type;
            this.RejectReason = rejectReason;
            this.ExchangeId = exchangeId;
            this.Message = message;
            this.RejectedMessage = rejectedMessage;
        }

        /// <summary>
        /// Message type, constant.
        /// </summary>
        /// <value>Message type, constant.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// If the message related to exchange, then the identifier of the exchange will be provided.
        /// </summary>
        /// <value>If the message related to exchange, then the identifier of the exchange will be provided.</value>
        [DataMember(Name = "exchange_id", EmitDefaultValue = false)]
        public string ExchangeId { get; set; }

        /// <summary>
        /// Message text.
        /// </summary>
        /// <value>Message text.</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Value of rejected request, if available.
        /// </summary>
        /// <value>Value of rejected request, if available.</value>
        [DataMember(Name = "rejected_message", EmitDefaultValue = false)]
        public string RejectedMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageReject {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RejectReason: ").Append(RejectReason).Append("\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  RejectedMessage: ").Append(RejectedMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageReject);
        }

        /// <summary>
        /// Returns true if MessageReject instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageReject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageReject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.RejectReason == input.RejectReason ||
                    this.RejectReason.Equals(input.RejectReason)
                ) && 
                (
                    this.ExchangeId == input.ExchangeId ||
                    (this.ExchangeId != null &&
                    this.ExchangeId.Equals(input.ExchangeId))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.RejectedMessage == input.RejectedMessage ||
                    (this.RejectedMessage != null &&
                    this.RejectedMessage.Equals(input.RejectedMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.RejectReason.GetHashCode();
                if (this.ExchangeId != null)
                    hashCode = hashCode * 59 + this.ExchangeId.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.RejectedMessage != null)
                    hashCode = hashCode * 59 + this.RejectedMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
