/*
 * OEML - REST API
 *
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * API version: v1
 * Contact: support@coinapi.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RejectReason Cause of rejection.
type RejectReason string

// List of RejectReason
const (
	OTHER RejectReason = "OTHER"
	EXCHANGE_UNREACHABLE RejectReason = "EXCHANGE_UNREACHABLE"
	EXCHANGE_RESPONSE_TIMEOUT RejectReason = "EXCHANGE_RESPONSE_TIMEOUT"
	ORDER_ID_NOT_FOUND RejectReason = "ORDER_ID_NOT_FOUND"
	INVALID_TYPE RejectReason = "INVALID_TYPE"
	METHOD_NOT_SUPPORTED RejectReason = "METHOD_NOT_SUPPORTED"
	JSON_ERROR RejectReason = "JSON_ERROR"
)

var allowedRejectReasonEnumValues = []RejectReason{
	"OTHER",
	"EXCHANGE_UNREACHABLE",
	"EXCHANGE_RESPONSE_TIMEOUT",
	"ORDER_ID_NOT_FOUND",
	"INVALID_TYPE",
	"METHOD_NOT_SUPPORTED",
	"JSON_ERROR",
}

func (v *RejectReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RejectReason(value)
	for _, existing := range allowedRejectReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RejectReason", value)
}

// NewRejectReasonFromValue returns a pointer to a valid RejectReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRejectReasonFromValue(v string) (*RejectReason, error) {
	ev := RejectReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RejectReason: valid values are %v", v, allowedRejectReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RejectReason) IsValid() bool {
	for _, existing := range allowedRejectReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RejectReason value
func (v RejectReason) Ptr() *RejectReason {
	return &v
}

type NullableRejectReason struct {
	value *RejectReason
	isSet bool
}

func (v NullableRejectReason) Get() *RejectReason {
	return v.value
}

func (v *NullableRejectReason) Set(val *RejectReason) {
	v.value = val
	v.isSet = true
}

func (v NullableRejectReason) IsSet() bool {
	return v.isSet
}

func (v *NullableRejectReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRejectReason(val *RejectReason) *NullableRejectReason {
	return &NullableRejectReason{value: val, isSet: true}
}

func (v NullableRejectReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRejectReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

