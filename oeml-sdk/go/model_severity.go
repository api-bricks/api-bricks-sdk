/*
 * OEML - REST API
 *
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * API version: v1
 * Contact: support@coinapi.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Severity Severity of the message.
type Severity string

// List of Severity
const (
	INFO Severity = "INFO"
	WARNING Severity = "WARNING"
	ERROR Severity = "ERROR"
)

func (v *Severity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Severity(value)
	for _, existing := range []Severity{ "INFO", "WARNING", "ERROR",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Severity", value)
}

// Ptr returns reference to Severity value
func (v Severity) Ptr() *Severity {
	return &v
}

type NullableSeverity struct {
	value *Severity
	isSet bool
}

func (v NullableSeverity) Get() *Severity {
	return v.value
}

func (v *NullableSeverity) Set(val *Severity) {
	v.value = val
	v.isSet = true
}

func (v NullableSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeverity(val *Severity) *NullableSeverity {
	return &NullableSeverity{value: val, isSet: true}
}

func (v NullableSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

