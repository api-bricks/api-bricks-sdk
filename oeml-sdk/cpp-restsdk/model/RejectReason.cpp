/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RejectReason.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RejectReason::RejectReason()
{
}

RejectReason::~RejectReason()
{
}

void RejectReason::validate()
{
    // TODO: implement validation
}

web::json::value RejectReason::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eRejectReason::RejectReason_OTHER) val = web::json::value::string(U(OTHER));
    if (m_value == eRejectReason::RejectReason_EXCHANGE_UNREACHABLE) val = web::json::value::string(U(EXCHANGE_UNREACHABLE));
    if (m_value == eRejectReason::RejectReason_EXCHANGE_RESPONSE_TIMEOUT) val = web::json::value::string(U(EXCHANGE_RESPONSE_TIMEOUT));
    if (m_value == eRejectReason::RejectReason_ORDER_ID_NOT_FOUND) val = web::json::value::string(U(ORDER_ID_NOT_FOUND));
    if (m_value == eRejectReason::RejectReason_INVALID_TYPE) val = web::json::value::string(U(INVALID_TYPE));
    if (m_value == eRejectReason::RejectReason_METHOD_NOT_SUPPORTED) val = web::json::value::string(U(METHOD_NOT_SUPPORTED));
    if (m_value == eRejectReason::RejectReason_JSON_ERROR) val = web::json::value::string(U(JSON_ERROR));

    return val;
}

bool RejectReason::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t(OTHER)) m_value = eRejectReason::RejectReason_OTHER;
    if (s == utility::conversions::to_string_t(EXCHANGE_UNREACHABLE)) m_value = eRejectReason::RejectReason_EXCHANGE_UNREACHABLE;
    if (s == utility::conversions::to_string_t(EXCHANGE_RESPONSE_TIMEOUT)) m_value = eRejectReason::RejectReason_EXCHANGE_RESPONSE_TIMEOUT;
    if (s == utility::conversions::to_string_t(ORDER_ID_NOT_FOUND)) m_value = eRejectReason::RejectReason_ORDER_ID_NOT_FOUND;
    if (s == utility::conversions::to_string_t(INVALID_TYPE)) m_value = eRejectReason::RejectReason_INVALID_TYPE;
    if (s == utility::conversions::to_string_t(METHOD_NOT_SUPPORTED)) m_value = eRejectReason::RejectReason_METHOD_NOT_SUPPORTED;
    if (s == utility::conversions::to_string_t(JSON_ERROR)) m_value = eRejectReason::RejectReason_JSON_ERROR;
    return true;
}

void RejectReason::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eRejectReason::RejectReason_OTHER) s = utility::conversions::to_string_t(OTHER);
    if (m_value == eRejectReason::RejectReason_EXCHANGE_UNREACHABLE) s = utility::conversions::to_string_t(EXCHANGE_UNREACHABLE);
    if (m_value == eRejectReason::RejectReason_EXCHANGE_RESPONSE_TIMEOUT) s = utility::conversions::to_string_t(EXCHANGE_RESPONSE_TIMEOUT);
    if (m_value == eRejectReason::RejectReason_ORDER_ID_NOT_FOUND) s = utility::conversions::to_string_t(ORDER_ID_NOT_FOUND);
    if (m_value == eRejectReason::RejectReason_INVALID_TYPE) s = utility::conversions::to_string_t(INVALID_TYPE);
    if (m_value == eRejectReason::RejectReason_METHOD_NOT_SUPPORTED) s = utility::conversions::to_string_t(METHOD_NOT_SUPPORTED);
    if (m_value == eRejectReason::RejectReason_JSON_ERROR) s = utility::conversions::to_string_t(JSON_ERROR);

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool RejectReason::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eRejectReason v;

        
        if (s == utility::conversions::to_string_t(OTHER)) v = eRejectReason::RejectReason_OTHER;
        if (s == utility::conversions::to_string_t(EXCHANGE_UNREACHABLE)) v = eRejectReason::RejectReason_EXCHANGE_UNREACHABLE;
        if (s == utility::conversions::to_string_t(EXCHANGE_RESPONSE_TIMEOUT)) v = eRejectReason::RejectReason_EXCHANGE_RESPONSE_TIMEOUT;
        if (s == utility::conversions::to_string_t(ORDER_ID_NOT_FOUND)) v = eRejectReason::RejectReason_ORDER_ID_NOT_FOUND;
        if (s == utility::conversions::to_string_t(INVALID_TYPE)) v = eRejectReason::RejectReason_INVALID_TYPE;
        if (s == utility::conversions::to_string_t(METHOD_NOT_SUPPORTED)) v = eRejectReason::RejectReason_METHOD_NOT_SUPPORTED;
        if (s == utility::conversions::to_string_t(JSON_ERROR)) v = eRejectReason::RejectReason_JSON_ERROR;

        setValue(v);
    }
    return ok;
}

RejectReason::eRejectReason RejectReason::getValue() const
{
   return m_value;
}

void RejectReason::setValue(RejectReason::eRejectReason const value)
{
   m_value = value;
}


}
}
}
}


