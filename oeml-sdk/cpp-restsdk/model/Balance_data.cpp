/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Balance_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Balance_data::Balance_data()
{
    m_Asset_id_exchange = utility::conversions::to_string_t("");
    m_Asset_id_exchangeIsSet = false;
    m_Asset_id_coinapi = utility::conversions::to_string_t("");
    m_Asset_id_coinapiIsSet = false;
    m_Balance = 0.0f;
    m_BalanceIsSet = false;
    m_Available = 0.0f;
    m_AvailableIsSet = false;
    m_Locked = 0.0f;
    m_LockedIsSet = false;
    m_Last_updated_by = utility::conversions::to_string_t("");
    m_Last_updated_byIsSet = false;
    m_Rate_usd = 0.0f;
    m_Rate_usdIsSet = false;
    m_Traded = 0.0f;
    m_TradedIsSet = false;
}

Balance_data::~Balance_data()
{
}

void Balance_data::validate()
{
    // TODO: implement validation
}

web::json::value Balance_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Asset_id_exchangeIsSet)
    {
        val[utility::conversions::to_string_t("asset_id_exchange")] = ModelBase::toJson(m_Asset_id_exchange);
    }
    if(m_Asset_id_coinapiIsSet)
    {
        val[utility::conversions::to_string_t("asset_id_coinapi")] = ModelBase::toJson(m_Asset_id_coinapi);
    }
    if(m_BalanceIsSet)
    {
        val[utility::conversions::to_string_t("balance")] = ModelBase::toJson(m_Balance);
    }
    if(m_AvailableIsSet)
    {
        val[utility::conversions::to_string_t("available")] = ModelBase::toJson(m_Available);
    }
    if(m_LockedIsSet)
    {
        val[utility::conversions::to_string_t("locked")] = ModelBase::toJson(m_Locked);
    }
    if(m_Last_updated_byIsSet)
    {
        val[utility::conversions::to_string_t("last_updated_by")] = ModelBase::toJson(m_Last_updated_by);
    }
    if(m_Rate_usdIsSet)
    {
        val[utility::conversions::to_string_t("rate_usd")] = ModelBase::toJson(m_Rate_usd);
    }
    if(m_TradedIsSet)
    {
        val[utility::conversions::to_string_t("traded")] = ModelBase::toJson(m_Traded);
    }

    return val;
}

bool Balance_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("asset_id_exchange")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("asset_id_exchange"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_asset_id_exchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_asset_id_exchange);
            setAssetIdExchange(refVal_asset_id_exchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("asset_id_coinapi")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("asset_id_coinapi"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_asset_id_coinapi;
            ok &= ModelBase::fromJson(fieldValue, refVal_asset_id_coinapi);
            setAssetIdCoinapi(refVal_asset_id_coinapi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("balance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("balance"));
        if(!fieldValue.is_null())
        {
            float refVal_balance;
            ok &= ModelBase::fromJson(fieldValue, refVal_balance);
            setBalance(refVal_balance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("available")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("available"));
        if(!fieldValue.is_null())
        {
            float refVal_available;
            ok &= ModelBase::fromJson(fieldValue, refVal_available);
            setAvailable(refVal_available);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("locked")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("locked"));
        if(!fieldValue.is_null())
        {
            float refVal_locked;
            ok &= ModelBase::fromJson(fieldValue, refVal_locked);
            setLocked(refVal_locked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("last_updated_by")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("last_updated_by"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_last_updated_by;
            ok &= ModelBase::fromJson(fieldValue, refVal_last_updated_by);
            setLastUpdatedBy(refVal_last_updated_by);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rate_usd")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rate_usd"));
        if(!fieldValue.is_null())
        {
            float refVal_rate_usd;
            ok &= ModelBase::fromJson(fieldValue, refVal_rate_usd);
            setRateUsd(refVal_rate_usd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("traded")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("traded"));
        if(!fieldValue.is_null())
        {
            float refVal_traded;
            ok &= ModelBase::fromJson(fieldValue, refVal_traded);
            setTraded(refVal_traded);
        }
    }
    return ok;
}

void Balance_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Asset_id_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("asset_id_exchange"), m_Asset_id_exchange));
    }
    if(m_Asset_id_coinapiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("asset_id_coinapi"), m_Asset_id_coinapi));
    }
    if(m_BalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("balance"), m_Balance));
    }
    if(m_AvailableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("available"), m_Available));
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("locked"), m_Locked));
    }
    if(m_Last_updated_byIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("last_updated_by"), m_Last_updated_by));
    }
    if(m_Rate_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rate_usd"), m_Rate_usd));
    }
    if(m_TradedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("traded"), m_Traded));
    }
}

bool Balance_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("asset_id_exchange")))
    {
        utility::string_t refVal_asset_id_exchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("asset_id_exchange")), refVal_asset_id_exchange );
        setAssetIdExchange(refVal_asset_id_exchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("asset_id_coinapi")))
    {
        utility::string_t refVal_asset_id_coinapi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("asset_id_coinapi")), refVal_asset_id_coinapi );
        setAssetIdCoinapi(refVal_asset_id_coinapi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("balance")))
    {
        float refVal_balance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("balance")), refVal_balance );
        setBalance(refVal_balance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("available")))
    {
        float refVal_available;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("available")), refVal_available );
        setAvailable(refVal_available);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("locked")))
    {
        float refVal_locked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("locked")), refVal_locked );
        setLocked(refVal_locked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("last_updated_by")))
    {
        utility::string_t refVal_last_updated_by;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("last_updated_by")), refVal_last_updated_by );
        setLastUpdatedBy(refVal_last_updated_by);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rate_usd")))
    {
        float refVal_rate_usd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rate_usd")), refVal_rate_usd );
        setRateUsd(refVal_rate_usd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("traded")))
    {
        float refVal_traded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("traded")), refVal_traded );
        setTraded(refVal_traded);
    }
    return ok;
}

utility::string_t Balance_data::getAssetIdExchange() const
{
    return m_Asset_id_exchange;
}

void Balance_data::setAssetIdExchange(const utility::string_t& value)
{
    m_Asset_id_exchange = value;
    m_Asset_id_exchangeIsSet = true;
}

bool Balance_data::assetIdExchangeIsSet() const
{
    return m_Asset_id_exchangeIsSet;
}

void Balance_data::unsetAsset_id_exchange()
{
    m_Asset_id_exchangeIsSet = false;
}
utility::string_t Balance_data::getAssetIdCoinapi() const
{
    return m_Asset_id_coinapi;
}

void Balance_data::setAssetIdCoinapi(const utility::string_t& value)
{
    m_Asset_id_coinapi = value;
    m_Asset_id_coinapiIsSet = true;
}

bool Balance_data::assetIdCoinapiIsSet() const
{
    return m_Asset_id_coinapiIsSet;
}

void Balance_data::unsetAsset_id_coinapi()
{
    m_Asset_id_coinapiIsSet = false;
}
float Balance_data::getBalance() const
{
    return m_Balance;
}

void Balance_data::setBalance(float value)
{
    m_Balance = value;
    m_BalanceIsSet = true;
}

bool Balance_data::balanceIsSet() const
{
    return m_BalanceIsSet;
}

void Balance_data::unsetBalance()
{
    m_BalanceIsSet = false;
}
float Balance_data::getAvailable() const
{
    return m_Available;
}

void Balance_data::setAvailable(float value)
{
    m_Available = value;
    m_AvailableIsSet = true;
}

bool Balance_data::availableIsSet() const
{
    return m_AvailableIsSet;
}

void Balance_data::unsetAvailable()
{
    m_AvailableIsSet = false;
}
float Balance_data::getLocked() const
{
    return m_Locked;
}

void Balance_data::setLocked(float value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}

bool Balance_data::lockedIsSet() const
{
    return m_LockedIsSet;
}

void Balance_data::unsetLocked()
{
    m_LockedIsSet = false;
}
utility::string_t Balance_data::getLastUpdatedBy() const
{
    return m_Last_updated_by;
}

void Balance_data::setLastUpdatedBy(const utility::string_t& value)
{
    m_Last_updated_by = value;
    m_Last_updated_byIsSet = true;
}

bool Balance_data::lastUpdatedByIsSet() const
{
    return m_Last_updated_byIsSet;
}

void Balance_data::unsetLast_updated_by()
{
    m_Last_updated_byIsSet = false;
}
float Balance_data::getRateUsd() const
{
    return m_Rate_usd;
}

void Balance_data::setRateUsd(float value)
{
    m_Rate_usd = value;
    m_Rate_usdIsSet = true;
}

bool Balance_data::rateUsdIsSet() const
{
    return m_Rate_usdIsSet;
}

void Balance_data::unsetRate_usd()
{
    m_Rate_usdIsSet = false;
}
float Balance_data::getTraded() const
{
    return m_Traded;
}

void Balance_data::setTraded(float value)
{
    m_Traded = value;
    m_TradedIsSet = true;
}

bool Balance_data::tradedIsSet() const
{
    return m_TradedIsSet;
}

void Balance_data::unsetTraded()
{
    m_TradedIsSet = false;
}
}
}
}
}


