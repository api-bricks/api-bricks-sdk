/**
 * OEML - REST API
 * This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_OrdersApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_OrdersApi_H_


#include "../ApiClient.h"

#include "MessageReject.h"
#include "OrderCancelAllRequest.h"
#include "OrderCancelSingleRequest.h"
#include "OrderExecutionReport.h"
#include "OrderNewSingleRequest.h"
#include "ValidationError.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  OrdersApi 
{
public:

    explicit OrdersApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~OrdersApi();

    /// <summary>
    /// Cancel all orders request
    /// </summary>
    /// <remarks>
    /// This request cancels all open orders on single specified exchange.
    /// </remarks>
    /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
    pplx::task<std::shared_ptr<MessageReject>> v1OrdersCancelAllPost(
        std::shared_ptr<OrderCancelAllRequest> orderCancelAllRequest
    ) const;
    /// <summary>
    /// Cancel order request
    /// </summary>
    /// <remarks>
    /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
    /// </remarks>
    /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
    pplx::task<std::shared_ptr<OrderExecutionReport>> v1OrdersCancelPost(
        std::shared_ptr<OrderCancelSingleRequest> orderCancelSingleRequest
    ) const;
    /// <summary>
    /// Get open orders
    /// </summary>
    /// <remarks>
    /// Get last execution reports for open orders across all or single exchange.
    /// </remarks>
    /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<OrderExecutionReport>>> v1OrdersGet(
        boost::optional<utility::string_t> exchangeId
    ) const;
    /// <summary>
    /// Send new order
    /// </summary>
    /// <remarks>
    /// This request creating new order for the specific exchange.
    /// </remarks>
    /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
    pplx::task<std::shared_ptr<OrderExecutionReport>> v1OrdersPost(
        std::shared_ptr<OrderNewSingleRequest> orderNewSingleRequest
    ) const;
    /// <summary>
    /// Get order execution report
    /// </summary>
    /// <remarks>
    /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
    /// </remarks>
    /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
    pplx::task<std::shared_ptr<OrderExecutionReport>> v1OrdersStatusClientOrderIdGet(
        utility::string_t clientOrderId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_OrdersApi_H_ */

