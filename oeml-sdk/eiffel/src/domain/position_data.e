note
 description:"[
		OEML - REST API
 		This section will provide necessary information about the `CoinAPI OEML REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class POSITION_DATA 




feature --Access

    symbol_id_exchange: detachable STRING_32 
      -- Exchange symbol.
    symbol_id_coinapi: detachable STRING_32 
      -- CoinAPI symbol.
 	avg_entry_price: REAL_32 
    	 -- Calculated average price of all fills on this position.
 	quantity: REAL_32 
    	 -- The current position quantity.
    side: detachable ORD_SIDE 
      
 	unrealized_pnl: REAL_32 
    	 -- Unrealised profit or loss (PNL) of this position.
 	leverage: REAL_32 
    	 -- Leverage for this position reported by the exchange.
 	cross_margin: BOOLEAN 
    	 -- Is cross margin mode enable for this position?
 	liquidation_price: REAL_32 
    	 -- Liquidation price. If mark price will reach this value, the position will be liquidated.
    raw_data: detachable ANY 
      

feature -- Change Element  
 
    set_symbol_id_exchange (a_name: like symbol_id_exchange)
        -- Set 'symbol_id_exchange' with 'a_name'.
      do
        symbol_id_exchange := a_name
      ensure
        symbol_id_exchange_set: symbol_id_exchange = a_name		
      end

    set_symbol_id_coinapi (a_name: like symbol_id_coinapi)
        -- Set 'symbol_id_coinapi' with 'a_name'.
      do
        symbol_id_coinapi := a_name
      ensure
        symbol_id_coinapi_set: symbol_id_coinapi = a_name		
      end

    set_avg_entry_price (a_name: like avg_entry_price)
        -- Set 'avg_entry_price' with 'a_name'.
      do
        avg_entry_price := a_name
      ensure
        avg_entry_price_set: avg_entry_price = a_name		
      end

    set_quantity (a_name: like quantity)
        -- Set 'quantity' with 'a_name'.
      do
        quantity := a_name
      ensure
        quantity_set: quantity = a_name		
      end

    set_side (a_name: like side)
        -- Set 'side' with 'a_name'.
      do
        side := a_name
      ensure
        side_set: side = a_name		
      end

    set_unrealized_pnl (a_name: like unrealized_pnl)
        -- Set 'unrealized_pnl' with 'a_name'.
      do
        unrealized_pnl := a_name
      ensure
        unrealized_pnl_set: unrealized_pnl = a_name		
      end

    set_leverage (a_name: like leverage)
        -- Set 'leverage' with 'a_name'.
      do
        leverage := a_name
      ensure
        leverage_set: leverage = a_name		
      end

    set_cross_margin (a_name: like cross_margin)
        -- Set 'cross_margin' with 'a_name'.
      do
        cross_margin := a_name
      ensure
        cross_margin_set: cross_margin = a_name		
      end

    set_liquidation_price (a_name: like liquidation_price)
        -- Set 'liquidation_price' with 'a_name'.
      do
        liquidation_price := a_name
      ensure
        liquidation_price_set: liquidation_price = a_name		
      end

    set_raw_data (a_name: like raw_data)
        -- Set 'raw_data' with 'a_name'.
      do
        raw_data := a_name
      ensure
        raw_data_set: raw_data = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass POSITION_DATA%N")
        if attached symbol_id_exchange as l_symbol_id_exchange then
          Result.append ("%Nsymbol_id_exchange:")
          Result.append (l_symbol_id_exchange.out)
          Result.append ("%N")    
        end  
        if attached symbol_id_coinapi as l_symbol_id_coinapi then
          Result.append ("%Nsymbol_id_coinapi:")
          Result.append (l_symbol_id_coinapi.out)
          Result.append ("%N")    
        end  
        if attached avg_entry_price as l_avg_entry_price then
          Result.append ("%Navg_entry_price:")
          Result.append (l_avg_entry_price.out)
          Result.append ("%N")    
        end  
        if attached quantity as l_quantity then
          Result.append ("%Nquantity:")
          Result.append (l_quantity.out)
          Result.append ("%N")    
        end  
        if attached side as l_side then
          Result.append ("%Nside:")
          Result.append (l_side.out)
          Result.append ("%N")    
        end  
        if attached unrealized_pnl as l_unrealized_pnl then
          Result.append ("%Nunrealized_pnl:")
          Result.append (l_unrealized_pnl.out)
          Result.append ("%N")    
        end  
        if attached leverage as l_leverage then
          Result.append ("%Nleverage:")
          Result.append (l_leverage.out)
          Result.append ("%N")    
        end  
        if attached cross_margin as l_cross_margin then
          Result.append ("%Ncross_margin:")
          Result.append (l_cross_margin.out)
          Result.append ("%N")    
        end  
        if attached liquidation_price as l_liquidation_price then
          Result.append ("%Nliquidation_price:")
          Result.append (l_liquidation_price.out)
          Result.append ("%N")    
        end  
        if attached raw_data as l_raw_data then
          Result.append ("%Nraw_data:")
          Result.append (l_raw_data.out)
          Result.append ("%N")    
        end  
      end
end


