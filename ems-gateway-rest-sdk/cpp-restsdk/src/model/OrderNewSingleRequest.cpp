/**
 * EMS - REST API
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OrderNewSingleRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderNewSingleRequest::OrderNewSingleRequest()
{
    m_Exchange_id = utility::conversions::to_string_t("");
    m_Exchange_idIsSet = false;
    m_Client_order_id = utility::conversions::to_string_t("");
    m_Client_order_idIsSet = false;
    m_Symbol_id_exchange = utility::conversions::to_string_t("");
    m_Symbol_id_exchangeIsSet = false;
    m_Symbol_id_coinapi = utility::conversions::to_string_t("");
    m_Symbol_id_coinapiIsSet = false;
    m_Amount_order = 0.0;
    m_Amount_orderIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_SideIsSet = false;
    m_Order_typeIsSet = false;
    m_Time_in_forceIsSet = false;
    m_Expire_timeIsSet = false;
    m_Exec_instIsSet = false;
}

OrderNewSingleRequest::~OrderNewSingleRequest()
{
}

void OrderNewSingleRequest::validate()
{
    // TODO: implement validation
}

web::json::value OrderNewSingleRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Exchange_idIsSet)
    {
        val[utility::conversions::to_string_t(U("exchange_id"))] = ModelBase::toJson(m_Exchange_id);
    }
    if(m_Client_order_idIsSet)
    {
        val[utility::conversions::to_string_t(U("client_order_id"))] = ModelBase::toJson(m_Client_order_id);
    }
    if(m_Symbol_id_exchangeIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol_id_exchange"))] = ModelBase::toJson(m_Symbol_id_exchange);
    }
    if(m_Symbol_id_coinapiIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol_id_coinapi"))] = ModelBase::toJson(m_Symbol_id_coinapi);
    }
    if(m_Amount_orderIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_order"))] = ModelBase::toJson(m_Amount_order);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t(U("side"))] = ModelBase::toJson(m_Side);
    }
    if(m_Order_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("order_type"))] = ModelBase::toJson(m_Order_type);
    }
    if(m_Time_in_forceIsSet)
    {
        val[utility::conversions::to_string_t(U("time_in_force"))] = ModelBase::toJson(m_Time_in_force);
    }
    if(m_Expire_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("expire_time"))] = ModelBase::toJson(m_Expire_time);
    }
    if(m_Exec_instIsSet)
    {
        val[utility::conversions::to_string_t(U("exec_inst"))] = ModelBase::toJson(m_Exec_inst);
    }

    return val;
}

bool OrderNewSingleRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("exchange_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchange_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client_order_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client_order_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientOrderId);
            setClientOrderId(refVal_setClientOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("symbol_id_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol_id_exchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolIdExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolIdExchange);
            setSymbolIdExchange(refVal_setSymbolIdExchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("symbol_id_coinapi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol_id_coinapi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolIdCoinapi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolIdCoinapi);
            setSymbolIdCoinapi(refVal_setSymbolIdCoinapi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_order")));
        if(!fieldValue.is_null())
        {
            double refVal_setAmountOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountOrder);
            setAmountOrder(refVal_setAmountOrder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("side"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("side")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdSide> refVal_setSide;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSide);
            setSide(refVal_setSide);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("order_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("order_type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdType> refVal_setOrderType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderType);
            setOrderType(refVal_setOrderType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_in_force"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_in_force")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TimeInForce> refVal_setTimeInForce;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeInForce);
            setTimeInForce(refVal_setTimeInForce);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expire_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expire_time")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<utility::datetime> refVal_setExpireTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpireTime);
            setExpireTime(refVal_setExpireTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exec_inst"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exec_inst")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setExecInst;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecInst);
            setExecInst(refVal_setExecInst);
        }
    }
    return ok;
}

void OrderNewSingleRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Exchange_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchange_id")), m_Exchange_id));
    }
    if(m_Client_order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client_order_id")), m_Client_order_id));
    }
    if(m_Symbol_id_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol_id_exchange")), m_Symbol_id_exchange));
    }
    if(m_Symbol_id_coinapiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol_id_coinapi")), m_Symbol_id_coinapi));
    }
    if(m_Amount_orderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_order")), m_Amount_order));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("side")), m_Side));
    }
    if(m_Order_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("order_type")), m_Order_type));
    }
    if(m_Time_in_forceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_in_force")), m_Time_in_force));
    }
    if(m_Expire_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expire_time")), m_Expire_time));
    }
    if(m_Exec_instIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exec_inst")), m_Exec_inst));
    }
}

bool OrderNewSingleRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("exchange_id"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchange_id"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client_order_id"))))
    {
        utility::string_t refVal_setClientOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client_order_id"))), refVal_setClientOrderId );
        setClientOrderId(refVal_setClientOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol_id_exchange"))))
    {
        utility::string_t refVal_setSymbolIdExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol_id_exchange"))), refVal_setSymbolIdExchange );
        setSymbolIdExchange(refVal_setSymbolIdExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol_id_coinapi"))))
    {
        utility::string_t refVal_setSymbolIdCoinapi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol_id_coinapi"))), refVal_setSymbolIdCoinapi );
        setSymbolIdCoinapi(refVal_setSymbolIdCoinapi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_order"))))
    {
        double refVal_setAmountOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_order"))), refVal_setAmountOrder );
        setAmountOrder(refVal_setAmountOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("side"))))
    {
        std::shared_ptr<OrdSide> refVal_setSide;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("side"))), refVal_setSide );
        setSide(refVal_setSide);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("order_type"))))
    {
        std::shared_ptr<OrdType> refVal_setOrderType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("order_type"))), refVal_setOrderType );
        setOrderType(refVal_setOrderType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_in_force"))))
    {
        std::shared_ptr<TimeInForce> refVal_setTimeInForce;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_in_force"))), refVal_setTimeInForce );
        setTimeInForce(refVal_setTimeInForce);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expire_time"))))
    {
        std::shared_ptr<utility::datetime> refVal_setExpireTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expire_time"))), refVal_setExpireTime );
        setExpireTime(refVal_setExpireTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exec_inst"))))
    {
        std::vector<utility::string_t> refVal_setExecInst;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exec_inst"))), refVal_setExecInst );
        setExecInst(refVal_setExecInst);
    }
    return ok;
}

utility::string_t OrderNewSingleRequest::getExchangeId() const
{
    return m_Exchange_id;
}

void OrderNewSingleRequest::setExchangeId(const utility::string_t& value)
{
    m_Exchange_id = value;
    m_Exchange_idIsSet = true;
}

bool OrderNewSingleRequest::exchangeIdIsSet() const
{
    return m_Exchange_idIsSet;
}

void OrderNewSingleRequest::unsetExchange_id()
{
    m_Exchange_idIsSet = false;
}
utility::string_t OrderNewSingleRequest::getClientOrderId() const
{
    return m_Client_order_id;
}

void OrderNewSingleRequest::setClientOrderId(const utility::string_t& value)
{
    m_Client_order_id = value;
    m_Client_order_idIsSet = true;
}

bool OrderNewSingleRequest::clientOrderIdIsSet() const
{
    return m_Client_order_idIsSet;
}

void OrderNewSingleRequest::unsetClient_order_id()
{
    m_Client_order_idIsSet = false;
}
utility::string_t OrderNewSingleRequest::getSymbolIdExchange() const
{
    return m_Symbol_id_exchange;
}

void OrderNewSingleRequest::setSymbolIdExchange(const utility::string_t& value)
{
    m_Symbol_id_exchange = value;
    m_Symbol_id_exchangeIsSet = true;
}

bool OrderNewSingleRequest::symbolIdExchangeIsSet() const
{
    return m_Symbol_id_exchangeIsSet;
}

void OrderNewSingleRequest::unsetSymbol_id_exchange()
{
    m_Symbol_id_exchangeIsSet = false;
}
utility::string_t OrderNewSingleRequest::getSymbolIdCoinapi() const
{
    return m_Symbol_id_coinapi;
}

void OrderNewSingleRequest::setSymbolIdCoinapi(const utility::string_t& value)
{
    m_Symbol_id_coinapi = value;
    m_Symbol_id_coinapiIsSet = true;
}

bool OrderNewSingleRequest::symbolIdCoinapiIsSet() const
{
    return m_Symbol_id_coinapiIsSet;
}

void OrderNewSingleRequest::unsetSymbol_id_coinapi()
{
    m_Symbol_id_coinapiIsSet = false;
}
double OrderNewSingleRequest::getAmountOrder() const
{
    return m_Amount_order;
}

void OrderNewSingleRequest::setAmountOrder(double value)
{
    m_Amount_order = value;
    m_Amount_orderIsSet = true;
}

bool OrderNewSingleRequest::amountOrderIsSet() const
{
    return m_Amount_orderIsSet;
}

void OrderNewSingleRequest::unsetAmount_order()
{
    m_Amount_orderIsSet = false;
}
double OrderNewSingleRequest::getPrice() const
{
    return m_Price;
}

void OrderNewSingleRequest::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool OrderNewSingleRequest::priceIsSet() const
{
    return m_PriceIsSet;
}

void OrderNewSingleRequest::unsetPrice()
{
    m_PriceIsSet = false;
}
std::shared_ptr<OrdSide> OrderNewSingleRequest::getSide() const
{
    return m_Side;
}

void OrderNewSingleRequest::setSide(const std::shared_ptr<OrdSide>& value)
{
    m_Side = value;
    m_SideIsSet = true;
}

bool OrderNewSingleRequest::sideIsSet() const
{
    return m_SideIsSet;
}

void OrderNewSingleRequest::unsetSide()
{
    m_SideIsSet = false;
}
std::shared_ptr<OrdType> OrderNewSingleRequest::getOrderType() const
{
    return m_Order_type;
}

void OrderNewSingleRequest::setOrderType(const std::shared_ptr<OrdType>& value)
{
    m_Order_type = value;
    m_Order_typeIsSet = true;
}

bool OrderNewSingleRequest::orderTypeIsSet() const
{
    return m_Order_typeIsSet;
}

void OrderNewSingleRequest::unsetOrder_type()
{
    m_Order_typeIsSet = false;
}
std::shared_ptr<TimeInForce> OrderNewSingleRequest::getTimeInForce() const
{
    return m_Time_in_force;
}

void OrderNewSingleRequest::setTimeInForce(const std::shared_ptr<TimeInForce>& value)
{
    m_Time_in_force = value;
    m_Time_in_forceIsSet = true;
}

bool OrderNewSingleRequest::timeInForceIsSet() const
{
    return m_Time_in_forceIsSet;
}

void OrderNewSingleRequest::unsetTime_in_force()
{
    m_Time_in_forceIsSet = false;
}
std::shared_ptr<utility::datetime> OrderNewSingleRequest::getExpireTime() const
{
    return m_Expire_time;
}

void OrderNewSingleRequest::setExpireTime(const std::shared_ptr<utility::datetime>& value)
{
    m_Expire_time = value;
    m_Expire_timeIsSet = true;
}

bool OrderNewSingleRequest::expireTimeIsSet() const
{
    return m_Expire_timeIsSet;
}

void OrderNewSingleRequest::unsetExpire_time()
{
    m_Expire_timeIsSet = false;
}
std::vector<utility::string_t>& OrderNewSingleRequest::getExecInst()
{
    return m_Exec_inst;
}

void OrderNewSingleRequest::setExecInst(const std::vector<utility::string_t>& value)
{
    m_Exec_inst = value;
    m_Exec_instIsSet = true;
}

bool OrderNewSingleRequest::execInstIsSet() const
{
    return m_Exec_instIsSet;
}

void OrderNewSingleRequest::unsetExec_inst()
{
    m_Exec_instIsSet = false;
}
}
}
}
}


