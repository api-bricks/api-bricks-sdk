/**
 * EMS - REST API
 *
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. <br/> This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       <br/><br/> Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  <br/><br/> If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this:  <br/><br/> `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Fills
import org.openapitools.client.models.OrdSide
import org.openapitools.client.models.OrdStatus
import org.openapitools.client.models.OrdType
import org.openapitools.client.models.TimeInForce

import com.squareup.moshi.Json

/**
 * The order execution report object.
 *
 * @param exchangeId Exchange identifier used to identify the routing destination.
 * @param clientOrderId The unique identifier of the order assigned by the client.
 * @param amountOrder Order quantity.
 * @param price Order price.
 * @param side 
 * @param orderType 
 * @param timeInForce 
 * @param clientOrderIdFormatExchange The unique identifier of the order assigned by the client converted to the exchange order tag format for the purpose of tracking it.
 * @param amountOpen Quantity open for further execution. `amount_open` = `amount_order` - `amount_filled`
 * @param amountFilled Total quantity filled.
 * @param status 
 * @param symbolIdExchange Exchange symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
 * @param symbolIdCoinapi CoinAPI symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
 * @param expireTime Expiration time. Conditionaly required for orders with time_in_force = `GOOD_TILL_TIME_EXCHANGE` or `GOOD_TILL_TIME_OEML`.
 * @param execInst Order execution instructions are documented in the separate section: <a href=\"#ems-order-params-exec\">EMS / Starter Guide / Order parameters / Execution instructions</a> 
 * @param exchangeOrderId Unique identifier of the order assigned by the exchange or executing system.
 * @param avgPx Calculated average price of all fills on this order.
 * @param statusHistory Timestamped history of order status changes.
 * @param errorMessage Error message.
 * @param fills Relay fill information on working orders.
 */

data class OrderExecutionReport (

    /* Exchange identifier used to identify the routing destination. */
    @Json(name = "exchange_id")
    val exchangeId: kotlin.String,

    /* The unique identifier of the order assigned by the client. */
    @Json(name = "client_order_id")
    val clientOrderId: kotlin.String,

    /* Order quantity. */
    @Json(name = "amount_order")
    val amountOrder: java.math.BigDecimal,

    /* Order price. */
    @Json(name = "price")
    val price: java.math.BigDecimal,

    @Json(name = "side")
    val side: OrdSide,

    @Json(name = "order_type")
    val orderType: OrdType,

    @Json(name = "time_in_force")
    val timeInForce: TimeInForce,

    /* The unique identifier of the order assigned by the client converted to the exchange order tag format for the purpose of tracking it. */
    @Json(name = "client_order_id_format_exchange")
    val clientOrderIdFormatExchange: kotlin.String,

    /* Quantity open for further execution. `amount_open` = `amount_order` - `amount_filled` */
    @Json(name = "amount_open")
    val amountOpen: java.math.BigDecimal,

    /* Total quantity filled. */
    @Json(name = "amount_filled")
    val amountFilled: java.math.BigDecimal,

    @Json(name = "status")
    val status: OrdStatus,

    /* Exchange symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order. */
    @Json(name = "symbol_id_exchange")
    val symbolIdExchange: kotlin.String? = null,

    /* CoinAPI symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order. */
    @Json(name = "symbol_id_coinapi")
    val symbolIdCoinapi: kotlin.String? = null,

    /* Expiration time. Conditionaly required for orders with time_in_force = `GOOD_TILL_TIME_EXCHANGE` or `GOOD_TILL_TIME_OEML`. */
    @Json(name = "expire_time")
    val expireTime: java.time.LocalDate? = null,

    /* Order execution instructions are documented in the separate section: <a href=\"#ems-order-params-exec\">EMS / Starter Guide / Order parameters / Execution instructions</a>  */
    @Json(name = "exec_inst")
    val execInst: kotlin.collections.List<OrderExecutionReport.ExecInst>? = null,

    /* Unique identifier of the order assigned by the exchange or executing system. */
    @Json(name = "exchange_order_id")
    val exchangeOrderId: kotlin.String? = null,

    /* Calculated average price of all fills on this order. */
    @Json(name = "avg_px")
    val avgPx: java.math.BigDecimal? = null,

    /* Timestamped history of order status changes. */
    @Json(name = "status_history")
    val statusHistory: kotlin.collections.List<kotlin.collections.List<kotlin.String>>? = null,

    /* Error message. */
    @Json(name = "error_message")
    val errorMessage: kotlin.String? = null,

    /* Relay fill information on working orders. */
    @Json(name = "fills")
    val fills: kotlin.collections.List<Fills>? = null

) {

    /**
     * Order execution instructions are documented in the separate section: <a href=\"#ems-order-params-exec\">EMS / Starter Guide / Order parameters / Execution instructions</a> 
     *
     * Values: mAKERORCANCEL,aUCTIONONLY,iNDICATIONOFINTEREST
     */
    enum class ExecInst(val value: kotlin.String) {
        @Json(name = "MAKER_OR_CANCEL") mAKERORCANCEL("MAKER_OR_CANCEL"),
        @Json(name = "AUCTION_ONLY") aUCTIONONLY("AUCTION_ONLY"),
        @Json(name = "INDICATION_OF_INTEREST") iNDICATIONOFINTEREST("INDICATION_OF_INTEREST");
    }
}

