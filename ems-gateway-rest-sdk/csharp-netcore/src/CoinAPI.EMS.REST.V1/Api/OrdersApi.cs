/*
 * EMS - REST API
 *
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageReject</returns>
        MessageReject V1OrdersCancelAllPost(OrderCancelAllRequest orderCancelAllRequest, int operationIndex = 0);

        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageReject</returns>
        ApiResponse<MessageReject> V1OrdersCancelAllPostWithHttpInfo(OrderCancelAllRequest orderCancelAllRequest, int operationIndex = 0);
        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderExecutionReport</returns>
        OrderExecutionReport V1OrdersCancelPost(OrderCancelSingleRequest orderCancelSingleRequest, int operationIndex = 0);

        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        ApiResponse<OrderExecutionReport> V1OrdersCancelPostWithHttpInfo(OrderCancelSingleRequest orderCancelSingleRequest, int operationIndex = 0);
        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrderExecutionReport&gt;</returns>
        List<OrderExecutionReport> V1OrdersGet(string exchangeId = default(string), int operationIndex = 0);

        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OrderExecutionReport&gt;</returns>
        ApiResponse<List<OrderExecutionReport>> V1OrdersGetWithHttpInfo(string exchangeId = default(string), int operationIndex = 0);
        /// <summary>
        /// History of order changes
        /// </summary>
        /// <remarks>
        /// Based on the date range, all changes registered in the orderbook.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Start date</param>
        /// <param name="timeEnd">End date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrderHistory&gt;</returns>
        List<OrderHistory> V1OrdersHistoryGet(string timeStart, string timeEnd, int operationIndex = 0);

        /// <summary>
        /// History of order changes
        /// </summary>
        /// <remarks>
        /// Based on the date range, all changes registered in the orderbook.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Start date</param>
        /// <param name="timeEnd">End date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OrderHistory&gt;</returns>
        ApiResponse<List<OrderHistory>> V1OrdersHistoryGetWithHttpInfo(string timeStart, string timeEnd, int operationIndex = 0);
        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderExecutionReport</returns>
        OrderExecutionReport V1OrdersPost(OrderNewSingleRequest orderNewSingleRequest, int operationIndex = 0);

        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        ApiResponse<OrderExecutionReport> V1OrdersPostWithHttpInfo(OrderNewSingleRequest orderNewSingleRequest, int operationIndex = 0);
        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderExecutionReport</returns>
        OrderExecutionReport V1OrdersStatusClientOrderIdGet(string clientOrderId, int operationIndex = 0);

        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        ApiResponse<OrderExecutionReport> V1OrdersStatusClientOrderIdGetWithHttpInfo(string clientOrderId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageReject</returns>
        System.Threading.Tasks.Task<MessageReject> V1OrdersCancelAllPostAsync(OrderCancelAllRequest orderCancelAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel all orders request
        /// </summary>
        /// <remarks>
        /// This request cancels all open orders on single specified exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageReject)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageReject>> V1OrdersCancelAllPostWithHttpInfoAsync(OrderCancelAllRequest orderCancelAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersCancelPostAsync(OrderCancelSingleRequest orderCancelSingleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel order request
        /// </summary>
        /// <remarks>
        /// Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersCancelPostWithHttpInfoAsync(OrderCancelSingleRequest orderCancelSingleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderExecutionReport&gt;</returns>
        System.Threading.Tasks.Task<List<OrderExecutionReport>> V1OrdersGetAsync(string exchangeId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get open orders
        /// </summary>
        /// <remarks>
        /// Get last execution reports for open orders across all or single exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderExecutionReport&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderExecutionReport>>> V1OrdersGetWithHttpInfoAsync(string exchangeId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// History of order changes
        /// </summary>
        /// <remarks>
        /// Based on the date range, all changes registered in the orderbook.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Start date</param>
        /// <param name="timeEnd">End date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderHistory&gt;</returns>
        System.Threading.Tasks.Task<List<OrderHistory>> V1OrdersHistoryGetAsync(string timeStart, string timeEnd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// History of order changes
        /// </summary>
        /// <remarks>
        /// Based on the date range, all changes registered in the orderbook.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Start date</param>
        /// <param name="timeEnd">End date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderHistory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OrderHistory>>> V1OrdersHistoryGetWithHttpInfoAsync(string timeStart, string timeEnd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersPostAsync(OrderNewSingleRequest orderNewSingleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Send new order
        /// </summary>
        /// <remarks>
        /// This request creating new order for the specific exchange.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersPostWithHttpInfoAsync(OrderNewSingleRequest orderNewSingleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersStatusClientOrderIdGetAsync(string clientOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get order execution report
        /// </summary>
        /// <remarks>
        /// Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderExecutionReport>> V1OrdersStatusClientOrderIdGetWithHttpInfoAsync(string clientOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrdersApi : IOrdersApiSync, IOrdersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrdersApi : IOrdersApi
    {
        private CoinAPI.EMS.REST.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrdersApi(string basePath)
        {
            this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.MergeConfigurations(
                CoinAPI.EMS.REST.V1.Client.GlobalConfiguration.Instance,
                new CoinAPI.EMS.REST.V1.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrdersApi(CoinAPI.EMS.REST.V1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.MergeConfigurations(
                CoinAPI.EMS.REST.V1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrdersApi(CoinAPI.EMS.REST.V1.Client.ISynchronousClient client, CoinAPI.EMS.REST.V1.Client.IAsynchronousClient asyncClient, CoinAPI.EMS.REST.V1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.EMS.REST.V1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MessageReject</returns>
        public MessageReject V1OrdersCancelAllPost(OrderCancelAllRequest orderCancelAllRequest, int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<MessageReject> localVarResponse = V1OrdersCancelAllPostWithHttpInfo(orderCancelAllRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MessageReject</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<MessageReject> V1OrdersCancelAllPostWithHttpInfo(OrderCancelAllRequest orderCancelAllRequest, int operationIndex = 0)
        {
            // verify the required parameter 'orderCancelAllRequest' is set
            if (orderCancelAllRequest == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'orderCancelAllRequest' when calling OrdersApi->V1OrdersCancelAllPost");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderCancelAllRequest;

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersCancelAllPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<MessageReject>("/v1/orders/cancel/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageReject</returns>
        public async System.Threading.Tasks.Task<MessageReject> V1OrdersCancelAllPostAsync(OrderCancelAllRequest orderCancelAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<MessageReject> localVarResponse = await V1OrdersCancelAllPostWithHttpInfoAsync(orderCancelAllRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all orders request This request cancels all open orders on single specified exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelAllRequest">OrderCancelAllRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageReject)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<MessageReject>> V1OrdersCancelAllPostWithHttpInfoAsync(OrderCancelAllRequest orderCancelAllRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderCancelAllRequest' is set
            if (orderCancelAllRequest == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'orderCancelAllRequest' when calling OrdersApi->V1OrdersCancelAllPost");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderCancelAllRequest;

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersCancelAllPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MessageReject>("/v1/orders/cancel/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelAllPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderExecutionReport</returns>
        public OrderExecutionReport V1OrdersCancelPost(OrderCancelSingleRequest orderCancelSingleRequest, int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport> localVarResponse = V1OrdersCancelPostWithHttpInfo(orderCancelSingleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport> V1OrdersCancelPostWithHttpInfo(OrderCancelSingleRequest orderCancelSingleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'orderCancelSingleRequest' is set
            if (orderCancelSingleRequest == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'orderCancelSingleRequest' when calling OrdersApi->V1OrdersCancelPost");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderCancelSingleRequest;

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersCancelPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderExecutionReport>("/v1/orders/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        public async System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersCancelPostAsync(OrderCancelSingleRequest orderCancelSingleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport> localVarResponse = await V1OrdersCancelPostWithHttpInfoAsync(orderCancelSingleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel order request Request cancel for an existing order. The order can be canceled using the &#x60;client_order_id&#x60; or &#x60;exchange_order_id&#x60;.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderCancelSingleRequest">OrderCancelSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport>> V1OrdersCancelPostWithHttpInfoAsync(OrderCancelSingleRequest orderCancelSingleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderCancelSingleRequest' is set
            if (orderCancelSingleRequest == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'orderCancelSingleRequest' when calling OrdersApi->V1OrdersCancelPost");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderCancelSingleRequest;

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersCancelPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderExecutionReport>("/v1/orders/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersCancelPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrderExecutionReport&gt;</returns>
        public List<OrderExecutionReport> V1OrdersGet(string exchangeId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<OrderExecutionReport>> localVarResponse = V1OrdersGetWithHttpInfo(exchangeId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OrderExecutionReport&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<OrderExecutionReport>> V1OrdersGetWithHttpInfo(string exchangeId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (exchangeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "exchange_id", exchangeId));
            }

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OrderExecutionReport>>("/v1/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderExecutionReport&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderExecutionReport>> V1OrdersGetAsync(string exchangeId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<OrderExecutionReport>> localVarResponse = await V1OrdersGetWithHttpInfoAsync(exchangeId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get open orders Get last execution reports for open orders across all or single exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exchangeId">Filter the open orders to the specific exchange. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderExecutionReport&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<OrderExecutionReport>>> V1OrdersGetWithHttpInfoAsync(string exchangeId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (exchangeId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "exchange_id", exchangeId));
            }

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OrderExecutionReport>>("/v1/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// History of order changes Based on the date range, all changes registered in the orderbook.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Start date</param>
        /// <param name="timeEnd">End date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OrderHistory&gt;</returns>
        public List<OrderHistory> V1OrdersHistoryGet(string timeStart, string timeEnd, int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<OrderHistory>> localVarResponse = V1OrdersHistoryGetWithHttpInfo(timeStart, timeEnd);
            return localVarResponse.Data;
        }

        /// <summary>
        /// History of order changes Based on the date range, all changes registered in the orderbook.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Start date</param>
        /// <param name="timeEnd">End date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OrderHistory&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<OrderHistory>> V1OrdersHistoryGetWithHttpInfo(string timeStart, string timeEnd, int operationIndex = 0)
        {
            // verify the required parameter 'timeStart' is set
            if (timeStart == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'timeStart' when calling OrdersApi->V1OrdersHistoryGet");
            }

            // verify the required parameter 'timeEnd' is set
            if (timeEnd == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'timeEnd' when calling OrdersApi->V1OrdersHistoryGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "time_start", timeStart));
            localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "time_end", timeEnd));

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersHistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OrderHistory>>("/v1/orders/history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersHistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// History of order changes Based on the date range, all changes registered in the orderbook.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Start date</param>
        /// <param name="timeEnd">End date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OrderHistory&gt;</returns>
        public async System.Threading.Tasks.Task<List<OrderHistory>> V1OrdersHistoryGetAsync(string timeStart, string timeEnd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<OrderHistory>> localVarResponse = await V1OrdersHistoryGetWithHttpInfoAsync(timeStart, timeEnd, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// History of order changes Based on the date range, all changes registered in the orderbook.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timeStart">Start date</param>
        /// <param name="timeEnd">End date</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OrderHistory&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<OrderHistory>>> V1OrdersHistoryGetWithHttpInfoAsync(string timeStart, string timeEnd, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'timeStart' is set
            if (timeStart == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'timeStart' when calling OrdersApi->V1OrdersHistoryGet");
            }

            // verify the required parameter 'timeEnd' is set
            if (timeEnd == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'timeEnd' when calling OrdersApi->V1OrdersHistoryGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "time_start", timeStart));
            localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "time_end", timeEnd));

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersHistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OrderHistory>>("/v1/orders/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersHistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderExecutionReport</returns>
        public OrderExecutionReport V1OrdersPost(OrderNewSingleRequest orderNewSingleRequest, int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport> localVarResponse = V1OrdersPostWithHttpInfo(orderNewSingleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport> V1OrdersPostWithHttpInfo(OrderNewSingleRequest orderNewSingleRequest, int operationIndex = 0)
        {
            // verify the required parameter 'orderNewSingleRequest' is set
            if (orderNewSingleRequest == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'orderNewSingleRequest' when calling OrdersApi->V1OrdersPost");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderNewSingleRequest;

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderExecutionReport>("/v1/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        public async System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersPostAsync(OrderNewSingleRequest orderNewSingleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport> localVarResponse = await V1OrdersPostWithHttpInfoAsync(orderNewSingleRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send new order This request creating new order for the specific exchange.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderNewSingleRequest">OrderNewSingleRequest object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport>> V1OrdersPostWithHttpInfoAsync(OrderNewSingleRequest orderNewSingleRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderNewSingleRequest' is set
            if (orderNewSingleRequest == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'orderNewSingleRequest' when calling OrdersApi->V1OrdersPost");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "appliction/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = orderNewSingleRequest;

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderExecutionReport>("/v1/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderExecutionReport</returns>
        public OrderExecutionReport V1OrdersStatusClientOrderIdGet(string clientOrderId, int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport> localVarResponse = V1OrdersStatusClientOrderIdGetWithHttpInfo(clientOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderExecutionReport</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport> V1OrdersStatusClientOrderIdGetWithHttpInfo(string clientOrderId, int operationIndex = 0)
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'clientOrderId' when calling OrdersApi->V1OrdersStatusClientOrderIdGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client_order_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(clientOrderId)); // path parameter

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersStatusClientOrderIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderExecutionReport>("/v1/orders/status/{client_order_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersStatusClientOrderIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderExecutionReport</returns>
        public async System.Threading.Tasks.Task<OrderExecutionReport> V1OrdersStatusClientOrderIdGetAsync(string clientOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport> localVarResponse = await V1OrdersStatusClientOrderIdGetWithHttpInfoAsync(clientOrderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get order execution report Get the last order execution report for the specified order. The requested order does not need to be active or opened.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientOrderId">The unique identifier of the order assigned by the client.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderExecutionReport)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<OrderExecutionReport>> V1OrdersStatusClientOrderIdGetWithHttpInfoAsync(string clientOrderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientOrderId' is set
            if (clientOrderId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'clientOrderId' when calling OrdersApi->V1OrdersStatusClientOrderIdGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("client_order_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(clientOrderId)); // path parameter

            localVarRequestOptions.Operation = "OrdersApi.V1OrdersStatusClientOrderIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderExecutionReport>("/v1/orders/status/{client_order_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1OrdersStatusClientOrderIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
