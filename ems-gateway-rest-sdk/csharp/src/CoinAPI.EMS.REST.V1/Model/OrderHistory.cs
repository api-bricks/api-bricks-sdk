/*
 * EMS - REST API
 *
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// OrderHistory
    /// </summary>
    [DataContract]
    public partial class OrderHistory :  IEquatable<OrderHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderHistory" /> class.
        /// </summary>
        /// <param name="apikey">Apikey.</param>
        /// <param name="exchangeId">Exchange id.</param>
        /// <param name="clientOrderId">Client order id.</param>
        /// <param name="symbolIdExchange">Symbol id exchange.</param>
        /// <param name="symbolIdCoinapi">Symbol id in coinapi.</param>
        /// <param name="amountOrder">Amount.</param>
        /// <param name="price">Price.</param>
        /// <param name="side">1-buy, 2-sell.</param>
        /// <param name="orderType">Order type.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="expireTime">Expire time.</param>
        /// <param name="execInst">Exec inst.</param>
        /// <param name="clientOrderIdFormatExchange">Client order id format.</param>
        /// <param name="exchangeOrderId">Exchange order id.</param>
        /// <param name="amountOpen">Amount open.</param>
        /// <param name="amountFilled">Amount filled.</param>
        /// <param name="avgPx">Average price.</param>
        /// <param name="status">Status.</param>
        /// <param name="statusHistoryStatus">History status.</param>
        /// <param name="statusHistoryTime">History status time.</param>
        /// <param name="errorMessageResult">Error message.</param>
        /// <param name="errorMessageReason">Error message reason.</param>
        /// <param name="errorMessageMessage">Error message.</param>
        /// <param name="fillsTime">Fills time.</param>
        /// <param name="fillsPrice">Fills price.</param>
        /// <param name="fillsAmount">Fills amount.</param>
        /// <param name="createdTime">Created time.</param>
        public OrderHistory(string apikey = default(string), string exchangeId = default(string), string clientOrderId = default(string), string symbolIdExchange = default(string), string symbolIdCoinapi = default(string), decimal amountOrder = default(decimal), decimal price = default(decimal), decimal side = default(decimal), string orderType = default(string), string timeInForce = default(string), DateTime expireTime = default(DateTime), List<string> execInst = default(List<string>), string clientOrderIdFormatExchange = default(string), string exchangeOrderId = default(string), decimal amountOpen = default(decimal), decimal amountFilled = default(decimal), decimal avgPx = default(decimal), string status = default(string), List<string> statusHistoryStatus = default(List<string>), List<DateTime> statusHistoryTime = default(List<DateTime>), string errorMessageResult = default(string), string errorMessageReason = default(string), string errorMessageMessage = default(string), List<DateTime> fillsTime = default(List<DateTime>), List<decimal> fillsPrice = default(List<decimal>), List<decimal> fillsAmount = default(List<decimal>), DateTime createdTime = default(DateTime))
        {
            this.Apikey = apikey;
            this.ExchangeId = exchangeId;
            this.ClientOrderId = clientOrderId;
            this.SymbolIdExchange = symbolIdExchange;
            this.SymbolIdCoinapi = symbolIdCoinapi;
            this.AmountOrder = amountOrder;
            this.Price = price;
            this.Side = side;
            this.OrderType = orderType;
            this.TimeInForce = timeInForce;
            this.ExpireTime = expireTime;
            this.ExecInst = execInst;
            this.ClientOrderIdFormatExchange = clientOrderIdFormatExchange;
            this.ExchangeOrderId = exchangeOrderId;
            this.AmountOpen = amountOpen;
            this.AmountFilled = amountFilled;
            this.AvgPx = avgPx;
            this.Status = status;
            this.StatusHistoryStatus = statusHistoryStatus;
            this.StatusHistoryTime = statusHistoryTime;
            this.ErrorMessageResult = errorMessageResult;
            this.ErrorMessageReason = errorMessageReason;
            this.ErrorMessageMessage = errorMessageMessage;
            this.FillsTime = fillsTime;
            this.FillsPrice = fillsPrice;
            this.FillsAmount = fillsAmount;
            this.CreatedTime = createdTime;
        }

        /// <summary>
        /// Apikey
        /// </summary>
        /// <value>Apikey</value>
        [DataMember(Name="apikey", EmitDefaultValue=false)]
        public string Apikey { get; set; }

        /// <summary>
        /// Exchange id
        /// </summary>
        /// <value>Exchange id</value>
        [DataMember(Name="exchangeId", EmitDefaultValue=false)]
        public string ExchangeId { get; set; }

        /// <summary>
        /// Client order id
        /// </summary>
        /// <value>Client order id</value>
        [DataMember(Name="clientOrderId", EmitDefaultValue=false)]
        public string ClientOrderId { get; set; }

        /// <summary>
        /// Symbol id exchange
        /// </summary>
        /// <value>Symbol id exchange</value>
        [DataMember(Name="symbolIdExchange", EmitDefaultValue=false)]
        public string SymbolIdExchange { get; set; }

        /// <summary>
        /// Symbol id in coinapi
        /// </summary>
        /// <value>Symbol id in coinapi</value>
        [DataMember(Name="symbolIdCoinapi", EmitDefaultValue=false)]
        public string SymbolIdCoinapi { get; set; }

        /// <summary>
        /// Amount
        /// </summary>
        /// <value>Amount</value>
        [DataMember(Name="amountOrder", EmitDefaultValue=false)]
        public decimal AmountOrder { get; set; }

        /// <summary>
        /// Price
        /// </summary>
        /// <value>Price</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public decimal Price { get; set; }

        /// <summary>
        /// 1-buy, 2-sell
        /// </summary>
        /// <value>1-buy, 2-sell</value>
        [DataMember(Name="side", EmitDefaultValue=false)]
        public decimal Side { get; set; }

        /// <summary>
        /// Order type
        /// </summary>
        /// <value>Order type</value>
        [DataMember(Name="orderType", EmitDefaultValue=false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Time in force
        /// </summary>
        /// <value>Time in force</value>
        [DataMember(Name="timeInForce", EmitDefaultValue=false)]
        public string TimeInForce { get; set; }

        /// <summary>
        /// Expire time
        /// </summary>
        /// <value>Expire time</value>
        [DataMember(Name="expireTime", EmitDefaultValue=false)]
        public DateTime ExpireTime { get; set; }

        /// <summary>
        /// Exec inst
        /// </summary>
        /// <value>Exec inst</value>
        [DataMember(Name="execInst", EmitDefaultValue=false)]
        public List<string> ExecInst { get; set; }

        /// <summary>
        /// Client order id format
        /// </summary>
        /// <value>Client order id format</value>
        [DataMember(Name="clientOrderIdFormatExchange", EmitDefaultValue=false)]
        public string ClientOrderIdFormatExchange { get; set; }

        /// <summary>
        /// Exchange order id
        /// </summary>
        /// <value>Exchange order id</value>
        [DataMember(Name="exchangeOrderId", EmitDefaultValue=false)]
        public string ExchangeOrderId { get; set; }

        /// <summary>
        /// Amount open
        /// </summary>
        /// <value>Amount open</value>
        [DataMember(Name="amountOpen", EmitDefaultValue=false)]
        public decimal AmountOpen { get; set; }

        /// <summary>
        /// Amount filled
        /// </summary>
        /// <value>Amount filled</value>
        [DataMember(Name="amountFilled", EmitDefaultValue=false)]
        public decimal AmountFilled { get; set; }

        /// <summary>
        /// Average price
        /// </summary>
        /// <value>Average price</value>
        [DataMember(Name="avgPx", EmitDefaultValue=false)]
        public decimal AvgPx { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// History status
        /// </summary>
        /// <value>History status</value>
        [DataMember(Name="statusHistoryStatus", EmitDefaultValue=false)]
        public List<string> StatusHistoryStatus { get; set; }

        /// <summary>
        /// History status time
        /// </summary>
        /// <value>History status time</value>
        [DataMember(Name="statusHistoryTime", EmitDefaultValue=false)]
        public List<DateTime> StatusHistoryTime { get; set; }

        /// <summary>
        /// Error message
        /// </summary>
        /// <value>Error message</value>
        [DataMember(Name="errorMessageResult", EmitDefaultValue=false)]
        public string ErrorMessageResult { get; set; }

        /// <summary>
        /// Error message reason
        /// </summary>
        /// <value>Error message reason</value>
        [DataMember(Name="errorMessageReason", EmitDefaultValue=false)]
        public string ErrorMessageReason { get; set; }

        /// <summary>
        /// Error message
        /// </summary>
        /// <value>Error message</value>
        [DataMember(Name="errorMessageMessage", EmitDefaultValue=false)]
        public string ErrorMessageMessage { get; set; }

        /// <summary>
        /// Fills time
        /// </summary>
        /// <value>Fills time</value>
        [DataMember(Name="fillsTime", EmitDefaultValue=false)]
        public List<DateTime> FillsTime { get; set; }

        /// <summary>
        /// Fills price
        /// </summary>
        /// <value>Fills price</value>
        [DataMember(Name="fillsPrice", EmitDefaultValue=false)]
        public List<decimal> FillsPrice { get; set; }

        /// <summary>
        /// Fills amount
        /// </summary>
        /// <value>Fills amount</value>
        [DataMember(Name="fillsAmount", EmitDefaultValue=false)]
        public List<decimal> FillsAmount { get; set; }

        /// <summary>
        /// Created time
        /// </summary>
        /// <value>Created time</value>
        [DataMember(Name="createdTime", EmitDefaultValue=false)]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderHistory {\n");
            sb.Append("  Apikey: ").Append(Apikey).Append("\n");
            sb.Append("  ExchangeId: ").Append(ExchangeId).Append("\n");
            sb.Append("  ClientOrderId: ").Append(ClientOrderId).Append("\n");
            sb.Append("  SymbolIdExchange: ").Append(SymbolIdExchange).Append("\n");
            sb.Append("  SymbolIdCoinapi: ").Append(SymbolIdCoinapi).Append("\n");
            sb.Append("  AmountOrder: ").Append(AmountOrder).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  ExpireTime: ").Append(ExpireTime).Append("\n");
            sb.Append("  ExecInst: ").Append(ExecInst).Append("\n");
            sb.Append("  ClientOrderIdFormatExchange: ").Append(ClientOrderIdFormatExchange).Append("\n");
            sb.Append("  ExchangeOrderId: ").Append(ExchangeOrderId).Append("\n");
            sb.Append("  AmountOpen: ").Append(AmountOpen).Append("\n");
            sb.Append("  AmountFilled: ").Append(AmountFilled).Append("\n");
            sb.Append("  AvgPx: ").Append(AvgPx).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusHistoryStatus: ").Append(StatusHistoryStatus).Append("\n");
            sb.Append("  StatusHistoryTime: ").Append(StatusHistoryTime).Append("\n");
            sb.Append("  ErrorMessageResult: ").Append(ErrorMessageResult).Append("\n");
            sb.Append("  ErrorMessageReason: ").Append(ErrorMessageReason).Append("\n");
            sb.Append("  ErrorMessageMessage: ").Append(ErrorMessageMessage).Append("\n");
            sb.Append("  FillsTime: ").Append(FillsTime).Append("\n");
            sb.Append("  FillsPrice: ").Append(FillsPrice).Append("\n");
            sb.Append("  FillsAmount: ").Append(FillsAmount).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OrderHistory);
        }

        /// <summary>
        /// Returns true if OrderHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of OrderHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Apikey == input.Apikey ||
                    (this.Apikey != null &&
                    this.Apikey.Equals(input.Apikey))
                ) && 
                (
                    this.ExchangeId == input.ExchangeId ||
                    (this.ExchangeId != null &&
                    this.ExchangeId.Equals(input.ExchangeId))
                ) && 
                (
                    this.ClientOrderId == input.ClientOrderId ||
                    (this.ClientOrderId != null &&
                    this.ClientOrderId.Equals(input.ClientOrderId))
                ) && 
                (
                    this.SymbolIdExchange == input.SymbolIdExchange ||
                    (this.SymbolIdExchange != null &&
                    this.SymbolIdExchange.Equals(input.SymbolIdExchange))
                ) && 
                (
                    this.SymbolIdCoinapi == input.SymbolIdCoinapi ||
                    (this.SymbolIdCoinapi != null &&
                    this.SymbolIdCoinapi.Equals(input.SymbolIdCoinapi))
                ) && 
                (
                    this.AmountOrder == input.AmountOrder ||
                    (this.AmountOrder != null &&
                    this.AmountOrder.Equals(input.AmountOrder))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Side == input.Side ||
                    (this.Side != null &&
                    this.Side.Equals(input.Side))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    (this.TimeInForce != null &&
                    this.TimeInForce.Equals(input.TimeInForce))
                ) && 
                (
                    this.ExpireTime == input.ExpireTime ||
                    (this.ExpireTime != null &&
                    this.ExpireTime.Equals(input.ExpireTime))
                ) && 
                (
                    this.ExecInst == input.ExecInst ||
                    this.ExecInst != null &&
                    input.ExecInst != null &&
                    this.ExecInst.SequenceEqual(input.ExecInst)
                ) && 
                (
                    this.ClientOrderIdFormatExchange == input.ClientOrderIdFormatExchange ||
                    (this.ClientOrderIdFormatExchange != null &&
                    this.ClientOrderIdFormatExchange.Equals(input.ClientOrderIdFormatExchange))
                ) && 
                (
                    this.ExchangeOrderId == input.ExchangeOrderId ||
                    (this.ExchangeOrderId != null &&
                    this.ExchangeOrderId.Equals(input.ExchangeOrderId))
                ) && 
                (
                    this.AmountOpen == input.AmountOpen ||
                    (this.AmountOpen != null &&
                    this.AmountOpen.Equals(input.AmountOpen))
                ) && 
                (
                    this.AmountFilled == input.AmountFilled ||
                    (this.AmountFilled != null &&
                    this.AmountFilled.Equals(input.AmountFilled))
                ) && 
                (
                    this.AvgPx == input.AvgPx ||
                    (this.AvgPx != null &&
                    this.AvgPx.Equals(input.AvgPx))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusHistoryStatus == input.StatusHistoryStatus ||
                    this.StatusHistoryStatus != null &&
                    input.StatusHistoryStatus != null &&
                    this.StatusHistoryStatus.SequenceEqual(input.StatusHistoryStatus)
                ) && 
                (
                    this.StatusHistoryTime == input.StatusHistoryTime ||
                    this.StatusHistoryTime != null &&
                    input.StatusHistoryTime != null &&
                    this.StatusHistoryTime.SequenceEqual(input.StatusHistoryTime)
                ) && 
                (
                    this.ErrorMessageResult == input.ErrorMessageResult ||
                    (this.ErrorMessageResult != null &&
                    this.ErrorMessageResult.Equals(input.ErrorMessageResult))
                ) && 
                (
                    this.ErrorMessageReason == input.ErrorMessageReason ||
                    (this.ErrorMessageReason != null &&
                    this.ErrorMessageReason.Equals(input.ErrorMessageReason))
                ) && 
                (
                    this.ErrorMessageMessage == input.ErrorMessageMessage ||
                    (this.ErrorMessageMessage != null &&
                    this.ErrorMessageMessage.Equals(input.ErrorMessageMessage))
                ) && 
                (
                    this.FillsTime == input.FillsTime ||
                    this.FillsTime != null &&
                    input.FillsTime != null &&
                    this.FillsTime.SequenceEqual(input.FillsTime)
                ) && 
                (
                    this.FillsPrice == input.FillsPrice ||
                    this.FillsPrice != null &&
                    input.FillsPrice != null &&
                    this.FillsPrice.SequenceEqual(input.FillsPrice)
                ) && 
                (
                    this.FillsAmount == input.FillsAmount ||
                    this.FillsAmount != null &&
                    input.FillsAmount != null &&
                    this.FillsAmount.SequenceEqual(input.FillsAmount)
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Apikey != null)
                    hashCode = hashCode * 59 + this.Apikey.GetHashCode();
                if (this.ExchangeId != null)
                    hashCode = hashCode * 59 + this.ExchangeId.GetHashCode();
                if (this.ClientOrderId != null)
                    hashCode = hashCode * 59 + this.ClientOrderId.GetHashCode();
                if (this.SymbolIdExchange != null)
                    hashCode = hashCode * 59 + this.SymbolIdExchange.GetHashCode();
                if (this.SymbolIdCoinapi != null)
                    hashCode = hashCode * 59 + this.SymbolIdCoinapi.GetHashCode();
                if (this.AmountOrder != null)
                    hashCode = hashCode * 59 + this.AmountOrder.GetHashCode();
                if (this.Price != null)
                    hashCode = hashCode * 59 + this.Price.GetHashCode();
                if (this.Side != null)
                    hashCode = hashCode * 59 + this.Side.GetHashCode();
                if (this.OrderType != null)
                    hashCode = hashCode * 59 + this.OrderType.GetHashCode();
                if (this.TimeInForce != null)
                    hashCode = hashCode * 59 + this.TimeInForce.GetHashCode();
                if (this.ExpireTime != null)
                    hashCode = hashCode * 59 + this.ExpireTime.GetHashCode();
                if (this.ExecInst != null)
                    hashCode = hashCode * 59 + this.ExecInst.GetHashCode();
                if (this.ClientOrderIdFormatExchange != null)
                    hashCode = hashCode * 59 + this.ClientOrderIdFormatExchange.GetHashCode();
                if (this.ExchangeOrderId != null)
                    hashCode = hashCode * 59 + this.ExchangeOrderId.GetHashCode();
                if (this.AmountOpen != null)
                    hashCode = hashCode * 59 + this.AmountOpen.GetHashCode();
                if (this.AmountFilled != null)
                    hashCode = hashCode * 59 + this.AmountFilled.GetHashCode();
                if (this.AvgPx != null)
                    hashCode = hashCode * 59 + this.AvgPx.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusHistoryStatus != null)
                    hashCode = hashCode * 59 + this.StatusHistoryStatus.GetHashCode();
                if (this.StatusHistoryTime != null)
                    hashCode = hashCode * 59 + this.StatusHistoryTime.GetHashCode();
                if (this.ErrorMessageResult != null)
                    hashCode = hashCode * 59 + this.ErrorMessageResult.GetHashCode();
                if (this.ErrorMessageReason != null)
                    hashCode = hashCode * 59 + this.ErrorMessageReason.GetHashCode();
                if (this.ErrorMessageMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessageMessage.GetHashCode();
                if (this.FillsTime != null)
                    hashCode = hashCode * 59 + this.FillsTime.GetHashCode();
                if (this.FillsPrice != null)
                    hashCode = hashCode * 59 + this.FillsPrice.GetHashCode();
                if (this.FillsAmount != null)
                    hashCode = hashCode * 59 + this.FillsAmount.GetHashCode();
                if (this.CreatedTime != null)
                    hashCode = hashCode * 59 + this.CreatedTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
