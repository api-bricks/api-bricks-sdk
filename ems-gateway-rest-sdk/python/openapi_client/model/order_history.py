# coding: utf-8

"""
    EMS - REST API

    This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside>   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@coinapi.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrderHistory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            apikey = schemas.StrSchema
            exchangeId = schemas.StrSchema
            clientOrderId = schemas.StrSchema
            symbolIdExchange = schemas.StrSchema
            symbolIdCoinapi = schemas.StrSchema
            amountOrder = schemas.NumberSchema
            price = schemas.NumberSchema
            side = schemas.NumberSchema
            orderType = schemas.StrSchema
            timeInForce = schemas.StrSchema
            expireTime = schemas.Schema
            
            
            class execInst(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'execInst':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            clientOrderIdFormatExchange = schemas.StrSchema
            exchangeOrderId = schemas.StrSchema
            amountOpen = schemas.NumberSchema
            amountFilled = schemas.NumberSchema
            avgPx = schemas.NumberSchema
            status = schemas.StrSchema
            
            
            class statusHistoryStatus(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statusHistoryStatus':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class statusHistoryTime(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Schema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, ]], typing.List[typing.Union[MetaOapg.items, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statusHistoryTime':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            errorMessageResult = schemas.StrSchema
            errorMessageReason = schemas.StrSchema
            errorMessageMessage = schemas.StrSchema
            
            
            class fillsTime(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Schema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, ]], typing.List[typing.Union[MetaOapg.items, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fillsTime':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class fillsPrice(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.NumberSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fillsPrice':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class fillsAmount(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.NumberSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fillsAmount':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            createdTime = schemas.Schema
            __annotations__ = {
                "apikey": apikey,
                "exchangeId": exchangeId,
                "clientOrderId": clientOrderId,
                "symbolIdExchange": symbolIdExchange,
                "symbolIdCoinapi": symbolIdCoinapi,
                "amountOrder": amountOrder,
                "price": price,
                "side": side,
                "orderType": orderType,
                "timeInForce": timeInForce,
                "expireTime": expireTime,
                "execInst": execInst,
                "clientOrderIdFormatExchange": clientOrderIdFormatExchange,
                "exchangeOrderId": exchangeOrderId,
                "amountOpen": amountOpen,
                "amountFilled": amountFilled,
                "avgPx": avgPx,
                "status": status,
                "statusHistoryStatus": statusHistoryStatus,
                "statusHistoryTime": statusHistoryTime,
                "errorMessageResult": errorMessageResult,
                "errorMessageReason": errorMessageReason,
                "errorMessageMessage": errorMessageMessage,
                "fillsTime": fillsTime,
                "fillsPrice": fillsPrice,
                "fillsAmount": fillsAmount,
                "createdTime": createdTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apikey"]) -> MetaOapg.properties.apikey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchangeId"]) -> MetaOapg.properties.exchangeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientOrderId"]) -> MetaOapg.properties.clientOrderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolIdExchange"]) -> MetaOapg.properties.symbolIdExchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolIdCoinapi"]) -> MetaOapg.properties.symbolIdCoinapi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountOrder"]) -> MetaOapg.properties.amountOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["side"]) -> MetaOapg.properties.side: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderType"]) -> MetaOapg.properties.orderType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeInForce"]) -> MetaOapg.properties.timeInForce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expireTime"]) -> MetaOapg.properties.expireTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["execInst"]) -> MetaOapg.properties.execInst: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientOrderIdFormatExchange"]) -> MetaOapg.properties.clientOrderIdFormatExchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchangeOrderId"]) -> MetaOapg.properties.exchangeOrderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountOpen"]) -> MetaOapg.properties.amountOpen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountFilled"]) -> MetaOapg.properties.amountFilled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avgPx"]) -> MetaOapg.properties.avgPx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusHistoryStatus"]) -> MetaOapg.properties.statusHistoryStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusHistoryTime"]) -> MetaOapg.properties.statusHistoryTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorMessageResult"]) -> MetaOapg.properties.errorMessageResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorMessageReason"]) -> MetaOapg.properties.errorMessageReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorMessageMessage"]) -> MetaOapg.properties.errorMessageMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillsTime"]) -> MetaOapg.properties.fillsTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillsPrice"]) -> MetaOapg.properties.fillsPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fillsAmount"]) -> MetaOapg.properties.fillsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdTime"]) -> MetaOapg.properties.createdTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["apikey", "exchangeId", "clientOrderId", "symbolIdExchange", "symbolIdCoinapi", "amountOrder", "price", "side", "orderType", "timeInForce", "expireTime", "execInst", "clientOrderIdFormatExchange", "exchangeOrderId", "amountOpen", "amountFilled", "avgPx", "status", "statusHistoryStatus", "statusHistoryTime", "errorMessageResult", "errorMessageReason", "errorMessageMessage", "fillsTime", "fillsPrice", "fillsAmount", "createdTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apikey"]) -> typing.Union[MetaOapg.properties.apikey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchangeId"]) -> typing.Union[MetaOapg.properties.exchangeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientOrderId"]) -> typing.Union[MetaOapg.properties.clientOrderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolIdExchange"]) -> typing.Union[MetaOapg.properties.symbolIdExchange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolIdCoinapi"]) -> typing.Union[MetaOapg.properties.symbolIdCoinapi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountOrder"]) -> typing.Union[MetaOapg.properties.amountOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> typing.Union[MetaOapg.properties.side, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderType"]) -> typing.Union[MetaOapg.properties.orderType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeInForce"]) -> typing.Union[MetaOapg.properties.timeInForce, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expireTime"]) -> typing.Union[MetaOapg.properties.expireTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["execInst"]) -> typing.Union[MetaOapg.properties.execInst, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientOrderIdFormatExchange"]) -> typing.Union[MetaOapg.properties.clientOrderIdFormatExchange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchangeOrderId"]) -> typing.Union[MetaOapg.properties.exchangeOrderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountOpen"]) -> typing.Union[MetaOapg.properties.amountOpen, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountFilled"]) -> typing.Union[MetaOapg.properties.amountFilled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avgPx"]) -> typing.Union[MetaOapg.properties.avgPx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusHistoryStatus"]) -> typing.Union[MetaOapg.properties.statusHistoryStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusHistoryTime"]) -> typing.Union[MetaOapg.properties.statusHistoryTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorMessageResult"]) -> typing.Union[MetaOapg.properties.errorMessageResult, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorMessageReason"]) -> typing.Union[MetaOapg.properties.errorMessageReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorMessageMessage"]) -> typing.Union[MetaOapg.properties.errorMessageMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillsTime"]) -> typing.Union[MetaOapg.properties.fillsTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillsPrice"]) -> typing.Union[MetaOapg.properties.fillsPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fillsAmount"]) -> typing.Union[MetaOapg.properties.fillsAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdTime"]) -> typing.Union[MetaOapg.properties.createdTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apikey", "exchangeId", "clientOrderId", "symbolIdExchange", "symbolIdCoinapi", "amountOrder", "price", "side", "orderType", "timeInForce", "expireTime", "execInst", "clientOrderIdFormatExchange", "exchangeOrderId", "amountOpen", "amountFilled", "avgPx", "status", "statusHistoryStatus", "statusHistoryTime", "errorMessageResult", "errorMessageReason", "errorMessageMessage", "fillsTime", "fillsPrice", "fillsAmount", "createdTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        apikey: typing.Union[MetaOapg.properties.apikey, str, schemas.Unset] = schemas.unset,
        exchangeId: typing.Union[MetaOapg.properties.exchangeId, str, schemas.Unset] = schemas.unset,
        clientOrderId: typing.Union[MetaOapg.properties.clientOrderId, str, schemas.Unset] = schemas.unset,
        symbolIdExchange: typing.Union[MetaOapg.properties.symbolIdExchange, str, schemas.Unset] = schemas.unset,
        symbolIdCoinapi: typing.Union[MetaOapg.properties.symbolIdCoinapi, str, schemas.Unset] = schemas.unset,
        amountOrder: typing.Union[MetaOapg.properties.amountOrder, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        side: typing.Union[MetaOapg.properties.side, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        orderType: typing.Union[MetaOapg.properties.orderType, str, schemas.Unset] = schemas.unset,
        timeInForce: typing.Union[MetaOapg.properties.timeInForce, str, schemas.Unset] = schemas.unset,
        expireTime: typing.Union[MetaOapg.properties.expireTime, schemas.Unset] = schemas.unset,
        execInst: typing.Union[MetaOapg.properties.execInst, list, tuple, schemas.Unset] = schemas.unset,
        clientOrderIdFormatExchange: typing.Union[MetaOapg.properties.clientOrderIdFormatExchange, str, schemas.Unset] = schemas.unset,
        exchangeOrderId: typing.Union[MetaOapg.properties.exchangeOrderId, str, schemas.Unset] = schemas.unset,
        amountOpen: typing.Union[MetaOapg.properties.amountOpen, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountFilled: typing.Union[MetaOapg.properties.amountFilled, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        avgPx: typing.Union[MetaOapg.properties.avgPx, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        statusHistoryStatus: typing.Union[MetaOapg.properties.statusHistoryStatus, list, tuple, schemas.Unset] = schemas.unset,
        statusHistoryTime: typing.Union[MetaOapg.properties.statusHistoryTime, list, tuple, schemas.Unset] = schemas.unset,
        errorMessageResult: typing.Union[MetaOapg.properties.errorMessageResult, str, schemas.Unset] = schemas.unset,
        errorMessageReason: typing.Union[MetaOapg.properties.errorMessageReason, str, schemas.Unset] = schemas.unset,
        errorMessageMessage: typing.Union[MetaOapg.properties.errorMessageMessage, str, schemas.Unset] = schemas.unset,
        fillsTime: typing.Union[MetaOapg.properties.fillsTime, list, tuple, schemas.Unset] = schemas.unset,
        fillsPrice: typing.Union[MetaOapg.properties.fillsPrice, list, tuple, schemas.Unset] = schemas.unset,
        fillsAmount: typing.Union[MetaOapg.properties.fillsAmount, list, tuple, schemas.Unset] = schemas.unset,
        createdTime: typing.Union[MetaOapg.properties.createdTime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderHistory':
        return super().__new__(
            cls,
            *args,
            apikey=apikey,
            exchangeId=exchangeId,
            clientOrderId=clientOrderId,
            symbolIdExchange=symbolIdExchange,
            symbolIdCoinapi=symbolIdCoinapi,
            amountOrder=amountOrder,
            price=price,
            side=side,
            orderType=orderType,
            timeInForce=timeInForce,
            expireTime=expireTime,
            execInst=execInst,
            clientOrderIdFormatExchange=clientOrderIdFormatExchange,
            exchangeOrderId=exchangeOrderId,
            amountOpen=amountOpen,
            amountFilled=amountFilled,
            avgPx=avgPx,
            status=status,
            statusHistoryStatus=statusHistoryStatus,
            statusHistoryTime=statusHistoryTime,
            errorMessageResult=errorMessageResult,
            errorMessageReason=errorMessageReason,
            errorMessageMessage=errorMessageMessage,
            fillsTime=fillsTime,
            fillsPrice=fillsPrice,
            fillsAmount=fillsAmount,
            createdTime=createdTime,
            _configuration=_configuration,
            **kwargs,
        )
