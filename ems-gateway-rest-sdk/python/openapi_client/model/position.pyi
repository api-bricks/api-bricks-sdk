# coding: utf-8

"""
    EMS - REST API

    This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside>   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@coinapi.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Position(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            exchange_id = schemas.StrSchema
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                symbol_id_exchange = schemas.StrSchema
                                symbol_id_coinapi = schemas.StrSchema
                                avg_entry_price = schemas.NumberSchema
                                quantity = schemas.NumberSchema
                            
                                @staticmethod
                                def side() -> typing.Type['OrdSide']:
                                    return OrdSide
                                unrealized_pnl = schemas.NumberSchema
                                leverage = schemas.NumberSchema
                                cross_margin = schemas.BoolSchema
                                liquidation_price = schemas.NumberSchema
                                raw_data = schemas.DictSchema
                                __annotations__ = {
                                    "symbol_id_exchange": symbol_id_exchange,
                                    "symbol_id_coinapi": symbol_id_coinapi,
                                    "avg_entry_price": avg_entry_price,
                                    "quantity": quantity,
                                    "side": side,
                                    "unrealized_pnl": unrealized_pnl,
                                    "leverage": leverage,
                                    "cross_margin": cross_margin,
                                    "liquidation_price": liquidation_price,
                                    "raw_data": raw_data,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["symbol_id_exchange"]) -> MetaOapg.properties.symbol_id_exchange: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["symbol_id_coinapi"]) -> MetaOapg.properties.symbol_id_coinapi: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["avg_entry_price"]) -> MetaOapg.properties.avg_entry_price: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["side"]) -> 'OrdSide': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["unrealized_pnl"]) -> MetaOapg.properties.unrealized_pnl: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["leverage"]) -> MetaOapg.properties.leverage: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cross_margin"]) -> MetaOapg.properties.cross_margin: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["liquidation_price"]) -> MetaOapg.properties.liquidation_price: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["raw_data"]) -> MetaOapg.properties.raw_data: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["symbol_id_exchange", "symbol_id_coinapi", "avg_entry_price", "quantity", "side", "unrealized_pnl", "leverage", "cross_margin", "liquidation_price", "raw_data", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["symbol_id_exchange"]) -> typing.Union[MetaOapg.properties.symbol_id_exchange, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["symbol_id_coinapi"]) -> typing.Union[MetaOapg.properties.symbol_id_coinapi, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["avg_entry_price"]) -> typing.Union[MetaOapg.properties.avg_entry_price, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> typing.Union['OrdSide', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["unrealized_pnl"]) -> typing.Union[MetaOapg.properties.unrealized_pnl, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["leverage"]) -> typing.Union[MetaOapg.properties.leverage, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cross_margin"]) -> typing.Union[MetaOapg.properties.cross_margin, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["liquidation_price"]) -> typing.Union[MetaOapg.properties.liquidation_price, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["raw_data"]) -> typing.Union[MetaOapg.properties.raw_data, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["symbol_id_exchange", "symbol_id_coinapi", "avg_entry_price", "quantity", "side", "unrealized_pnl", "leverage", "cross_margin", "liquidation_price", "raw_data", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            symbol_id_exchange: typing.Union[MetaOapg.properties.symbol_id_exchange, str, schemas.Unset] = schemas.unset,
                            symbol_id_coinapi: typing.Union[MetaOapg.properties.symbol_id_coinapi, str, schemas.Unset] = schemas.unset,
                            avg_entry_price: typing.Union[MetaOapg.properties.avg_entry_price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            side: typing.Union['OrdSide', schemas.Unset] = schemas.unset,
                            unrealized_pnl: typing.Union[MetaOapg.properties.unrealized_pnl, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            leverage: typing.Union[MetaOapg.properties.leverage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            cross_margin: typing.Union[MetaOapg.properties.cross_margin, bool, schemas.Unset] = schemas.unset,
                            liquidation_price: typing.Union[MetaOapg.properties.liquidation_price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            raw_data: typing.Union[MetaOapg.properties.raw_data, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                symbol_id_exchange=symbol_id_exchange,
                                symbol_id_coinapi=symbol_id_coinapi,
                                avg_entry_price=avg_entry_price,
                                quantity=quantity,
                                side=side,
                                unrealized_pnl=unrealized_pnl,
                                leverage=leverage,
                                cross_margin=cross_margin,
                                liquidation_price=liquidation_price,
                                raw_data=raw_data,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "exchange_id": exchange_id,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchange_id"]) -> MetaOapg.properties.exchange_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["exchange_id", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchange_id"]) -> typing.Union[MetaOapg.properties.exchange_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["exchange_id", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        exchange_id: typing.Union[MetaOapg.properties.exchange_id, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Position':
        return super().__new__(
            cls,
            *_args,
            exchange_id=exchange_id,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.ord_side import OrdSide
