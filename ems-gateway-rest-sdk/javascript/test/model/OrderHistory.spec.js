/**
 * EMS - REST API
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. <br/> This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       <br/><br/> Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  <br/><br/> If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this:  <br/><br/> `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EmsRestApi);
  }
}(this, function(expect, EmsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EmsRestApi.OrderHistory();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrderHistory', function() {
    it('should create an instance of OrderHistory', function() {
      // uncomment below and update the code to test OrderHistory
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be.a(EmsRestApi.OrderHistory);
    });

    it('should have the property apikey (base name: "apikey")', function() {
      // uncomment below and update the code to test the property apikey
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property exchangeId (base name: "exchangeId")', function() {
      // uncomment below and update the code to test the property exchangeId
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property clientOrderId (base name: "clientOrderId")', function() {
      // uncomment below and update the code to test the property clientOrderId
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property symbolIdExchange (base name: "symbolIdExchange")', function() {
      // uncomment below and update the code to test the property symbolIdExchange
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property symbolIdCoinapi (base name: "symbolIdCoinapi")', function() {
      // uncomment below and update the code to test the property symbolIdCoinapi
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property amountOrder (base name: "amountOrder")', function() {
      // uncomment below and update the code to test the property amountOrder
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property side (base name: "side")', function() {
      // uncomment below and update the code to test the property side
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property orderType (base name: "orderType")', function() {
      // uncomment below and update the code to test the property orderType
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property timeInForce (base name: "timeInForce")', function() {
      // uncomment below and update the code to test the property timeInForce
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property expireTime (base name: "expireTime")', function() {
      // uncomment below and update the code to test the property expireTime
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property execInst (base name: "execInst")', function() {
      // uncomment below and update the code to test the property execInst
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property clientOrderIdFormatExchange (base name: "clientOrderIdFormatExchange")', function() {
      // uncomment below and update the code to test the property clientOrderIdFormatExchange
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property exchangeOrderId (base name: "exchangeOrderId")', function() {
      // uncomment below and update the code to test the property exchangeOrderId
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property amountOpen (base name: "amountOpen")', function() {
      // uncomment below and update the code to test the property amountOpen
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property amountFilled (base name: "amountFilled")', function() {
      // uncomment below and update the code to test the property amountFilled
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property avgPx (base name: "avgPx")', function() {
      // uncomment below and update the code to test the property avgPx
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property statusHistoryStatus (base name: "statusHistoryStatus")', function() {
      // uncomment below and update the code to test the property statusHistoryStatus
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property statusHistoryTime (base name: "statusHistoryTime")', function() {
      // uncomment below and update the code to test the property statusHistoryTime
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property errorMessageResult (base name: "errorMessageResult")', function() {
      // uncomment below and update the code to test the property errorMessageResult
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property errorMessageReason (base name: "errorMessageReason")', function() {
      // uncomment below and update the code to test the property errorMessageReason
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property errorMessageMessage (base name: "errorMessageMessage")', function() {
      // uncomment below and update the code to test the property errorMessageMessage
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property fillsTime (base name: "fillsTime")', function() {
      // uncomment below and update the code to test the property fillsTime
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property fillsPrice (base name: "fillsPrice")', function() {
      // uncomment below and update the code to test the property fillsPrice
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property fillsAmount (base name: "fillsAmount")', function() {
      // uncomment below and update the code to test the property fillsAmount
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

    it('should have the property createdTime (base name: "createdTime")', function() {
      // uncomment below and update the code to test the property createdTime
      //var instance = new EmsRestApi.OrderHistory();
      //expect(instance).to.be();
    });

  });

}));
