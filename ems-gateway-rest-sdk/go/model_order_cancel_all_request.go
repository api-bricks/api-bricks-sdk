/*
EMS - REST API

This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrderCancelAllRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderCancelAllRequest{}

// OrderCancelAllRequest Cancel all orders request object.
type OrderCancelAllRequest struct {
	// Identifier of the exchange from which active orders should be canceled.
	ExchangeId string `json:"exchange_id"`
}

// NewOrderCancelAllRequest instantiates a new OrderCancelAllRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderCancelAllRequest(exchangeId string) *OrderCancelAllRequest {
	this := OrderCancelAllRequest{}
	this.ExchangeId = exchangeId
	return &this
}

// NewOrderCancelAllRequestWithDefaults instantiates a new OrderCancelAllRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderCancelAllRequestWithDefaults() *OrderCancelAllRequest {
	this := OrderCancelAllRequest{}
	return &this
}

// GetExchangeId returns the ExchangeId field value
func (o *OrderCancelAllRequest) GetExchangeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExchangeId
}

// GetExchangeIdOk returns a tuple with the ExchangeId field value
// and a boolean to check if the value has been set.
func (o *OrderCancelAllRequest) GetExchangeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExchangeId, true
}

// SetExchangeId sets field value
func (o *OrderCancelAllRequest) SetExchangeId(v string) {
	o.ExchangeId = v
}

func (o OrderCancelAllRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderCancelAllRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["exchange_id"] = o.ExchangeId
	return toSerialize, nil
}

type NullableOrderCancelAllRequest struct {
	value *OrderCancelAllRequest
	isSet bool
}

func (v NullableOrderCancelAllRequest) Get() *OrderCancelAllRequest {
	return v.value
}

func (v *NullableOrderCancelAllRequest) Set(val *OrderCancelAllRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderCancelAllRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderCancelAllRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderCancelAllRequest(val *OrderCancelAllRequest) *NullableOrderCancelAllRequest {
	return &NullableOrderCancelAllRequest{value: val, isSet: true}
}

func (v NullableOrderCancelAllRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderCancelAllRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


