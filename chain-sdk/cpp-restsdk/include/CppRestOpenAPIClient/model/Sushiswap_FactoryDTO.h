/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Sushiswap_FactoryDTO.h
 *
 * The Sushiswap Factory entity is responsible for storing aggregate information across all Sushiswap pairs. It can be used to view stats about total liquidity, volume, amount of pairs and more.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Sushiswap_FactoryDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Sushiswap_FactoryDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// The Sushiswap Factory entity is responsible for storing aggregate information across all Sushiswap pairs. It can be used to view stats about total liquidity, volume, amount of pairs and more.
/// </summary>
class  Sushiswap_FactoryDTO
    : public ModelBase
{
public:
    Sushiswap_FactoryDTO();
    virtual ~Sushiswap_FactoryDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Sushiswap_FactoryDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// Factory address.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Amount of pairs created by the Sushiswap factory.
    /// </summary>
    utility::string_t getPairCount() const;
    bool pairCountIsSet() const;
    void unsetPair_count();

    void setPairCount(const utility::string_t& value);

    /// <summary>
    /// All time USD volume across all pairs (USD is derived).
    /// </summary>
    utility::string_t getVolumeUsd() const;
    bool volumeUsdIsSet() const;
    void unsetVolume_usd();

    void setVolumeUsd(const utility::string_t& value);

    /// <summary>
    /// All time volume in ETH across all pairs (ETH is derived).
    /// </summary>
    utility::string_t getVolumeEth() const;
    bool volumeEthIsSet() const;
    void unsetVolume_eth();

    void setVolumeEth(const utility::string_t& value);

    /// <summary>
    /// Untracked volume USD.
    /// </summary>
    utility::string_t getUntrackedVolumeUsd() const;
    bool untrackedVolumeUsdIsSet() const;
    void unsetUntracked_volume_usd();

    void setUntrackedVolumeUsd(const utility::string_t& value);

    /// <summary>
    /// Total liquidity across all pairs stored as a derived USD amount.
    /// </summary>
    utility::string_t getLiquidityUsd() const;
    bool liquidityUsdIsSet() const;
    void unsetLiquidity_usd();

    void setLiquidityUsd(const utility::string_t& value);

    /// <summary>
    /// Total liquidity across all pairs stored as a derived ETH amount.
    /// </summary>
    utility::string_t getLiquidityEth() const;
    bool liquidityEthIsSet() const;
    void unsetLiquidity_eth();

    void setLiquidityEth(const utility::string_t& value);

    /// <summary>
    /// All time amount of transactions across all pairs.
    /// </summary>
    utility::string_t getTxCount() const;
    bool txCountIsSet() const;
    void unsetTx_count();

    void setTxCount(const utility::string_t& value);

    /// <summary>
    /// Total count of tokens.
    /// </summary>
    utility::string_t getTokenCount() const;
    bool tokenCountIsSet() const;
    void unsetToken_count();

    void setTokenCount(const utility::string_t& value);

    /// <summary>
    /// Users count.
    /// </summary>
    utility::string_t getUserCount() const;
    bool userCountIsSet() const;
    void unsetUser_count();

    void setUserCount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Pair_count;
    bool m_Pair_countIsSet;
    utility::string_t m_Volume_usd;
    bool m_Volume_usdIsSet;
    utility::string_t m_Volume_eth;
    bool m_Volume_ethIsSet;
    utility::string_t m_Untracked_volume_usd;
    bool m_Untracked_volume_usdIsSet;
    utility::string_t m_Liquidity_usd;
    bool m_Liquidity_usdIsSet;
    utility::string_t m_Liquidity_eth;
    bool m_Liquidity_ethIsSet;
    utility::string_t m_Tx_count;
    bool m_Tx_countIsSet;
    utility::string_t m_Token_count;
    bool m_Token_countIsSet;
    utility::string_t m_User_count;
    bool m_User_countIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Sushiswap_FactoryDTO_H_ */
