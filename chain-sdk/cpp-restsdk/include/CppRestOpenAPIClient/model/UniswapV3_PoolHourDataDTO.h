/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UniswapV3_PoolHourDataDTO.h
 *
 * Hourly stats tracker for pool.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UniswapV3_PoolHourDataDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UniswapV3_PoolHourDataDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Hourly stats tracker for pool.
/// </summary>
class  UniswapV3_PoolHourDataDTO
    : public ModelBase
{
public:
    UniswapV3_PoolHourDataDTO();
    virtual ~UniswapV3_PoolHourDataDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UniswapV3_PoolHourDataDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// Identifier, format: (pool address)-(day id)
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Unix timestamp for start of hour.
    /// </summary>
    int32_t getPeriodStartUnix() const;
    bool periodStartUnixIsSet() const;
    void unsetPeriod_start_unix();

    void setPeriodStartUnix(int32_t value);

    /// <summary>
    /// Pointer to pool.
    /// </summary>
    utility::string_t getPool() const;
    bool poolIsSet() const;
    void unsetPool();

    void setPool(const utility::string_t& value);

    /// <summary>
    /// In range liquidity at end of period.
    /// </summary>
    utility::string_t getLiquidity() const;
    bool liquidityIsSet() const;
    void unsetLiquidity();

    void setLiquidity(const utility::string_t& value);

    /// <summary>
    /// Current price tracker at end of period.
    /// </summary>
    utility::string_t getSqrtPrice() const;
    bool sqrtPriceIsSet() const;
    void unsetSqrt_price();

    void setSqrtPrice(const utility::string_t& value);

    /// <summary>
    /// Price of token0 - derived from sqrtPrice.
    /// </summary>
    utility::string_t getToken0Price() const;
    bool token0PriceIsSet() const;
    void unsetToken_0_price();

    void setToken0Price(const utility::string_t& value);

    /// <summary>
    /// Price of token1 - derived from sqrtPrice.
    /// </summary>
    utility::string_t getToken1Price() const;
    bool token1PriceIsSet() const;
    void unsetToken_1_price();

    void setToken1Price(const utility::string_t& value);

    /// <summary>
    /// Current tick at end of period.
    /// </summary>
    utility::string_t getTick() const;
    bool tickIsSet() const;
    void unsetTick();

    void setTick(const utility::string_t& value);

    /// <summary>
    /// Tracker for global fee growth.
    /// </summary>
    utility::string_t getFeeGrowthGlobal0x128() const;
    bool feeGrowthGlobal0x128IsSet() const;
    void unsetFee_growth_global_0x128();

    void setFeeGrowthGlobal0x128(const utility::string_t& value);

    /// <summary>
    /// Tracker for global fee growth.
    /// </summary>
    utility::string_t getFeeGrowthGlobal1x128() const;
    bool feeGrowthGlobal1x128IsSet() const;
    void unsetFee_growth_global_1x128();

    void setFeeGrowthGlobal1x128(const utility::string_t& value);

    /// <summary>
    /// Total value locked derived in USD at end of period.
    /// </summary>
    utility::string_t getTvlUsd() const;
    bool tvlUsdIsSet() const;
    void unsetTvl_usd();

    void setTvlUsd(const utility::string_t& value);

    /// <summary>
    /// Volume in token0.
    /// </summary>
    utility::string_t getVolumeToken0() const;
    bool volumeToken0IsSet() const;
    void unsetVolume_token_0();

    void setVolumeToken0(const utility::string_t& value);

    /// <summary>
    /// Volume in token1.
    /// </summary>
    utility::string_t getVolumeToken1() const;
    bool volumeToken1IsSet() const;
    void unsetVolume_token_1();

    void setVolumeToken1(const utility::string_t& value);

    /// <summary>
    /// Volume in USD.
    /// </summary>
    utility::string_t getVolumeUsd() const;
    bool volumeUsdIsSet() const;
    void unsetVolume_usd();

    void setVolumeUsd(const utility::string_t& value);

    /// <summary>
    /// Fees in USD.
    /// </summary>
    utility::string_t getFeesUsd() const;
    bool feesUsdIsSet() const;
    void unsetFees_usd();

    void setFeesUsd(const utility::string_t& value);

    /// <summary>
    /// Number of transactions during period.
    /// </summary>
    utility::string_t getTxCount() const;
    bool txCountIsSet() const;
    void unsetTx_count();

    void setTxCount(const utility::string_t& value);

    /// <summary>
    /// Opening price of token0.
    /// </summary>
    utility::string_t getOpen() const;
    bool openIsSet() const;
    void unsetOpen();

    void setOpen(const utility::string_t& value);

    /// <summary>
    /// High price of token0.
    /// </summary>
    utility::string_t getHigh() const;
    bool highIsSet() const;
    void unsetHigh();

    void setHigh(const utility::string_t& value);

    /// <summary>
    /// Low price of token0.
    /// </summary>
    utility::string_t getLow() const;
    bool lowIsSet() const;
    void unsetLow();

    void setLow(const utility::string_t& value);

    /// <summary>
    /// Close price of token0.
    /// </summary>
    utility::string_t getClose() const;
    bool closeIsSet() const;
    void unsetClose();

    void setClose(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    int32_t m_Period_start_unix;
    bool m_Period_start_unixIsSet;
    utility::string_t m_Pool;
    bool m_PoolIsSet;
    utility::string_t m_Liquidity;
    bool m_LiquidityIsSet;
    utility::string_t m_Sqrt_price;
    bool m_Sqrt_priceIsSet;
    utility::string_t m_Token_0_price;
    bool m_Token_0_priceIsSet;
    utility::string_t m_Token_1_price;
    bool m_Token_1_priceIsSet;
    utility::string_t m_Tick;
    bool m_TickIsSet;
    utility::string_t m_Fee_growth_global_0x128;
    bool m_Fee_growth_global_0x128IsSet;
    utility::string_t m_Fee_growth_global_1x128;
    bool m_Fee_growth_global_1x128IsSet;
    utility::string_t m_Tvl_usd;
    bool m_Tvl_usdIsSet;
    utility::string_t m_Volume_token_0;
    bool m_Volume_token_0IsSet;
    utility::string_t m_Volume_token_1;
    bool m_Volume_token_1IsSet;
    utility::string_t m_Volume_usd;
    bool m_Volume_usdIsSet;
    utility::string_t m_Fees_usd;
    bool m_Fees_usdIsSet;
    utility::string_t m_Tx_count;
    bool m_Tx_countIsSet;
    utility::string_t m_Open;
    bool m_OpenIsSet;
    utility::string_t m_High;
    bool m_HighIsSet;
    utility::string_t m_Low;
    bool m_LowIsSet;
    utility::string_t m_Close;
    bool m_CloseIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UniswapV3_PoolHourDataDTO_H_ */
