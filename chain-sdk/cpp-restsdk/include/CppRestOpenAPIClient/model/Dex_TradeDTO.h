/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dex_TradeDTO.h
 *
 * Trade for a single user, as part of a ring trade. It&#39;s part of the solution submitted by a solver for a given batch.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dex_TradeDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dex_TradeDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Transactions_ETradeAggressiveSide.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Trade for a single user, as part of a ring trade. It&#39;s part of the solution submitted by a solver for a given batch.
/// </summary>
class  Dex_TradeDTO
    : public ModelBase
{
public:
    Dex_TradeDTO();
    virtual ~Dex_TradeDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dex_TradeDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOrder() const;
    bool orderIsSet() const;
    void unsetOrder();

    void setOrder(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();

    void setOwner(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSellVolume() const;
    bool sellVolumeIsSet() const;
    void unsetSell_volume();

    void setSellVolume(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBuyVolume() const;
    bool buyVolumeIsSet() const;
    void unsetBuy_volume();

    void setBuyVolume(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTradeBatchId() const;
    bool tradeBatchIdIsSet() const;
    void unsetTrade_batch_id();

    void setTradeBatchId(const utility::string_t& value);

    /// <summary>
    /// The date of the end of the batch.
    /// </summary>
    utility::string_t getTradeEpoch() const;
    bool tradeEpochIsSet() const;
    void unsetTrade_epoch();

    void setTradeEpoch(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBuyToken() const;
    bool buyTokenIsSet() const;
    void unsetBuy_token();

    void setBuyToken(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSellToken() const;
    bool sellTokenIsSet() const;
    void unsetSell_token();

    void setSellToken(const utility::string_t& value);

    /// <summary>
    /// The date where the transaction was mined.
    /// </summary>
    utility::string_t getCreateEpoch() const;
    bool createEpochIsSet() const;
    void unsetCreate_epoch();

    void setCreateEpoch(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRevertEpoch() const;
    bool revertEpochIsSet() const;
    void unsetRevert_epoch();

    void setRevertEpoch(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTxHash() const;
    bool txHashIsSet() const;
    void unsetTx_hash();

    void setTxHash(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTxLogIndex() const;
    bool txLogIndexIsSet() const;
    void unsetTx_log_index();

    void setTxLogIndex(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPoolId() const;
    bool poolIdIsSet() const;
    void unsetPool_id();

    void setPoolId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTransactionId() const;
    bool transactionIdIsSet() const;
    void unsetTransaction_id();

    void setTransactionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getEvaluatedPrice() const;
    bool evaluatedPriceIsSet() const;
    void unsetEvaluated_price();

    void setEvaluatedPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    double getEvaluatedAmount() const;
    bool evaluatedAmountIsSet() const;
    void unsetEvaluated_amount();

    void setEvaluatedAmount(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Transactions_ETradeAggressiveSide> getEvaluatedAggressor() const;
    bool evaluatedAggressorIsSet() const;
    void unsetEvaluated_aggressor();

    void setEvaluatedAggressor(const std::shared_ptr<Transactions_ETradeAggressiveSide>& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Order;
    bool m_OrderIsSet;
    utility::string_t m_Owner;
    bool m_OwnerIsSet;
    utility::string_t m_Sell_volume;
    bool m_Sell_volumeIsSet;
    utility::string_t m_Buy_volume;
    bool m_Buy_volumeIsSet;
    utility::string_t m_Trade_batch_id;
    bool m_Trade_batch_idIsSet;
    utility::string_t m_Trade_epoch;
    bool m_Trade_epochIsSet;
    utility::string_t m_Buy_token;
    bool m_Buy_tokenIsSet;
    utility::string_t m_Sell_token;
    bool m_Sell_tokenIsSet;
    utility::string_t m_Create_epoch;
    bool m_Create_epochIsSet;
    utility::string_t m_Revert_epoch;
    bool m_Revert_epochIsSet;
    utility::string_t m_Tx_hash;
    bool m_Tx_hashIsSet;
    utility::string_t m_Tx_log_index;
    bool m_Tx_log_indexIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
    utility::string_t m_Pool_id;
    bool m_Pool_idIsSet;
    utility::string_t m_Transaction_id;
    bool m_Transaction_idIsSet;
    double m_Evaluated_price;
    bool m_Evaluated_priceIsSet;
    double m_Evaluated_amount;
    bool m_Evaluated_amountIsSet;
    std::shared_ptr<Transactions_ETradeAggressiveSide> m_Evaluated_aggressor;
    bool m_Evaluated_aggressorIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dex_TradeDTO_H_ */
