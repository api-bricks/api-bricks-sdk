/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Curve_VotingAppDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Curve_VotingAppDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Curve_VotingAppDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Curve_VotingAppDTO
    : public ModelBase
{
public:
    Curve_VotingAppDTO();
    virtual ~Curve_VotingAppDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Curve_VotingAppDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// App address.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();

    void setAddress(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCodename() const;
    bool codenameIsSet() const;
    void unsetCodename();

    void setCodename(const utility::string_t& value);

    /// <summary>
    /// Minimum balance needed to create a proposal.
    /// </summary>
    utility::string_t getMinimumBalance() const;
    bool minimumBalanceIsSet() const;
    void unsetMinimum_balance();

    void setMinimumBalance(const utility::string_t& value);

    /// <summary>
    /// Percentage of positive votes in total possible votes for a proposal to be accepted.
    /// </summary>
    utility::string_t getMinimumQuorum() const;
    bool minimumQuorumIsSet() const;
    void unsetMinimum_quorum();

    void setMinimumQuorum(const utility::string_t& value);

    /// <summary>
    /// Minimum time needed to pass between user&#39;s previous proposal and a user creating a new proposal.
    /// </summary>
    utility::string_t getMinimumTime() const;
    bool minimumTimeIsSet() const;
    void unsetMinimum_time();

    void setMinimumTime(const utility::string_t& value);

    /// <summary>
    /// Percentage of positive votes needed for a proposal to be accepted.
    /// </summary>
    utility::string_t getRequiredSupport() const;
    bool requiredSupportIsSet() const;
    void unsetRequired_support();

    void setRequiredSupport(const utility::string_t& value);

    /// <summary>
    /// Seconds that a proposal will be open for vote (unless enough votes have been cast to make an early decision).
    /// </summary>
    utility::string_t getVoteTime() const;
    bool voteTimeIsSet() const;
    void unsetVote_time();

    void setVoteTime(const utility::string_t& value);

    /// <summary>
    /// Number of proposals created with this app.
    /// </summary>
    utility::string_t getProposalCount() const;
    bool proposalCountIsSet() const;
    void unsetProposal_count();

    void setProposalCount(const utility::string_t& value);

    /// <summary>
    /// Number of votes received by all the proposals created with this app.
    /// </summary>
    utility::string_t getVoteCount() const;
    bool voteCountIsSet() const;
    void unsetVote_count();

    void setVoteCount(const utility::string_t& value);

    /// <summary>
    /// Address of the token used for voting.
    /// </summary>
    utility::string_t getToken() const;
    bool tokenIsSet() const;
    void unsetToken();

    void setToken(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Address;
    bool m_AddressIsSet;
    utility::string_t m_Codename;
    bool m_CodenameIsSet;
    utility::string_t m_Minimum_balance;
    bool m_Minimum_balanceIsSet;
    utility::string_t m_Minimum_quorum;
    bool m_Minimum_quorumIsSet;
    utility::string_t m_Minimum_time;
    bool m_Minimum_timeIsSet;
    utility::string_t m_Required_support;
    bool m_Required_supportIsSet;
    utility::string_t m_Vote_time;
    bool m_Vote_timeIsSet;
    utility::string_t m_Proposal_count;
    bool m_Proposal_countIsSet;
    utility::string_t m_Vote_count;
    bool m_Vote_countIsSet;
    utility::string_t m_Token;
    bool m_TokenIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Curve_VotingAppDTO_H_ */
