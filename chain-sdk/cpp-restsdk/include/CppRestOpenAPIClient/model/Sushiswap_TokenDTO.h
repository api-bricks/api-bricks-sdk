/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Sushiswap_TokenDTO.h
 *
 * Stores aggregated information for a specific token across all pairs that token is included in.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Sushiswap_TokenDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Sushiswap_TokenDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Stores aggregated information for a specific token across all pairs that token is included in.
/// </summary>
class  Sushiswap_TokenDTO
    : public ModelBase
{
public:
    Sushiswap_TokenDTO();
    virtual ~Sushiswap_TokenDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Sushiswap_TokenDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// Token address.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Factory address.
    /// </summary>
    utility::string_t getFactory() const;
    bool factoryIsSet() const;
    void unsetFactory();

    void setFactory(const utility::string_t& value);

    /// <summary>
    /// Token symbol.
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();

    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Token name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Token decimals.
    /// </summary>
    utility::string_t getDecimals() const;
    bool decimalsIsSet() const;
    void unsetDecimals();

    void setDecimals(const utility::string_t& value);

    /// <summary>
    /// Total supply of liquidity token.
    /// </summary>
    utility::string_t getTotalSupply() const;
    bool totalSupplyIsSet() const;
    void unsetTotal_supply();

    void setTotalSupply(const utility::string_t& value);

    /// <summary>
    /// Amount of token traded all time across all pairs.
    /// </summary>
    utility::string_t getVolume() const;
    bool volumeIsSet() const;
    void unsetVolume();

    void setVolume(const utility::string_t& value);

    /// <summary>
    /// Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold).
    /// </summary>
    utility::string_t getVolumeUsd() const;
    bool volumeUsdIsSet() const;
    void unsetVolume_usd();

    void setVolumeUsd(const utility::string_t& value);

    /// <summary>
    /// Amount of token in USD traded all time across pairs (no minimum liquidity threshold).
    /// </summary>
    utility::string_t getUntrackedVolumeUsd() const;
    bool untrackedVolumeUsdIsSet() const;
    void unsetUntracked_volume_usd();

    void setUntrackedVolumeUsd(const utility::string_t& value);

    /// <summary>
    /// Amount of transactions all time in pairs including token.
    /// </summary>
    utility::string_t getTxCount() const;
    bool txCountIsSet() const;
    void unsetTx_count();

    void setTxCount(const utility::string_t& value);

    /// <summary>
    /// Total amount of token provided as liquidity across all pairs.
    /// </summary>
    utility::string_t getLiquidity() const;
    bool liquidityIsSet() const;
    void unsetLiquidity();

    void setLiquidity(const utility::string_t& value);

    /// <summary>
    /// ETH per token.
    /// </summary>
    utility::string_t getDerivedEth() const;
    bool derivedEthIsSet() const;
    void unsetDerived_eth();

    void setDerivedEth(const utility::string_t& value);

    /// <summary>
    /// Array of whitelisted pairs.
    /// </summary>
    std::vector<utility::string_t>& getWhitelistPairs();
    bool whitelistPairsIsSet() const;
    void unsetWhitelist_pairs();

    void setWhitelistPairs(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTokenSymbol() const;
    bool tokenSymbolIsSet() const;
    void unsetToken_symbol();

    void setTokenSymbol(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Factory;
    bool m_FactoryIsSet;
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Decimals;
    bool m_DecimalsIsSet;
    utility::string_t m_Total_supply;
    bool m_Total_supplyIsSet;
    utility::string_t m_Volume;
    bool m_VolumeIsSet;
    utility::string_t m_Volume_usd;
    bool m_Volume_usdIsSet;
    utility::string_t m_Untracked_volume_usd;
    bool m_Untracked_volume_usdIsSet;
    utility::string_t m_Tx_count;
    bool m_Tx_countIsSet;
    utility::string_t m_Liquidity;
    bool m_LiquidityIsSet;
    utility::string_t m_Derived_eth;
    bool m_Derived_ethIsSet;
    std::vector<utility::string_t> m_Whitelist_pairs;
    bool m_Whitelist_pairsIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
    utility::string_t m_Token_symbol;
    bool m_Token_symbolIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Sushiswap_TokenDTO_H_ */
