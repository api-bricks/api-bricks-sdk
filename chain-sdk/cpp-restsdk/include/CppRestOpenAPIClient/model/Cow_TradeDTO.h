/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Cow_TradeDTO.h
 *
 * Trade entity.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Cow_TradeDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Cow_TradeDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Transactions_ETradeAggressiveSide.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Trade entity.
/// </summary>
class  Cow_TradeDTO
    : public ModelBase
{
public:
    Cow_TradeDTO();
    virtual ~Cow_TradeDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Cow_TradeDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// Identifier, format: (order id)|(transaction hash)|(event index).
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Block&#39;s timestamp.
    /// </summary>
    utility::string_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const utility::string_t& value);

    /// <summary>
    /// Transaction&#39;s gas price.
    /// </summary>
    utility::string_t getGasPrice() const;
    bool gasPriceIsSet() const;
    void unsetGas_price();

    void setGasPrice(const utility::string_t& value);

    /// <summary>
    /// Transaction&#39;s gas limit.
    /// </summary>
    utility::string_t getGasLimit() const;
    bool gasLimitIsSet() const;
    void unsetGas_limit();

    void setGasLimit(const utility::string_t& value);

    /// <summary>
    /// Trade&#39;s fee amount.
    /// </summary>
    utility::string_t getFeeAmount() const;
    bool feeAmountIsSet() const;
    void unsetFee_amount();

    void setFeeAmount(const utility::string_t& value);

    /// <summary>
    /// Trade event transaction hash.
    /// </summary>
    utility::string_t getTxHash() const;
    bool txHashIsSet() const;
    void unsetTx_hash();

    void setTxHash(const utility::string_t& value);

    /// <summary>
    /// Reference to settlement.
    /// </summary>
    utility::string_t getSettlement() const;
    bool settlementIsSet() const;
    void unsetSettlement();

    void setSettlement(const utility::string_t& value);

    /// <summary>
    /// Buy amount.
    /// </summary>
    utility::string_t getBuyAmount() const;
    bool buyAmountIsSet() const;
    void unsetBuy_amount();

    void setBuyAmount(const utility::string_t& value);

    /// <summary>
    /// Sell amount.
    /// </summary>
    utility::string_t getSellAmount() const;
    bool sellAmountIsSet() const;
    void unsetSell_amount();

    void setSellAmount(const utility::string_t& value);

    /// <summary>
    /// Address of token that is sold.
    /// </summary>
    utility::string_t getSellToken() const;
    bool sellTokenIsSet() const;
    void unsetSell_token();

    void setSellToken(const utility::string_t& value);

    /// <summary>
    /// Address of token that is bought.
    /// </summary>
    utility::string_t getBuyToken() const;
    bool buyTokenIsSet() const;
    void unsetBuy_token();

    void setBuyToken(const utility::string_t& value);

    /// <summary>
    /// Reference to order.
    /// </summary>
    utility::string_t getOrder() const;
    bool orderIsSet() const;
    void unsetOrder();

    void setOrder(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPoolId() const;
    bool poolIdIsSet() const;
    void unsetPool_id();

    void setPoolId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTransactionId() const;
    bool transactionIdIsSet() const;
    void unsetTransaction_id();

    void setTransactionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getEvaluatedPrice() const;
    bool evaluatedPriceIsSet() const;
    void unsetEvaluated_price();

    void setEvaluatedPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    double getEvaluatedAmount() const;
    bool evaluatedAmountIsSet() const;
    void unsetEvaluated_amount();

    void setEvaluatedAmount(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Transactions_ETradeAggressiveSide> getEvaluatedAggressor() const;
    bool evaluatedAggressorIsSet() const;
    void unsetEvaluated_aggressor();

    void setEvaluatedAggressor(const std::shared_ptr<Transactions_ETradeAggressiveSide>& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Timestamp;
    bool m_TimestampIsSet;
    utility::string_t m_Gas_price;
    bool m_Gas_priceIsSet;
    utility::string_t m_Gas_limit;
    bool m_Gas_limitIsSet;
    utility::string_t m_Fee_amount;
    bool m_Fee_amountIsSet;
    utility::string_t m_Tx_hash;
    bool m_Tx_hashIsSet;
    utility::string_t m_Settlement;
    bool m_SettlementIsSet;
    utility::string_t m_Buy_amount;
    bool m_Buy_amountIsSet;
    utility::string_t m_Sell_amount;
    bool m_Sell_amountIsSet;
    utility::string_t m_Sell_token;
    bool m_Sell_tokenIsSet;
    utility::string_t m_Buy_token;
    bool m_Buy_tokenIsSet;
    utility::string_t m_Order;
    bool m_OrderIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
    utility::string_t m_Pool_id;
    bool m_Pool_idIsSet;
    utility::string_t m_Transaction_id;
    bool m_Transaction_idIsSet;
    double m_Evaluated_price;
    bool m_Evaluated_priceIsSet;
    double m_Evaluated_amount;
    bool m_Evaluated_amountIsSet;
    std::shared_ptr<Transactions_ETradeAggressiveSide> m_Evaluated_aggressor;
    bool m_Evaluated_aggressorIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Cow_TradeDTO_H_ */
