/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Curve_ProposalDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Curve_ProposalDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Curve_ProposalDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Curve_ProposalDTO
    : public ModelBase
{
public:
    Curve_ProposalDTO();
    virtual ~Curve_ProposalDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Curve_ProposalDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Sequential number in related to the realted voting app.
    /// </summary>
    utility::string_t getNumber() const;
    bool numberIsSet() const;
    void unsetnumber();

    void setNumber(const utility::string_t& value);

    /// <summary>
    /// Voting app instance.
    /// </summary>
    utility::string_t getApp() const;
    bool appIsSet() const;
    void unsetApp();

    void setApp(const utility::string_t& value);

    /// <summary>
    /// Proposal creator&#39;s account.
    /// </summary>
    utility::string_t getCreator() const;
    bool creatorIsSet() const;
    void unsetCreator();

    void setCreator(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExecutionScript() const;
    bool executionScriptIsSet() const;
    void unsetExecution_script();

    void setExecutionScript(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExpireDate() const;
    bool expireDateIsSet() const;
    void unsetExpire_date();

    void setExpireDate(const utility::string_t& value);

    /// <summary>
    /// Percentage of positive votes in total possible votes for this proposal to be accepted.
    /// </summary>
    utility::string_t getMinimumQuorum() const;
    bool minimumQuorumIsSet() const;
    void unsetMinimum_quorum();

    void setMinimumQuorum(const utility::string_t& value);

    /// <summary>
    /// Percentage of positive votes needed for this proposal to be accepted.
    /// </summary>
    utility::string_t getRequiredSupport() const;
    bool requiredSupportIsSet() const;
    void unsetRequired_support();

    void setRequiredSupport(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSnapshotBlock() const;
    bool snapshotBlockIsSet() const;
    void unsetSnapshot_block();

    void setSnapshotBlock(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVotingPower() const;
    bool votingPowerIsSet() const;
    void unsetVoting_power();

    void setVotingPower(const utility::string_t& value);

    /// <summary>
    /// Link to metadata file.
    /// </summary>
    utility::string_t getMetadata() const;
    bool metadataIsSet() const;
    void unsetMetadata();

    void setMetadata(const utility::string_t& value);

    /// <summary>
    /// Proposal description text.
    /// </summary>
    utility::string_t getText() const;
    bool textIsSet() const;
    void unsetText();

    void setText(const utility::string_t& value);

    /// <summary>
    /// Number of votes received by the proposal.
    /// </summary>
    utility::string_t getVoteCount() const;
    bool voteCountIsSet() const;
    void unsetVote_count();

    void setVoteCount(const utility::string_t& value);

    /// <summary>
    /// Number of positive votes (yes) received by the proposal.
    /// </summary>
    utility::string_t getPositiveVoteCount() const;
    bool positiveVoteCountIsSet() const;
    void unsetPositive_vote_count();

    void setPositiveVoteCount(const utility::string_t& value);

    /// <summary>
    /// Number of negative votes (no) received by the proposal.
    /// </summary>
    utility::string_t getNegativeVoteCount() const;
    bool negativeVoteCountIsSet() const;
    void unsetNegative_vote_count();

    void setNegativeVoteCount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrentQuorum() const;
    bool currentQuorumIsSet() const;
    void unsetCurrent_quorum();

    void setCurrentQuorum(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrentSupport() const;
    bool currentSupportIsSet() const;
    void unsetCurrent_support();

    void setCurrentSupport(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStakedSupport() const;
    bool stakedSupportIsSet() const;
    void unsetStaked_support();

    void setStakedSupport(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTotalStaked() const;
    bool totalStakedIsSet() const;
    void unsetTotal_staked();

    void setTotalStaked(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreated() const;
    bool createdIsSet() const;
    void unsetCreated();

    void setCreated(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreatedAtBlock() const;
    bool createdAtBlockIsSet() const;
    void unsetCreated_at_block();

    void setCreatedAtBlock(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreatedAtTransaction() const;
    bool createdAtTransactionIsSet() const;
    void unsetCreated_at_transaction();

    void setCreatedAtTransaction(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpdated() const;
    bool updatedIsSet() const;
    void unsetUpdated();

    void setUpdated(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpdatedAtBlock() const;
    bool updatedAtBlockIsSet() const;
    void unsetUpdated_at_block();

    void setUpdatedAtBlock(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpdatedAtTransaction() const;
    bool updatedAtTransactionIsSet() const;
    void unsetUpdated_at_transaction();

    void setUpdatedAtTransaction(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExecuted() const;
    bool executedIsSet() const;
    void unsetExecuted();

    void setExecuted(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExecutedAtBlock() const;
    bool executedAtBlockIsSet() const;
    void unsetExecuted_at_block();

    void setExecutedAtBlock(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExecutedAtTransaction() const;
    bool executedAtTransactionIsSet() const;
    void unsetExecuted_at_transaction();

    void setExecutedAtTransaction(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_number;
    bool m_numberIsSet;
    utility::string_t m_App;
    bool m_AppIsSet;
    utility::string_t m_Creator;
    bool m_CreatorIsSet;
    utility::string_t m_Execution_script;
    bool m_Execution_scriptIsSet;
    utility::string_t m_Expire_date;
    bool m_Expire_dateIsSet;
    utility::string_t m_Minimum_quorum;
    bool m_Minimum_quorumIsSet;
    utility::string_t m_Required_support;
    bool m_Required_supportIsSet;
    utility::string_t m_Snapshot_block;
    bool m_Snapshot_blockIsSet;
    utility::string_t m_Voting_power;
    bool m_Voting_powerIsSet;
    utility::string_t m_Metadata;
    bool m_MetadataIsSet;
    utility::string_t m_Text;
    bool m_TextIsSet;
    utility::string_t m_Vote_count;
    bool m_Vote_countIsSet;
    utility::string_t m_Positive_vote_count;
    bool m_Positive_vote_countIsSet;
    utility::string_t m_Negative_vote_count;
    bool m_Negative_vote_countIsSet;
    utility::string_t m_Current_quorum;
    bool m_Current_quorumIsSet;
    utility::string_t m_Current_support;
    bool m_Current_supportIsSet;
    utility::string_t m_Staked_support;
    bool m_Staked_supportIsSet;
    utility::string_t m_Total_staked;
    bool m_Total_stakedIsSet;
    utility::string_t m_Created;
    bool m_CreatedIsSet;
    utility::string_t m_Created_at_block;
    bool m_Created_at_blockIsSet;
    utility::string_t m_Created_at_transaction;
    bool m_Created_at_transactionIsSet;
    utility::string_t m_Updated;
    bool m_UpdatedIsSet;
    utility::string_t m_Updated_at_block;
    bool m_Updated_at_blockIsSet;
    utility::string_t m_Updated_at_transaction;
    bool m_Updated_at_transactionIsSet;
    utility::string_t m_Executed;
    bool m_ExecutedIsSet;
    utility::string_t m_Executed_at_block;
    bool m_Executed_at_blockIsSet;
    utility::string_t m_Executed_at_transaction;
    bool m_Executed_at_transactionIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Curve_ProposalDTO_H_ */
