/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UniswapV3_TickDayDataDTO.h
 *
 * Data accumulated and condensed into day stats for each exchange. Entity gets saved only if there is a change during the day
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UniswapV3_TickDayDataDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UniswapV3_TickDayDataDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Data accumulated and condensed into day stats for each exchange. Entity gets saved only if there is a change during the day
/// </summary>
class  UniswapV3_TickDayDataDTO
    : public ModelBase
{
public:
    UniswapV3_TickDayDataDTO();
    virtual ~UniswapV3_TickDayDataDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UniswapV3_TickDayDataDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// Identifier, format: (pool address)-(tick index)-(timestamp).
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Timestamp rounded to current day by dividing by 86400.
    /// </summary>
    int32_t getDate() const;
    bool dateIsSet() const;
    void unsetdate();

    void setDate(int32_t value);

    /// <summary>
    /// Pointer to pool.
    /// </summary>
    utility::string_t getPool() const;
    bool poolIsSet() const;
    void unsetPool();

    void setPool(const utility::string_t& value);

    /// <summary>
    /// Pointer to tick.
    /// </summary>
    utility::string_t getTick() const;
    bool tickIsSet() const;
    void unsetTick();

    void setTick(const utility::string_t& value);

    /// <summary>
    /// Total liquidity pool has as tick lower or upper at end of period.
    /// </summary>
    utility::string_t getLiquidityGross() const;
    bool liquidityGrossIsSet() const;
    void unsetLiquidity_gross();

    void setLiquidityGross(const utility::string_t& value);

    /// <summary>
    /// How much liquidity changes when tick crossed at end of period.
    /// </summary>
    utility::string_t getLiquidityNet() const;
    bool liquidityNetIsSet() const;
    void unsetLiquidity_net();

    void setLiquidityNet(const utility::string_t& value);

    /// <summary>
    /// Hourly volume of token0 with this tick in range.
    /// </summary>
    utility::string_t getVolumeToken0() const;
    bool volumeToken0IsSet() const;
    void unsetVolume_token_0();

    void setVolumeToken0(const utility::string_t& value);

    /// <summary>
    /// Hourly volume of token1 with this tick in range.
    /// </summary>
    utility::string_t getVolumeToken1() const;
    bool volumeToken1IsSet() const;
    void unsetVolume_token_1();

    void setVolumeToken1(const utility::string_t& value);

    /// <summary>
    /// Hourly volume in derived USD with this tick in range.
    /// </summary>
    utility::string_t getVolumeUsd() const;
    bool volumeUsdIsSet() const;
    void unsetVolume_usd();

    void setVolumeUsd(const utility::string_t& value);

    /// <summary>
    /// Fees in USD.
    /// </summary>
    utility::string_t getFeesUsd() const;
    bool feesUsdIsSet() const;
    void unsetFees_usd();

    void setFeesUsd(const utility::string_t& value);

    /// <summary>
    /// Variable needed for fee computation.
    /// </summary>
    utility::string_t getFeeGrowthOutside0x128() const;
    bool feeGrowthOutside0x128IsSet() const;
    void unsetFee_growth_outside_0x128();

    void setFeeGrowthOutside0x128(const utility::string_t& value);

    /// <summary>
    /// Variable needed for fee computation.
    /// </summary>
    utility::string_t getFeeGrowthOutside1x128() const;
    bool feeGrowthOutside1x128IsSet() const;
    void unsetFee_growth_outside_1x128();

    void setFeeGrowthOutside1x128(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    int32_t m_date;
    bool m_dateIsSet;
    utility::string_t m_Pool;
    bool m_PoolIsSet;
    utility::string_t m_Tick;
    bool m_TickIsSet;
    utility::string_t m_Liquidity_gross;
    bool m_Liquidity_grossIsSet;
    utility::string_t m_Liquidity_net;
    bool m_Liquidity_netIsSet;
    utility::string_t m_Volume_token_0;
    bool m_Volume_token_0IsSet;
    utility::string_t m_Volume_token_1;
    bool m_Volume_token_1IsSet;
    utility::string_t m_Volume_usd;
    bool m_Volume_usdIsSet;
    utility::string_t m_Fees_usd;
    bool m_Fees_usdIsSet;
    utility::string_t m_Fee_growth_outside_0x128;
    bool m_Fee_growth_outside_0x128IsSet;
    utility::string_t m_Fee_growth_outside_1x128;
    bool m_Fee_growth_outside_1x128IsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UniswapV3_TickDayDataDTO_H_ */
