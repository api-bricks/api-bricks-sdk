/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Sushiswap_SwapDTO.h
 *
 * Swap are created for each token swap within a pair.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Sushiswap_SwapDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Sushiswap_SwapDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Transactions_ETradeAggressiveSide.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Swap are created for each token swap within a pair.
/// </summary>
class  Sushiswap_SwapDTO
    : public ModelBase
{
public:
    Sushiswap_SwapDTO();
    virtual ~Sushiswap_SwapDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Sushiswap_SwapDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// Transaction hash plus index in Transaction swap array.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Reference to transaction swap was included in.
    /// </summary>
    utility::string_t getTransaction() const;
    bool transactionIsSet() const;
    void unsetTransaction();

    void setTransaction(const utility::string_t& value);

    /// <summary>
    /// Timestamp of swap, used for sorted lookups.
    /// </summary>
    utility::string_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const utility::string_t& value);

    /// <summary>
    /// Reference to pair.
    /// </summary>
    utility::string_t getPair() const;
    bool pairIsSet() const;
    void unsetPair();

    void setPair(const utility::string_t& value);

    /// <summary>
    /// Address that initiated the swap.
    /// </summary>
    utility::string_t getSender() const;
    bool senderIsSet() const;
    void unsetSender();

    void setSender(const utility::string_t& value);

    /// <summary>
    /// Amount of token0 sold.
    /// </summary>
    utility::string_t getAmount0In() const;
    bool amount0InIsSet() const;
    void unsetAmount_0_in();

    void setAmount0In(const utility::string_t& value);

    /// <summary>
    /// Amount of token1 sold.
    /// </summary>
    utility::string_t getAmount1In() const;
    bool amount1InIsSet() const;
    void unsetAmount_1_in();

    void setAmount1In(const utility::string_t& value);

    /// <summary>
    /// Amount of token0 received.
    /// </summary>
    utility::string_t getAmount0Out() const;
    bool amount0OutIsSet() const;
    void unsetAmount_0_out();

    void setAmount0Out(const utility::string_t& value);

    /// <summary>
    /// Amount of token1 received.
    /// </summary>
    utility::string_t getAmount1Out() const;
    bool amount1OutIsSet() const;
    void unsetAmount_1_out();

    void setAmount1Out(const utility::string_t& value);

    /// <summary>
    /// Recipient of output tokens.
    /// </summary>
    utility::string_t getTo() const;
    bool toIsSet() const;
    void unsetTo();

    void setTo(const utility::string_t& value);

    /// <summary>
    /// Event index within transaction.
    /// </summary>
    utility::string_t getLogIndex() const;
    bool logIndexIsSet() const;
    void unsetLog_index();

    void setLogIndex(const utility::string_t& value);

    /// <summary>
    /// Derived amount of tokens sold in USD.
    /// </summary>
    utility::string_t getAmountUsd() const;
    bool amountUsdIsSet() const;
    void unsetAmount_usd();

    void setAmountUsd(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPoolId() const;
    bool poolIdIsSet() const;
    void unsetPool_id();

    void setPoolId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTransactionId() const;
    bool transactionIdIsSet() const;
    void unsetTransaction_id();

    void setTransactionId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getEvaluatedPrice() const;
    bool evaluatedPriceIsSet() const;
    void unsetEvaluated_price();

    void setEvaluatedPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    double getEvaluatedAmount() const;
    bool evaluatedAmountIsSet() const;
    void unsetEvaluated_amount();

    void setEvaluatedAmount(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Transactions_ETradeAggressiveSide> getEvaluatedAggressor() const;
    bool evaluatedAggressorIsSet() const;
    void unsetEvaluated_aggressor();

    void setEvaluatedAggressor(const std::shared_ptr<Transactions_ETradeAggressiveSide>& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Transaction;
    bool m_TransactionIsSet;
    utility::string_t m_Timestamp;
    bool m_TimestampIsSet;
    utility::string_t m_Pair;
    bool m_PairIsSet;
    utility::string_t m_Sender;
    bool m_SenderIsSet;
    utility::string_t m_Amount_0_in;
    bool m_Amount_0_inIsSet;
    utility::string_t m_Amount_1_in;
    bool m_Amount_1_inIsSet;
    utility::string_t m_Amount_0_out;
    bool m_Amount_0_outIsSet;
    utility::string_t m_Amount_1_out;
    bool m_Amount_1_outIsSet;
    utility::string_t m_To;
    bool m_ToIsSet;
    utility::string_t m_Log_index;
    bool m_Log_indexIsSet;
    utility::string_t m_Amount_usd;
    bool m_Amount_usdIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
    utility::string_t m_Pool_id;
    bool m_Pool_idIsSet;
    utility::string_t m_Transaction_id;
    bool m_Transaction_idIsSet;
    double m_Evaluated_price;
    bool m_Evaluated_priceIsSet;
    double m_Evaluated_amount;
    bool m_Evaluated_amountIsSet;
    std::shared_ptr<Transactions_ETradeAggressiveSide> m_Evaluated_aggressor;
    bool m_Evaluated_aggressorIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Sushiswap_SwapDTO_H_ */
