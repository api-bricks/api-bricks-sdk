/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CRYPTOPUNKS_DataSourcesDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CRYPTOPUNKS_DataSourcesDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CRYPTOPUNKS_DataSourcesDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CRYPTOPUNKS_DataSourcesDTO
    : public ModelBase
{
public:
    CRYPTOPUNKS_DataSourcesDTO();
    virtual ~CRYPTOPUNKS_DataSourcesDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CRYPTOPUNKS_DataSourcesDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlockRange() const;
    bool blockRangeIsSet() const;
    void unsetBlock_range();

    void setBlockRange(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCausalityRegion() const;
    bool causalityRegionIsSet() const;
    void unsetCausality_region();

    void setCausalityRegion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getManifestIdx() const;
    bool manifestIdxIsSet() const;
    void unsetManifest_idx();

    void setManifestIdx(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getParent() const;
    bool parentIsSet() const;
    void unsetParent();

    void setParent(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParam() const;
    bool paramIsSet() const;
    void unsetParam();

    void setParam(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContext() const;
    bool contextIsSet() const;
    void unsetContext();

    void setContext(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDoneAt() const;
    bool doneAtIsSet() const;
    void unsetDone_at();

    void setDoneAt(int32_t value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    int32_t m_Vid;
    bool m_VidIsSet;
    utility::string_t m_Block_range;
    bool m_Block_rangeIsSet;
    int32_t m_Causality_region;
    bool m_Causality_regionIsSet;
    int32_t m_Manifest_idx;
    bool m_Manifest_idxIsSet;
    int32_t m_Parent;
    bool m_ParentIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Param;
    bool m_ParamIsSet;
    utility::string_t m_Context;
    bool m_ContextIsSet;
    int32_t m_Done_at;
    bool m_Done_atIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CRYPTOPUNKS_DataSourcesDTO_H_ */
