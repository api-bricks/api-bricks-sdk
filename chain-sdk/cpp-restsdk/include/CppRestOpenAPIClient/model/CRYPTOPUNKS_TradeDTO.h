/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CRYPTOPUNKS_TradeDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CRYPTOPUNKS_TradeDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CRYPTOPUNKS_TradeDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CRYPTOPUNKS_TradeDTO
    : public ModelBase
{
public:
    CRYPTOPUNKS_TradeDTO();
    virtual ~CRYPTOPUNKS_TradeDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CRYPTOPUNKS_TradeDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlockRange() const;
    bool blockRangeIsSet() const;
    void unsetBlock_range();

    void setBlockRange(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTransactionHash() const;
    bool transactionHashIsSet() const;
    void unsetTransaction_hash();

    void setTransactionHash(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLogIndex() const;
    bool logIndexIsSet() const;
    void unsetLog_index();

    void setLogIndex(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsBundle() const;
    bool isBundleIsSet() const;
    void unsetIs_bundle();

    void setIsBundle(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCollection() const;
    bool collectionIsSet() const;
    void unsetCollection();

    void setCollection(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTokenId() const;
    bool tokenIdIsSet() const;
    void unsetToken_id();

    void setTokenId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAmount() const;
    bool amountIsSet() const;
    void unsetAmount();

    void setAmount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPriceEth() const;
    bool priceEthIsSet() const;
    void unsetPrice_eth();

    void setPriceEth(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBuyer() const;
    bool buyerIsSet() const;
    void unsetBuyer();

    void setBuyer(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSeller() const;
    bool sellerIsSet() const;
    void unsetSeller();

    void setSeller(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    utility::string_t m_Block_number;
    bool m_Block_numberIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
    utility::string_t m_Block_range;
    bool m_Block_rangeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Transaction_hash;
    bool m_Transaction_hashIsSet;
    int32_t m_Log_index;
    bool m_Log_indexIsSet;
    utility::string_t m_Timestamp;
    bool m_TimestampIsSet;
    bool m_Is_bundle;
    bool m_Is_bundleIsSet;
    utility::string_t m_Collection;
    bool m_CollectionIsSet;
    utility::string_t m_Token_id;
    bool m_Token_idIsSet;
    utility::string_t m_Amount;
    bool m_AmountIsSet;
    utility::string_t m_Price_eth;
    bool m_Price_ethIsSet;
    utility::string_t m_Buyer;
    bool m_BuyerIsSet;
    utility::string_t m_Seller;
    bool m_SellerIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CRYPTOPUNKS_TradeDTO_H_ */
