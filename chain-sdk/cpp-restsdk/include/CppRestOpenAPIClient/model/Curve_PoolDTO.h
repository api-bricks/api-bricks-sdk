/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Curve_PoolDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Curve_PoolDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Curve_PoolDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Curve_PoolDTO
    : public ModelBase
{
public:
    Curve_PoolDTO();
    virtual ~Curve_PoolDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Curve_PoolDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// Pool address.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Pool&#39;s human-readable name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Identify whether pool is a metapool.
    /// </summary>
    bool isIsMeta() const;
    bool isMetaIsSet() const;
    void unsetIs_meta();

    void setIsMeta(bool value);

    /// <summary>
    /// Registry contract address from where this pool was registered.
    /// </summary>
    utility::string_t getRegistryAddress() const;
    bool registryAddressIsSet() const;
    void unsetRegistry_address();

    void setRegistryAddress(const utility::string_t& value);

    /// <summary>
    /// Swap contract address.
    /// </summary>
    utility::string_t getSwapAddress() const;
    bool swapAddressIsSet() const;
    void unsetSwap_address();

    void setSwapAddress(const utility::string_t& value);

    /// <summary>
    /// Address of the token representing LP share.
    /// </summary>
    utility::string_t getLpToken() const;
    bool lpTokenIsSet() const;
    void unsetLp_token();

    void setLpToken(const utility::string_t& value);

    /// <summary>
    /// Number of coins composing the pool.
    /// </summary>
    utility::string_t getCoinCount() const;
    bool coinCountIsSet() const;
    void unsetCoin_count();

    void setCoinCount(const utility::string_t& value);

    /// <summary>
    /// Number of underlying coins composing the pool.
    /// </summary>
    utility::string_t getUnderlyingCount() const;
    bool underlyingCountIsSet() const;
    void unsetUnderlying_count();

    void setUnderlyingCount(const utility::string_t& value);

    /// <summary>
    /// Amplification coefficient multiplied by n * (n - 1).
    /// </summary>
    utility::string_t getA() const;
    bool AIsSet() const;
    void unseta();

    void setA(const utility::string_t& value);

    /// <summary>
    /// Fee to charge for exchanges.
    /// </summary>
    utility::string_t getFee() const;
    bool feeIsSet() const;
    void unsetFee();

    void setFee(const utility::string_t& value);

    /// <summary>
    /// Admin fee is represented as a percentage of the total fee collected on a swap.
    /// </summary>
    utility::string_t getAdminFee() const;
    bool adminFeeIsSet() const;
    void unsetAdmin_fee();

    void setAdminFee(const utility::string_t& value);

    /// <summary>
    /// Admin address.
    /// </summary>
    utility::string_t getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();

    void setOwner(const utility::string_t& value);

    /// <summary>
    /// Average dollar value of pool token.
    /// </summary>
    utility::string_t getVirtualPrice() const;
    bool virtualPriceIsSet() const;
    void unsetVirtual_price();

    void setVirtualPrice(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocked() const;
    bool lockedIsSet() const;
    void unsetLocked();

    void setLocked(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getAddedAt() const;
    bool addedAtIsSet() const;
    void unsetAdded_at();

    void setAddedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddedAtBlock() const;
    bool addedAtBlockIsSet() const;
    void unsetAdded_at_block();

    void setAddedAtBlock(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddedAtTransaction() const;
    bool addedAtTransactionIsSet() const;
    void unsetAdded_at_transaction();

    void setAddedAtTransaction(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRemovedAt() const;
    bool removedAtIsSet() const;
    void unsetRemoved_at();

    void setRemovedAt(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRemovedAtBlock() const;
    bool removedAtBlockIsSet() const;
    void unsetRemoved_at_block();

    void setRemovedAtBlock(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRemovedAtTransaction() const;
    bool removedAtTransactionIsSet() const;
    void unsetRemoved_at_transaction();

    void setRemovedAtTransaction(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExchangeCount() const;
    bool exchangeCountIsSet() const;
    void unsetExchange_count();

    void setExchangeCount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGaugeCount() const;
    bool gaugeCountIsSet() const;
    void unsetGauge_count();

    void setGaugeCount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    double getEvaluatedAsk() const;
    bool evaluatedAskIsSet() const;
    void unsetEvaluated_ask();

    void setEvaluatedAsk(double value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    bool m_Is_meta;
    bool m_Is_metaIsSet;
    utility::string_t m_Registry_address;
    bool m_Registry_addressIsSet;
    utility::string_t m_Swap_address;
    bool m_Swap_addressIsSet;
    utility::string_t m_Lp_token;
    bool m_Lp_tokenIsSet;
    utility::string_t m_Coin_count;
    bool m_Coin_countIsSet;
    utility::string_t m_Underlying_count;
    bool m_Underlying_countIsSet;
    utility::string_t m_a;
    bool m_aIsSet;
    utility::string_t m_Fee;
    bool m_FeeIsSet;
    utility::string_t m_Admin_fee;
    bool m_Admin_feeIsSet;
    utility::string_t m_Owner;
    bool m_OwnerIsSet;
    utility::string_t m_Virtual_price;
    bool m_Virtual_priceIsSet;
    utility::string_t m_Locked;
    bool m_LockedIsSet;
    utility::datetime m_Added_at;
    bool m_Added_atIsSet;
    utility::string_t m_Added_at_block;
    bool m_Added_at_blockIsSet;
    utility::string_t m_Added_at_transaction;
    bool m_Added_at_transactionIsSet;
    utility::string_t m_Removed_at;
    bool m_Removed_atIsSet;
    utility::string_t m_Removed_at_block;
    bool m_Removed_at_blockIsSet;
    utility::string_t m_Removed_at_transaction;
    bool m_Removed_at_transactionIsSet;
    utility::string_t m_Exchange_count;
    bool m_Exchange_countIsSet;
    utility::string_t m_Gauge_count;
    bool m_Gauge_countIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
    double m_Evaluated_ask;
    bool m_Evaluated_askIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Curve_PoolDTO_H_ */
