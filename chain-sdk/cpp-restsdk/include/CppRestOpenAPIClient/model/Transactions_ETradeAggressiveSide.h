/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Transactions_ETradeAggressiveSide.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Transactions_ETradeAggressiveSide_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Transactions_ETradeAggressiveSide_H_


#include "CppRestOpenAPIClient/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {

class  Transactions_ETradeAggressiveSide
    : public ModelBase
{
public:
    Transactions_ETradeAggressiveSide();
    virtual ~Transactions_ETradeAggressiveSide();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    enum class eTransactions_ETradeAggressiveSide
    {
        Transactions_ETradeAggressiveSide_BUY,
        Transactions_ETradeAggressiveSide_SELL,
        Transactions_ETradeAggressiveSide_ESTIMATEDBUY,
        Transactions_ETradeAggressiveSide_ESTIMATEDSELL,
        Transactions_ETradeAggressiveSide_UNKNOWN,
    };

    eTransactions_ETradeAggressiveSide getValue() const;
    void setValue(eTransactions_ETradeAggressiveSide const value);

    protected:
        eTransactions_ETradeAggressiveSide m_value;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Transactions_ETradeAggressiveSide_H_ */
