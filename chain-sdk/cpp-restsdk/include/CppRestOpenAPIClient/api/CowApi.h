/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CowApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_CowApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_CowApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Cow_OrderDTO.h"
#include "CppRestOpenAPIClient/model/Cow_SettlementDTO.h"
#include "CppRestOpenAPIClient/model/Cow_TokenDTO.h"
#include "CppRestOpenAPIClient/model/Cow_TradeDTO.h"
#include "CppRestOpenAPIClient/model/Cow_UserDTO.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CowApi 
{
public:

    explicit CowApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~CowApi();

    /// <summary>
    /// Orders (historical)
    /// </summary>
    /// <remarks>
    /// Gets orders.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">User&#39;s address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Cow_OrderDTO>>> cow_GetOrders__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// Settlements (historical)
    /// </summary>
    /// <remarks>
    /// Gets settlements.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Transaction hash. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Cow_SettlementDTO>>> cow_GetSettlements__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// Tokens (historical)
    /// </summary>
    /// <remarks>
    /// Gets tokens.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Token&#39;s address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="address">Token&#39;s address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">Token name fetched by ERC20 contract call. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="symbol">Token symbol fetched by contract call. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Cow_TokenDTO>>> cow_GetTokens__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> address,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> symbol
    ) const;
    /// <summary>
    /// Trades (historical)
    /// </summary>
    /// <remarks>
    /// Gets trades.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Identifier, format: (order id)|(transaction hash)|(event index). (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sellToken">Address of token that is sold. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="buyToken">Address of token that is bought. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Cow_TradeDTO>>> cow_GetTrades__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> sellToken,
        boost::optional<utility::string_t> buyToken
    ) const;
    /// <summary>
    /// Users (historical)
    /// </summary>
    /// <remarks>
    /// Gets users.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">User&#39;s address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="address">User&#39;s address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Cow_UserDTO>>> cow_GetUsers__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> address
    ) const;
    /// <summary>
    /// Orders (current)
    /// </summary>
    /// <remarks>
    /// Gets orders.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Cow_OrderDTO>>> cow_Orders__current(
    ) const;
    /// <summary>
    /// Settlements (current)
    /// </summary>
    /// <remarks>
    /// Gets settlements.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Cow_SettlementDTO>>> cow_Settlements__current(
    ) const;
    /// <summary>
    /// Tokens (current)
    /// </summary>
    /// <remarks>
    /// Gets tokens.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Cow_TokenDTO>>> cow_Tokens__current(
    ) const;
    /// <summary>
    /// Trades (current)
    /// </summary>
    /// <remarks>
    /// Gets trades.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Cow_TradeDTO>>> cow_Trades__current(
    ) const;
    /// <summary>
    /// Users (current)
    /// </summary>
    /// <remarks>
    /// Gets users.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Cow_UserDTO>>> cow_Users__current(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_CowApi_H_ */

