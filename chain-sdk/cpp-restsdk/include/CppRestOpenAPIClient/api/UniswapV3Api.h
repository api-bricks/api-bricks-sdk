/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UniswapV3Api.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_UniswapV3Api_H_
#define ORG_OPENAPITOOLS_CLIENT_API_UniswapV3Api_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/UniswapV3_BundleV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_BurnV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_FactoryV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_MintV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_PoolDayDataV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_PoolHourDataV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_PoolV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_PositionSnapshotV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_PositionV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_SwapV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_TickDayDataV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_TickV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_TokenHourDataV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_TokenV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_TokenV3DayDataDTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_TransactionV3DTO.h"
#include "CppRestOpenAPIClient/model/UniswapV3_UniswapDayDataV3DTO.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  UniswapV3Api 
{
public:

    explicit UniswapV3Api( std::shared_ptr<const ApiClient> apiClient );

    virtual ~UniswapV3Api();

    /// <summary>
    /// BundleV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets bundlev3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_BundleV3DTO>>> uniswapV3_GetBundleV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// Bundles (current)
    /// </summary>
    /// <remarks>
    /// Gets bundles.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_BundleV3DTO>>> uniswapV3_GetBundles__current(
    ) const;
    /// <summary>
    /// BurnV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets burnv3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Transaction hash + &#39;#&#39; + index in mints Transaction array. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool">Pool position is within. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token0">Reference to token0 as stored in pool contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token1">Reference to token1 as stored in pool contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_BurnV3DTO>>> uniswapV3_GetBurnV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool,
        boost::optional<utility::string_t> token0,
        boost::optional<utility::string_t> token1
    ) const;
    /// <summary>
    /// Burns (current)
    /// </summary>
    /// <remarks>
    /// Gets burns.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_BurnV3DTO>>> uniswapV3_GetBurns__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// DayData (current)
    /// </summary>
    /// <remarks>
    /// Gets uniswapv3 day data.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_UniswapDayDataV3DTO>>> uniswapV3_GetDayData__current(
    ) const;
    /// <summary>
    /// FactoryV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets factoryv3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Factory address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_FactoryV3DTO>>> uniswapV3_GetFactoryV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// Factory (current)
    /// </summary>
    /// <remarks>
    /// Gets factory.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_FactoryV3DTO>>> uniswapV3_GetFactory__current(
    ) const;
    /// <summary>
    /// MintV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets mintv3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Transaction hash + &#39;#&#39; + index in mints Transaction array. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool">Pool address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token0">Reference to token0 as stored in pool contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token1">Reference to token1 as stored in pool contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_MintV3DTO>>> uniswapV3_GetMintV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool,
        boost::optional<utility::string_t> token0,
        boost::optional<utility::string_t> token1
    ) const;
    /// <summary>
    /// Mints (current)
    /// </summary>
    /// <remarks>
    /// Gets mints.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_MintV3DTO>>> uniswapV3_GetMints__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// PoolDayDataV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets pooldaydatav3s.
    /// </remarks>
    /// <param name="startBlock"> (optional, default to 0L)</param>
    /// <param name="endBlock"> (optional, default to 0L)</param>
    /// <param name="startDate"> (optional, default to utility::datetime())</param>
    /// <param name="endDate"> (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PoolDayDataV3DTO>>> uniswapV3_GetPoolDayDataV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// PoolHourDataV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets poolhourdatav3s.
    /// </remarks>
    /// <param name="startBlock"> (optional, default to 0L)</param>
    /// <param name="endBlock"> (optional, default to 0L)</param>
    /// <param name="startDate"> (optional, default to utility::datetime())</param>
    /// <param name="endDate"> (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PoolHourDataV3DTO>>> uniswapV3_GetPoolHourDataV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// PoolV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets poolv3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Pool address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token0">Reference to token0 as stored in pool contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token1">Reference to token1 as stored in pool contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PoolV3DTO>>> uniswapV3_GetPoolV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> token0,
        boost::optional<utility::string_t> token1
    ) const;
    /// <summary>
    /// PoolsDayData (current)
    /// </summary>
    /// <remarks>
    /// Gets pools day data.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PoolDayDataV3DTO>>> uniswapV3_GetPoolsDayData__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// PoolsHourData (current)
    /// </summary>
    /// <remarks>
    /// Gets pools hour data.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PoolHourDataV3DTO>>> uniswapV3_GetPoolsHourData__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// Pools (current) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets pools.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PoolV3DTO>>> uniswapV3_GetPools__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// PositionSnapshotV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets positionsnapshotv3s.
    /// </remarks>
    /// <param name="startBlock"> (optional, default to 0L)</param>
    /// <param name="endBlock"> (optional, default to 0L)</param>
    /// <param name="startDate"> (optional, default to utility::datetime())</param>
    /// <param name="endDate"> (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PositionSnapshotV3DTO>>> uniswapV3_GetPositionSnapshotV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// PositionV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets positionv3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">NFT token identifier. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool">Pool position is within. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token0">Reference to token0 as stored in pair contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token1">Reference to token1 as stored in pair contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PositionV3DTO>>> uniswapV3_GetPositionV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool,
        boost::optional<utility::string_t> token0,
        boost::optional<utility::string_t> token1
    ) const;
    /// <summary>
    /// PositionsSnapshots (current)
    /// </summary>
    /// <remarks>
    /// Gets positions snapshots.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PositionSnapshotV3DTO>>> uniswapV3_GetPositionsSnapshots__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// Positions (current)
    /// </summary>
    /// <remarks>
    /// Gets positions.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_PositionV3DTO>>> uniswapV3_GetPositions__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// SwapV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets swapv3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Identifier, format: transaction hash + \&quot;#\&quot; + index in swaps Transaction array. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool">Pool swap occured within. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token0">Reference to token0 as stored in pair contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="token1">Reference to token1 as stored in pair contract. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_SwapV3DTO>>> uniswapV3_GetSwapV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool,
        boost::optional<utility::string_t> token0,
        boost::optional<utility::string_t> token1
    ) const;
    /// <summary>
    /// Swaps (current) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets swaps.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_SwapV3DTO>>> uniswapV3_GetSwaps__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// TickDayDataV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets tickdaydatav3s.
    /// </remarks>
    /// <param name="startBlock"> (optional, default to 0L)</param>
    /// <param name="endBlock"> (optional, default to 0L)</param>
    /// <param name="startDate"> (optional, default to utility::datetime())</param>
    /// <param name="endDate"> (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TickDayDataV3DTO>>> uniswapV3_GetTickDayDataV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// TickV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets tickv3s.
    /// </remarks>
    /// <param name="startBlock"> (optional, default to 0L)</param>
    /// <param name="endBlock"> (optional, default to 0L)</param>
    /// <param name="startDate"> (optional, default to utility::datetime())</param>
    /// <param name="endDate"> (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TickV3DTO>>> uniswapV3_GetTickV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// TicksDayData (current)
    /// </summary>
    /// <remarks>
    /// Gets ticks day data.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TickDayDataV3DTO>>> uniswapV3_GetTicksDayData__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// Ticks (current)
    /// </summary>
    /// <remarks>
    /// Gets ticks.
    /// </remarks>
    /// <param name="filterPoolId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TickV3DTO>>> uniswapV3_GetTicks__current(
        boost::optional<utility::string_t> filterPoolId
    ) const;
    /// <summary>
    /// TokenHourDataV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets tokenhourdatav3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Token address concatendated with date. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TokenHourDataV3DTO>>> uniswapV3_GetTokenHourDataV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// TokenV3DayDatas (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets tokenv3daydatas.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Token address concatendated with date. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TokenV3DayDataDTO>>> uniswapV3_GetTokenV3DayDatas__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// TokenV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets tokenv3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Token address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="symbol">Token symbol. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">Token name. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TokenV3DTO>>> uniswapV3_GetTokenV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> name
    ) const;
    /// <summary>
    /// TokensDayData (current)
    /// </summary>
    /// <remarks>
    /// Gets tokens day data.
    /// </remarks>
    /// <param name="filterTokenId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TokenV3DayDataDTO>>> uniswapV3_GetTokensDayData__current(
        boost::optional<utility::string_t> filterTokenId
    ) const;
    /// <summary>
    /// TokensHourData (current)
    /// </summary>
    /// <remarks>
    /// Gets tokens hour data.
    /// </remarks>
    /// <param name="filterTokenId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TokenHourDataV3DTO>>> uniswapV3_GetTokensHourData__current(
        boost::optional<utility::string_t> filterTokenId
    ) const;
    /// <summary>
    /// Tokens (current) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets tokens.
    /// </remarks>
    /// <param name="filterTokenId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TokenV3DTO>>> uniswapV3_GetTokens__current(
        boost::optional<utility::string_t> filterTokenId
    ) const;
    /// <summary>
    /// TransactionV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets transactionv3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Transaction hash. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_TransactionV3DTO>>> uniswapV3_GetTransactionV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// UniswapDayDataV3s (historical) ðŸ”¥
    /// </summary>
    /// <remarks>
    /// Gets uniswapdaydatav3s.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Timestamp rounded to current day by dividing by 86400. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<UniswapV3_UniswapDayDataV3DTO>>> uniswapV3_GetUniswapDayDataV3s__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_UniswapV3Api_H_ */

