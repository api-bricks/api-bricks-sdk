/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CurveApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_CurveApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_CurveApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Curve_AccountDTO.h"
#include "CppRestOpenAPIClient/model/Curve_AddLiquidityEventDTO.h"
#include "CppRestOpenAPIClient/model/Curve_AdminFeeChangeLogDTO.h"
#include "CppRestOpenAPIClient/model/Curve_AmplificationCoeffChangeLogDTO.h"
#include "CppRestOpenAPIClient/model/Curve_CoinDTO.h"
#include "CppRestOpenAPIClient/model/Curve_ContractDTO.h"
#include "CppRestOpenAPIClient/model/Curve_ContractVersionDTO.h"
#include "CppRestOpenAPIClient/model/Curve_DailyVolumeDTO.h"
#include "CppRestOpenAPIClient/model/Curve_ExchangeDTO.h"
#include "CppRestOpenAPIClient/model/Curve_FeeChangeLogDTO.h"
#include "CppRestOpenAPIClient/model/Curve_GaugeDTO.h"
#include "CppRestOpenAPIClient/model/Curve_GaugeDepositDTO.h"
#include "CppRestOpenAPIClient/model/Curve_GaugeLiquidityDTO.h"
#include "CppRestOpenAPIClient/model/Curve_GaugeTotalWeightDTO.h"
#include "CppRestOpenAPIClient/model/Curve_GaugeTypeDTO.h"
#include "CppRestOpenAPIClient/model/Curve_GaugeTypeWeightDTO.h"
#include "CppRestOpenAPIClient/model/Curve_GaugeWeightDTO.h"
#include "CppRestOpenAPIClient/model/Curve_GaugeWeightVoteDTO.h"
#include "CppRestOpenAPIClient/model/Curve_GaugeWithdrawDTO.h"
#include "CppRestOpenAPIClient/model/Curve_HourlyVolumeDTO.h"
#include "CppRestOpenAPIClient/model/Curve_LpTokenDTO.h"
#include "CppRestOpenAPIClient/model/Curve_PoolDTO.h"
#include "CppRestOpenAPIClient/model/Curve_ProposalDTO.h"
#include "CppRestOpenAPIClient/model/Curve_ProposalVoteDTO.h"
#include "CppRestOpenAPIClient/model/Curve_RemoveLiquidityEventDTO.h"
#include "CppRestOpenAPIClient/model/Curve_RemoveLiquidityOneEventDTO.h"
#include "CppRestOpenAPIClient/model/Curve_SystemStateDTO.h"
#include "CppRestOpenAPIClient/model/Curve_TokenDTO.h"
#include "CppRestOpenAPIClient/model/Curve_TransferOwnershipEventDTO.h"
#include "CppRestOpenAPIClient/model/Curve_UnderlyingCoinDTO.h"
#include "CppRestOpenAPIClient/model/Curve_VotingAppDTO.h"
#include "CppRestOpenAPIClient/model/Curve_WeeklyVolumeDTO.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CurveApi 
{
public:

    explicit CurveApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~CurveApi();

    /// <summary>
    /// Accounts (current)
    /// </summary>
    /// <remarks>
    /// Gets accounts.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_AccountDTO>>> curve_Accounts__current(
    ) const;
    /// <summary>
    /// AddLiquidityEvents (current)
    /// </summary>
    /// <remarks>
    /// Gets addLiquidityEvents.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_AddLiquidityEventDTO>>> curve_AddLiquidityEvents__current(
    ) const;
    /// <summary>
    /// AdminFeeChangeLogs (current)
    /// </summary>
    /// <remarks>
    /// Gets adminFeeChangeLogs.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_AdminFeeChangeLogDTO>>> curve_AdminFeeChangeLogs__current(
    ) const;
    /// <summary>
    /// AmplificationCoeffChangeLogs (current)
    /// </summary>
    /// <remarks>
    /// Gets amplificationCoeffChangeLogs.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_AmplificationCoeffChangeLogDTO>>> curve_AmplificationCoeffChangeLogs__current(
    ) const;
    /// <summary>
    /// Coins (current)
    /// </summary>
    /// <remarks>
    /// Gets coins.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_CoinDTO>>> curve_Coins__current(
    ) const;
    /// <summary>
    /// ContractVersions (current)
    /// </summary>
    /// <remarks>
    /// Gets contractVersions.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_ContractVersionDTO>>> curve_ContractVersions__current(
    ) const;
    /// <summary>
    /// Contracts (current)
    /// </summary>
    /// <remarks>
    /// Gets contracts.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_ContractDTO>>> curve_Contracts__current(
    ) const;
    /// <summary>
    /// DailyVolumes (current)
    /// </summary>
    /// <remarks>
    /// Gets dailyVolumes.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_DailyVolumeDTO>>> curve_DailyVolumes__current(
    ) const;
    /// <summary>
    /// Exchanges (current)
    /// </summary>
    /// <remarks>
    /// Gets exchanges.
    /// </remarks>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_ExchangeDTO>>> curve_Exchanges__current(
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// FeeChangeLogs (current)
    /// </summary>
    /// <remarks>
    /// Gets feeChangeLogs.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_FeeChangeLogDTO>>> curve_FeeChangeLogs__current(
    ) const;
    /// <summary>
    /// GaugeDeposits (current)
    /// </summary>
    /// <remarks>
    /// Gets gaugeDeposits.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeDepositDTO>>> curve_GaugeDeposits__current(
    ) const;
    /// <summary>
    /// GaugeLiquidities (current)
    /// </summary>
    /// <remarks>
    /// Gets gaugeLiquidities.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeLiquidityDTO>>> curve_GaugeLiquidities__current(
    ) const;
    /// <summary>
    /// GaugeTotalWeights (current)
    /// </summary>
    /// <remarks>
    /// Gets gaugeTotalWeights.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeTotalWeightDTO>>> curve_GaugeTotalWeights__current(
    ) const;
    /// <summary>
    /// GaugeTypeWeights (current)
    /// </summary>
    /// <remarks>
    /// Gets gaugeTypeWeights.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeTypeWeightDTO>>> curve_GaugeTypeWeights__current(
    ) const;
    /// <summary>
    /// GaugeTypes (current)
    /// </summary>
    /// <remarks>
    /// Gets gaugeTypes.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeTypeDTO>>> curve_GaugeTypes__current(
    ) const;
    /// <summary>
    /// GaugeWeightVotes (current)
    /// </summary>
    /// <remarks>
    /// Gets gaugeWeightVotes.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeWeightVoteDTO>>> curve_GaugeWeightVotes__current(
    ) const;
    /// <summary>
    /// GaugeWeights (current)
    /// </summary>
    /// <remarks>
    /// Gets gaugeWeights.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeWeightDTO>>> curve_GaugeWeights__current(
    ) const;
    /// <summary>
    /// GaugeWithdraws (current)
    /// </summary>
    /// <remarks>
    /// Gets gaugeWithdraws.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeWithdrawDTO>>> curve_GaugeWithdraws__current(
    ) const;
    /// <summary>
    /// Gauges (current)
    /// </summary>
    /// <remarks>
    /// Gets gauges.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeDTO>>> curve_Gauges__current(
    ) const;
    /// <summary>
    /// Accounts (historical)
    /// </summary>
    /// <remarks>
    /// Gets accounts.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="address"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_AccountDTO>>> curve_GetAccounts__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> address
    ) const;
    /// <summary>
    /// AddLiquidityEvents (historical)
    /// </summary>
    /// <remarks>
    /// Gets addLiquidityEvents.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_AddLiquidityEventDTO>>> curve_GetAddLiquidityEvents__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// AdminFeeChangeLogs (historical)
    /// </summary>
    /// <remarks>
    /// Gets adminFeeChangeLogs.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_AdminFeeChangeLogDTO>>> curve_GetAdminFeeChangeLogs__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// AmplificationCoeffChangeLogs (historical)
    /// </summary>
    /// <remarks>
    /// Gets amplificationCoeffChangeLogs.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_AmplificationCoeffChangeLogDTO>>> curve_GetAmplificationCoeffChangeLogs__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// Coins (historical)
    /// </summary>
    /// <remarks>
    /// Gets coins.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Identifier, format: (pool_id)-(coin_index). (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_CoinDTO>>> curve_GetCoins__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// ContractVersions (historical)
    /// </summary>
    /// <remarks>
    /// Gets contractVersions.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="address"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_ContractVersionDTO>>> curve_GetContractVersions__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> address
    ) const;
    /// <summary>
    /// Contracts (historical)
    /// </summary>
    /// <remarks>
    /// Gets contracts.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_ContractDTO>>> curve_GetContracts__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// DailyVolumes (historical)
    /// </summary>
    /// <remarks>
    /// Gets dailyVolumes.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_DailyVolumeDTO>>> curve_GetDailyVolumes__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// Exchanges (historical)
    /// </summary>
    /// <remarks>
    /// Gets exchanges.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_ExchangeDTO>>> curve_GetExchanges__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// FeeChangeLogs (historical)
    /// </summary>
    /// <remarks>
    /// Gets feeChangeLogs.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_FeeChangeLogDTO>>> curve_GetFeeChangeLogs__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// GaugeDeposits (historical)
    /// </summary>
    /// <remarks>
    /// Gets gaugeDeposits.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeDepositDTO>>> curve_GetGaugeDeposits__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// GaugeLiquidities (historical)
    /// </summary>
    /// <remarks>
    /// Gets gaugeLiquidities.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeLiquidityDTO>>> curve_GetGaugeLiquidities__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> user
    ) const;
    /// <summary>
    /// GaugeTotalWeights (historical)
    /// </summary>
    /// <remarks>
    /// Gets gaugeTotalWeights.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeTotalWeightDTO>>> curve_GetGaugeTotalWeights__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// GaugeTypeWeights (historical)
    /// </summary>
    /// <remarks>
    /// Gets gaugeTypeWeights.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeTypeWeightDTO>>> curve_GetGaugeTypeWeights__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// GaugeTypes (historical)
    /// </summary>
    /// <remarks>
    /// Gets gaugeTypes.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeTypeDTO>>> curve_GetGaugeTypes__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> name
    ) const;
    /// <summary>
    /// GaugeWeightVotes (historical)
    /// </summary>
    /// <remarks>
    /// Gets gaugeWeightVotes.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeWeightVoteDTO>>> curve_GetGaugeWeightVotes__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> user
    ) const;
    /// <summary>
    /// GaugeWeights (historical)
    /// </summary>
    /// <remarks>
    /// Gets gaugeWeights.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeWeightDTO>>> curve_GetGaugeWeights__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// GaugeWithdraws (historical)
    /// </summary>
    /// <remarks>
    /// Gets gaugeWithdraws.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeWithdrawDTO>>> curve_GetGaugeWithdraws__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// Gauges (historical)
    /// </summary>
    /// <remarks>
    /// Gets gauges.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="address"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_GaugeDTO>>> curve_GetGauges__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> address,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// HourlyVolumes (historical)
    /// </summary>
    /// <remarks>
    /// Gets hourlyVolumes.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_HourlyVolumeDTO>>> curve_GetHourlyVolumes__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// LpTokens (historical)
    /// </summary>
    /// <remarks>
    /// Gets lpTokens.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="address"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="symbol"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_LpTokenDTO>>> curve_GetLpTokens__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> address,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> symbol,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// Pools (historical)
    /// </summary>
    /// <remarks>
    /// Gets pools.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Pool address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">Pool&#39;s human-readable name. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_PoolDTO>>> curve_GetPools__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> name
    ) const;
    /// <summary>
    /// ProposalVotes (historical)
    /// </summary>
    /// <remarks>
    /// Gets proposalVotes.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_ProposalVoteDTO>>> curve_GetProposalVotes__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// Proposals (historical)
    /// </summary>
    /// <remarks>
    /// Gets proposals.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_ProposalDTO>>> curve_GetProposals__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// RemoveLiquidityEvents (historical)
    /// </summary>
    /// <remarks>
    /// Gets removeLiquidityEvents.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_RemoveLiquidityEventDTO>>> curve_GetRemoveLiquidityEvents__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// RemoveLiquidityOneEvents (historical)
    /// </summary>
    /// <remarks>
    /// Gets removeLiquidityOneEvents.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_RemoveLiquidityOneEventDTO>>> curve_GetRemoveLiquidityOneEvents__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// SystemStates (historical)
    /// </summary>
    /// <remarks>
    /// Gets systemStates.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Singleton ID, equals to &#39;current&#39;. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_SystemStateDTO>>> curve_GetSystemStates__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// Tokens (historical)
    /// </summary>
    /// <remarks>
    /// Gets tokens.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="address"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="symbol"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_TokenDTO>>> curve_GetTokens__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> address,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> symbol
    ) const;
    /// <summary>
    /// TransferOwnershipEvents (historical)
    /// </summary>
    /// <remarks>
    /// Gets transferOwnershipEvents.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_TransferOwnershipEventDTO>>> curve_GetTransferOwnershipEvents__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// UnderlyingCoins (historical)
    /// </summary>
    /// <remarks>
    /// Gets underlyingCoins.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">Equals to: (pool_id)-(coin_index). (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_UnderlyingCoinDTO>>> curve_GetUnderlyingCoins__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// VotingApps (historical)
    /// </summary>
    /// <remarks>
    /// Gets votingApps.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id">App address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="address"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_VotingAppDTO>>> curve_GetVotingApps__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> address
    ) const;
    /// <summary>
    /// WeeklyVolumes (historical)
    /// </summary>
    /// <remarks>
    /// Gets weeklyVolumes.
    /// </remarks>
    /// <param name="startBlock">The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to 0L)</param>
    /// <param name="endBlock">The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to 0L)</param>
    /// <param name="startDate">The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to utility::datetime())</param>
    /// <param name="endDate">The end date of timeframe. (optional, default to utility::datetime())</param>
    /// <param name="id"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="pool"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_WeeklyVolumeDTO>>> curve_GetWeeklyVolumes__historical(
        boost::optional<int64_t> startBlock,
        boost::optional<int64_t> endBlock,
        boost::optional<utility::datetime> startDate,
        boost::optional<utility::datetime> endDate,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> pool
    ) const;
    /// <summary>
    /// HourlyVolumes (current)
    /// </summary>
    /// <remarks>
    /// Gets hourlyVolumes.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_HourlyVolumeDTO>>> curve_HourlyVolumes__current(
    ) const;
    /// <summary>
    /// LpTokens (current)
    /// </summary>
    /// <remarks>
    /// Gets lpTokens.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_LpTokenDTO>>> curve_LpTokens__current(
    ) const;
    /// <summary>
    /// Pools (current)
    /// </summary>
    /// <remarks>
    /// Gets pools.
    /// </remarks>
    /// <param name="id">Pool address. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<std::shared_ptr<Curve_PoolDTO>>> curve_Pools__current(
        boost::optional<utility::string_t> id
    ) const;
    /// <summary>
    /// ProposalVotes (current)
    /// </summary>
    /// <remarks>
    /// Gets proposalVotes.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_ProposalVoteDTO>>> curve_ProposalVotes__current(
    ) const;
    /// <summary>
    /// Proposals (current)
    /// </summary>
    /// <remarks>
    /// Gets proposals.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_ProposalDTO>>> curve_Proposals__current(
    ) const;
    /// <summary>
    /// RemoveLiquidityEvents (current)
    /// </summary>
    /// <remarks>
    /// Gets removeLiquidityEvents.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_RemoveLiquidityEventDTO>>> curve_RemoveLiquidityEvents__current(
    ) const;
    /// <summary>
    /// RemoveLiquidityOneEvents (current)
    /// </summary>
    /// <remarks>
    /// Gets removeLiquidityOneEvents.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_RemoveLiquidityOneEventDTO>>> curve_RemoveLiquidityOneEvents__current(
    ) const;
    /// <summary>
    /// SystemStates (current)
    /// </summary>
    /// <remarks>
    /// Gets systemStates.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_SystemStateDTO>>> curve_SystemStates__current(
    ) const;
    /// <summary>
    /// Tokens (current)
    /// </summary>
    /// <remarks>
    /// Gets tokens.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_TokenDTO>>> curve_Tokens__current(
    ) const;
    /// <summary>
    /// TransferOwnershipEvents (current)
    /// </summary>
    /// <remarks>
    /// Gets transferOwnershipEvents.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_TransferOwnershipEventDTO>>> curve_TransferOwnershipEvents__current(
    ) const;
    /// <summary>
    /// UnderlyingCoins (current)
    /// </summary>
    /// <remarks>
    /// Gets underlyingCoins.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_UnderlyingCoinDTO>>> curve_UnderlyingCoins__current(
    ) const;
    /// <summary>
    /// VotingApps (current)
    /// </summary>
    /// <remarks>
    /// Gets votingApps.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_VotingAppDTO>>> curve_VotingApps__current(
    ) const;
    /// <summary>
    /// WeeklyVolumes (current)
    /// </summary>
    /// <remarks>
    /// Gets weeklyVolumes.
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<Curve_WeeklyVolumeDTO>>> curve_WeeklyVolumes__current(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_CurveApi_H_ */

