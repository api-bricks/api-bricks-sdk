/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Curve_PoolDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Curve_PoolDTO::Curve_PoolDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Is_meta = false;
    m_Is_metaIsSet = false;
    m_Registry_address = utility::conversions::to_string_t("");
    m_Registry_addressIsSet = false;
    m_Swap_address = utility::conversions::to_string_t("");
    m_Swap_addressIsSet = false;
    m_Lp_token = utility::conversions::to_string_t("");
    m_Lp_tokenIsSet = false;
    m_Coin_count = utility::conversions::to_string_t("");
    m_Coin_countIsSet = false;
    m_Underlying_count = utility::conversions::to_string_t("");
    m_Underlying_countIsSet = false;
    m_a = utility::conversions::to_string_t("");
    m_aIsSet = false;
    m_Fee = utility::conversions::to_string_t("");
    m_FeeIsSet = false;
    m_Admin_fee = utility::conversions::to_string_t("");
    m_Admin_feeIsSet = false;
    m_Owner = utility::conversions::to_string_t("");
    m_OwnerIsSet = false;
    m_Virtual_price = utility::conversions::to_string_t("");
    m_Virtual_priceIsSet = false;
    m_Locked = utility::conversions::to_string_t("");
    m_LockedIsSet = false;
    m_Added_at = utility::datetime();
    m_Added_atIsSet = false;
    m_Added_at_block = utility::conversions::to_string_t("");
    m_Added_at_blockIsSet = false;
    m_Added_at_transaction = utility::conversions::to_string_t("");
    m_Added_at_transactionIsSet = false;
    m_Removed_at = utility::conversions::to_string_t("");
    m_Removed_atIsSet = false;
    m_Removed_at_block = utility::conversions::to_string_t("");
    m_Removed_at_blockIsSet = false;
    m_Removed_at_transaction = utility::conversions::to_string_t("");
    m_Removed_at_transactionIsSet = false;
    m_Exchange_count = utility::conversions::to_string_t("");
    m_Exchange_countIsSet = false;
    m_Gauge_count = utility::conversions::to_string_t("");
    m_Gauge_countIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
    m_Evaluated_ask = 0.0;
    m_Evaluated_askIsSet = false;
}

Curve_PoolDTO::~Curve_PoolDTO()
{
}

void Curve_PoolDTO::validate()
{
    // TODO: implement validation
}

web::json::value Curve_PoolDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Is_metaIsSet)
    {
        val[utility::conversions::to_string_t(U("is_meta"))] = ModelBase::toJson(m_Is_meta);
    }
    if(m_Registry_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("registry_address"))] = ModelBase::toJson(m_Registry_address);
    }
    if(m_Swap_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("swap_address"))] = ModelBase::toJson(m_Swap_address);
    }
    if(m_Lp_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("lp_token"))] = ModelBase::toJson(m_Lp_token);
    }
    if(m_Coin_countIsSet)
    {
        val[utility::conversions::to_string_t(U("coin_count"))] = ModelBase::toJson(m_Coin_count);
    }
    if(m_Underlying_countIsSet)
    {
        val[utility::conversions::to_string_t(U("underlying_count"))] = ModelBase::toJson(m_Underlying_count);
    }
    if(m_aIsSet)
    {
        val[utility::conversions::to_string_t(U("a"))] = ModelBase::toJson(m_a);
    }
    if(m_FeeIsSet)
    {
        val[utility::conversions::to_string_t(U("fee"))] = ModelBase::toJson(m_Fee);
    }
    if(m_Admin_feeIsSet)
    {
        val[utility::conversions::to_string_t(U("admin_fee"))] = ModelBase::toJson(m_Admin_fee);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t(U("owner"))] = ModelBase::toJson(m_Owner);
    }
    if(m_Virtual_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("virtual_price"))] = ModelBase::toJson(m_Virtual_price);
    }
    if(m_LockedIsSet)
    {
        val[utility::conversions::to_string_t(U("locked"))] = ModelBase::toJson(m_Locked);
    }
    if(m_Added_atIsSet)
    {
        val[utility::conversions::to_string_t(U("added_at"))] = ModelBase::toJson(m_Added_at);
    }
    if(m_Added_at_blockIsSet)
    {
        val[utility::conversions::to_string_t(U("added_at_block"))] = ModelBase::toJson(m_Added_at_block);
    }
    if(m_Added_at_transactionIsSet)
    {
        val[utility::conversions::to_string_t(U("added_at_transaction"))] = ModelBase::toJson(m_Added_at_transaction);
    }
    if(m_Removed_atIsSet)
    {
        val[utility::conversions::to_string_t(U("removed_at"))] = ModelBase::toJson(m_Removed_at);
    }
    if(m_Removed_at_blockIsSet)
    {
        val[utility::conversions::to_string_t(U("removed_at_block"))] = ModelBase::toJson(m_Removed_at_block);
    }
    if(m_Removed_at_transactionIsSet)
    {
        val[utility::conversions::to_string_t(U("removed_at_transaction"))] = ModelBase::toJson(m_Removed_at_transaction);
    }
    if(m_Exchange_countIsSet)
    {
        val[utility::conversions::to_string_t(U("exchange_count"))] = ModelBase::toJson(m_Exchange_count);
    }
    if(m_Gauge_countIsSet)
    {
        val[utility::conversions::to_string_t(U("gauge_count"))] = ModelBase::toJson(m_Gauge_count);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }
    if(m_Evaluated_askIsSet)
    {
        val[utility::conversions::to_string_t(U("evaluated_ask"))] = ModelBase::toJson(m_Evaluated_ask);
    }

    return val;
}

bool Curve_PoolDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_meta"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_meta")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsMeta;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsMeta);
            setIsMeta(refVal_setIsMeta);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("registry_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("registry_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRegistryAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegistryAddress);
            setRegistryAddress(refVal_setRegistryAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("swap_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("swap_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSwapAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSwapAddress);
            setSwapAddress(refVal_setSwapAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lp_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lp_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLpToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLpToken);
            setLpToken(refVal_setLpToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("coin_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("coin_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCoinCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoinCount);
            setCoinCount(refVal_setCoinCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("underlying_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("underlying_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUnderlyingCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnderlyingCount);
            setUnderlyingCount(refVal_setUnderlyingCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("a"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("a")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setA;
            ok &= ModelBase::fromJson(fieldValue, refVal_setA);
            setA(refVal_setA);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fee"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fee")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFee;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFee);
            setFee(refVal_setFee);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("admin_fee"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("admin_fee")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdminFee;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdminFee);
            setAdminFee(refVal_setAdminFee);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("owner"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("owner")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwner);
            setOwner(refVal_setOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("virtual_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("virtual_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVirtualPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVirtualPrice);
            setVirtualPrice(refVal_setVirtualPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("locked"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("locked")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocked);
            setLocked(refVal_setLocked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("added_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("added_at")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setAddedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddedAt);
            setAddedAt(refVal_setAddedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("added_at_block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("added_at_block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddedAtBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddedAtBlock);
            setAddedAtBlock(refVal_setAddedAtBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("added_at_transaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("added_at_transaction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddedAtTransaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddedAtTransaction);
            setAddedAtTransaction(refVal_setAddedAtTransaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("removed_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("removed_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRemovedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRemovedAt);
            setRemovedAt(refVal_setRemovedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("removed_at_block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("removed_at_block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRemovedAtBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRemovedAtBlock);
            setRemovedAtBlock(refVal_setRemovedAtBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("removed_at_transaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("removed_at_transaction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRemovedAtTransaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRemovedAtTransaction);
            setRemovedAtTransaction(refVal_setRemovedAtTransaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchange_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchange_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeCount);
            setExchangeCount(refVal_setExchangeCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gauge_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gauge_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGaugeCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGaugeCount);
            setGaugeCount(refVal_setGaugeCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("evaluated_ask"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("evaluated_ask")));
        if(!fieldValue.is_null())
        {
            double refVal_setEvaluatedAsk;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatedAsk);
            setEvaluatedAsk(refVal_setEvaluatedAsk);
        }
    }
    return ok;
}

void Curve_PoolDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Is_metaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_meta")), m_Is_meta));
    }
    if(m_Registry_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("registry_address")), m_Registry_address));
    }
    if(m_Swap_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("swap_address")), m_Swap_address));
    }
    if(m_Lp_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lp_token")), m_Lp_token));
    }
    if(m_Coin_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("coin_count")), m_Coin_count));
    }
    if(m_Underlying_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("underlying_count")), m_Underlying_count));
    }
    if(m_aIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("a")), m_a));
    }
    if(m_FeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fee")), m_Fee));
    }
    if(m_Admin_feeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("admin_fee")), m_Admin_fee));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("owner")), m_Owner));
    }
    if(m_Virtual_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("virtual_price")), m_Virtual_price));
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("locked")), m_Locked));
    }
    if(m_Added_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("added_at")), m_Added_at));
    }
    if(m_Added_at_blockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("added_at_block")), m_Added_at_block));
    }
    if(m_Added_at_transactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("added_at_transaction")), m_Added_at_transaction));
    }
    if(m_Removed_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("removed_at")), m_Removed_at));
    }
    if(m_Removed_at_blockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("removed_at_block")), m_Removed_at_block));
    }
    if(m_Removed_at_transactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("removed_at_transaction")), m_Removed_at_transaction));
    }
    if(m_Exchange_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchange_count")), m_Exchange_count));
    }
    if(m_Gauge_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gauge_count")), m_Gauge_count));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
    if(m_Evaluated_askIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("evaluated_ask")), m_Evaluated_ask));
    }
}

bool Curve_PoolDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_meta"))))
    {
        bool refVal_setIsMeta;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_meta"))), refVal_setIsMeta );
        setIsMeta(refVal_setIsMeta);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("registry_address"))))
    {
        utility::string_t refVal_setRegistryAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("registry_address"))), refVal_setRegistryAddress );
        setRegistryAddress(refVal_setRegistryAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("swap_address"))))
    {
        utility::string_t refVal_setSwapAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("swap_address"))), refVal_setSwapAddress );
        setSwapAddress(refVal_setSwapAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lp_token"))))
    {
        utility::string_t refVal_setLpToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lp_token"))), refVal_setLpToken );
        setLpToken(refVal_setLpToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("coin_count"))))
    {
        utility::string_t refVal_setCoinCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("coin_count"))), refVal_setCoinCount );
        setCoinCount(refVal_setCoinCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("underlying_count"))))
    {
        utility::string_t refVal_setUnderlyingCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("underlying_count"))), refVal_setUnderlyingCount );
        setUnderlyingCount(refVal_setUnderlyingCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("a"))))
    {
        utility::string_t refVal_setA;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("a"))), refVal_setA );
        setA(refVal_setA);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fee"))))
    {
        utility::string_t refVal_setFee;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fee"))), refVal_setFee );
        setFee(refVal_setFee);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("admin_fee"))))
    {
        utility::string_t refVal_setAdminFee;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("admin_fee"))), refVal_setAdminFee );
        setAdminFee(refVal_setAdminFee);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("owner"))))
    {
        utility::string_t refVal_setOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("owner"))), refVal_setOwner );
        setOwner(refVal_setOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("virtual_price"))))
    {
        utility::string_t refVal_setVirtualPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("virtual_price"))), refVal_setVirtualPrice );
        setVirtualPrice(refVal_setVirtualPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("locked"))))
    {
        utility::string_t refVal_setLocked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("locked"))), refVal_setLocked );
        setLocked(refVal_setLocked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("added_at"))))
    {
        utility::datetime refVal_setAddedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("added_at"))), refVal_setAddedAt );
        setAddedAt(refVal_setAddedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("added_at_block"))))
    {
        utility::string_t refVal_setAddedAtBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("added_at_block"))), refVal_setAddedAtBlock );
        setAddedAtBlock(refVal_setAddedAtBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("added_at_transaction"))))
    {
        utility::string_t refVal_setAddedAtTransaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("added_at_transaction"))), refVal_setAddedAtTransaction );
        setAddedAtTransaction(refVal_setAddedAtTransaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("removed_at"))))
    {
        utility::string_t refVal_setRemovedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("removed_at"))), refVal_setRemovedAt );
        setRemovedAt(refVal_setRemovedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("removed_at_block"))))
    {
        utility::string_t refVal_setRemovedAtBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("removed_at_block"))), refVal_setRemovedAtBlock );
        setRemovedAtBlock(refVal_setRemovedAtBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("removed_at_transaction"))))
    {
        utility::string_t refVal_setRemovedAtTransaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("removed_at_transaction"))), refVal_setRemovedAtTransaction );
        setRemovedAtTransaction(refVal_setRemovedAtTransaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchange_count"))))
    {
        utility::string_t refVal_setExchangeCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchange_count"))), refVal_setExchangeCount );
        setExchangeCount(refVal_setExchangeCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gauge_count"))))
    {
        utility::string_t refVal_setGaugeCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gauge_count"))), refVal_setGaugeCount );
        setGaugeCount(refVal_setGaugeCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("evaluated_ask"))))
    {
        double refVal_setEvaluatedAsk;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("evaluated_ask"))), refVal_setEvaluatedAsk );
        setEvaluatedAsk(refVal_setEvaluatedAsk);
    }
    return ok;
}

utility::datetime Curve_PoolDTO::getEntryTime() const
{
    return m_Entry_time;
}

void Curve_PoolDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool Curve_PoolDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void Curve_PoolDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime Curve_PoolDTO::getRecvTime() const
{
    return m_Recv_time;
}

void Curve_PoolDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool Curve_PoolDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void Curve_PoolDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t Curve_PoolDTO::getBlockNumber() const
{
    return m_Block_number;
}

void Curve_PoolDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool Curve_PoolDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void Curve_PoolDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t Curve_PoolDTO::getId() const
{
    return m_Id;
}

void Curve_PoolDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Curve_PoolDTO::idIsSet() const
{
    return m_IdIsSet;
}

void Curve_PoolDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Curve_PoolDTO::getName() const
{
    return m_Name;
}

void Curve_PoolDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Curve_PoolDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void Curve_PoolDTO::unsetName()
{
    m_NameIsSet = false;
}
bool Curve_PoolDTO::isIsMeta() const
{
    return m_Is_meta;
}

void Curve_PoolDTO::setIsMeta(bool value)
{
    m_Is_meta = value;
    m_Is_metaIsSet = true;
}

bool Curve_PoolDTO::isMetaIsSet() const
{
    return m_Is_metaIsSet;
}

void Curve_PoolDTO::unsetIs_meta()
{
    m_Is_metaIsSet = false;
}
utility::string_t Curve_PoolDTO::getRegistryAddress() const
{
    return m_Registry_address;
}

void Curve_PoolDTO::setRegistryAddress(const utility::string_t& value)
{
    m_Registry_address = value;
    m_Registry_addressIsSet = true;
}

bool Curve_PoolDTO::registryAddressIsSet() const
{
    return m_Registry_addressIsSet;
}

void Curve_PoolDTO::unsetRegistry_address()
{
    m_Registry_addressIsSet = false;
}
utility::string_t Curve_PoolDTO::getSwapAddress() const
{
    return m_Swap_address;
}

void Curve_PoolDTO::setSwapAddress(const utility::string_t& value)
{
    m_Swap_address = value;
    m_Swap_addressIsSet = true;
}

bool Curve_PoolDTO::swapAddressIsSet() const
{
    return m_Swap_addressIsSet;
}

void Curve_PoolDTO::unsetSwap_address()
{
    m_Swap_addressIsSet = false;
}
utility::string_t Curve_PoolDTO::getLpToken() const
{
    return m_Lp_token;
}

void Curve_PoolDTO::setLpToken(const utility::string_t& value)
{
    m_Lp_token = value;
    m_Lp_tokenIsSet = true;
}

bool Curve_PoolDTO::lpTokenIsSet() const
{
    return m_Lp_tokenIsSet;
}

void Curve_PoolDTO::unsetLp_token()
{
    m_Lp_tokenIsSet = false;
}
utility::string_t Curve_PoolDTO::getCoinCount() const
{
    return m_Coin_count;
}

void Curve_PoolDTO::setCoinCount(const utility::string_t& value)
{
    m_Coin_count = value;
    m_Coin_countIsSet = true;
}

bool Curve_PoolDTO::coinCountIsSet() const
{
    return m_Coin_countIsSet;
}

void Curve_PoolDTO::unsetCoin_count()
{
    m_Coin_countIsSet = false;
}
utility::string_t Curve_PoolDTO::getUnderlyingCount() const
{
    return m_Underlying_count;
}

void Curve_PoolDTO::setUnderlyingCount(const utility::string_t& value)
{
    m_Underlying_count = value;
    m_Underlying_countIsSet = true;
}

bool Curve_PoolDTO::underlyingCountIsSet() const
{
    return m_Underlying_countIsSet;
}

void Curve_PoolDTO::unsetUnderlying_count()
{
    m_Underlying_countIsSet = false;
}
utility::string_t Curve_PoolDTO::getA() const
{
    return m_a;
}

void Curve_PoolDTO::setA(const utility::string_t& value)
{
    m_a = value;
    m_aIsSet = true;
}

bool Curve_PoolDTO::AIsSet() const
{
    return m_aIsSet;
}

void Curve_PoolDTO::unseta()
{
    m_aIsSet = false;
}
utility::string_t Curve_PoolDTO::getFee() const
{
    return m_Fee;
}

void Curve_PoolDTO::setFee(const utility::string_t& value)
{
    m_Fee = value;
    m_FeeIsSet = true;
}

bool Curve_PoolDTO::feeIsSet() const
{
    return m_FeeIsSet;
}

void Curve_PoolDTO::unsetFee()
{
    m_FeeIsSet = false;
}
utility::string_t Curve_PoolDTO::getAdminFee() const
{
    return m_Admin_fee;
}

void Curve_PoolDTO::setAdminFee(const utility::string_t& value)
{
    m_Admin_fee = value;
    m_Admin_feeIsSet = true;
}

bool Curve_PoolDTO::adminFeeIsSet() const
{
    return m_Admin_feeIsSet;
}

void Curve_PoolDTO::unsetAdmin_fee()
{
    m_Admin_feeIsSet = false;
}
utility::string_t Curve_PoolDTO::getOwner() const
{
    return m_Owner;
}

void Curve_PoolDTO::setOwner(const utility::string_t& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}

bool Curve_PoolDTO::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void Curve_PoolDTO::unsetOwner()
{
    m_OwnerIsSet = false;
}
utility::string_t Curve_PoolDTO::getVirtualPrice() const
{
    return m_Virtual_price;
}

void Curve_PoolDTO::setVirtualPrice(const utility::string_t& value)
{
    m_Virtual_price = value;
    m_Virtual_priceIsSet = true;
}

bool Curve_PoolDTO::virtualPriceIsSet() const
{
    return m_Virtual_priceIsSet;
}

void Curve_PoolDTO::unsetVirtual_price()
{
    m_Virtual_priceIsSet = false;
}
utility::string_t Curve_PoolDTO::getLocked() const
{
    return m_Locked;
}

void Curve_PoolDTO::setLocked(const utility::string_t& value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}

bool Curve_PoolDTO::lockedIsSet() const
{
    return m_LockedIsSet;
}

void Curve_PoolDTO::unsetLocked()
{
    m_LockedIsSet = false;
}
utility::datetime Curve_PoolDTO::getAddedAt() const
{
    return m_Added_at;
}

void Curve_PoolDTO::setAddedAt(const utility::datetime& value)
{
    m_Added_at = value;
    m_Added_atIsSet = true;
}

bool Curve_PoolDTO::addedAtIsSet() const
{
    return m_Added_atIsSet;
}

void Curve_PoolDTO::unsetAdded_at()
{
    m_Added_atIsSet = false;
}
utility::string_t Curve_PoolDTO::getAddedAtBlock() const
{
    return m_Added_at_block;
}

void Curve_PoolDTO::setAddedAtBlock(const utility::string_t& value)
{
    m_Added_at_block = value;
    m_Added_at_blockIsSet = true;
}

bool Curve_PoolDTO::addedAtBlockIsSet() const
{
    return m_Added_at_blockIsSet;
}

void Curve_PoolDTO::unsetAdded_at_block()
{
    m_Added_at_blockIsSet = false;
}
utility::string_t Curve_PoolDTO::getAddedAtTransaction() const
{
    return m_Added_at_transaction;
}

void Curve_PoolDTO::setAddedAtTransaction(const utility::string_t& value)
{
    m_Added_at_transaction = value;
    m_Added_at_transactionIsSet = true;
}

bool Curve_PoolDTO::addedAtTransactionIsSet() const
{
    return m_Added_at_transactionIsSet;
}

void Curve_PoolDTO::unsetAdded_at_transaction()
{
    m_Added_at_transactionIsSet = false;
}
utility::string_t Curve_PoolDTO::getRemovedAt() const
{
    return m_Removed_at;
}

void Curve_PoolDTO::setRemovedAt(const utility::string_t& value)
{
    m_Removed_at = value;
    m_Removed_atIsSet = true;
}

bool Curve_PoolDTO::removedAtIsSet() const
{
    return m_Removed_atIsSet;
}

void Curve_PoolDTO::unsetRemoved_at()
{
    m_Removed_atIsSet = false;
}
utility::string_t Curve_PoolDTO::getRemovedAtBlock() const
{
    return m_Removed_at_block;
}

void Curve_PoolDTO::setRemovedAtBlock(const utility::string_t& value)
{
    m_Removed_at_block = value;
    m_Removed_at_blockIsSet = true;
}

bool Curve_PoolDTO::removedAtBlockIsSet() const
{
    return m_Removed_at_blockIsSet;
}

void Curve_PoolDTO::unsetRemoved_at_block()
{
    m_Removed_at_blockIsSet = false;
}
utility::string_t Curve_PoolDTO::getRemovedAtTransaction() const
{
    return m_Removed_at_transaction;
}

void Curve_PoolDTO::setRemovedAtTransaction(const utility::string_t& value)
{
    m_Removed_at_transaction = value;
    m_Removed_at_transactionIsSet = true;
}

bool Curve_PoolDTO::removedAtTransactionIsSet() const
{
    return m_Removed_at_transactionIsSet;
}

void Curve_PoolDTO::unsetRemoved_at_transaction()
{
    m_Removed_at_transactionIsSet = false;
}
utility::string_t Curve_PoolDTO::getExchangeCount() const
{
    return m_Exchange_count;
}

void Curve_PoolDTO::setExchangeCount(const utility::string_t& value)
{
    m_Exchange_count = value;
    m_Exchange_countIsSet = true;
}

bool Curve_PoolDTO::exchangeCountIsSet() const
{
    return m_Exchange_countIsSet;
}

void Curve_PoolDTO::unsetExchange_count()
{
    m_Exchange_countIsSet = false;
}
utility::string_t Curve_PoolDTO::getGaugeCount() const
{
    return m_Gauge_count;
}

void Curve_PoolDTO::setGaugeCount(const utility::string_t& value)
{
    m_Gauge_count = value;
    m_Gauge_countIsSet = true;
}

bool Curve_PoolDTO::gaugeCountIsSet() const
{
    return m_Gauge_countIsSet;
}

void Curve_PoolDTO::unsetGauge_count()
{
    m_Gauge_countIsSet = false;
}
int64_t Curve_PoolDTO::getVid() const
{
    return m_Vid;
}

void Curve_PoolDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool Curve_PoolDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void Curve_PoolDTO::unsetVid()
{
    m_VidIsSet = false;
}
double Curve_PoolDTO::getEvaluatedAsk() const
{
    return m_Evaluated_ask;
}

void Curve_PoolDTO::setEvaluatedAsk(double value)
{
    m_Evaluated_ask = value;
    m_Evaluated_askIsSet = true;
}

bool Curve_PoolDTO::evaluatedAskIsSet() const
{
    return m_Evaluated_askIsSet;
}

void Curve_PoolDTO::unsetEvaluated_ask()
{
    m_Evaluated_askIsSet = false;
}
}
}
}
}


