/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CRYPTOPUNKS_BidDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CRYPTOPUNKS_BidDTO::CRYPTOPUNKS_BidDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = utility::conversions::to_string_t("");
    m_Block_numberIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
    m_Block_range = utility::conversions::to_string_t("");
    m_Block_rangeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Tokens_bid = utility::conversions::to_string_t("");
    m_Tokens_bidIsSet = false;
    m_Token_id = utility::conversions::to_string_t("");
    m_Token_idIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Bidder = utility::conversions::to_string_t("");
    m_BidderIsSet = false;
}

CRYPTOPUNKS_BidDTO::~CRYPTOPUNKS_BidDTO()
{
}

void CRYPTOPUNKS_BidDTO::validate()
{
    // TODO: implement validation
}

web::json::value CRYPTOPUNKS_BidDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }
    if(m_Block_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("block_range"))] = ModelBase::toJson(m_Block_range);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Tokens_bidIsSet)
    {
        val[utility::conversions::to_string_t(U("tokens_bid"))] = ModelBase::toJson(m_Tokens_bid);
    }
    if(m_Token_idIsSet)
    {
        val[utility::conversions::to_string_t(U("token_id"))] = ModelBase::toJson(m_Token_id);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_BidderIsSet)
    {
        val[utility::conversions::to_string_t(U("bidder"))] = ModelBase::toJson(m_Bidder);
    }

    return val;
}

bool CRYPTOPUNKS_BidDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_range")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockRange);
            setBlockRange(refVal_setBlockRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tokens_bid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tokens_bid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokensBid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokensBid);
            setTokensBid(refVal_setTokensBid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokenId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenId);
            setTokenId(refVal_setTokenId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bidder"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bidder")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBidder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBidder);
            setBidder(refVal_setBidder);
        }
    }
    return ok;
}

void CRYPTOPUNKS_BidDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
    if(m_Block_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_range")), m_Block_range));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Tokens_bidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tokens_bid")), m_Tokens_bid));
    }
    if(m_Token_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_id")), m_Token_id));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_BidderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bidder")), m_Bidder));
    }
}

bool CRYPTOPUNKS_BidDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        utility::string_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_range"))))
    {
        utility::string_t refVal_setBlockRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_range"))), refVal_setBlockRange );
        setBlockRange(refVal_setBlockRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tokens_bid"))))
    {
        utility::string_t refVal_setTokensBid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tokens_bid"))), refVal_setTokensBid );
        setTokensBid(refVal_setTokensBid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_id"))))
    {
        utility::string_t refVal_setTokenId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_id"))), refVal_setTokenId );
        setTokenId(refVal_setTokenId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bidder"))))
    {
        utility::string_t refVal_setBidder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bidder"))), refVal_setBidder );
        setBidder(refVal_setBidder);
    }
    return ok;
}

utility::datetime CRYPTOPUNKS_BidDTO::getEntryTime() const
{
    return m_Entry_time;
}

void CRYPTOPUNKS_BidDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime CRYPTOPUNKS_BidDTO::getRecvTime() const
{
    return m_Recv_time;
}

void CRYPTOPUNKS_BidDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
utility::string_t CRYPTOPUNKS_BidDTO::getBlockNumber() const
{
    return m_Block_number;
}

void CRYPTOPUNKS_BidDTO::setBlockNumber(const utility::string_t& value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
int64_t CRYPTOPUNKS_BidDTO::getVid() const
{
    return m_Vid;
}

void CRYPTOPUNKS_BidDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetVid()
{
    m_VidIsSet = false;
}
utility::string_t CRYPTOPUNKS_BidDTO::getBlockRange() const
{
    return m_Block_range;
}

void CRYPTOPUNKS_BidDTO::setBlockRange(const utility::string_t& value)
{
    m_Block_range = value;
    m_Block_rangeIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::blockRangeIsSet() const
{
    return m_Block_rangeIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetBlock_range()
{
    m_Block_rangeIsSet = false;
}
utility::string_t CRYPTOPUNKS_BidDTO::getId() const
{
    return m_Id;
}

void CRYPTOPUNKS_BidDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::idIsSet() const
{
    return m_IdIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CRYPTOPUNKS_BidDTO::getTokensBid() const
{
    return m_Tokens_bid;
}

void CRYPTOPUNKS_BidDTO::setTokensBid(const utility::string_t& value)
{
    m_Tokens_bid = value;
    m_Tokens_bidIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::tokensBidIsSet() const
{
    return m_Tokens_bidIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetTokens_bid()
{
    m_Tokens_bidIsSet = false;
}
utility::string_t CRYPTOPUNKS_BidDTO::getTokenId() const
{
    return m_Token_id;
}

void CRYPTOPUNKS_BidDTO::setTokenId(const utility::string_t& value)
{
    m_Token_id = value;
    m_Token_idIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::tokenIdIsSet() const
{
    return m_Token_idIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetToken_id()
{
    m_Token_idIsSet = false;
}
utility::string_t CRYPTOPUNKS_BidDTO::getTimestamp() const
{
    return m_Timestamp;
}

void CRYPTOPUNKS_BidDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t CRYPTOPUNKS_BidDTO::getBidder() const
{
    return m_Bidder;
}

void CRYPTOPUNKS_BidDTO::setBidder(const utility::string_t& value)
{
    m_Bidder = value;
    m_BidderIsSet = true;
}

bool CRYPTOPUNKS_BidDTO::bidderIsSet() const
{
    return m_BidderIsSet;
}

void CRYPTOPUNKS_BidDTO::unsetBidder()
{
    m_BidderIsSet = false;
}
}
}
}
}


