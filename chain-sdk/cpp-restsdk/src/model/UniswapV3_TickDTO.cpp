/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UniswapV3_TickDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UniswapV3_TickDTO::UniswapV3_TickDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Pool_address = utility::conversions::to_string_t("");
    m_Pool_addressIsSet = false;
    m_Tick_idxIsSet = false;
    m_Pool = utility::conversions::to_string_t("");
    m_PoolIsSet = false;
    m_Liquidity_grossIsSet = false;
    m_Liquidity_netIsSet = false;
    m_Price_0 = utility::conversions::to_string_t("");
    m_Price_0IsSet = false;
    m_Price_1 = utility::conversions::to_string_t("");
    m_Price_1IsSet = false;
    m_Volume_token_0 = utility::conversions::to_string_t("");
    m_Volume_token_0IsSet = false;
    m_Volume_token_1 = utility::conversions::to_string_t("");
    m_Volume_token_1IsSet = false;
    m_Volume_usd = utility::conversions::to_string_t("");
    m_Volume_usdIsSet = false;
    m_Untracked_volume_usd = utility::conversions::to_string_t("");
    m_Untracked_volume_usdIsSet = false;
    m_Fees_usd = utility::conversions::to_string_t("");
    m_Fees_usdIsSet = false;
    m_Collected_fees_token_0 = utility::conversions::to_string_t("");
    m_Collected_fees_token_0IsSet = false;
    m_Collected_fees_token_1 = utility::conversions::to_string_t("");
    m_Collected_fees_token_1IsSet = false;
    m_Collected_fees_usd = utility::conversions::to_string_t("");
    m_Collected_fees_usdIsSet = false;
    m_Created_at_timestamp = utility::datetime();
    m_Created_at_timestampIsSet = false;
    m_Liquidity_provider_countIsSet = false;
    m_Fee_growth_outside_0x128IsSet = false;
    m_Fee_growth_outside_1x128IsSet = false;
}

UniswapV3_TickDTO::~UniswapV3_TickDTO()
{
}

void UniswapV3_TickDTO::validate()
{
    // TODO: implement validation
}

web::json::value UniswapV3_TickDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Pool_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("pool_address"))] = ModelBase::toJson(m_Pool_address);
    }
    if(m_Tick_idxIsSet)
    {
        val[utility::conversions::to_string_t(U("tick_idx"))] = ModelBase::toJson(m_Tick_idx);
    }
    if(m_PoolIsSet)
    {
        val[utility::conversions::to_string_t(U("pool"))] = ModelBase::toJson(m_Pool);
    }
    if(m_Liquidity_grossIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity_gross"))] = ModelBase::toJson(m_Liquidity_gross);
    }
    if(m_Liquidity_netIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity_net"))] = ModelBase::toJson(m_Liquidity_net);
    }
    if(m_Price_0IsSet)
    {
        val[utility::conversions::to_string_t(U("price_0"))] = ModelBase::toJson(m_Price_0);
    }
    if(m_Price_1IsSet)
    {
        val[utility::conversions::to_string_t(U("price_1"))] = ModelBase::toJson(m_Price_1);
    }
    if(m_Volume_token_0IsSet)
    {
        val[utility::conversions::to_string_t(U("volume_token_0"))] = ModelBase::toJson(m_Volume_token_0);
    }
    if(m_Volume_token_1IsSet)
    {
        val[utility::conversions::to_string_t(U("volume_token_1"))] = ModelBase::toJson(m_Volume_token_1);
    }
    if(m_Volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("volume_usd"))] = ModelBase::toJson(m_Volume_usd);
    }
    if(m_Untracked_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("untracked_volume_usd"))] = ModelBase::toJson(m_Untracked_volume_usd);
    }
    if(m_Fees_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("fees_usd"))] = ModelBase::toJson(m_Fees_usd);
    }
    if(m_Collected_fees_token_0IsSet)
    {
        val[utility::conversions::to_string_t(U("collected_fees_token_0"))] = ModelBase::toJson(m_Collected_fees_token_0);
    }
    if(m_Collected_fees_token_1IsSet)
    {
        val[utility::conversions::to_string_t(U("collected_fees_token_1"))] = ModelBase::toJson(m_Collected_fees_token_1);
    }
    if(m_Collected_fees_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("collected_fees_usd"))] = ModelBase::toJson(m_Collected_fees_usd);
    }
    if(m_Created_at_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at_timestamp"))] = ModelBase::toJson(m_Created_at_timestamp);
    }
    if(m_Liquidity_provider_countIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity_provider_count"))] = ModelBase::toJson(m_Liquidity_provider_count);
    }
    if(m_Fee_growth_outside_0x128IsSet)
    {
        val[utility::conversions::to_string_t(U("fee_growth_outside_0x128"))] = ModelBase::toJson(m_Fee_growth_outside_0x128);
    }
    if(m_Fee_growth_outside_1x128IsSet)
    {
        val[utility::conversions::to_string_t(U("fee_growth_outside_1x128"))] = ModelBase::toJson(m_Fee_growth_outside_1x128);
    }

    return val;
}

bool UniswapV3_TickDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPoolAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPoolAddress);
            setPoolAddress(refVal_setPoolAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tick_idx"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tick_idx")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setTickIdx;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTickIdx);
            setTickIdx(refVal_setTickIdx);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPool;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPool);
            setPool(refVal_setPool);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity_gross"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity_gross")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setLiquidityGross;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidityGross);
            setLiquidityGross(refVal_setLiquidityGross);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity_net"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity_net")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setLiquidityNet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidityNet);
            setLiquidityNet(refVal_setLiquidityNet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrice0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice0);
            setPrice0(refVal_setPrice0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrice1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice1);
            setPrice1(refVal_setPrice1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume_token_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume_token_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVolumeToken0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeToken0);
            setVolumeToken0(refVal_setVolumeToken0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume_token_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume_token_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVolumeToken1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeToken1);
            setVolumeToken1(refVal_setVolumeToken1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeUsd);
            setVolumeUsd(refVal_setVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("untracked_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("untracked_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUntrackedVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUntrackedVolumeUsd);
            setUntrackedVolumeUsd(refVal_setUntrackedVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fees_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fees_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeesUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeesUsd);
            setFeesUsd(refVal_setFeesUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collected_fees_token_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collected_fees_token_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectedFeesToken0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectedFeesToken0);
            setCollectedFeesToken0(refVal_setCollectedFeesToken0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collected_fees_token_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collected_fees_token_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectedFeesToken1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectedFeesToken1);
            setCollectedFeesToken1(refVal_setCollectedFeesToken1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collected_fees_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collected_fees_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectedFeesUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectedFeesUsd);
            setCollectedFeesUsd(refVal_setCollectedFeesUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at_timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAtTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAtTimestamp);
            setCreatedAtTimestamp(refVal_setCreatedAtTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity_provider_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity_provider_count")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setLiquidityProviderCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidityProviderCount);
            setLiquidityProviderCount(refVal_setLiquidityProviderCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fee_growth_outside_0x128"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fee_growth_outside_0x128")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setFeeGrowthOutside0x128;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeeGrowthOutside0x128);
            setFeeGrowthOutside0x128(refVal_setFeeGrowthOutside0x128);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fee_growth_outside_1x128"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fee_growth_outside_1x128")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setFeeGrowthOutside1x128;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeeGrowthOutside1x128);
            setFeeGrowthOutside1x128(refVal_setFeeGrowthOutside1x128);
        }
    }
    return ok;
}

void UniswapV3_TickDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Pool_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool_address")), m_Pool_address));
    }
    if(m_Tick_idxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tick_idx")), m_Tick_idx));
    }
    if(m_PoolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool")), m_Pool));
    }
    if(m_Liquidity_grossIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity_gross")), m_Liquidity_gross));
    }
    if(m_Liquidity_netIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity_net")), m_Liquidity_net));
    }
    if(m_Price_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_0")), m_Price_0));
    }
    if(m_Price_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_1")), m_Price_1));
    }
    if(m_Volume_token_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume_token_0")), m_Volume_token_0));
    }
    if(m_Volume_token_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume_token_1")), m_Volume_token_1));
    }
    if(m_Volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume_usd")), m_Volume_usd));
    }
    if(m_Untracked_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("untracked_volume_usd")), m_Untracked_volume_usd));
    }
    if(m_Fees_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fees_usd")), m_Fees_usd));
    }
    if(m_Collected_fees_token_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collected_fees_token_0")), m_Collected_fees_token_0));
    }
    if(m_Collected_fees_token_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collected_fees_token_1")), m_Collected_fees_token_1));
    }
    if(m_Collected_fees_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collected_fees_usd")), m_Collected_fees_usd));
    }
    if(m_Created_at_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at_timestamp")), m_Created_at_timestamp));
    }
    if(m_Liquidity_provider_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity_provider_count")), m_Liquidity_provider_count));
    }
    if(m_Fee_growth_outside_0x128IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fee_growth_outside_0x128")), m_Fee_growth_outside_0x128));
    }
    if(m_Fee_growth_outside_1x128IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fee_growth_outside_1x128")), m_Fee_growth_outside_1x128));
    }
}

bool UniswapV3_TickDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool_address"))))
    {
        utility::string_t refVal_setPoolAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool_address"))), refVal_setPoolAddress );
        setPoolAddress(refVal_setPoolAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tick_idx"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setTickIdx;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tick_idx"))), refVal_setTickIdx );
        setTickIdx(refVal_setTickIdx);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool"))))
    {
        utility::string_t refVal_setPool;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool"))), refVal_setPool );
        setPool(refVal_setPool);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity_gross"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setLiquidityGross;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity_gross"))), refVal_setLiquidityGross );
        setLiquidityGross(refVal_setLiquidityGross);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity_net"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setLiquidityNet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity_net"))), refVal_setLiquidityNet );
        setLiquidityNet(refVal_setLiquidityNet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_0"))))
    {
        utility::string_t refVal_setPrice0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_0"))), refVal_setPrice0 );
        setPrice0(refVal_setPrice0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_1"))))
    {
        utility::string_t refVal_setPrice1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_1"))), refVal_setPrice1 );
        setPrice1(refVal_setPrice1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume_token_0"))))
    {
        utility::string_t refVal_setVolumeToken0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume_token_0"))), refVal_setVolumeToken0 );
        setVolumeToken0(refVal_setVolumeToken0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume_token_1"))))
    {
        utility::string_t refVal_setVolumeToken1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume_token_1"))), refVal_setVolumeToken1 );
        setVolumeToken1(refVal_setVolumeToken1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume_usd"))))
    {
        utility::string_t refVal_setVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume_usd"))), refVal_setVolumeUsd );
        setVolumeUsd(refVal_setVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("untracked_volume_usd"))))
    {
        utility::string_t refVal_setUntrackedVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("untracked_volume_usd"))), refVal_setUntrackedVolumeUsd );
        setUntrackedVolumeUsd(refVal_setUntrackedVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fees_usd"))))
    {
        utility::string_t refVal_setFeesUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fees_usd"))), refVal_setFeesUsd );
        setFeesUsd(refVal_setFeesUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collected_fees_token_0"))))
    {
        utility::string_t refVal_setCollectedFeesToken0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collected_fees_token_0"))), refVal_setCollectedFeesToken0 );
        setCollectedFeesToken0(refVal_setCollectedFeesToken0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collected_fees_token_1"))))
    {
        utility::string_t refVal_setCollectedFeesToken1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collected_fees_token_1"))), refVal_setCollectedFeesToken1 );
        setCollectedFeesToken1(refVal_setCollectedFeesToken1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collected_fees_usd"))))
    {
        utility::string_t refVal_setCollectedFeesUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collected_fees_usd"))), refVal_setCollectedFeesUsd );
        setCollectedFeesUsd(refVal_setCollectedFeesUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at_timestamp"))))
    {
        utility::datetime refVal_setCreatedAtTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at_timestamp"))), refVal_setCreatedAtTimestamp );
        setCreatedAtTimestamp(refVal_setCreatedAtTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity_provider_count"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setLiquidityProviderCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity_provider_count"))), refVal_setLiquidityProviderCount );
        setLiquidityProviderCount(refVal_setLiquidityProviderCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fee_growth_outside_0x128"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setFeeGrowthOutside0x128;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fee_growth_outside_0x128"))), refVal_setFeeGrowthOutside0x128 );
        setFeeGrowthOutside0x128(refVal_setFeeGrowthOutside0x128);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fee_growth_outside_1x128"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setFeeGrowthOutside1x128;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fee_growth_outside_1x128"))), refVal_setFeeGrowthOutside1x128 );
        setFeeGrowthOutside1x128(refVal_setFeeGrowthOutside1x128);
    }
    return ok;
}

utility::datetime UniswapV3_TickDTO::getEntryTime() const
{
    return m_Entry_time;
}

void UniswapV3_TickDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UniswapV3_TickDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UniswapV3_TickDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UniswapV3_TickDTO::getRecvTime() const
{
    return m_Recv_time;
}

void UniswapV3_TickDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UniswapV3_TickDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UniswapV3_TickDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UniswapV3_TickDTO::getBlockNumber() const
{
    return m_Block_number;
}

void UniswapV3_TickDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UniswapV3_TickDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UniswapV3_TickDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
int64_t UniswapV3_TickDTO::getVid() const
{
    return m_Vid;
}

void UniswapV3_TickDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool UniswapV3_TickDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void UniswapV3_TickDTO::unsetVid()
{
    m_VidIsSet = false;
}
utility::string_t UniswapV3_TickDTO::getId() const
{
    return m_Id;
}

void UniswapV3_TickDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UniswapV3_TickDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UniswapV3_TickDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UniswapV3_TickDTO::getPoolAddress() const
{
    return m_Pool_address;
}

void UniswapV3_TickDTO::setPoolAddress(const utility::string_t& value)
{
    m_Pool_address = value;
    m_Pool_addressIsSet = true;
}

bool UniswapV3_TickDTO::poolAddressIsSet() const
{
    return m_Pool_addressIsSet;
}

void UniswapV3_TickDTO::unsetPool_address()
{
    m_Pool_addressIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_TickDTO::getTickIdx() const
{
    return m_Tick_idx;
}

void UniswapV3_TickDTO::setTickIdx(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Tick_idx = value;
    m_Tick_idxIsSet = true;
}

bool UniswapV3_TickDTO::tickIdxIsSet() const
{
    return m_Tick_idxIsSet;
}

void UniswapV3_TickDTO::unsetTick_idx()
{
    m_Tick_idxIsSet = false;
}
utility::string_t UniswapV3_TickDTO::getPool() const
{
    return m_Pool;
}

void UniswapV3_TickDTO::setPool(const utility::string_t& value)
{
    m_Pool = value;
    m_PoolIsSet = true;
}

bool UniswapV3_TickDTO::poolIsSet() const
{
    return m_PoolIsSet;
}

void UniswapV3_TickDTO::unsetPool()
{
    m_PoolIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_TickDTO::getLiquidityGross() const
{
    return m_Liquidity_gross;
}

void UniswapV3_TickDTO::setLiquidityGross(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Liquidity_gross = value;
    m_Liquidity_grossIsSet = true;
}

bool UniswapV3_TickDTO::liquidityGrossIsSet() const
{
    return m_Liquidity_grossIsSet;
}

void UniswapV3_TickDTO::unsetLiquidity_gross()
{
    m_Liquidity_grossIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_TickDTO::getLiquidityNet() const
{
    return m_Liquidity_net;
}

void UniswapV3_TickDTO::setLiquidityNet(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Liquidity_net = value;
    m_Liquidity_netIsSet = true;
}

bool UniswapV3_TickDTO::liquidityNetIsSet() const
{
    return m_Liquidity_netIsSet;
}

void UniswapV3_TickDTO::unsetLiquidity_net()
{
    m_Liquidity_netIsSet = false;
}
utility::string_t UniswapV3_TickDTO::getPrice0() const
{
    return m_Price_0;
}

void UniswapV3_TickDTO::setPrice0(const utility::string_t& value)
{
    m_Price_0 = value;
    m_Price_0IsSet = true;
}

bool UniswapV3_TickDTO::price0IsSet() const
{
    return m_Price_0IsSet;
}

void UniswapV3_TickDTO::unsetPrice_0()
{
    m_Price_0IsSet = false;
}
utility::string_t UniswapV3_TickDTO::getPrice1() const
{
    return m_Price_1;
}

void UniswapV3_TickDTO::setPrice1(const utility::string_t& value)
{
    m_Price_1 = value;
    m_Price_1IsSet = true;
}

bool UniswapV3_TickDTO::price1IsSet() const
{
    return m_Price_1IsSet;
}

void UniswapV3_TickDTO::unsetPrice_1()
{
    m_Price_1IsSet = false;
}
utility::string_t UniswapV3_TickDTO::getVolumeToken0() const
{
    return m_Volume_token_0;
}

void UniswapV3_TickDTO::setVolumeToken0(const utility::string_t& value)
{
    m_Volume_token_0 = value;
    m_Volume_token_0IsSet = true;
}

bool UniswapV3_TickDTO::volumeToken0IsSet() const
{
    return m_Volume_token_0IsSet;
}

void UniswapV3_TickDTO::unsetVolume_token_0()
{
    m_Volume_token_0IsSet = false;
}
utility::string_t UniswapV3_TickDTO::getVolumeToken1() const
{
    return m_Volume_token_1;
}

void UniswapV3_TickDTO::setVolumeToken1(const utility::string_t& value)
{
    m_Volume_token_1 = value;
    m_Volume_token_1IsSet = true;
}

bool UniswapV3_TickDTO::volumeToken1IsSet() const
{
    return m_Volume_token_1IsSet;
}

void UniswapV3_TickDTO::unsetVolume_token_1()
{
    m_Volume_token_1IsSet = false;
}
utility::string_t UniswapV3_TickDTO::getVolumeUsd() const
{
    return m_Volume_usd;
}

void UniswapV3_TickDTO::setVolumeUsd(const utility::string_t& value)
{
    m_Volume_usd = value;
    m_Volume_usdIsSet = true;
}

bool UniswapV3_TickDTO::volumeUsdIsSet() const
{
    return m_Volume_usdIsSet;
}

void UniswapV3_TickDTO::unsetVolume_usd()
{
    m_Volume_usdIsSet = false;
}
utility::string_t UniswapV3_TickDTO::getUntrackedVolumeUsd() const
{
    return m_Untracked_volume_usd;
}

void UniswapV3_TickDTO::setUntrackedVolumeUsd(const utility::string_t& value)
{
    m_Untracked_volume_usd = value;
    m_Untracked_volume_usdIsSet = true;
}

bool UniswapV3_TickDTO::untrackedVolumeUsdIsSet() const
{
    return m_Untracked_volume_usdIsSet;
}

void UniswapV3_TickDTO::unsetUntracked_volume_usd()
{
    m_Untracked_volume_usdIsSet = false;
}
utility::string_t UniswapV3_TickDTO::getFeesUsd() const
{
    return m_Fees_usd;
}

void UniswapV3_TickDTO::setFeesUsd(const utility::string_t& value)
{
    m_Fees_usd = value;
    m_Fees_usdIsSet = true;
}

bool UniswapV3_TickDTO::feesUsdIsSet() const
{
    return m_Fees_usdIsSet;
}

void UniswapV3_TickDTO::unsetFees_usd()
{
    m_Fees_usdIsSet = false;
}
utility::string_t UniswapV3_TickDTO::getCollectedFeesToken0() const
{
    return m_Collected_fees_token_0;
}

void UniswapV3_TickDTO::setCollectedFeesToken0(const utility::string_t& value)
{
    m_Collected_fees_token_0 = value;
    m_Collected_fees_token_0IsSet = true;
}

bool UniswapV3_TickDTO::collectedFeesToken0IsSet() const
{
    return m_Collected_fees_token_0IsSet;
}

void UniswapV3_TickDTO::unsetCollected_fees_token_0()
{
    m_Collected_fees_token_0IsSet = false;
}
utility::string_t UniswapV3_TickDTO::getCollectedFeesToken1() const
{
    return m_Collected_fees_token_1;
}

void UniswapV3_TickDTO::setCollectedFeesToken1(const utility::string_t& value)
{
    m_Collected_fees_token_1 = value;
    m_Collected_fees_token_1IsSet = true;
}

bool UniswapV3_TickDTO::collectedFeesToken1IsSet() const
{
    return m_Collected_fees_token_1IsSet;
}

void UniswapV3_TickDTO::unsetCollected_fees_token_1()
{
    m_Collected_fees_token_1IsSet = false;
}
utility::string_t UniswapV3_TickDTO::getCollectedFeesUsd() const
{
    return m_Collected_fees_usd;
}

void UniswapV3_TickDTO::setCollectedFeesUsd(const utility::string_t& value)
{
    m_Collected_fees_usd = value;
    m_Collected_fees_usdIsSet = true;
}

bool UniswapV3_TickDTO::collectedFeesUsdIsSet() const
{
    return m_Collected_fees_usdIsSet;
}

void UniswapV3_TickDTO::unsetCollected_fees_usd()
{
    m_Collected_fees_usdIsSet = false;
}
utility::datetime UniswapV3_TickDTO::getCreatedAtTimestamp() const
{
    return m_Created_at_timestamp;
}

void UniswapV3_TickDTO::setCreatedAtTimestamp(const utility::datetime& value)
{
    m_Created_at_timestamp = value;
    m_Created_at_timestampIsSet = true;
}

bool UniswapV3_TickDTO::createdAtTimestampIsSet() const
{
    return m_Created_at_timestampIsSet;
}

void UniswapV3_TickDTO::unsetCreated_at_timestamp()
{
    m_Created_at_timestampIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_TickDTO::getLiquidityProviderCount() const
{
    return m_Liquidity_provider_count;
}

void UniswapV3_TickDTO::setLiquidityProviderCount(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Liquidity_provider_count = value;
    m_Liquidity_provider_countIsSet = true;
}

bool UniswapV3_TickDTO::liquidityProviderCountIsSet() const
{
    return m_Liquidity_provider_countIsSet;
}

void UniswapV3_TickDTO::unsetLiquidity_provider_count()
{
    m_Liquidity_provider_countIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_TickDTO::getFeeGrowthOutside0x128() const
{
    return m_Fee_growth_outside_0x128;
}

void UniswapV3_TickDTO::setFeeGrowthOutside0x128(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Fee_growth_outside_0x128 = value;
    m_Fee_growth_outside_0x128IsSet = true;
}

bool UniswapV3_TickDTO::feeGrowthOutside0x128IsSet() const
{
    return m_Fee_growth_outside_0x128IsSet;
}

void UniswapV3_TickDTO::unsetFee_growth_outside_0x128()
{
    m_Fee_growth_outside_0x128IsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_TickDTO::getFeeGrowthOutside1x128() const
{
    return m_Fee_growth_outside_1x128;
}

void UniswapV3_TickDTO::setFeeGrowthOutside1x128(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Fee_growth_outside_1x128 = value;
    m_Fee_growth_outside_1x128IsSet = true;
}

bool UniswapV3_TickDTO::feeGrowthOutside1x128IsSet() const
{
    return m_Fee_growth_outside_1x128IsSet;
}

void UniswapV3_TickDTO::unsetFee_growth_outside_1x128()
{
    m_Fee_growth_outside_1x128IsSet = false;
}
}
}
}
}


