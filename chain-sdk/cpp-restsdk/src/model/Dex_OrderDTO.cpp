/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Dex_OrderDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dex_OrderDTO::Dex_OrderDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Owner = utility::conversions::to_string_t("");
    m_OwnerIsSet = false;
    m_Order_id = 0;
    m_Order_idIsSet = false;
    m_From_batch_id = utility::conversions::to_string_t("");
    m_From_batch_idIsSet = false;
    m_From_epoch = utility::conversions::to_string_t("");
    m_From_epochIsSet = false;
    m_Until_batch_id = utility::conversions::to_string_t("");
    m_Until_batch_idIsSet = false;
    m_Until_epoch = utility::conversions::to_string_t("");
    m_Until_epochIsSet = false;
    m_Buy_token = utility::conversions::to_string_t("");
    m_Buy_tokenIsSet = false;
    m_Sell_token = utility::conversions::to_string_t("");
    m_Sell_tokenIsSet = false;
    m_Price_numerator = utility::conversions::to_string_t("");
    m_Price_numeratorIsSet = false;
    m_Price_denominator = utility::conversions::to_string_t("");
    m_Price_denominatorIsSet = false;
    m_Max_sell_amount = utility::conversions::to_string_t("");
    m_Max_sell_amountIsSet = false;
    m_Min_receive_amount = utility::conversions::to_string_t("");
    m_Min_receive_amountIsSet = false;
    m_Sold_volume = utility::conversions::to_string_t("");
    m_Sold_volumeIsSet = false;
    m_Bought_volume = utility::conversions::to_string_t("");
    m_Bought_volumeIsSet = false;
    m_Create_epoch = utility::conversions::to_string_t("");
    m_Create_epochIsSet = false;
    m_Cancel_epoch = utility::conversions::to_string_t("");
    m_Cancel_epochIsSet = false;
    m_Delete_epoch = utility::conversions::to_string_t("");
    m_Delete_epochIsSet = false;
    m_Tx_hash = utility::conversions::to_string_t("");
    m_Tx_hashIsSet = false;
    m_Tx_log_index = utility::conversions::to_string_t("");
    m_Tx_log_indexIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
}

Dex_OrderDTO::~Dex_OrderDTO()
{
}

void Dex_OrderDTO::validate()
{
    // TODO: implement validation
}

web::json::value Dex_OrderDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t(U("owner"))] = ModelBase::toJson(m_Owner);
    }
    if(m_Order_idIsSet)
    {
        val[utility::conversions::to_string_t(U("order_id"))] = ModelBase::toJson(m_Order_id);
    }
    if(m_From_batch_idIsSet)
    {
        val[utility::conversions::to_string_t(U("from_batch_id"))] = ModelBase::toJson(m_From_batch_id);
    }
    if(m_From_epochIsSet)
    {
        val[utility::conversions::to_string_t(U("from_epoch"))] = ModelBase::toJson(m_From_epoch);
    }
    if(m_Until_batch_idIsSet)
    {
        val[utility::conversions::to_string_t(U("until_batch_id"))] = ModelBase::toJson(m_Until_batch_id);
    }
    if(m_Until_epochIsSet)
    {
        val[utility::conversions::to_string_t(U("until_epoch"))] = ModelBase::toJson(m_Until_epoch);
    }
    if(m_Buy_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("buy_token"))] = ModelBase::toJson(m_Buy_token);
    }
    if(m_Sell_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("sell_token"))] = ModelBase::toJson(m_Sell_token);
    }
    if(m_Price_numeratorIsSet)
    {
        val[utility::conversions::to_string_t(U("price_numerator"))] = ModelBase::toJson(m_Price_numerator);
    }
    if(m_Price_denominatorIsSet)
    {
        val[utility::conversions::to_string_t(U("price_denominator"))] = ModelBase::toJson(m_Price_denominator);
    }
    if(m_Max_sell_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("max_sell_amount"))] = ModelBase::toJson(m_Max_sell_amount);
    }
    if(m_Min_receive_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("min_receive_amount"))] = ModelBase::toJson(m_Min_receive_amount);
    }
    if(m_Sold_volumeIsSet)
    {
        val[utility::conversions::to_string_t(U("sold_volume"))] = ModelBase::toJson(m_Sold_volume);
    }
    if(m_Bought_volumeIsSet)
    {
        val[utility::conversions::to_string_t(U("bought_volume"))] = ModelBase::toJson(m_Bought_volume);
    }
    if(m_Create_epochIsSet)
    {
        val[utility::conversions::to_string_t(U("create_epoch"))] = ModelBase::toJson(m_Create_epoch);
    }
    if(m_Cancel_epochIsSet)
    {
        val[utility::conversions::to_string_t(U("cancel_epoch"))] = ModelBase::toJson(m_Cancel_epoch);
    }
    if(m_Delete_epochIsSet)
    {
        val[utility::conversions::to_string_t(U("delete_epoch"))] = ModelBase::toJson(m_Delete_epoch);
    }
    if(m_Tx_hashIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_hash"))] = ModelBase::toJson(m_Tx_hash);
    }
    if(m_Tx_log_indexIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_log_index"))] = ModelBase::toJson(m_Tx_log_index);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }

    return val;
}

bool Dex_OrderDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("owner"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("owner")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwner);
            setOwner(refVal_setOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("order_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("order_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderId);
            setOrderId(refVal_setOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from_batch_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from_batch_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromBatchId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromBatchId);
            setFromBatchId(refVal_setFromBatchId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from_epoch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from_epoch")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromEpoch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromEpoch);
            setFromEpoch(refVal_setFromEpoch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("until_batch_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("until_batch_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUntilBatchId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUntilBatchId);
            setUntilBatchId(refVal_setUntilBatchId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("until_epoch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("until_epoch")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUntilEpoch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUntilEpoch);
            setUntilEpoch(refVal_setUntilEpoch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buy_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buy_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBuyToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyToken);
            setBuyToken(refVal_setBuyToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sell_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sell_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSellToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSellToken);
            setSellToken(refVal_setSellToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_numerator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_numerator")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPriceNumerator;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceNumerator);
            setPriceNumerator(refVal_setPriceNumerator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price_denominator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price_denominator")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPriceDenominator;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceDenominator);
            setPriceDenominator(refVal_setPriceDenominator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_sell_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_sell_amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMaxSellAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxSellAmount);
            setMaxSellAmount(refVal_setMaxSellAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min_receive_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min_receive_amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMinReceiveAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinReceiveAmount);
            setMinReceiveAmount(refVal_setMinReceiveAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sold_volume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sold_volume")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSoldVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSoldVolume);
            setSoldVolume(refVal_setSoldVolume);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bought_volume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bought_volume")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBoughtVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoughtVolume);
            setBoughtVolume(refVal_setBoughtVolume);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("create_epoch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("create_epoch")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreateEpoch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreateEpoch);
            setCreateEpoch(refVal_setCreateEpoch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cancel_epoch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cancel_epoch")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCancelEpoch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCancelEpoch);
            setCancelEpoch(refVal_setCancelEpoch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delete_epoch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delete_epoch")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeleteEpoch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeleteEpoch);
            setDeleteEpoch(refVal_setDeleteEpoch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTxHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxHash);
            setTxHash(refVal_setTxHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_log_index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_log_index")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTxLogIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxLogIndex);
            setTxLogIndex(refVal_setTxLogIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    return ok;
}

void Dex_OrderDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("owner")), m_Owner));
    }
    if(m_Order_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("order_id")), m_Order_id));
    }
    if(m_From_batch_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from_batch_id")), m_From_batch_id));
    }
    if(m_From_epochIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from_epoch")), m_From_epoch));
    }
    if(m_Until_batch_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("until_batch_id")), m_Until_batch_id));
    }
    if(m_Until_epochIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("until_epoch")), m_Until_epoch));
    }
    if(m_Buy_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buy_token")), m_Buy_token));
    }
    if(m_Sell_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sell_token")), m_Sell_token));
    }
    if(m_Price_numeratorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_numerator")), m_Price_numerator));
    }
    if(m_Price_denominatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price_denominator")), m_Price_denominator));
    }
    if(m_Max_sell_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_sell_amount")), m_Max_sell_amount));
    }
    if(m_Min_receive_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min_receive_amount")), m_Min_receive_amount));
    }
    if(m_Sold_volumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sold_volume")), m_Sold_volume));
    }
    if(m_Bought_volumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bought_volume")), m_Bought_volume));
    }
    if(m_Create_epochIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("create_epoch")), m_Create_epoch));
    }
    if(m_Cancel_epochIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cancel_epoch")), m_Cancel_epoch));
    }
    if(m_Delete_epochIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delete_epoch")), m_Delete_epoch));
    }
    if(m_Tx_hashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_hash")), m_Tx_hash));
    }
    if(m_Tx_log_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_log_index")), m_Tx_log_index));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
}

bool Dex_OrderDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("owner"))))
    {
        utility::string_t refVal_setOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("owner"))), refVal_setOwner );
        setOwner(refVal_setOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("order_id"))))
    {
        int32_t refVal_setOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("order_id"))), refVal_setOrderId );
        setOrderId(refVal_setOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from_batch_id"))))
    {
        utility::string_t refVal_setFromBatchId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from_batch_id"))), refVal_setFromBatchId );
        setFromBatchId(refVal_setFromBatchId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from_epoch"))))
    {
        utility::string_t refVal_setFromEpoch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from_epoch"))), refVal_setFromEpoch );
        setFromEpoch(refVal_setFromEpoch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("until_batch_id"))))
    {
        utility::string_t refVal_setUntilBatchId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("until_batch_id"))), refVal_setUntilBatchId );
        setUntilBatchId(refVal_setUntilBatchId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("until_epoch"))))
    {
        utility::string_t refVal_setUntilEpoch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("until_epoch"))), refVal_setUntilEpoch );
        setUntilEpoch(refVal_setUntilEpoch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buy_token"))))
    {
        utility::string_t refVal_setBuyToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buy_token"))), refVal_setBuyToken );
        setBuyToken(refVal_setBuyToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sell_token"))))
    {
        utility::string_t refVal_setSellToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sell_token"))), refVal_setSellToken );
        setSellToken(refVal_setSellToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_numerator"))))
    {
        utility::string_t refVal_setPriceNumerator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_numerator"))), refVal_setPriceNumerator );
        setPriceNumerator(refVal_setPriceNumerator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price_denominator"))))
    {
        utility::string_t refVal_setPriceDenominator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price_denominator"))), refVal_setPriceDenominator );
        setPriceDenominator(refVal_setPriceDenominator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_sell_amount"))))
    {
        utility::string_t refVal_setMaxSellAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_sell_amount"))), refVal_setMaxSellAmount );
        setMaxSellAmount(refVal_setMaxSellAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min_receive_amount"))))
    {
        utility::string_t refVal_setMinReceiveAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min_receive_amount"))), refVal_setMinReceiveAmount );
        setMinReceiveAmount(refVal_setMinReceiveAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sold_volume"))))
    {
        utility::string_t refVal_setSoldVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sold_volume"))), refVal_setSoldVolume );
        setSoldVolume(refVal_setSoldVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bought_volume"))))
    {
        utility::string_t refVal_setBoughtVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bought_volume"))), refVal_setBoughtVolume );
        setBoughtVolume(refVal_setBoughtVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("create_epoch"))))
    {
        utility::string_t refVal_setCreateEpoch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("create_epoch"))), refVal_setCreateEpoch );
        setCreateEpoch(refVal_setCreateEpoch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cancel_epoch"))))
    {
        utility::string_t refVal_setCancelEpoch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cancel_epoch"))), refVal_setCancelEpoch );
        setCancelEpoch(refVal_setCancelEpoch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delete_epoch"))))
    {
        utility::string_t refVal_setDeleteEpoch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delete_epoch"))), refVal_setDeleteEpoch );
        setDeleteEpoch(refVal_setDeleteEpoch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_hash"))))
    {
        utility::string_t refVal_setTxHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_hash"))), refVal_setTxHash );
        setTxHash(refVal_setTxHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_log_index"))))
    {
        utility::string_t refVal_setTxLogIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_log_index"))), refVal_setTxLogIndex );
        setTxLogIndex(refVal_setTxLogIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    return ok;
}

utility::datetime Dex_OrderDTO::getEntryTime() const
{
    return m_Entry_time;
}

void Dex_OrderDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool Dex_OrderDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void Dex_OrderDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime Dex_OrderDTO::getRecvTime() const
{
    return m_Recv_time;
}

void Dex_OrderDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool Dex_OrderDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void Dex_OrderDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t Dex_OrderDTO::getBlockNumber() const
{
    return m_Block_number;
}

void Dex_OrderDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool Dex_OrderDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void Dex_OrderDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t Dex_OrderDTO::getId() const
{
    return m_Id;
}

void Dex_OrderDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Dex_OrderDTO::idIsSet() const
{
    return m_IdIsSet;
}

void Dex_OrderDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Dex_OrderDTO::getOwner() const
{
    return m_Owner;
}

void Dex_OrderDTO::setOwner(const utility::string_t& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}

bool Dex_OrderDTO::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void Dex_OrderDTO::unsetOwner()
{
    m_OwnerIsSet = false;
}
int32_t Dex_OrderDTO::getOrderId() const
{
    return m_Order_id;
}

void Dex_OrderDTO::setOrderId(int32_t value)
{
    m_Order_id = value;
    m_Order_idIsSet = true;
}

bool Dex_OrderDTO::orderIdIsSet() const
{
    return m_Order_idIsSet;
}

void Dex_OrderDTO::unsetOrder_id()
{
    m_Order_idIsSet = false;
}
utility::string_t Dex_OrderDTO::getFromBatchId() const
{
    return m_From_batch_id;
}

void Dex_OrderDTO::setFromBatchId(const utility::string_t& value)
{
    m_From_batch_id = value;
    m_From_batch_idIsSet = true;
}

bool Dex_OrderDTO::fromBatchIdIsSet() const
{
    return m_From_batch_idIsSet;
}

void Dex_OrderDTO::unsetFrom_batch_id()
{
    m_From_batch_idIsSet = false;
}
utility::string_t Dex_OrderDTO::getFromEpoch() const
{
    return m_From_epoch;
}

void Dex_OrderDTO::setFromEpoch(const utility::string_t& value)
{
    m_From_epoch = value;
    m_From_epochIsSet = true;
}

bool Dex_OrderDTO::fromEpochIsSet() const
{
    return m_From_epochIsSet;
}

void Dex_OrderDTO::unsetFrom_epoch()
{
    m_From_epochIsSet = false;
}
utility::string_t Dex_OrderDTO::getUntilBatchId() const
{
    return m_Until_batch_id;
}

void Dex_OrderDTO::setUntilBatchId(const utility::string_t& value)
{
    m_Until_batch_id = value;
    m_Until_batch_idIsSet = true;
}

bool Dex_OrderDTO::untilBatchIdIsSet() const
{
    return m_Until_batch_idIsSet;
}

void Dex_OrderDTO::unsetUntil_batch_id()
{
    m_Until_batch_idIsSet = false;
}
utility::string_t Dex_OrderDTO::getUntilEpoch() const
{
    return m_Until_epoch;
}

void Dex_OrderDTO::setUntilEpoch(const utility::string_t& value)
{
    m_Until_epoch = value;
    m_Until_epochIsSet = true;
}

bool Dex_OrderDTO::untilEpochIsSet() const
{
    return m_Until_epochIsSet;
}

void Dex_OrderDTO::unsetUntil_epoch()
{
    m_Until_epochIsSet = false;
}
utility::string_t Dex_OrderDTO::getBuyToken() const
{
    return m_Buy_token;
}

void Dex_OrderDTO::setBuyToken(const utility::string_t& value)
{
    m_Buy_token = value;
    m_Buy_tokenIsSet = true;
}

bool Dex_OrderDTO::buyTokenIsSet() const
{
    return m_Buy_tokenIsSet;
}

void Dex_OrderDTO::unsetBuy_token()
{
    m_Buy_tokenIsSet = false;
}
utility::string_t Dex_OrderDTO::getSellToken() const
{
    return m_Sell_token;
}

void Dex_OrderDTO::setSellToken(const utility::string_t& value)
{
    m_Sell_token = value;
    m_Sell_tokenIsSet = true;
}

bool Dex_OrderDTO::sellTokenIsSet() const
{
    return m_Sell_tokenIsSet;
}

void Dex_OrderDTO::unsetSell_token()
{
    m_Sell_tokenIsSet = false;
}
utility::string_t Dex_OrderDTO::getPriceNumerator() const
{
    return m_Price_numerator;
}

void Dex_OrderDTO::setPriceNumerator(const utility::string_t& value)
{
    m_Price_numerator = value;
    m_Price_numeratorIsSet = true;
}

bool Dex_OrderDTO::priceNumeratorIsSet() const
{
    return m_Price_numeratorIsSet;
}

void Dex_OrderDTO::unsetPrice_numerator()
{
    m_Price_numeratorIsSet = false;
}
utility::string_t Dex_OrderDTO::getPriceDenominator() const
{
    return m_Price_denominator;
}

void Dex_OrderDTO::setPriceDenominator(const utility::string_t& value)
{
    m_Price_denominator = value;
    m_Price_denominatorIsSet = true;
}

bool Dex_OrderDTO::priceDenominatorIsSet() const
{
    return m_Price_denominatorIsSet;
}

void Dex_OrderDTO::unsetPrice_denominator()
{
    m_Price_denominatorIsSet = false;
}
utility::string_t Dex_OrderDTO::getMaxSellAmount() const
{
    return m_Max_sell_amount;
}

void Dex_OrderDTO::setMaxSellAmount(const utility::string_t& value)
{
    m_Max_sell_amount = value;
    m_Max_sell_amountIsSet = true;
}

bool Dex_OrderDTO::maxSellAmountIsSet() const
{
    return m_Max_sell_amountIsSet;
}

void Dex_OrderDTO::unsetMax_sell_amount()
{
    m_Max_sell_amountIsSet = false;
}
utility::string_t Dex_OrderDTO::getMinReceiveAmount() const
{
    return m_Min_receive_amount;
}

void Dex_OrderDTO::setMinReceiveAmount(const utility::string_t& value)
{
    m_Min_receive_amount = value;
    m_Min_receive_amountIsSet = true;
}

bool Dex_OrderDTO::minReceiveAmountIsSet() const
{
    return m_Min_receive_amountIsSet;
}

void Dex_OrderDTO::unsetMin_receive_amount()
{
    m_Min_receive_amountIsSet = false;
}
utility::string_t Dex_OrderDTO::getSoldVolume() const
{
    return m_Sold_volume;
}

void Dex_OrderDTO::setSoldVolume(const utility::string_t& value)
{
    m_Sold_volume = value;
    m_Sold_volumeIsSet = true;
}

bool Dex_OrderDTO::soldVolumeIsSet() const
{
    return m_Sold_volumeIsSet;
}

void Dex_OrderDTO::unsetSold_volume()
{
    m_Sold_volumeIsSet = false;
}
utility::string_t Dex_OrderDTO::getBoughtVolume() const
{
    return m_Bought_volume;
}

void Dex_OrderDTO::setBoughtVolume(const utility::string_t& value)
{
    m_Bought_volume = value;
    m_Bought_volumeIsSet = true;
}

bool Dex_OrderDTO::boughtVolumeIsSet() const
{
    return m_Bought_volumeIsSet;
}

void Dex_OrderDTO::unsetBought_volume()
{
    m_Bought_volumeIsSet = false;
}
utility::string_t Dex_OrderDTO::getCreateEpoch() const
{
    return m_Create_epoch;
}

void Dex_OrderDTO::setCreateEpoch(const utility::string_t& value)
{
    m_Create_epoch = value;
    m_Create_epochIsSet = true;
}

bool Dex_OrderDTO::createEpochIsSet() const
{
    return m_Create_epochIsSet;
}

void Dex_OrderDTO::unsetCreate_epoch()
{
    m_Create_epochIsSet = false;
}
utility::string_t Dex_OrderDTO::getCancelEpoch() const
{
    return m_Cancel_epoch;
}

void Dex_OrderDTO::setCancelEpoch(const utility::string_t& value)
{
    m_Cancel_epoch = value;
    m_Cancel_epochIsSet = true;
}

bool Dex_OrderDTO::cancelEpochIsSet() const
{
    return m_Cancel_epochIsSet;
}

void Dex_OrderDTO::unsetCancel_epoch()
{
    m_Cancel_epochIsSet = false;
}
utility::string_t Dex_OrderDTO::getDeleteEpoch() const
{
    return m_Delete_epoch;
}

void Dex_OrderDTO::setDeleteEpoch(const utility::string_t& value)
{
    m_Delete_epoch = value;
    m_Delete_epochIsSet = true;
}

bool Dex_OrderDTO::deleteEpochIsSet() const
{
    return m_Delete_epochIsSet;
}

void Dex_OrderDTO::unsetDelete_epoch()
{
    m_Delete_epochIsSet = false;
}
utility::string_t Dex_OrderDTO::getTxHash() const
{
    return m_Tx_hash;
}

void Dex_OrderDTO::setTxHash(const utility::string_t& value)
{
    m_Tx_hash = value;
    m_Tx_hashIsSet = true;
}

bool Dex_OrderDTO::txHashIsSet() const
{
    return m_Tx_hashIsSet;
}

void Dex_OrderDTO::unsetTx_hash()
{
    m_Tx_hashIsSet = false;
}
utility::string_t Dex_OrderDTO::getTxLogIndex() const
{
    return m_Tx_log_index;
}

void Dex_OrderDTO::setTxLogIndex(const utility::string_t& value)
{
    m_Tx_log_index = value;
    m_Tx_log_indexIsSet = true;
}

bool Dex_OrderDTO::txLogIndexIsSet() const
{
    return m_Tx_log_indexIsSet;
}

void Dex_OrderDTO::unsetTx_log_index()
{
    m_Tx_log_indexIsSet = false;
}
int64_t Dex_OrderDTO::getVid() const
{
    return m_Vid;
}

void Dex_OrderDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool Dex_OrderDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void Dex_OrderDTO::unsetVid()
{
    m_VidIsSet = false;
}
}
}
}
}


