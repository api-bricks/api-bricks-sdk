/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Curve_ContractDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Curve_ContractDTO::Curve_ContractDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Added = utility::conversions::to_string_t("");
    m_AddedIsSet = false;
    m_Added_at_block = utility::conversions::to_string_t("");
    m_Added_at_blockIsSet = false;
    m_Added_at_transaction = utility::conversions::to_string_t("");
    m_Added_at_transactionIsSet = false;
    m_Modified = utility::conversions::to_string_t("");
    m_ModifiedIsSet = false;
    m_Modified_at_block = utility::conversions::to_string_t("");
    m_Modified_at_blockIsSet = false;
    m_Modified_at_transaction = utility::conversions::to_string_t("");
    m_Modified_at_transactionIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
}

Curve_ContractDTO::~Curve_ContractDTO()
{
}

void Curve_ContractDTO::validate()
{
    // TODO: implement validation
}

web::json::value Curve_ContractDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_AddedIsSet)
    {
        val[utility::conversions::to_string_t(U("added"))] = ModelBase::toJson(m_Added);
    }
    if(m_Added_at_blockIsSet)
    {
        val[utility::conversions::to_string_t(U("added_at_block"))] = ModelBase::toJson(m_Added_at_block);
    }
    if(m_Added_at_transactionIsSet)
    {
        val[utility::conversions::to_string_t(U("added_at_transaction"))] = ModelBase::toJson(m_Added_at_transaction);
    }
    if(m_ModifiedIsSet)
    {
        val[utility::conversions::to_string_t(U("modified"))] = ModelBase::toJson(m_Modified);
    }
    if(m_Modified_at_blockIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_at_block"))] = ModelBase::toJson(m_Modified_at_block);
    }
    if(m_Modified_at_transactionIsSet)
    {
        val[utility::conversions::to_string_t(U("modified_at_transaction"))] = ModelBase::toJson(m_Modified_at_transaction);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }

    return val;
}

bool Curve_ContractDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("added"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("added")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdded);
            setAdded(refVal_setAdded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("added_at_block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("added_at_block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddedAtBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddedAtBlock);
            setAddedAtBlock(refVal_setAddedAtBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("added_at_transaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("added_at_transaction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddedAtTransaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddedAtTransaction);
            setAddedAtTransaction(refVal_setAddedAtTransaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModified);
            setModified(refVal_setModified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_at_block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_at_block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setModifiedAtBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedAtBlock);
            setModifiedAtBlock(refVal_setModifiedAtBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modified_at_transaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modified_at_transaction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setModifiedAtTransaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModifiedAtTransaction);
            setModifiedAtTransaction(refVal_setModifiedAtTransaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    return ok;
}

void Curve_ContractDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_AddedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("added")), m_Added));
    }
    if(m_Added_at_blockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("added_at_block")), m_Added_at_block));
    }
    if(m_Added_at_transactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("added_at_transaction")), m_Added_at_transaction));
    }
    if(m_ModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified")), m_Modified));
    }
    if(m_Modified_at_blockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_at_block")), m_Modified_at_block));
    }
    if(m_Modified_at_transactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modified_at_transaction")), m_Modified_at_transaction));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
}

bool Curve_ContractDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("added"))))
    {
        utility::string_t refVal_setAdded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("added"))), refVal_setAdded );
        setAdded(refVal_setAdded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("added_at_block"))))
    {
        utility::string_t refVal_setAddedAtBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("added_at_block"))), refVal_setAddedAtBlock );
        setAddedAtBlock(refVal_setAddedAtBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("added_at_transaction"))))
    {
        utility::string_t refVal_setAddedAtTransaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("added_at_transaction"))), refVal_setAddedAtTransaction );
        setAddedAtTransaction(refVal_setAddedAtTransaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified"))))
    {
        utility::string_t refVal_setModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified"))), refVal_setModified );
        setModified(refVal_setModified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_at_block"))))
    {
        utility::string_t refVal_setModifiedAtBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_at_block"))), refVal_setModifiedAtBlock );
        setModifiedAtBlock(refVal_setModifiedAtBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modified_at_transaction"))))
    {
        utility::string_t refVal_setModifiedAtTransaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modified_at_transaction"))), refVal_setModifiedAtTransaction );
        setModifiedAtTransaction(refVal_setModifiedAtTransaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    return ok;
}

utility::datetime Curve_ContractDTO::getEntryTime() const
{
    return m_Entry_time;
}

void Curve_ContractDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool Curve_ContractDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void Curve_ContractDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime Curve_ContractDTO::getRecvTime() const
{
    return m_Recv_time;
}

void Curve_ContractDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool Curve_ContractDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void Curve_ContractDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t Curve_ContractDTO::getBlockNumber() const
{
    return m_Block_number;
}

void Curve_ContractDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool Curve_ContractDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void Curve_ContractDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t Curve_ContractDTO::getId() const
{
    return m_Id;
}

void Curve_ContractDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Curve_ContractDTO::idIsSet() const
{
    return m_IdIsSet;
}

void Curve_ContractDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Curve_ContractDTO::getDescription() const
{
    return m_Description;
}

void Curve_ContractDTO::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Curve_ContractDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Curve_ContractDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Curve_ContractDTO::getAdded() const
{
    return m_Added;
}

void Curve_ContractDTO::setAdded(const utility::string_t& value)
{
    m_Added = value;
    m_AddedIsSet = true;
}

bool Curve_ContractDTO::addedIsSet() const
{
    return m_AddedIsSet;
}

void Curve_ContractDTO::unsetAdded()
{
    m_AddedIsSet = false;
}
utility::string_t Curve_ContractDTO::getAddedAtBlock() const
{
    return m_Added_at_block;
}

void Curve_ContractDTO::setAddedAtBlock(const utility::string_t& value)
{
    m_Added_at_block = value;
    m_Added_at_blockIsSet = true;
}

bool Curve_ContractDTO::addedAtBlockIsSet() const
{
    return m_Added_at_blockIsSet;
}

void Curve_ContractDTO::unsetAdded_at_block()
{
    m_Added_at_blockIsSet = false;
}
utility::string_t Curve_ContractDTO::getAddedAtTransaction() const
{
    return m_Added_at_transaction;
}

void Curve_ContractDTO::setAddedAtTransaction(const utility::string_t& value)
{
    m_Added_at_transaction = value;
    m_Added_at_transactionIsSet = true;
}

bool Curve_ContractDTO::addedAtTransactionIsSet() const
{
    return m_Added_at_transactionIsSet;
}

void Curve_ContractDTO::unsetAdded_at_transaction()
{
    m_Added_at_transactionIsSet = false;
}
utility::string_t Curve_ContractDTO::getModified() const
{
    return m_Modified;
}

void Curve_ContractDTO::setModified(const utility::string_t& value)
{
    m_Modified = value;
    m_ModifiedIsSet = true;
}

bool Curve_ContractDTO::modifiedIsSet() const
{
    return m_ModifiedIsSet;
}

void Curve_ContractDTO::unsetModified()
{
    m_ModifiedIsSet = false;
}
utility::string_t Curve_ContractDTO::getModifiedAtBlock() const
{
    return m_Modified_at_block;
}

void Curve_ContractDTO::setModifiedAtBlock(const utility::string_t& value)
{
    m_Modified_at_block = value;
    m_Modified_at_blockIsSet = true;
}

bool Curve_ContractDTO::modifiedAtBlockIsSet() const
{
    return m_Modified_at_blockIsSet;
}

void Curve_ContractDTO::unsetModified_at_block()
{
    m_Modified_at_blockIsSet = false;
}
utility::string_t Curve_ContractDTO::getModifiedAtTransaction() const
{
    return m_Modified_at_transaction;
}

void Curve_ContractDTO::setModifiedAtTransaction(const utility::string_t& value)
{
    m_Modified_at_transaction = value;
    m_Modified_at_transactionIsSet = true;
}

bool Curve_ContractDTO::modifiedAtTransactionIsSet() const
{
    return m_Modified_at_transactionIsSet;
}

void Curve_ContractDTO::unsetModified_at_transaction()
{
    m_Modified_at_transactionIsSet = false;
}
int64_t Curve_ContractDTO::getVid() const
{
    return m_Vid;
}

void Curve_ContractDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool Curve_ContractDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void Curve_ContractDTO::unsetVid()
{
    m_VidIsSet = false;
}
}
}
}
}


