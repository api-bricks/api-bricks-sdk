/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CRYPTOPUNKS_DataSourcesDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CRYPTOPUNKS_DataSourcesDTO::CRYPTOPUNKS_DataSourcesDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Vid = 0;
    m_VidIsSet = false;
    m_Block_range = utility::conversions::to_string_t("");
    m_Block_rangeIsSet = false;
    m_Causality_region = 0;
    m_Causality_regionIsSet = false;
    m_Manifest_idx = 0;
    m_Manifest_idxIsSet = false;
    m_Parent = 0;
    m_ParentIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Param = utility::conversions::to_string_t("");
    m_ParamIsSet = false;
    m_Context = utility::conversions::to_string_t("");
    m_ContextIsSet = false;
    m_Done_at = 0;
    m_Done_atIsSet = false;
}

CRYPTOPUNKS_DataSourcesDTO::~CRYPTOPUNKS_DataSourcesDTO()
{
}

void CRYPTOPUNKS_DataSourcesDTO::validate()
{
    // TODO: implement validation
}

web::json::value CRYPTOPUNKS_DataSourcesDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }
    if(m_Block_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("block_range"))] = ModelBase::toJson(m_Block_range);
    }
    if(m_Causality_regionIsSet)
    {
        val[utility::conversions::to_string_t(U("causality_region"))] = ModelBase::toJson(m_Causality_region);
    }
    if(m_Manifest_idxIsSet)
    {
        val[utility::conversions::to_string_t(U("manifest_idx"))] = ModelBase::toJson(m_Manifest_idx);
    }
    if(m_ParentIsSet)
    {
        val[utility::conversions::to_string_t(U("parent"))] = ModelBase::toJson(m_Parent);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ParamIsSet)
    {
        val[utility::conversions::to_string_t(U("param"))] = ModelBase::toJson(m_Param);
    }
    if(m_ContextIsSet)
    {
        val[utility::conversions::to_string_t(U("context"))] = ModelBase::toJson(m_Context);
    }
    if(m_Done_atIsSet)
    {
        val[utility::conversions::to_string_t(U("done_at"))] = ModelBase::toJson(m_Done_at);
    }

    return val;
}

bool CRYPTOPUNKS_DataSourcesDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_range")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockRange);
            setBlockRange(refVal_setBlockRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("causality_region"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("causality_region")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCausalityRegion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCausalityRegion);
            setCausalityRegion(refVal_setCausalityRegion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("manifest_idx"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("manifest_idx")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setManifestIdx;
            ok &= ModelBase::fromJson(fieldValue, refVal_setManifestIdx);
            setManifestIdx(refVal_setManifestIdx);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parent")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setParent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParent);
            setParent(refVal_setParent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("param"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("param")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setParam;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParam);
            setParam(refVal_setParam);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("context"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("context")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContext;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContext);
            setContext(refVal_setContext);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("done_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("done_at")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDoneAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDoneAt);
            setDoneAt(refVal_setDoneAt);
        }
    }
    return ok;
}

void CRYPTOPUNKS_DataSourcesDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
    if(m_Block_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_range")), m_Block_range));
    }
    if(m_Causality_regionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("causality_region")), m_Causality_region));
    }
    if(m_Manifest_idxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("manifest_idx")), m_Manifest_idx));
    }
    if(m_ParentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parent")), m_Parent));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ParamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("param")), m_Param));
    }
    if(m_ContextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("context")), m_Context));
    }
    if(m_Done_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("done_at")), m_Done_at));
    }
}

bool CRYPTOPUNKS_DataSourcesDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int32_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_range"))))
    {
        utility::string_t refVal_setBlockRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_range"))), refVal_setBlockRange );
        setBlockRange(refVal_setBlockRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("causality_region"))))
    {
        int32_t refVal_setCausalityRegion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("causality_region"))), refVal_setCausalityRegion );
        setCausalityRegion(refVal_setCausalityRegion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("manifest_idx"))))
    {
        int32_t refVal_setManifestIdx;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("manifest_idx"))), refVal_setManifestIdx );
        setManifestIdx(refVal_setManifestIdx);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parent"))))
    {
        int32_t refVal_setParent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parent"))), refVal_setParent );
        setParent(refVal_setParent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("param"))))
    {
        utility::string_t refVal_setParam;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("param"))), refVal_setParam );
        setParam(refVal_setParam);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("context"))))
    {
        utility::string_t refVal_setContext;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("context"))), refVal_setContext );
        setContext(refVal_setContext);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("done_at"))))
    {
        int32_t refVal_setDoneAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("done_at"))), refVal_setDoneAt );
        setDoneAt(refVal_setDoneAt);
    }
    return ok;
}

utility::datetime CRYPTOPUNKS_DataSourcesDTO::getEntryTime() const
{
    return m_Entry_time;
}

void CRYPTOPUNKS_DataSourcesDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime CRYPTOPUNKS_DataSourcesDTO::getRecvTime() const
{
    return m_Recv_time;
}

void CRYPTOPUNKS_DataSourcesDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t CRYPTOPUNKS_DataSourcesDTO::getBlockNumber() const
{
    return m_Block_number;
}

void CRYPTOPUNKS_DataSourcesDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
int32_t CRYPTOPUNKS_DataSourcesDTO::getVid() const
{
    return m_Vid;
}

void CRYPTOPUNKS_DataSourcesDTO::setVid(int32_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetVid()
{
    m_VidIsSet = false;
}
utility::string_t CRYPTOPUNKS_DataSourcesDTO::getBlockRange() const
{
    return m_Block_range;
}

void CRYPTOPUNKS_DataSourcesDTO::setBlockRange(const utility::string_t& value)
{
    m_Block_range = value;
    m_Block_rangeIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::blockRangeIsSet() const
{
    return m_Block_rangeIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetBlock_range()
{
    m_Block_rangeIsSet = false;
}
int32_t CRYPTOPUNKS_DataSourcesDTO::getCausalityRegion() const
{
    return m_Causality_region;
}

void CRYPTOPUNKS_DataSourcesDTO::setCausalityRegion(int32_t value)
{
    m_Causality_region = value;
    m_Causality_regionIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::causalityRegionIsSet() const
{
    return m_Causality_regionIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetCausality_region()
{
    m_Causality_regionIsSet = false;
}
int32_t CRYPTOPUNKS_DataSourcesDTO::getManifestIdx() const
{
    return m_Manifest_idx;
}

void CRYPTOPUNKS_DataSourcesDTO::setManifestIdx(int32_t value)
{
    m_Manifest_idx = value;
    m_Manifest_idxIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::manifestIdxIsSet() const
{
    return m_Manifest_idxIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetManifest_idx()
{
    m_Manifest_idxIsSet = false;
}
int32_t CRYPTOPUNKS_DataSourcesDTO::getParent() const
{
    return m_Parent;
}

void CRYPTOPUNKS_DataSourcesDTO::setParent(int32_t value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::parentIsSet() const
{
    return m_ParentIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetParent()
{
    m_ParentIsSet = false;
}
utility::string_t CRYPTOPUNKS_DataSourcesDTO::getId() const
{
    return m_Id;
}

void CRYPTOPUNKS_DataSourcesDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::idIsSet() const
{
    return m_IdIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CRYPTOPUNKS_DataSourcesDTO::getParam() const
{
    return m_Param;
}

void CRYPTOPUNKS_DataSourcesDTO::setParam(const utility::string_t& value)
{
    m_Param = value;
    m_ParamIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::paramIsSet() const
{
    return m_ParamIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetParam()
{
    m_ParamIsSet = false;
}
utility::string_t CRYPTOPUNKS_DataSourcesDTO::getContext() const
{
    return m_Context;
}

void CRYPTOPUNKS_DataSourcesDTO::setContext(const utility::string_t& value)
{
    m_Context = value;
    m_ContextIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::contextIsSet() const
{
    return m_ContextIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetContext()
{
    m_ContextIsSet = false;
}
int32_t CRYPTOPUNKS_DataSourcesDTO::getDoneAt() const
{
    return m_Done_at;
}

void CRYPTOPUNKS_DataSourcesDTO::setDoneAt(int32_t value)
{
    m_Done_at = value;
    m_Done_atIsSet = true;
}

bool CRYPTOPUNKS_DataSourcesDTO::doneAtIsSet() const
{
    return m_Done_atIsSet;
}

void CRYPTOPUNKS_DataSourcesDTO::unsetDone_at()
{
    m_Done_atIsSet = false;
}
}
}
}
}


