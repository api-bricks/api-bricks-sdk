/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FactoryV3DTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FactoryV3DTO::FactoryV3DTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Pool_count = utility::conversions::to_string_t("");
    m_Pool_countIsSet = false;
    m_Tx_count = utility::conversions::to_string_t("");
    m_Tx_countIsSet = false;
    m_Total_volume_usd = utility::conversions::to_string_t("");
    m_Total_volume_usdIsSet = false;
    m_Total_volume_eth = utility::conversions::to_string_t("");
    m_Total_volume_ethIsSet = false;
    m_Total_fees_usd = utility::conversions::to_string_t("");
    m_Total_fees_usdIsSet = false;
    m_Total_fees_eth = utility::conversions::to_string_t("");
    m_Total_fees_ethIsSet = false;
    m_Untracked_volume_usd = utility::conversions::to_string_t("");
    m_Untracked_volume_usdIsSet = false;
    m_Total_value_locked_usd = utility::conversions::to_string_t("");
    m_Total_value_locked_usdIsSet = false;
    m_Total_value_locked_eth = utility::conversions::to_string_t("");
    m_Total_value_locked_ethIsSet = false;
    m_Total_value_locked_usd_untracked = utility::conversions::to_string_t("");
    m_Total_value_locked_usd_untrackedIsSet = false;
    m_Total_value_locked_eth_untracked = utility::conversions::to_string_t("");
    m_Total_value_locked_eth_untrackedIsSet = false;
    m_Owner = utility::conversions::to_string_t("");
    m_OwnerIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
}

FactoryV3DTO::~FactoryV3DTO()
{
}

void FactoryV3DTO::validate()
{
    // TODO: implement validation
}

web::json::value FactoryV3DTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Pool_countIsSet)
    {
        val[utility::conversions::to_string_t(U("pool_count"))] = ModelBase::toJson(m_Pool_count);
    }
    if(m_Tx_countIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_count"))] = ModelBase::toJson(m_Tx_count);
    }
    if(m_Total_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_volume_usd"))] = ModelBase::toJson(m_Total_volume_usd);
    }
    if(m_Total_volume_ethIsSet)
    {
        val[utility::conversions::to_string_t(U("total_volume_eth"))] = ModelBase::toJson(m_Total_volume_eth);
    }
    if(m_Total_fees_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_fees_usd"))] = ModelBase::toJson(m_Total_fees_usd);
    }
    if(m_Total_fees_ethIsSet)
    {
        val[utility::conversions::to_string_t(U("total_fees_eth"))] = ModelBase::toJson(m_Total_fees_eth);
    }
    if(m_Untracked_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("untracked_volume_usd"))] = ModelBase::toJson(m_Untracked_volume_usd);
    }
    if(m_Total_value_locked_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_usd"))] = ModelBase::toJson(m_Total_value_locked_usd);
    }
    if(m_Total_value_locked_ethIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_eth"))] = ModelBase::toJson(m_Total_value_locked_eth);
    }
    if(m_Total_value_locked_usd_untrackedIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_usd_untracked"))] = ModelBase::toJson(m_Total_value_locked_usd_untracked);
    }
    if(m_Total_value_locked_eth_untrackedIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_eth_untracked"))] = ModelBase::toJson(m_Total_value_locked_eth_untracked);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t(U("owner"))] = ModelBase::toJson(m_Owner);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }

    return val;
}

bool FactoryV3DTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPoolCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPoolCount);
            setPoolCount(refVal_setPoolCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTxCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxCount);
            setTxCount(refVal_setTxCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalVolumeUsd);
            setTotalVolumeUsd(refVal_setTotalVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_volume_eth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_volume_eth")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalVolumeEth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalVolumeEth);
            setTotalVolumeEth(refVal_setTotalVolumeEth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_fees_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_fees_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalFeesUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalFeesUsd);
            setTotalFeesUsd(refVal_setTotalFeesUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_fees_eth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_fees_eth")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalFeesEth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalFeesEth);
            setTotalFeesEth(refVal_setTotalFeesEth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("untracked_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("untracked_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUntrackedVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUntrackedVolumeUsd);
            setUntrackedVolumeUsd(refVal_setUntrackedVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedUsd);
            setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_eth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_eth")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedEth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedEth);
            setTotalValueLockedEth(refVal_setTotalValueLockedEth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_usd_untracked"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_usd_untracked")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedUsdUntracked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedUsdUntracked);
            setTotalValueLockedUsdUntracked(refVal_setTotalValueLockedUsdUntracked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_eth_untracked"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_eth_untracked")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedEthUntracked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedEthUntracked);
            setTotalValueLockedEthUntracked(refVal_setTotalValueLockedEthUntracked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("owner"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("owner")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwner);
            setOwner(refVal_setOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    return ok;
}

void FactoryV3DTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Pool_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool_count")), m_Pool_count));
    }
    if(m_Tx_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_count")), m_Tx_count));
    }
    if(m_Total_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_volume_usd")), m_Total_volume_usd));
    }
    if(m_Total_volume_ethIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_volume_eth")), m_Total_volume_eth));
    }
    if(m_Total_fees_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_fees_usd")), m_Total_fees_usd));
    }
    if(m_Total_fees_ethIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_fees_eth")), m_Total_fees_eth));
    }
    if(m_Untracked_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("untracked_volume_usd")), m_Untracked_volume_usd));
    }
    if(m_Total_value_locked_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_usd")), m_Total_value_locked_usd));
    }
    if(m_Total_value_locked_ethIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_eth")), m_Total_value_locked_eth));
    }
    if(m_Total_value_locked_usd_untrackedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_usd_untracked")), m_Total_value_locked_usd_untracked));
    }
    if(m_Total_value_locked_eth_untrackedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_eth_untracked")), m_Total_value_locked_eth_untracked));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("owner")), m_Owner));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
}

bool FactoryV3DTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool_count"))))
    {
        utility::string_t refVal_setPoolCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool_count"))), refVal_setPoolCount );
        setPoolCount(refVal_setPoolCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_count"))))
    {
        utility::string_t refVal_setTxCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_count"))), refVal_setTxCount );
        setTxCount(refVal_setTxCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_volume_usd"))))
    {
        utility::string_t refVal_setTotalVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_volume_usd"))), refVal_setTotalVolumeUsd );
        setTotalVolumeUsd(refVal_setTotalVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_volume_eth"))))
    {
        utility::string_t refVal_setTotalVolumeEth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_volume_eth"))), refVal_setTotalVolumeEth );
        setTotalVolumeEth(refVal_setTotalVolumeEth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_fees_usd"))))
    {
        utility::string_t refVal_setTotalFeesUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_fees_usd"))), refVal_setTotalFeesUsd );
        setTotalFeesUsd(refVal_setTotalFeesUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_fees_eth"))))
    {
        utility::string_t refVal_setTotalFeesEth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_fees_eth"))), refVal_setTotalFeesEth );
        setTotalFeesEth(refVal_setTotalFeesEth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("untracked_volume_usd"))))
    {
        utility::string_t refVal_setUntrackedVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("untracked_volume_usd"))), refVal_setUntrackedVolumeUsd );
        setUntrackedVolumeUsd(refVal_setUntrackedVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        utility::string_t refVal_setTotalValueLockedUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_usd"))), refVal_setTotalValueLockedUsd );
        setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_eth"))))
    {
        utility::string_t refVal_setTotalValueLockedEth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_eth"))), refVal_setTotalValueLockedEth );
        setTotalValueLockedEth(refVal_setTotalValueLockedEth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_usd_untracked"))))
    {
        utility::string_t refVal_setTotalValueLockedUsdUntracked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_usd_untracked"))), refVal_setTotalValueLockedUsdUntracked );
        setTotalValueLockedUsdUntracked(refVal_setTotalValueLockedUsdUntracked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_eth_untracked"))))
    {
        utility::string_t refVal_setTotalValueLockedEthUntracked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_eth_untracked"))), refVal_setTotalValueLockedEthUntracked );
        setTotalValueLockedEthUntracked(refVal_setTotalValueLockedEthUntracked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("owner"))))
    {
        utility::string_t refVal_setOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("owner"))), refVal_setOwner );
        setOwner(refVal_setOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    return ok;
}

utility::datetime FactoryV3DTO::getEntryTime() const
{
    return m_Entry_time;
}

void FactoryV3DTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool FactoryV3DTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void FactoryV3DTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime FactoryV3DTO::getRecvTime() const
{
    return m_Recv_time;
}

void FactoryV3DTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool FactoryV3DTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void FactoryV3DTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t FactoryV3DTO::getBlockNumber() const
{
    return m_Block_number;
}

void FactoryV3DTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool FactoryV3DTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void FactoryV3DTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t FactoryV3DTO::getId() const
{
    return m_Id;
}

void FactoryV3DTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FactoryV3DTO::idIsSet() const
{
    return m_IdIsSet;
}

void FactoryV3DTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t FactoryV3DTO::getPoolCount() const
{
    return m_Pool_count;
}

void FactoryV3DTO::setPoolCount(const utility::string_t& value)
{
    m_Pool_count = value;
    m_Pool_countIsSet = true;
}

bool FactoryV3DTO::poolCountIsSet() const
{
    return m_Pool_countIsSet;
}

void FactoryV3DTO::unsetPool_count()
{
    m_Pool_countIsSet = false;
}
utility::string_t FactoryV3DTO::getTxCount() const
{
    return m_Tx_count;
}

void FactoryV3DTO::setTxCount(const utility::string_t& value)
{
    m_Tx_count = value;
    m_Tx_countIsSet = true;
}

bool FactoryV3DTO::txCountIsSet() const
{
    return m_Tx_countIsSet;
}

void FactoryV3DTO::unsetTx_count()
{
    m_Tx_countIsSet = false;
}
utility::string_t FactoryV3DTO::getTotalVolumeUsd() const
{
    return m_Total_volume_usd;
}

void FactoryV3DTO::setTotalVolumeUsd(const utility::string_t& value)
{
    m_Total_volume_usd = value;
    m_Total_volume_usdIsSet = true;
}

bool FactoryV3DTO::totalVolumeUsdIsSet() const
{
    return m_Total_volume_usdIsSet;
}

void FactoryV3DTO::unsetTotal_volume_usd()
{
    m_Total_volume_usdIsSet = false;
}
utility::string_t FactoryV3DTO::getTotalVolumeEth() const
{
    return m_Total_volume_eth;
}

void FactoryV3DTO::setTotalVolumeEth(const utility::string_t& value)
{
    m_Total_volume_eth = value;
    m_Total_volume_ethIsSet = true;
}

bool FactoryV3DTO::totalVolumeEthIsSet() const
{
    return m_Total_volume_ethIsSet;
}

void FactoryV3DTO::unsetTotal_volume_eth()
{
    m_Total_volume_ethIsSet = false;
}
utility::string_t FactoryV3DTO::getTotalFeesUsd() const
{
    return m_Total_fees_usd;
}

void FactoryV3DTO::setTotalFeesUsd(const utility::string_t& value)
{
    m_Total_fees_usd = value;
    m_Total_fees_usdIsSet = true;
}

bool FactoryV3DTO::totalFeesUsdIsSet() const
{
    return m_Total_fees_usdIsSet;
}

void FactoryV3DTO::unsetTotal_fees_usd()
{
    m_Total_fees_usdIsSet = false;
}
utility::string_t FactoryV3DTO::getTotalFeesEth() const
{
    return m_Total_fees_eth;
}

void FactoryV3DTO::setTotalFeesEth(const utility::string_t& value)
{
    m_Total_fees_eth = value;
    m_Total_fees_ethIsSet = true;
}

bool FactoryV3DTO::totalFeesEthIsSet() const
{
    return m_Total_fees_ethIsSet;
}

void FactoryV3DTO::unsetTotal_fees_eth()
{
    m_Total_fees_ethIsSet = false;
}
utility::string_t FactoryV3DTO::getUntrackedVolumeUsd() const
{
    return m_Untracked_volume_usd;
}

void FactoryV3DTO::setUntrackedVolumeUsd(const utility::string_t& value)
{
    m_Untracked_volume_usd = value;
    m_Untracked_volume_usdIsSet = true;
}

bool FactoryV3DTO::untrackedVolumeUsdIsSet() const
{
    return m_Untracked_volume_usdIsSet;
}

void FactoryV3DTO::unsetUntracked_volume_usd()
{
    m_Untracked_volume_usdIsSet = false;
}
utility::string_t FactoryV3DTO::getTotalValueLockedUsd() const
{
    return m_Total_value_locked_usd;
}

void FactoryV3DTO::setTotalValueLockedUsd(const utility::string_t& value)
{
    m_Total_value_locked_usd = value;
    m_Total_value_locked_usdIsSet = true;
}

bool FactoryV3DTO::totalValueLockedUsdIsSet() const
{
    return m_Total_value_locked_usdIsSet;
}

void FactoryV3DTO::unsetTotal_value_locked_usd()
{
    m_Total_value_locked_usdIsSet = false;
}
utility::string_t FactoryV3DTO::getTotalValueLockedEth() const
{
    return m_Total_value_locked_eth;
}

void FactoryV3DTO::setTotalValueLockedEth(const utility::string_t& value)
{
    m_Total_value_locked_eth = value;
    m_Total_value_locked_ethIsSet = true;
}

bool FactoryV3DTO::totalValueLockedEthIsSet() const
{
    return m_Total_value_locked_ethIsSet;
}

void FactoryV3DTO::unsetTotal_value_locked_eth()
{
    m_Total_value_locked_ethIsSet = false;
}
utility::string_t FactoryV3DTO::getTotalValueLockedUsdUntracked() const
{
    return m_Total_value_locked_usd_untracked;
}

void FactoryV3DTO::setTotalValueLockedUsdUntracked(const utility::string_t& value)
{
    m_Total_value_locked_usd_untracked = value;
    m_Total_value_locked_usd_untrackedIsSet = true;
}

bool FactoryV3DTO::totalValueLockedUsdUntrackedIsSet() const
{
    return m_Total_value_locked_usd_untrackedIsSet;
}

void FactoryV3DTO::unsetTotal_value_locked_usd_untracked()
{
    m_Total_value_locked_usd_untrackedIsSet = false;
}
utility::string_t FactoryV3DTO::getTotalValueLockedEthUntracked() const
{
    return m_Total_value_locked_eth_untracked;
}

void FactoryV3DTO::setTotalValueLockedEthUntracked(const utility::string_t& value)
{
    m_Total_value_locked_eth_untracked = value;
    m_Total_value_locked_eth_untrackedIsSet = true;
}

bool FactoryV3DTO::totalValueLockedEthUntrackedIsSet() const
{
    return m_Total_value_locked_eth_untrackedIsSet;
}

void FactoryV3DTO::unsetTotal_value_locked_eth_untracked()
{
    m_Total_value_locked_eth_untrackedIsSet = false;
}
utility::string_t FactoryV3DTO::getOwner() const
{
    return m_Owner;
}

void FactoryV3DTO::setOwner(const utility::string_t& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}

bool FactoryV3DTO::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void FactoryV3DTO::unsetOwner()
{
    m_OwnerIsSet = false;
}
int64_t FactoryV3DTO::getVid() const
{
    return m_Vid;
}

void FactoryV3DTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool FactoryV3DTO::vidIsSet() const
{
    return m_VidIsSet;
}

void FactoryV3DTO::unsetVid()
{
    m_VidIsSet = false;
}
}
}
}
}


