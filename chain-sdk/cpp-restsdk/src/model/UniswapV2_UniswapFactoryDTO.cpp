/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UniswapV2_UniswapFactoryDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UniswapV2_UniswapFactoryDTO::UniswapV2_UniswapFactoryDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Pair_count = 0;
    m_Pair_countIsSet = false;
    m_Total_volume_usd = utility::conversions::to_string_t("");
    m_Total_volume_usdIsSet = false;
    m_Total_volume_eth = utility::conversions::to_string_t("");
    m_Total_volume_ethIsSet = false;
    m_Untracked_volume_usd = utility::conversions::to_string_t("");
    m_Untracked_volume_usdIsSet = false;
    m_Total_liquidity_usd = utility::conversions::to_string_t("");
    m_Total_liquidity_usdIsSet = false;
    m_Total_liquidity_eth = utility::conversions::to_string_t("");
    m_Total_liquidity_ethIsSet = false;
    m_Tx_count = utility::conversions::to_string_t("");
    m_Tx_countIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
}

UniswapV2_UniswapFactoryDTO::~UniswapV2_UniswapFactoryDTO()
{
}

void UniswapV2_UniswapFactoryDTO::validate()
{
    // TODO: implement validation
}

web::json::value UniswapV2_UniswapFactoryDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Pair_countIsSet)
    {
        val[utility::conversions::to_string_t(U("pair_count"))] = ModelBase::toJson(m_Pair_count);
    }
    if(m_Total_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_volume_usd"))] = ModelBase::toJson(m_Total_volume_usd);
    }
    if(m_Total_volume_ethIsSet)
    {
        val[utility::conversions::to_string_t(U("total_volume_eth"))] = ModelBase::toJson(m_Total_volume_eth);
    }
    if(m_Untracked_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("untracked_volume_usd"))] = ModelBase::toJson(m_Untracked_volume_usd);
    }
    if(m_Total_liquidity_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_liquidity_usd"))] = ModelBase::toJson(m_Total_liquidity_usd);
    }
    if(m_Total_liquidity_ethIsSet)
    {
        val[utility::conversions::to_string_t(U("total_liquidity_eth"))] = ModelBase::toJson(m_Total_liquidity_eth);
    }
    if(m_Tx_countIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_count"))] = ModelBase::toJson(m_Tx_count);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }

    return val;
}

bool UniswapV2_UniswapFactoryDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pair_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pair_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPairCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPairCount);
            setPairCount(refVal_setPairCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalVolumeUsd);
            setTotalVolumeUsd(refVal_setTotalVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_volume_eth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_volume_eth")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalVolumeEth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalVolumeEth);
            setTotalVolumeEth(refVal_setTotalVolumeEth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("untracked_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("untracked_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUntrackedVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUntrackedVolumeUsd);
            setUntrackedVolumeUsd(refVal_setUntrackedVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_liquidity_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_liquidity_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalLiquidityUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalLiquidityUsd);
            setTotalLiquidityUsd(refVal_setTotalLiquidityUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_liquidity_eth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_liquidity_eth")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalLiquidityEth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalLiquidityEth);
            setTotalLiquidityEth(refVal_setTotalLiquidityEth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTxCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxCount);
            setTxCount(refVal_setTxCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    return ok;
}

void UniswapV2_UniswapFactoryDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Pair_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pair_count")), m_Pair_count));
    }
    if(m_Total_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_volume_usd")), m_Total_volume_usd));
    }
    if(m_Total_volume_ethIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_volume_eth")), m_Total_volume_eth));
    }
    if(m_Untracked_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("untracked_volume_usd")), m_Untracked_volume_usd));
    }
    if(m_Total_liquidity_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_liquidity_usd")), m_Total_liquidity_usd));
    }
    if(m_Total_liquidity_ethIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_liquidity_eth")), m_Total_liquidity_eth));
    }
    if(m_Tx_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_count")), m_Tx_count));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
}

bool UniswapV2_UniswapFactoryDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pair_count"))))
    {
        int32_t refVal_setPairCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pair_count"))), refVal_setPairCount );
        setPairCount(refVal_setPairCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_volume_usd"))))
    {
        utility::string_t refVal_setTotalVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_volume_usd"))), refVal_setTotalVolumeUsd );
        setTotalVolumeUsd(refVal_setTotalVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_volume_eth"))))
    {
        utility::string_t refVal_setTotalVolumeEth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_volume_eth"))), refVal_setTotalVolumeEth );
        setTotalVolumeEth(refVal_setTotalVolumeEth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("untracked_volume_usd"))))
    {
        utility::string_t refVal_setUntrackedVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("untracked_volume_usd"))), refVal_setUntrackedVolumeUsd );
        setUntrackedVolumeUsd(refVal_setUntrackedVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_liquidity_usd"))))
    {
        utility::string_t refVal_setTotalLiquidityUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_liquidity_usd"))), refVal_setTotalLiquidityUsd );
        setTotalLiquidityUsd(refVal_setTotalLiquidityUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_liquidity_eth"))))
    {
        utility::string_t refVal_setTotalLiquidityEth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_liquidity_eth"))), refVal_setTotalLiquidityEth );
        setTotalLiquidityEth(refVal_setTotalLiquidityEth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_count"))))
    {
        utility::string_t refVal_setTxCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_count"))), refVal_setTxCount );
        setTxCount(refVal_setTxCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    return ok;
}

utility::datetime UniswapV2_UniswapFactoryDTO::getEntryTime() const
{
    return m_Entry_time;
}

void UniswapV2_UniswapFactoryDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UniswapV2_UniswapFactoryDTO::getRecvTime() const
{
    return m_Recv_time;
}

void UniswapV2_UniswapFactoryDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UniswapV2_UniswapFactoryDTO::getBlockNumber() const
{
    return m_Block_number;
}

void UniswapV2_UniswapFactoryDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t UniswapV2_UniswapFactoryDTO::getId() const
{
    return m_Id;
}

void UniswapV2_UniswapFactoryDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetId()
{
    m_IdIsSet = false;
}
int32_t UniswapV2_UniswapFactoryDTO::getPairCount() const
{
    return m_Pair_count;
}

void UniswapV2_UniswapFactoryDTO::setPairCount(int32_t value)
{
    m_Pair_count = value;
    m_Pair_countIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::pairCountIsSet() const
{
    return m_Pair_countIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetPair_count()
{
    m_Pair_countIsSet = false;
}
utility::string_t UniswapV2_UniswapFactoryDTO::getTotalVolumeUsd() const
{
    return m_Total_volume_usd;
}

void UniswapV2_UniswapFactoryDTO::setTotalVolumeUsd(const utility::string_t& value)
{
    m_Total_volume_usd = value;
    m_Total_volume_usdIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::totalVolumeUsdIsSet() const
{
    return m_Total_volume_usdIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetTotal_volume_usd()
{
    m_Total_volume_usdIsSet = false;
}
utility::string_t UniswapV2_UniswapFactoryDTO::getTotalVolumeEth() const
{
    return m_Total_volume_eth;
}

void UniswapV2_UniswapFactoryDTO::setTotalVolumeEth(const utility::string_t& value)
{
    m_Total_volume_eth = value;
    m_Total_volume_ethIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::totalVolumeEthIsSet() const
{
    return m_Total_volume_ethIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetTotal_volume_eth()
{
    m_Total_volume_ethIsSet = false;
}
utility::string_t UniswapV2_UniswapFactoryDTO::getUntrackedVolumeUsd() const
{
    return m_Untracked_volume_usd;
}

void UniswapV2_UniswapFactoryDTO::setUntrackedVolumeUsd(const utility::string_t& value)
{
    m_Untracked_volume_usd = value;
    m_Untracked_volume_usdIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::untrackedVolumeUsdIsSet() const
{
    return m_Untracked_volume_usdIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetUntracked_volume_usd()
{
    m_Untracked_volume_usdIsSet = false;
}
utility::string_t UniswapV2_UniswapFactoryDTO::getTotalLiquidityUsd() const
{
    return m_Total_liquidity_usd;
}

void UniswapV2_UniswapFactoryDTO::setTotalLiquidityUsd(const utility::string_t& value)
{
    m_Total_liquidity_usd = value;
    m_Total_liquidity_usdIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::totalLiquidityUsdIsSet() const
{
    return m_Total_liquidity_usdIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetTotal_liquidity_usd()
{
    m_Total_liquidity_usdIsSet = false;
}
utility::string_t UniswapV2_UniswapFactoryDTO::getTotalLiquidityEth() const
{
    return m_Total_liquidity_eth;
}

void UniswapV2_UniswapFactoryDTO::setTotalLiquidityEth(const utility::string_t& value)
{
    m_Total_liquidity_eth = value;
    m_Total_liquidity_ethIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::totalLiquidityEthIsSet() const
{
    return m_Total_liquidity_ethIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetTotal_liquidity_eth()
{
    m_Total_liquidity_ethIsSet = false;
}
utility::string_t UniswapV2_UniswapFactoryDTO::getTxCount() const
{
    return m_Tx_count;
}

void UniswapV2_UniswapFactoryDTO::setTxCount(const utility::string_t& value)
{
    m_Tx_count = value;
    m_Tx_countIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::txCountIsSet() const
{
    return m_Tx_countIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetTx_count()
{
    m_Tx_countIsSet = false;
}
int64_t UniswapV2_UniswapFactoryDTO::getVid() const
{
    return m_Vid;
}

void UniswapV2_UniswapFactoryDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool UniswapV2_UniswapFactoryDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void UniswapV2_UniswapFactoryDTO::unsetVid()
{
    m_VidIsSet = false;
}
}
}
}
}


