/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UniswapV3_TransactionDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UniswapV3_TransactionDTO::UniswapV3_TransactionDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Gas_used = utility::conversions::to_string_t("");
    m_Gas_usedIsSet = false;
    m_Gas_price = utility::conversions::to_string_t("");
    m_Gas_priceIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
}

UniswapV3_TransactionDTO::~UniswapV3_TransactionDTO()
{
}

void UniswapV3_TransactionDTO::validate()
{
    // TODO: implement validation
}

web::json::value UniswapV3_TransactionDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Gas_usedIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_used"))] = ModelBase::toJson(m_Gas_used);
    }
    if(m_Gas_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_price"))] = ModelBase::toJson(m_Gas_price);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }

    return val;
}

bool UniswapV3_TransactionDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_used"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_used")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasUsed);
            setGasUsed(refVal_setGasUsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasPrice);
            setGasPrice(refVal_setGasPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    return ok;
}

void UniswapV3_TransactionDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Gas_usedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_used")), m_Gas_used));
    }
    if(m_Gas_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_price")), m_Gas_price));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
}

bool UniswapV3_TransactionDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_used"))))
    {
        utility::string_t refVal_setGasUsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_used"))), refVal_setGasUsed );
        setGasUsed(refVal_setGasUsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_price"))))
    {
        utility::string_t refVal_setGasPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_price"))), refVal_setGasPrice );
        setGasPrice(refVal_setGasPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    return ok;
}

utility::datetime UniswapV3_TransactionDTO::getEntryTime() const
{
    return m_Entry_time;
}

void UniswapV3_TransactionDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UniswapV3_TransactionDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UniswapV3_TransactionDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UniswapV3_TransactionDTO::getRecvTime() const
{
    return m_Recv_time;
}

void UniswapV3_TransactionDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UniswapV3_TransactionDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UniswapV3_TransactionDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UniswapV3_TransactionDTO::getBlockNumber() const
{
    return m_Block_number;
}

void UniswapV3_TransactionDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UniswapV3_TransactionDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UniswapV3_TransactionDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t UniswapV3_TransactionDTO::getId() const
{
    return m_Id;
}

void UniswapV3_TransactionDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UniswapV3_TransactionDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UniswapV3_TransactionDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UniswapV3_TransactionDTO::getTimestamp() const
{
    return m_Timestamp;
}

void UniswapV3_TransactionDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool UniswapV3_TransactionDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void UniswapV3_TransactionDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t UniswapV3_TransactionDTO::getGasUsed() const
{
    return m_Gas_used;
}

void UniswapV3_TransactionDTO::setGasUsed(const utility::string_t& value)
{
    m_Gas_used = value;
    m_Gas_usedIsSet = true;
}

bool UniswapV3_TransactionDTO::gasUsedIsSet() const
{
    return m_Gas_usedIsSet;
}

void UniswapV3_TransactionDTO::unsetGas_used()
{
    m_Gas_usedIsSet = false;
}
utility::string_t UniswapV3_TransactionDTO::getGasPrice() const
{
    return m_Gas_price;
}

void UniswapV3_TransactionDTO::setGasPrice(const utility::string_t& value)
{
    m_Gas_price = value;
    m_Gas_priceIsSet = true;
}

bool UniswapV3_TransactionDTO::gasPriceIsSet() const
{
    return m_Gas_priceIsSet;
}

void UniswapV3_TransactionDTO::unsetGas_price()
{
    m_Gas_priceIsSet = false;
}
int64_t UniswapV3_TransactionDTO::getVid() const
{
    return m_Vid;
}

void UniswapV3_TransactionDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool UniswapV3_TransactionDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void UniswapV3_TransactionDTO::unsetVid()
{
    m_VidIsSet = false;
}
}
}
}
}


