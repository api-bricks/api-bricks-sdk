/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Dex_StatsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dex_StatsDTO::Dex_StatsDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Volume_in_owl = utility::conversions::to_string_t("");
    m_Volume_in_owlIsSet = false;
    m_Utility_in_owl = utility::conversions::to_string_t("");
    m_Utility_in_owlIsSet = false;
    m_Owl_burnt = utility::conversions::to_string_t("");
    m_Owl_burntIsSet = false;
    m_Settled_batch_count = 0;
    m_Settled_batch_countIsSet = false;
    m_Settled_trade_count = 0;
    m_Settled_trade_countIsSet = false;
    m_Listed_tokens = 0;
    m_Listed_tokensIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
}

Dex_StatsDTO::~Dex_StatsDTO()
{
}

void Dex_StatsDTO::validate()
{
    // TODO: implement validation
}

web::json::value Dex_StatsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Volume_in_owlIsSet)
    {
        val[utility::conversions::to_string_t(U("volume_in_owl"))] = ModelBase::toJson(m_Volume_in_owl);
    }
    if(m_Utility_in_owlIsSet)
    {
        val[utility::conversions::to_string_t(U("utility_in_owl"))] = ModelBase::toJson(m_Utility_in_owl);
    }
    if(m_Owl_burntIsSet)
    {
        val[utility::conversions::to_string_t(U("owl_burnt"))] = ModelBase::toJson(m_Owl_burnt);
    }
    if(m_Settled_batch_countIsSet)
    {
        val[utility::conversions::to_string_t(U("settled_batch_count"))] = ModelBase::toJson(m_Settled_batch_count);
    }
    if(m_Settled_trade_countIsSet)
    {
        val[utility::conversions::to_string_t(U("settled_trade_count"))] = ModelBase::toJson(m_Settled_trade_count);
    }
    if(m_Listed_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("listed_tokens"))] = ModelBase::toJson(m_Listed_tokens);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }

    return val;
}

bool Dex_StatsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume_in_owl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume_in_owl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVolumeInOwl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeInOwl);
            setVolumeInOwl(refVal_setVolumeInOwl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("utility_in_owl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("utility_in_owl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUtilityInOwl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUtilityInOwl);
            setUtilityInOwl(refVal_setUtilityInOwl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("owl_burnt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("owl_burnt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOwlBurnt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwlBurnt);
            setOwlBurnt(refVal_setOwlBurnt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("settled_batch_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("settled_batch_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSettledBatchCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSettledBatchCount);
            setSettledBatchCount(refVal_setSettledBatchCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("settled_trade_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("settled_trade_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSettledTradeCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSettledTradeCount);
            setSettledTradeCount(refVal_setSettledTradeCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("listed_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("listed_tokens")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setListedTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setListedTokens);
            setListedTokens(refVal_setListedTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    return ok;
}

void Dex_StatsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Volume_in_owlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume_in_owl")), m_Volume_in_owl));
    }
    if(m_Utility_in_owlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("utility_in_owl")), m_Utility_in_owl));
    }
    if(m_Owl_burntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("owl_burnt")), m_Owl_burnt));
    }
    if(m_Settled_batch_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("settled_batch_count")), m_Settled_batch_count));
    }
    if(m_Settled_trade_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("settled_trade_count")), m_Settled_trade_count));
    }
    if(m_Listed_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("listed_tokens")), m_Listed_tokens));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
}

bool Dex_StatsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume_in_owl"))))
    {
        utility::string_t refVal_setVolumeInOwl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume_in_owl"))), refVal_setVolumeInOwl );
        setVolumeInOwl(refVal_setVolumeInOwl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("utility_in_owl"))))
    {
        utility::string_t refVal_setUtilityInOwl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("utility_in_owl"))), refVal_setUtilityInOwl );
        setUtilityInOwl(refVal_setUtilityInOwl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("owl_burnt"))))
    {
        utility::string_t refVal_setOwlBurnt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("owl_burnt"))), refVal_setOwlBurnt );
        setOwlBurnt(refVal_setOwlBurnt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("settled_batch_count"))))
    {
        int32_t refVal_setSettledBatchCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("settled_batch_count"))), refVal_setSettledBatchCount );
        setSettledBatchCount(refVal_setSettledBatchCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("settled_trade_count"))))
    {
        int32_t refVal_setSettledTradeCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("settled_trade_count"))), refVal_setSettledTradeCount );
        setSettledTradeCount(refVal_setSettledTradeCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("listed_tokens"))))
    {
        int32_t refVal_setListedTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("listed_tokens"))), refVal_setListedTokens );
        setListedTokens(refVal_setListedTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    return ok;
}

utility::datetime Dex_StatsDTO::getEntryTime() const
{
    return m_Entry_time;
}

void Dex_StatsDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool Dex_StatsDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void Dex_StatsDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime Dex_StatsDTO::getRecvTime() const
{
    return m_Recv_time;
}

void Dex_StatsDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool Dex_StatsDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void Dex_StatsDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t Dex_StatsDTO::getBlockNumber() const
{
    return m_Block_number;
}

void Dex_StatsDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool Dex_StatsDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void Dex_StatsDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t Dex_StatsDTO::getId() const
{
    return m_Id;
}

void Dex_StatsDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Dex_StatsDTO::idIsSet() const
{
    return m_IdIsSet;
}

void Dex_StatsDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Dex_StatsDTO::getVolumeInOwl() const
{
    return m_Volume_in_owl;
}

void Dex_StatsDTO::setVolumeInOwl(const utility::string_t& value)
{
    m_Volume_in_owl = value;
    m_Volume_in_owlIsSet = true;
}

bool Dex_StatsDTO::volumeInOwlIsSet() const
{
    return m_Volume_in_owlIsSet;
}

void Dex_StatsDTO::unsetVolume_in_owl()
{
    m_Volume_in_owlIsSet = false;
}
utility::string_t Dex_StatsDTO::getUtilityInOwl() const
{
    return m_Utility_in_owl;
}

void Dex_StatsDTO::setUtilityInOwl(const utility::string_t& value)
{
    m_Utility_in_owl = value;
    m_Utility_in_owlIsSet = true;
}

bool Dex_StatsDTO::utilityInOwlIsSet() const
{
    return m_Utility_in_owlIsSet;
}

void Dex_StatsDTO::unsetUtility_in_owl()
{
    m_Utility_in_owlIsSet = false;
}
utility::string_t Dex_StatsDTO::getOwlBurnt() const
{
    return m_Owl_burnt;
}

void Dex_StatsDTO::setOwlBurnt(const utility::string_t& value)
{
    m_Owl_burnt = value;
    m_Owl_burntIsSet = true;
}

bool Dex_StatsDTO::owlBurntIsSet() const
{
    return m_Owl_burntIsSet;
}

void Dex_StatsDTO::unsetOwl_burnt()
{
    m_Owl_burntIsSet = false;
}
int32_t Dex_StatsDTO::getSettledBatchCount() const
{
    return m_Settled_batch_count;
}

void Dex_StatsDTO::setSettledBatchCount(int32_t value)
{
    m_Settled_batch_count = value;
    m_Settled_batch_countIsSet = true;
}

bool Dex_StatsDTO::settledBatchCountIsSet() const
{
    return m_Settled_batch_countIsSet;
}

void Dex_StatsDTO::unsetSettled_batch_count()
{
    m_Settled_batch_countIsSet = false;
}
int32_t Dex_StatsDTO::getSettledTradeCount() const
{
    return m_Settled_trade_count;
}

void Dex_StatsDTO::setSettledTradeCount(int32_t value)
{
    m_Settled_trade_count = value;
    m_Settled_trade_countIsSet = true;
}

bool Dex_StatsDTO::settledTradeCountIsSet() const
{
    return m_Settled_trade_countIsSet;
}

void Dex_StatsDTO::unsetSettled_trade_count()
{
    m_Settled_trade_countIsSet = false;
}
int32_t Dex_StatsDTO::getListedTokens() const
{
    return m_Listed_tokens;
}

void Dex_StatsDTO::setListedTokens(int32_t value)
{
    m_Listed_tokens = value;
    m_Listed_tokensIsSet = true;
}

bool Dex_StatsDTO::listedTokensIsSet() const
{
    return m_Listed_tokensIsSet;
}

void Dex_StatsDTO::unsetListed_tokens()
{
    m_Listed_tokensIsSet = false;
}
int64_t Dex_StatsDTO::getVid() const
{
    return m_Vid;
}

void Dex_StatsDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool Dex_StatsDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void Dex_StatsDTO::unsetVid()
{
    m_VidIsSet = false;
}
}
}
}
}


