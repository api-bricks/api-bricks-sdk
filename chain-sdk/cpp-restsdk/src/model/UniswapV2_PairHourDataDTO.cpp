/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UniswapV2_PairHourDataDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UniswapV2_PairHourDataDTO::UniswapV2_PairHourDataDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Hour_start_unix = 0;
    m_Hour_start_unixIsSet = false;
    m_Pair = utility::conversions::to_string_t("");
    m_PairIsSet = false;
    m_Reserve_0 = utility::conversions::to_string_t("");
    m_Reserve_0IsSet = false;
    m_Reserve_1 = utility::conversions::to_string_t("");
    m_Reserve_1IsSet = false;
    m_Total_supply = utility::conversions::to_string_t("");
    m_Total_supplyIsSet = false;
    m_Reserve_usd = utility::conversions::to_string_t("");
    m_Reserve_usdIsSet = false;
    m_Hourly_volume_token_0 = utility::conversions::to_string_t("");
    m_Hourly_volume_token_0IsSet = false;
    m_Hourly_volume_token_1 = utility::conversions::to_string_t("");
    m_Hourly_volume_token_1IsSet = false;
    m_Hourly_volume_usd = utility::conversions::to_string_t("");
    m_Hourly_volume_usdIsSet = false;
    m_Hourly_txns = utility::conversions::to_string_t("");
    m_Hourly_txnsIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
}

UniswapV2_PairHourDataDTO::~UniswapV2_PairHourDataDTO()
{
}

void UniswapV2_PairHourDataDTO::validate()
{
    // TODO: implement validation
}

web::json::value UniswapV2_PairHourDataDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Hour_start_unixIsSet)
    {
        val[utility::conversions::to_string_t(U("hour_start_unix"))] = ModelBase::toJson(m_Hour_start_unix);
    }
    if(m_PairIsSet)
    {
        val[utility::conversions::to_string_t(U("pair"))] = ModelBase::toJson(m_Pair);
    }
    if(m_Reserve_0IsSet)
    {
        val[utility::conversions::to_string_t(U("reserve_0"))] = ModelBase::toJson(m_Reserve_0);
    }
    if(m_Reserve_1IsSet)
    {
        val[utility::conversions::to_string_t(U("reserve_1"))] = ModelBase::toJson(m_Reserve_1);
    }
    if(m_Total_supplyIsSet)
    {
        val[utility::conversions::to_string_t(U("total_supply"))] = ModelBase::toJson(m_Total_supply);
    }
    if(m_Reserve_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("reserve_usd"))] = ModelBase::toJson(m_Reserve_usd);
    }
    if(m_Hourly_volume_token_0IsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_volume_token_0"))] = ModelBase::toJson(m_Hourly_volume_token_0);
    }
    if(m_Hourly_volume_token_1IsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_volume_token_1"))] = ModelBase::toJson(m_Hourly_volume_token_1);
    }
    if(m_Hourly_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_volume_usd"))] = ModelBase::toJson(m_Hourly_volume_usd);
    }
    if(m_Hourly_txnsIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_txns"))] = ModelBase::toJson(m_Hourly_txns);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }

    return val;
}

bool UniswapV2_PairHourDataDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hour_start_unix"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hour_start_unix")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHourStartUnix;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourStartUnix);
            setHourStartUnix(refVal_setHourStartUnix);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pair"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pair")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPair;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPair);
            setPair(refVal_setPair);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reserve_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reserve_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReserve0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReserve0);
            setReserve0(refVal_setReserve0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reserve_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reserve_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReserve1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReserve1);
            setReserve1(refVal_setReserve1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_supply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_supply")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalSupply);
            setTotalSupply(refVal_setTotalSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reserve_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reserve_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReserveUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReserveUsd);
            setReserveUsd(refVal_setReserveUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_volume_token_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_volume_token_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyVolumeToken0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyVolumeToken0);
            setHourlyVolumeToken0(refVal_setHourlyVolumeToken0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_volume_token_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_volume_token_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyVolumeToken1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyVolumeToken1);
            setHourlyVolumeToken1(refVal_setHourlyVolumeToken1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyVolumeUsd);
            setHourlyVolumeUsd(refVal_setHourlyVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_txns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_txns")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyTxns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyTxns);
            setHourlyTxns(refVal_setHourlyTxns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    return ok;
}

void UniswapV2_PairHourDataDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Hour_start_unixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hour_start_unix")), m_Hour_start_unix));
    }
    if(m_PairIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pair")), m_Pair));
    }
    if(m_Reserve_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reserve_0")), m_Reserve_0));
    }
    if(m_Reserve_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reserve_1")), m_Reserve_1));
    }
    if(m_Total_supplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_supply")), m_Total_supply));
    }
    if(m_Reserve_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reserve_usd")), m_Reserve_usd));
    }
    if(m_Hourly_volume_token_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_volume_token_0")), m_Hourly_volume_token_0));
    }
    if(m_Hourly_volume_token_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_volume_token_1")), m_Hourly_volume_token_1));
    }
    if(m_Hourly_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_volume_usd")), m_Hourly_volume_usd));
    }
    if(m_Hourly_txnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_txns")), m_Hourly_txns));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
}

bool UniswapV2_PairHourDataDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hour_start_unix"))))
    {
        int32_t refVal_setHourStartUnix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hour_start_unix"))), refVal_setHourStartUnix );
        setHourStartUnix(refVal_setHourStartUnix);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pair"))))
    {
        utility::string_t refVal_setPair;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pair"))), refVal_setPair );
        setPair(refVal_setPair);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reserve_0"))))
    {
        utility::string_t refVal_setReserve0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reserve_0"))), refVal_setReserve0 );
        setReserve0(refVal_setReserve0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reserve_1"))))
    {
        utility::string_t refVal_setReserve1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reserve_1"))), refVal_setReserve1 );
        setReserve1(refVal_setReserve1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_supply"))))
    {
        utility::string_t refVal_setTotalSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_supply"))), refVal_setTotalSupply );
        setTotalSupply(refVal_setTotalSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reserve_usd"))))
    {
        utility::string_t refVal_setReserveUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reserve_usd"))), refVal_setReserveUsd );
        setReserveUsd(refVal_setReserveUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_volume_token_0"))))
    {
        utility::string_t refVal_setHourlyVolumeToken0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_volume_token_0"))), refVal_setHourlyVolumeToken0 );
        setHourlyVolumeToken0(refVal_setHourlyVolumeToken0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_volume_token_1"))))
    {
        utility::string_t refVal_setHourlyVolumeToken1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_volume_token_1"))), refVal_setHourlyVolumeToken1 );
        setHourlyVolumeToken1(refVal_setHourlyVolumeToken1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_volume_usd"))))
    {
        utility::string_t refVal_setHourlyVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_volume_usd"))), refVal_setHourlyVolumeUsd );
        setHourlyVolumeUsd(refVal_setHourlyVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_txns"))))
    {
        utility::string_t refVal_setHourlyTxns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_txns"))), refVal_setHourlyTxns );
        setHourlyTxns(refVal_setHourlyTxns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    return ok;
}

utility::datetime UniswapV2_PairHourDataDTO::getEntryTime() const
{
    return m_Entry_time;
}

void UniswapV2_PairHourDataDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UniswapV2_PairHourDataDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UniswapV2_PairHourDataDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UniswapV2_PairHourDataDTO::getRecvTime() const
{
    return m_Recv_time;
}

void UniswapV2_PairHourDataDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UniswapV2_PairHourDataDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UniswapV2_PairHourDataDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UniswapV2_PairHourDataDTO::getBlockNumber() const
{
    return m_Block_number;
}

void UniswapV2_PairHourDataDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UniswapV2_PairHourDataDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UniswapV2_PairHourDataDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getId() const
{
    return m_Id;
}

void UniswapV2_PairHourDataDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UniswapV2_PairHourDataDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UniswapV2_PairHourDataDTO::unsetId()
{
    m_IdIsSet = false;
}
int32_t UniswapV2_PairHourDataDTO::getHourStartUnix() const
{
    return m_Hour_start_unix;
}

void UniswapV2_PairHourDataDTO::setHourStartUnix(int32_t value)
{
    m_Hour_start_unix = value;
    m_Hour_start_unixIsSet = true;
}

bool UniswapV2_PairHourDataDTO::hourStartUnixIsSet() const
{
    return m_Hour_start_unixIsSet;
}

void UniswapV2_PairHourDataDTO::unsetHour_start_unix()
{
    m_Hour_start_unixIsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getPair() const
{
    return m_Pair;
}

void UniswapV2_PairHourDataDTO::setPair(const utility::string_t& value)
{
    m_Pair = value;
    m_PairIsSet = true;
}

bool UniswapV2_PairHourDataDTO::pairIsSet() const
{
    return m_PairIsSet;
}

void UniswapV2_PairHourDataDTO::unsetPair()
{
    m_PairIsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getReserve0() const
{
    return m_Reserve_0;
}

void UniswapV2_PairHourDataDTO::setReserve0(const utility::string_t& value)
{
    m_Reserve_0 = value;
    m_Reserve_0IsSet = true;
}

bool UniswapV2_PairHourDataDTO::reserve0IsSet() const
{
    return m_Reserve_0IsSet;
}

void UniswapV2_PairHourDataDTO::unsetReserve_0()
{
    m_Reserve_0IsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getReserve1() const
{
    return m_Reserve_1;
}

void UniswapV2_PairHourDataDTO::setReserve1(const utility::string_t& value)
{
    m_Reserve_1 = value;
    m_Reserve_1IsSet = true;
}

bool UniswapV2_PairHourDataDTO::reserve1IsSet() const
{
    return m_Reserve_1IsSet;
}

void UniswapV2_PairHourDataDTO::unsetReserve_1()
{
    m_Reserve_1IsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getTotalSupply() const
{
    return m_Total_supply;
}

void UniswapV2_PairHourDataDTO::setTotalSupply(const utility::string_t& value)
{
    m_Total_supply = value;
    m_Total_supplyIsSet = true;
}

bool UniswapV2_PairHourDataDTO::totalSupplyIsSet() const
{
    return m_Total_supplyIsSet;
}

void UniswapV2_PairHourDataDTO::unsetTotal_supply()
{
    m_Total_supplyIsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getReserveUsd() const
{
    return m_Reserve_usd;
}

void UniswapV2_PairHourDataDTO::setReserveUsd(const utility::string_t& value)
{
    m_Reserve_usd = value;
    m_Reserve_usdIsSet = true;
}

bool UniswapV2_PairHourDataDTO::reserveUsdIsSet() const
{
    return m_Reserve_usdIsSet;
}

void UniswapV2_PairHourDataDTO::unsetReserve_usd()
{
    m_Reserve_usdIsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getHourlyVolumeToken0() const
{
    return m_Hourly_volume_token_0;
}

void UniswapV2_PairHourDataDTO::setHourlyVolumeToken0(const utility::string_t& value)
{
    m_Hourly_volume_token_0 = value;
    m_Hourly_volume_token_0IsSet = true;
}

bool UniswapV2_PairHourDataDTO::hourlyVolumeToken0IsSet() const
{
    return m_Hourly_volume_token_0IsSet;
}

void UniswapV2_PairHourDataDTO::unsetHourly_volume_token_0()
{
    m_Hourly_volume_token_0IsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getHourlyVolumeToken1() const
{
    return m_Hourly_volume_token_1;
}

void UniswapV2_PairHourDataDTO::setHourlyVolumeToken1(const utility::string_t& value)
{
    m_Hourly_volume_token_1 = value;
    m_Hourly_volume_token_1IsSet = true;
}

bool UniswapV2_PairHourDataDTO::hourlyVolumeToken1IsSet() const
{
    return m_Hourly_volume_token_1IsSet;
}

void UniswapV2_PairHourDataDTO::unsetHourly_volume_token_1()
{
    m_Hourly_volume_token_1IsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getHourlyVolumeUsd() const
{
    return m_Hourly_volume_usd;
}

void UniswapV2_PairHourDataDTO::setHourlyVolumeUsd(const utility::string_t& value)
{
    m_Hourly_volume_usd = value;
    m_Hourly_volume_usdIsSet = true;
}

bool UniswapV2_PairHourDataDTO::hourlyVolumeUsdIsSet() const
{
    return m_Hourly_volume_usdIsSet;
}

void UniswapV2_PairHourDataDTO::unsetHourly_volume_usd()
{
    m_Hourly_volume_usdIsSet = false;
}
utility::string_t UniswapV2_PairHourDataDTO::getHourlyTxns() const
{
    return m_Hourly_txns;
}

void UniswapV2_PairHourDataDTO::setHourlyTxns(const utility::string_t& value)
{
    m_Hourly_txns = value;
    m_Hourly_txnsIsSet = true;
}

bool UniswapV2_PairHourDataDTO::hourlyTxnsIsSet() const
{
    return m_Hourly_txnsIsSet;
}

void UniswapV2_PairHourDataDTO::unsetHourly_txns()
{
    m_Hourly_txnsIsSet = false;
}
int64_t UniswapV2_PairHourDataDTO::getVid() const
{
    return m_Vid;
}

void UniswapV2_PairHourDataDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool UniswapV2_PairHourDataDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void UniswapV2_PairHourDataDTO::unsetVid()
{
    m_VidIsSet = false;
}
}
}
}
}


