/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ETradeAggressiveSide.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

ETradeAggressiveSide::eETradeAggressiveSide toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("Buy")))
        return ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_BUY;
    if (val == utility::conversions::to_string_t(U("Sell")))
        return ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_SELL;
    if (val == utility::conversions::to_string_t(U("EstimatedBuy")))
        return ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_ESTIMATEDBUY;
    if (val == utility::conversions::to_string_t(U("EstimatedSell")))
        return ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_ESTIMATEDSELL;
    if (val == utility::conversions::to_string_t(U("Unknown")))
        return ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_UNKNOWN;
    return {};
}

EnumUnderlyingType fromEnum(ETradeAggressiveSide::eETradeAggressiveSide e)
{
    switch (e)
    {
    case ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_BUY:
        return U("Buy");
    case ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_SELL:
        return U("Sell");
    case ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_ESTIMATEDBUY:
        return U("EstimatedBuy");
    case ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_ESTIMATEDSELL:
        return U("EstimatedSell");
    case ETradeAggressiveSide::eETradeAggressiveSide::ETradeAggressiveSide_UNKNOWN:
        return U("Unknown");
    default:
        break;
    }
    return {};
}
}

ETradeAggressiveSide::ETradeAggressiveSide()
{
}

ETradeAggressiveSide::~ETradeAggressiveSide()
{
}

void ETradeAggressiveSide::validate()
{
    // TODO: implement validation
}

web::json::value ETradeAggressiveSide::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ETradeAggressiveSide::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ETradeAggressiveSide::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ETradeAggressiveSide::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ETradeAggressiveSide::eETradeAggressiveSide ETradeAggressiveSide::getValue() const
{
   return m_value;
}

void ETradeAggressiveSide::setValue(ETradeAggressiveSide::eETradeAggressiveSide const value)
{
   m_value = value;
}


}
}
}
}


