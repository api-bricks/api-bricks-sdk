/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Curve_GaugeLiquidityDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Curve_GaugeLiquidityDTO::Curve_GaugeLiquidityDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_Gauge = utility::conversions::to_string_t("");
    m_GaugeIsSet = false;
    m_Original_balance = utility::conversions::to_string_t("");
    m_Original_balanceIsSet = false;
    m_Original_supply = utility::conversions::to_string_t("");
    m_Original_supplyIsSet = false;
    m_Working_balance = utility::conversions::to_string_t("");
    m_Working_balanceIsSet = false;
    m_Working_supply = utility::conversions::to_string_t("");
    m_Working_supplyIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Block = utility::conversions::to_string_t("");
    m_BlockIsSet = false;
    m_Transaction = utility::conversions::to_string_t("");
    m_TransactionIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
}

Curve_GaugeLiquidityDTO::~Curve_GaugeLiquidityDTO()
{
}

void Curve_GaugeLiquidityDTO::validate()
{
    // TODO: implement validation
}

web::json::value Curve_GaugeLiquidityDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }
    if(m_GaugeIsSet)
    {
        val[utility::conversions::to_string_t(U("gauge"))] = ModelBase::toJson(m_Gauge);
    }
    if(m_Original_balanceIsSet)
    {
        val[utility::conversions::to_string_t(U("original_balance"))] = ModelBase::toJson(m_Original_balance);
    }
    if(m_Original_supplyIsSet)
    {
        val[utility::conversions::to_string_t(U("original_supply"))] = ModelBase::toJson(m_Original_supply);
    }
    if(m_Working_balanceIsSet)
    {
        val[utility::conversions::to_string_t(U("working_balance"))] = ModelBase::toJson(m_Working_balance);
    }
    if(m_Working_supplyIsSet)
    {
        val[utility::conversions::to_string_t(U("working_supply"))] = ModelBase::toJson(m_Working_supply);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_BlockIsSet)
    {
        val[utility::conversions::to_string_t(U("block"))] = ModelBase::toJson(m_Block);
    }
    if(m_TransactionIsSet)
    {
        val[utility::conversions::to_string_t(U("transaction"))] = ModelBase::toJson(m_Transaction);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }

    return val;
}

bool Curve_GaugeLiquidityDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gauge"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gauge")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGauge;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGauge);
            setGauge(refVal_setGauge);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("original_balance"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("original_balance")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOriginalBalance;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOriginalBalance);
            setOriginalBalance(refVal_setOriginalBalance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("original_supply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("original_supply")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOriginalSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOriginalSupply);
            setOriginalSupply(refVal_setOriginalSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("working_balance"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("working_balance")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWorkingBalance;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWorkingBalance);
            setWorkingBalance(refVal_setWorkingBalance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("working_supply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("working_supply")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWorkingSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWorkingSupply);
            setWorkingSupply(refVal_setWorkingSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlock);
            setBlock(refVal_setBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transaction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTransaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransaction);
            setTransaction(refVal_setTransaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    return ok;
}

void Curve_GaugeLiquidityDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
    if(m_GaugeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gauge")), m_Gauge));
    }
    if(m_Original_balanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("original_balance")), m_Original_balance));
    }
    if(m_Original_supplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("original_supply")), m_Original_supply));
    }
    if(m_Working_balanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("working_balance")), m_Working_balance));
    }
    if(m_Working_supplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("working_supply")), m_Working_supply));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_BlockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block")), m_Block));
    }
    if(m_TransactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transaction")), m_Transaction));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
}

bool Curve_GaugeLiquidityDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gauge"))))
    {
        utility::string_t refVal_setGauge;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gauge"))), refVal_setGauge );
        setGauge(refVal_setGauge);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("original_balance"))))
    {
        utility::string_t refVal_setOriginalBalance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("original_balance"))), refVal_setOriginalBalance );
        setOriginalBalance(refVal_setOriginalBalance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("original_supply"))))
    {
        utility::string_t refVal_setOriginalSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("original_supply"))), refVal_setOriginalSupply );
        setOriginalSupply(refVal_setOriginalSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("working_balance"))))
    {
        utility::string_t refVal_setWorkingBalance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("working_balance"))), refVal_setWorkingBalance );
        setWorkingBalance(refVal_setWorkingBalance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("working_supply"))))
    {
        utility::string_t refVal_setWorkingSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("working_supply"))), refVal_setWorkingSupply );
        setWorkingSupply(refVal_setWorkingSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block"))))
    {
        utility::string_t refVal_setBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block"))), refVal_setBlock );
        setBlock(refVal_setBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transaction"))))
    {
        utility::string_t refVal_setTransaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transaction"))), refVal_setTransaction );
        setTransaction(refVal_setTransaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    return ok;
}

utility::datetime Curve_GaugeLiquidityDTO::getEntryTime() const
{
    return m_Entry_time;
}

void Curve_GaugeLiquidityDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool Curve_GaugeLiquidityDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void Curve_GaugeLiquidityDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime Curve_GaugeLiquidityDTO::getRecvTime() const
{
    return m_Recv_time;
}

void Curve_GaugeLiquidityDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool Curve_GaugeLiquidityDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void Curve_GaugeLiquidityDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t Curve_GaugeLiquidityDTO::getBlockNumber() const
{
    return m_Block_number;
}

void Curve_GaugeLiquidityDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool Curve_GaugeLiquidityDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void Curve_GaugeLiquidityDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getId() const
{
    return m_Id;
}

void Curve_GaugeLiquidityDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Curve_GaugeLiquidityDTO::idIsSet() const
{
    return m_IdIsSet;
}

void Curve_GaugeLiquidityDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getUser() const
{
    return m_User;
}

void Curve_GaugeLiquidityDTO::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool Curve_GaugeLiquidityDTO::userIsSet() const
{
    return m_UserIsSet;
}

void Curve_GaugeLiquidityDTO::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getGauge() const
{
    return m_Gauge;
}

void Curve_GaugeLiquidityDTO::setGauge(const utility::string_t& value)
{
    m_Gauge = value;
    m_GaugeIsSet = true;
}

bool Curve_GaugeLiquidityDTO::gaugeIsSet() const
{
    return m_GaugeIsSet;
}

void Curve_GaugeLiquidityDTO::unsetGauge()
{
    m_GaugeIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getOriginalBalance() const
{
    return m_Original_balance;
}

void Curve_GaugeLiquidityDTO::setOriginalBalance(const utility::string_t& value)
{
    m_Original_balance = value;
    m_Original_balanceIsSet = true;
}

bool Curve_GaugeLiquidityDTO::originalBalanceIsSet() const
{
    return m_Original_balanceIsSet;
}

void Curve_GaugeLiquidityDTO::unsetOriginal_balance()
{
    m_Original_balanceIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getOriginalSupply() const
{
    return m_Original_supply;
}

void Curve_GaugeLiquidityDTO::setOriginalSupply(const utility::string_t& value)
{
    m_Original_supply = value;
    m_Original_supplyIsSet = true;
}

bool Curve_GaugeLiquidityDTO::originalSupplyIsSet() const
{
    return m_Original_supplyIsSet;
}

void Curve_GaugeLiquidityDTO::unsetOriginal_supply()
{
    m_Original_supplyIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getWorkingBalance() const
{
    return m_Working_balance;
}

void Curve_GaugeLiquidityDTO::setWorkingBalance(const utility::string_t& value)
{
    m_Working_balance = value;
    m_Working_balanceIsSet = true;
}

bool Curve_GaugeLiquidityDTO::workingBalanceIsSet() const
{
    return m_Working_balanceIsSet;
}

void Curve_GaugeLiquidityDTO::unsetWorking_balance()
{
    m_Working_balanceIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getWorkingSupply() const
{
    return m_Working_supply;
}

void Curve_GaugeLiquidityDTO::setWorkingSupply(const utility::string_t& value)
{
    m_Working_supply = value;
    m_Working_supplyIsSet = true;
}

bool Curve_GaugeLiquidityDTO::workingSupplyIsSet() const
{
    return m_Working_supplyIsSet;
}

void Curve_GaugeLiquidityDTO::unsetWorking_supply()
{
    m_Working_supplyIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getTimestamp() const
{
    return m_Timestamp;
}

void Curve_GaugeLiquidityDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Curve_GaugeLiquidityDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Curve_GaugeLiquidityDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getBlock() const
{
    return m_Block;
}

void Curve_GaugeLiquidityDTO::setBlock(const utility::string_t& value)
{
    m_Block = value;
    m_BlockIsSet = true;
}

bool Curve_GaugeLiquidityDTO::blockIsSet() const
{
    return m_BlockIsSet;
}

void Curve_GaugeLiquidityDTO::unsetBlock()
{
    m_BlockIsSet = false;
}
utility::string_t Curve_GaugeLiquidityDTO::getTransaction() const
{
    return m_Transaction;
}

void Curve_GaugeLiquidityDTO::setTransaction(const utility::string_t& value)
{
    m_Transaction = value;
    m_TransactionIsSet = true;
}

bool Curve_GaugeLiquidityDTO::transactionIsSet() const
{
    return m_TransactionIsSet;
}

void Curve_GaugeLiquidityDTO::unsetTransaction()
{
    m_TransactionIsSet = false;
}
int64_t Curve_GaugeLiquidityDTO::getVid() const
{
    return m_Vid;
}

void Curve_GaugeLiquidityDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool Curve_GaugeLiquidityDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void Curve_GaugeLiquidityDTO::unsetVid()
{
    m_VidIsSet = false;
}
}
}
}
}


