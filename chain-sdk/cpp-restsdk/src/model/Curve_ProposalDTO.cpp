/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Curve_ProposalDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Curve_ProposalDTO::Curve_ProposalDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_number = utility::conversions::to_string_t("");
    m_numberIsSet = false;
    m_App = utility::conversions::to_string_t("");
    m_AppIsSet = false;
    m_Creator = utility::conversions::to_string_t("");
    m_CreatorIsSet = false;
    m_Execution_script = utility::conversions::to_string_t("");
    m_Execution_scriptIsSet = false;
    m_Expire_date = utility::conversions::to_string_t("");
    m_Expire_dateIsSet = false;
    m_Minimum_quorum = utility::conversions::to_string_t("");
    m_Minimum_quorumIsSet = false;
    m_Required_support = utility::conversions::to_string_t("");
    m_Required_supportIsSet = false;
    m_Snapshot_block = utility::conversions::to_string_t("");
    m_Snapshot_blockIsSet = false;
    m_Voting_power = utility::conversions::to_string_t("");
    m_Voting_powerIsSet = false;
    m_Metadata = utility::conversions::to_string_t("");
    m_MetadataIsSet = false;
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
    m_Vote_count = utility::conversions::to_string_t("");
    m_Vote_countIsSet = false;
    m_Positive_vote_count = utility::conversions::to_string_t("");
    m_Positive_vote_countIsSet = false;
    m_Negative_vote_count = utility::conversions::to_string_t("");
    m_Negative_vote_countIsSet = false;
    m_Current_quorum = utility::conversions::to_string_t("");
    m_Current_quorumIsSet = false;
    m_Current_support = utility::conversions::to_string_t("");
    m_Current_supportIsSet = false;
    m_Staked_support = utility::conversions::to_string_t("");
    m_Staked_supportIsSet = false;
    m_Total_staked = utility::conversions::to_string_t("");
    m_Total_stakedIsSet = false;
    m_Created = utility::conversions::to_string_t("");
    m_CreatedIsSet = false;
    m_Created_at_block = utility::conversions::to_string_t("");
    m_Created_at_blockIsSet = false;
    m_Created_at_transaction = utility::conversions::to_string_t("");
    m_Created_at_transactionIsSet = false;
    m_Updated = utility::conversions::to_string_t("");
    m_UpdatedIsSet = false;
    m_Updated_at_block = utility::conversions::to_string_t("");
    m_Updated_at_blockIsSet = false;
    m_Updated_at_transaction = utility::conversions::to_string_t("");
    m_Updated_at_transactionIsSet = false;
    m_Executed = utility::conversions::to_string_t("");
    m_ExecutedIsSet = false;
    m_Executed_at_block = utility::conversions::to_string_t("");
    m_Executed_at_blockIsSet = false;
    m_Executed_at_transaction = utility::conversions::to_string_t("");
    m_Executed_at_transactionIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
}

Curve_ProposalDTO::~Curve_ProposalDTO()
{
}

void Curve_ProposalDTO::validate()
{
    // TODO: implement validation
}

web::json::value Curve_ProposalDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("number"))] = ModelBase::toJson(m_number);
    }
    if(m_AppIsSet)
    {
        val[utility::conversions::to_string_t(U("app"))] = ModelBase::toJson(m_App);
    }
    if(m_CreatorIsSet)
    {
        val[utility::conversions::to_string_t(U("creator"))] = ModelBase::toJson(m_Creator);
    }
    if(m_Execution_scriptIsSet)
    {
        val[utility::conversions::to_string_t(U("execution_script"))] = ModelBase::toJson(m_Execution_script);
    }
    if(m_Expire_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("expire_date"))] = ModelBase::toJson(m_Expire_date);
    }
    if(m_Minimum_quorumIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_quorum"))] = ModelBase::toJson(m_Minimum_quorum);
    }
    if(m_Required_supportIsSet)
    {
        val[utility::conversions::to_string_t(U("required_support"))] = ModelBase::toJson(m_Required_support);
    }
    if(m_Snapshot_blockIsSet)
    {
        val[utility::conversions::to_string_t(U("snapshot_block"))] = ModelBase::toJson(m_Snapshot_block);
    }
    if(m_Voting_powerIsSet)
    {
        val[utility::conversions::to_string_t(U("voting_power"))] = ModelBase::toJson(m_Voting_power);
    }
    if(m_MetadataIsSet)
    {
        val[utility::conversions::to_string_t(U("metadata"))] = ModelBase::toJson(m_Metadata);
    }
    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t(U("text"))] = ModelBase::toJson(m_Text);
    }
    if(m_Vote_countIsSet)
    {
        val[utility::conversions::to_string_t(U("vote_count"))] = ModelBase::toJson(m_Vote_count);
    }
    if(m_Positive_vote_countIsSet)
    {
        val[utility::conversions::to_string_t(U("positive_vote_count"))] = ModelBase::toJson(m_Positive_vote_count);
    }
    if(m_Negative_vote_countIsSet)
    {
        val[utility::conversions::to_string_t(U("negative_vote_count"))] = ModelBase::toJson(m_Negative_vote_count);
    }
    if(m_Current_quorumIsSet)
    {
        val[utility::conversions::to_string_t(U("current_quorum"))] = ModelBase::toJson(m_Current_quorum);
    }
    if(m_Current_supportIsSet)
    {
        val[utility::conversions::to_string_t(U("current_support"))] = ModelBase::toJson(m_Current_support);
    }
    if(m_Staked_supportIsSet)
    {
        val[utility::conversions::to_string_t(U("staked_support"))] = ModelBase::toJson(m_Staked_support);
    }
    if(m_Total_stakedIsSet)
    {
        val[utility::conversions::to_string_t(U("total_staked"))] = ModelBase::toJson(m_Total_staked);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t(U("created"))] = ModelBase::toJson(m_Created);
    }
    if(m_Created_at_blockIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at_block"))] = ModelBase::toJson(m_Created_at_block);
    }
    if(m_Created_at_transactionIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at_transaction"))] = ModelBase::toJson(m_Created_at_transaction);
    }
    if(m_UpdatedIsSet)
    {
        val[utility::conversions::to_string_t(U("updated"))] = ModelBase::toJson(m_Updated);
    }
    if(m_Updated_at_blockIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_at_block"))] = ModelBase::toJson(m_Updated_at_block);
    }
    if(m_Updated_at_transactionIsSet)
    {
        val[utility::conversions::to_string_t(U("updated_at_transaction"))] = ModelBase::toJson(m_Updated_at_transaction);
    }
    if(m_ExecutedIsSet)
    {
        val[utility::conversions::to_string_t(U("executed"))] = ModelBase::toJson(m_Executed);
    }
    if(m_Executed_at_blockIsSet)
    {
        val[utility::conversions::to_string_t(U("executed_at_block"))] = ModelBase::toJson(m_Executed_at_block);
    }
    if(m_Executed_at_transactionIsSet)
    {
        val[utility::conversions::to_string_t(U("executed_at_transaction"))] = ModelBase::toJson(m_Executed_at_transaction);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }

    return val;
}

bool Curve_ProposalDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumber);
            setNumber(refVal_setNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("app"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("app")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setApp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApp);
            setApp(refVal_setApp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creator")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreator;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreator);
            setCreator(refVal_setCreator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("execution_script"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("execution_script")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExecutionScript;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecutionScript);
            setExecutionScript(refVal_setExecutionScript);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expire_date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expire_date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExpireDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpireDate);
            setExpireDate(refVal_setExpireDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_quorum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_quorum")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMinimumQuorum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumQuorum);
            setMinimumQuorum(refVal_setMinimumQuorum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required_support"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required_support")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRequiredSupport;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequiredSupport);
            setRequiredSupport(refVal_setRequiredSupport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("snapshot_block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("snapshot_block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSnapshotBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSnapshotBlock);
            setSnapshotBlock(refVal_setSnapshotBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("voting_power"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("voting_power")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVotingPower;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVotingPower);
            setVotingPower(refVal_setVotingPower);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("metadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("metadata")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetadata);
            setMetadata(refVal_setMetadata);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setText);
            setText(refVal_setText);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vote_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vote_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVoteCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVoteCount);
            setVoteCount(refVal_setVoteCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("positive_vote_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("positive_vote_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPositiveVoteCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPositiveVoteCount);
            setPositiveVoteCount(refVal_setPositiveVoteCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("negative_vote_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("negative_vote_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNegativeVoteCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNegativeVoteCount);
            setNegativeVoteCount(refVal_setNegativeVoteCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("current_quorum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current_quorum")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrentQuorum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentQuorum);
            setCurrentQuorum(refVal_setCurrentQuorum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("current_support"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current_support")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrentSupport;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentSupport);
            setCurrentSupport(refVal_setCurrentSupport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("staked_support"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("staked_support")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStakedSupport;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStakedSupport);
            setStakedSupport(refVal_setStakedSupport);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_staked"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_staked")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalStaked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalStaked);
            setTotalStaked(refVal_setTotalStaked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreated);
            setCreated(refVal_setCreated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at_block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at_block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatedAtBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAtBlock);
            setCreatedAtBlock(refVal_setCreatedAtBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at_transaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at_transaction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatedAtTransaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAtTransaction);
            setCreatedAtTransaction(refVal_setCreatedAtTransaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUpdated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdated);
            setUpdated(refVal_setUpdated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_at_block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_at_block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUpdatedAtBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAtBlock);
            setUpdatedAtBlock(refVal_setUpdatedAtBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updated_at_transaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updated_at_transaction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUpdatedAtTransaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAtTransaction);
            setUpdatedAtTransaction(refVal_setUpdatedAtTransaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("executed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("executed")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExecuted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecuted);
            setExecuted(refVal_setExecuted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("executed_at_block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("executed_at_block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExecutedAtBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecutedAtBlock);
            setExecutedAtBlock(refVal_setExecutedAtBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("executed_at_transaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("executed_at_transaction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExecutedAtTransaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecutedAtTransaction);
            setExecutedAtTransaction(refVal_setExecutedAtTransaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    return ok;
}

void Curve_ProposalDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("number")), m_number));
    }
    if(m_AppIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("app")), m_App));
    }
    if(m_CreatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creator")), m_Creator));
    }
    if(m_Execution_scriptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("execution_script")), m_Execution_script));
    }
    if(m_Expire_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expire_date")), m_Expire_date));
    }
    if(m_Minimum_quorumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_quorum")), m_Minimum_quorum));
    }
    if(m_Required_supportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required_support")), m_Required_support));
    }
    if(m_Snapshot_blockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("snapshot_block")), m_Snapshot_block));
    }
    if(m_Voting_powerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("voting_power")), m_Voting_power));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("metadata")), m_Metadata));
    }
    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("text")), m_Text));
    }
    if(m_Vote_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vote_count")), m_Vote_count));
    }
    if(m_Positive_vote_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("positive_vote_count")), m_Positive_vote_count));
    }
    if(m_Negative_vote_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("negative_vote_count")), m_Negative_vote_count));
    }
    if(m_Current_quorumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current_quorum")), m_Current_quorum));
    }
    if(m_Current_supportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current_support")), m_Current_support));
    }
    if(m_Staked_supportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("staked_support")), m_Staked_support));
    }
    if(m_Total_stakedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_staked")), m_Total_staked));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created")), m_Created));
    }
    if(m_Created_at_blockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at_block")), m_Created_at_block));
    }
    if(m_Created_at_transactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at_transaction")), m_Created_at_transaction));
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated")), m_Updated));
    }
    if(m_Updated_at_blockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_at_block")), m_Updated_at_block));
    }
    if(m_Updated_at_transactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updated_at_transaction")), m_Updated_at_transaction));
    }
    if(m_ExecutedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("executed")), m_Executed));
    }
    if(m_Executed_at_blockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("executed_at_block")), m_Executed_at_block));
    }
    if(m_Executed_at_transactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("executed_at_transaction")), m_Executed_at_transaction));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
}

bool Curve_ProposalDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("number"))))
    {
        utility::string_t refVal_setNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("number"))), refVal_setNumber );
        setNumber(refVal_setNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("app"))))
    {
        utility::string_t refVal_setApp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("app"))), refVal_setApp );
        setApp(refVal_setApp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creator"))))
    {
        utility::string_t refVal_setCreator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creator"))), refVal_setCreator );
        setCreator(refVal_setCreator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("execution_script"))))
    {
        utility::string_t refVal_setExecutionScript;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("execution_script"))), refVal_setExecutionScript );
        setExecutionScript(refVal_setExecutionScript);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expire_date"))))
    {
        utility::string_t refVal_setExpireDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expire_date"))), refVal_setExpireDate );
        setExpireDate(refVal_setExpireDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_quorum"))))
    {
        utility::string_t refVal_setMinimumQuorum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_quorum"))), refVal_setMinimumQuorum );
        setMinimumQuorum(refVal_setMinimumQuorum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required_support"))))
    {
        utility::string_t refVal_setRequiredSupport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required_support"))), refVal_setRequiredSupport );
        setRequiredSupport(refVal_setRequiredSupport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("snapshot_block"))))
    {
        utility::string_t refVal_setSnapshotBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("snapshot_block"))), refVal_setSnapshotBlock );
        setSnapshotBlock(refVal_setSnapshotBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("voting_power"))))
    {
        utility::string_t refVal_setVotingPower;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("voting_power"))), refVal_setVotingPower );
        setVotingPower(refVal_setVotingPower);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("metadata"))))
    {
        utility::string_t refVal_setMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("metadata"))), refVal_setMetadata );
        setMetadata(refVal_setMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("text"))))
    {
        utility::string_t refVal_setText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("text"))), refVal_setText );
        setText(refVal_setText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vote_count"))))
    {
        utility::string_t refVal_setVoteCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vote_count"))), refVal_setVoteCount );
        setVoteCount(refVal_setVoteCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("positive_vote_count"))))
    {
        utility::string_t refVal_setPositiveVoteCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("positive_vote_count"))), refVal_setPositiveVoteCount );
        setPositiveVoteCount(refVal_setPositiveVoteCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("negative_vote_count"))))
    {
        utility::string_t refVal_setNegativeVoteCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("negative_vote_count"))), refVal_setNegativeVoteCount );
        setNegativeVoteCount(refVal_setNegativeVoteCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current_quorum"))))
    {
        utility::string_t refVal_setCurrentQuorum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current_quorum"))), refVal_setCurrentQuorum );
        setCurrentQuorum(refVal_setCurrentQuorum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current_support"))))
    {
        utility::string_t refVal_setCurrentSupport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current_support"))), refVal_setCurrentSupport );
        setCurrentSupport(refVal_setCurrentSupport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("staked_support"))))
    {
        utility::string_t refVal_setStakedSupport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("staked_support"))), refVal_setStakedSupport );
        setStakedSupport(refVal_setStakedSupport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_staked"))))
    {
        utility::string_t refVal_setTotalStaked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_staked"))), refVal_setTotalStaked );
        setTotalStaked(refVal_setTotalStaked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created"))))
    {
        utility::string_t refVal_setCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created"))), refVal_setCreated );
        setCreated(refVal_setCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at_block"))))
    {
        utility::string_t refVal_setCreatedAtBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at_block"))), refVal_setCreatedAtBlock );
        setCreatedAtBlock(refVal_setCreatedAtBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at_transaction"))))
    {
        utility::string_t refVal_setCreatedAtTransaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at_transaction"))), refVal_setCreatedAtTransaction );
        setCreatedAtTransaction(refVal_setCreatedAtTransaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated"))))
    {
        utility::string_t refVal_setUpdated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated"))), refVal_setUpdated );
        setUpdated(refVal_setUpdated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_at_block"))))
    {
        utility::string_t refVal_setUpdatedAtBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_at_block"))), refVal_setUpdatedAtBlock );
        setUpdatedAtBlock(refVal_setUpdatedAtBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updated_at_transaction"))))
    {
        utility::string_t refVal_setUpdatedAtTransaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updated_at_transaction"))), refVal_setUpdatedAtTransaction );
        setUpdatedAtTransaction(refVal_setUpdatedAtTransaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("executed"))))
    {
        utility::string_t refVal_setExecuted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("executed"))), refVal_setExecuted );
        setExecuted(refVal_setExecuted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("executed_at_block"))))
    {
        utility::string_t refVal_setExecutedAtBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("executed_at_block"))), refVal_setExecutedAtBlock );
        setExecutedAtBlock(refVal_setExecutedAtBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("executed_at_transaction"))))
    {
        utility::string_t refVal_setExecutedAtTransaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("executed_at_transaction"))), refVal_setExecutedAtTransaction );
        setExecutedAtTransaction(refVal_setExecutedAtTransaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    return ok;
}

utility::datetime Curve_ProposalDTO::getEntryTime() const
{
    return m_Entry_time;
}

void Curve_ProposalDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool Curve_ProposalDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void Curve_ProposalDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime Curve_ProposalDTO::getRecvTime() const
{
    return m_Recv_time;
}

void Curve_ProposalDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool Curve_ProposalDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void Curve_ProposalDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t Curve_ProposalDTO::getBlockNumber() const
{
    return m_Block_number;
}

void Curve_ProposalDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool Curve_ProposalDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void Curve_ProposalDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t Curve_ProposalDTO::getId() const
{
    return m_Id;
}

void Curve_ProposalDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Curve_ProposalDTO::idIsSet() const
{
    return m_IdIsSet;
}

void Curve_ProposalDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Curve_ProposalDTO::getNumber() const
{
    return m_number;
}

void Curve_ProposalDTO::setNumber(const utility::string_t& value)
{
    m_number = value;
    m_numberIsSet = true;
}

bool Curve_ProposalDTO::numberIsSet() const
{
    return m_numberIsSet;
}

void Curve_ProposalDTO::unsetnumber()
{
    m_numberIsSet = false;
}
utility::string_t Curve_ProposalDTO::getApp() const
{
    return m_App;
}

void Curve_ProposalDTO::setApp(const utility::string_t& value)
{
    m_App = value;
    m_AppIsSet = true;
}

bool Curve_ProposalDTO::appIsSet() const
{
    return m_AppIsSet;
}

void Curve_ProposalDTO::unsetApp()
{
    m_AppIsSet = false;
}
utility::string_t Curve_ProposalDTO::getCreator() const
{
    return m_Creator;
}

void Curve_ProposalDTO::setCreator(const utility::string_t& value)
{
    m_Creator = value;
    m_CreatorIsSet = true;
}

bool Curve_ProposalDTO::creatorIsSet() const
{
    return m_CreatorIsSet;
}

void Curve_ProposalDTO::unsetCreator()
{
    m_CreatorIsSet = false;
}
utility::string_t Curve_ProposalDTO::getExecutionScript() const
{
    return m_Execution_script;
}

void Curve_ProposalDTO::setExecutionScript(const utility::string_t& value)
{
    m_Execution_script = value;
    m_Execution_scriptIsSet = true;
}

bool Curve_ProposalDTO::executionScriptIsSet() const
{
    return m_Execution_scriptIsSet;
}

void Curve_ProposalDTO::unsetExecution_script()
{
    m_Execution_scriptIsSet = false;
}
utility::string_t Curve_ProposalDTO::getExpireDate() const
{
    return m_Expire_date;
}

void Curve_ProposalDTO::setExpireDate(const utility::string_t& value)
{
    m_Expire_date = value;
    m_Expire_dateIsSet = true;
}

bool Curve_ProposalDTO::expireDateIsSet() const
{
    return m_Expire_dateIsSet;
}

void Curve_ProposalDTO::unsetExpire_date()
{
    m_Expire_dateIsSet = false;
}
utility::string_t Curve_ProposalDTO::getMinimumQuorum() const
{
    return m_Minimum_quorum;
}

void Curve_ProposalDTO::setMinimumQuorum(const utility::string_t& value)
{
    m_Minimum_quorum = value;
    m_Minimum_quorumIsSet = true;
}

bool Curve_ProposalDTO::minimumQuorumIsSet() const
{
    return m_Minimum_quorumIsSet;
}

void Curve_ProposalDTO::unsetMinimum_quorum()
{
    m_Minimum_quorumIsSet = false;
}
utility::string_t Curve_ProposalDTO::getRequiredSupport() const
{
    return m_Required_support;
}

void Curve_ProposalDTO::setRequiredSupport(const utility::string_t& value)
{
    m_Required_support = value;
    m_Required_supportIsSet = true;
}

bool Curve_ProposalDTO::requiredSupportIsSet() const
{
    return m_Required_supportIsSet;
}

void Curve_ProposalDTO::unsetRequired_support()
{
    m_Required_supportIsSet = false;
}
utility::string_t Curve_ProposalDTO::getSnapshotBlock() const
{
    return m_Snapshot_block;
}

void Curve_ProposalDTO::setSnapshotBlock(const utility::string_t& value)
{
    m_Snapshot_block = value;
    m_Snapshot_blockIsSet = true;
}

bool Curve_ProposalDTO::snapshotBlockIsSet() const
{
    return m_Snapshot_blockIsSet;
}

void Curve_ProposalDTO::unsetSnapshot_block()
{
    m_Snapshot_blockIsSet = false;
}
utility::string_t Curve_ProposalDTO::getVotingPower() const
{
    return m_Voting_power;
}

void Curve_ProposalDTO::setVotingPower(const utility::string_t& value)
{
    m_Voting_power = value;
    m_Voting_powerIsSet = true;
}

bool Curve_ProposalDTO::votingPowerIsSet() const
{
    return m_Voting_powerIsSet;
}

void Curve_ProposalDTO::unsetVoting_power()
{
    m_Voting_powerIsSet = false;
}
utility::string_t Curve_ProposalDTO::getMetadata() const
{
    return m_Metadata;
}

void Curve_ProposalDTO::setMetadata(const utility::string_t& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool Curve_ProposalDTO::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void Curve_ProposalDTO::unsetMetadata()
{
    m_MetadataIsSet = false;
}
utility::string_t Curve_ProposalDTO::getText() const
{
    return m_Text;
}

void Curve_ProposalDTO::setText(const utility::string_t& value)
{
    m_Text = value;
    m_TextIsSet = true;
}

bool Curve_ProposalDTO::textIsSet() const
{
    return m_TextIsSet;
}

void Curve_ProposalDTO::unsetText()
{
    m_TextIsSet = false;
}
utility::string_t Curve_ProposalDTO::getVoteCount() const
{
    return m_Vote_count;
}

void Curve_ProposalDTO::setVoteCount(const utility::string_t& value)
{
    m_Vote_count = value;
    m_Vote_countIsSet = true;
}

bool Curve_ProposalDTO::voteCountIsSet() const
{
    return m_Vote_countIsSet;
}

void Curve_ProposalDTO::unsetVote_count()
{
    m_Vote_countIsSet = false;
}
utility::string_t Curve_ProposalDTO::getPositiveVoteCount() const
{
    return m_Positive_vote_count;
}

void Curve_ProposalDTO::setPositiveVoteCount(const utility::string_t& value)
{
    m_Positive_vote_count = value;
    m_Positive_vote_countIsSet = true;
}

bool Curve_ProposalDTO::positiveVoteCountIsSet() const
{
    return m_Positive_vote_countIsSet;
}

void Curve_ProposalDTO::unsetPositive_vote_count()
{
    m_Positive_vote_countIsSet = false;
}
utility::string_t Curve_ProposalDTO::getNegativeVoteCount() const
{
    return m_Negative_vote_count;
}

void Curve_ProposalDTO::setNegativeVoteCount(const utility::string_t& value)
{
    m_Negative_vote_count = value;
    m_Negative_vote_countIsSet = true;
}

bool Curve_ProposalDTO::negativeVoteCountIsSet() const
{
    return m_Negative_vote_countIsSet;
}

void Curve_ProposalDTO::unsetNegative_vote_count()
{
    m_Negative_vote_countIsSet = false;
}
utility::string_t Curve_ProposalDTO::getCurrentQuorum() const
{
    return m_Current_quorum;
}

void Curve_ProposalDTO::setCurrentQuorum(const utility::string_t& value)
{
    m_Current_quorum = value;
    m_Current_quorumIsSet = true;
}

bool Curve_ProposalDTO::currentQuorumIsSet() const
{
    return m_Current_quorumIsSet;
}

void Curve_ProposalDTO::unsetCurrent_quorum()
{
    m_Current_quorumIsSet = false;
}
utility::string_t Curve_ProposalDTO::getCurrentSupport() const
{
    return m_Current_support;
}

void Curve_ProposalDTO::setCurrentSupport(const utility::string_t& value)
{
    m_Current_support = value;
    m_Current_supportIsSet = true;
}

bool Curve_ProposalDTO::currentSupportIsSet() const
{
    return m_Current_supportIsSet;
}

void Curve_ProposalDTO::unsetCurrent_support()
{
    m_Current_supportIsSet = false;
}
utility::string_t Curve_ProposalDTO::getStakedSupport() const
{
    return m_Staked_support;
}

void Curve_ProposalDTO::setStakedSupport(const utility::string_t& value)
{
    m_Staked_support = value;
    m_Staked_supportIsSet = true;
}

bool Curve_ProposalDTO::stakedSupportIsSet() const
{
    return m_Staked_supportIsSet;
}

void Curve_ProposalDTO::unsetStaked_support()
{
    m_Staked_supportIsSet = false;
}
utility::string_t Curve_ProposalDTO::getTotalStaked() const
{
    return m_Total_staked;
}

void Curve_ProposalDTO::setTotalStaked(const utility::string_t& value)
{
    m_Total_staked = value;
    m_Total_stakedIsSet = true;
}

bool Curve_ProposalDTO::totalStakedIsSet() const
{
    return m_Total_stakedIsSet;
}

void Curve_ProposalDTO::unsetTotal_staked()
{
    m_Total_stakedIsSet = false;
}
utility::string_t Curve_ProposalDTO::getCreated() const
{
    return m_Created;
}

void Curve_ProposalDTO::setCreated(const utility::string_t& value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool Curve_ProposalDTO::createdIsSet() const
{
    return m_CreatedIsSet;
}

void Curve_ProposalDTO::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::string_t Curve_ProposalDTO::getCreatedAtBlock() const
{
    return m_Created_at_block;
}

void Curve_ProposalDTO::setCreatedAtBlock(const utility::string_t& value)
{
    m_Created_at_block = value;
    m_Created_at_blockIsSet = true;
}

bool Curve_ProposalDTO::createdAtBlockIsSet() const
{
    return m_Created_at_blockIsSet;
}

void Curve_ProposalDTO::unsetCreated_at_block()
{
    m_Created_at_blockIsSet = false;
}
utility::string_t Curve_ProposalDTO::getCreatedAtTransaction() const
{
    return m_Created_at_transaction;
}

void Curve_ProposalDTO::setCreatedAtTransaction(const utility::string_t& value)
{
    m_Created_at_transaction = value;
    m_Created_at_transactionIsSet = true;
}

bool Curve_ProposalDTO::createdAtTransactionIsSet() const
{
    return m_Created_at_transactionIsSet;
}

void Curve_ProposalDTO::unsetCreated_at_transaction()
{
    m_Created_at_transactionIsSet = false;
}
utility::string_t Curve_ProposalDTO::getUpdated() const
{
    return m_Updated;
}

void Curve_ProposalDTO::setUpdated(const utility::string_t& value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}

bool Curve_ProposalDTO::updatedIsSet() const
{
    return m_UpdatedIsSet;
}

void Curve_ProposalDTO::unsetUpdated()
{
    m_UpdatedIsSet = false;
}
utility::string_t Curve_ProposalDTO::getUpdatedAtBlock() const
{
    return m_Updated_at_block;
}

void Curve_ProposalDTO::setUpdatedAtBlock(const utility::string_t& value)
{
    m_Updated_at_block = value;
    m_Updated_at_blockIsSet = true;
}

bool Curve_ProposalDTO::updatedAtBlockIsSet() const
{
    return m_Updated_at_blockIsSet;
}

void Curve_ProposalDTO::unsetUpdated_at_block()
{
    m_Updated_at_blockIsSet = false;
}
utility::string_t Curve_ProposalDTO::getUpdatedAtTransaction() const
{
    return m_Updated_at_transaction;
}

void Curve_ProposalDTO::setUpdatedAtTransaction(const utility::string_t& value)
{
    m_Updated_at_transaction = value;
    m_Updated_at_transactionIsSet = true;
}

bool Curve_ProposalDTO::updatedAtTransactionIsSet() const
{
    return m_Updated_at_transactionIsSet;
}

void Curve_ProposalDTO::unsetUpdated_at_transaction()
{
    m_Updated_at_transactionIsSet = false;
}
utility::string_t Curve_ProposalDTO::getExecuted() const
{
    return m_Executed;
}

void Curve_ProposalDTO::setExecuted(const utility::string_t& value)
{
    m_Executed = value;
    m_ExecutedIsSet = true;
}

bool Curve_ProposalDTO::executedIsSet() const
{
    return m_ExecutedIsSet;
}

void Curve_ProposalDTO::unsetExecuted()
{
    m_ExecutedIsSet = false;
}
utility::string_t Curve_ProposalDTO::getExecutedAtBlock() const
{
    return m_Executed_at_block;
}

void Curve_ProposalDTO::setExecutedAtBlock(const utility::string_t& value)
{
    m_Executed_at_block = value;
    m_Executed_at_blockIsSet = true;
}

bool Curve_ProposalDTO::executedAtBlockIsSet() const
{
    return m_Executed_at_blockIsSet;
}

void Curve_ProposalDTO::unsetExecuted_at_block()
{
    m_Executed_at_blockIsSet = false;
}
utility::string_t Curve_ProposalDTO::getExecutedAtTransaction() const
{
    return m_Executed_at_transaction;
}

void Curve_ProposalDTO::setExecutedAtTransaction(const utility::string_t& value)
{
    m_Executed_at_transaction = value;
    m_Executed_at_transactionIsSet = true;
}

bool Curve_ProposalDTO::executedAtTransactionIsSet() const
{
    return m_Executed_at_transactionIsSet;
}

void Curve_ProposalDTO::unsetExecuted_at_transaction()
{
    m_Executed_at_transactionIsSet = false;
}
int64_t Curve_ProposalDTO::getVid() const
{
    return m_Vid;
}

void Curve_ProposalDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool Curve_ProposalDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void Curve_ProposalDTO::unsetVid()
{
    m_VidIsSet = false;
}
}
}
}
}


