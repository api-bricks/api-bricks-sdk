/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/NumericsBigInteger.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



NumericsBigInteger::NumericsBigInteger()
{
    m_Is_power_of_two = false;
    m_Is_power_of_twoIsSet = false;
    m_Is_zero = false;
    m_Is_zeroIsSet = false;
    m_Is_one = false;
    m_Is_oneIsSet = false;
    m_Is_even = false;
    m_Is_evenIsSet = false;
    m_Sign = 0;
    m_SignIsSet = false;
}

NumericsBigInteger::~NumericsBigInteger()
{
}

void NumericsBigInteger::validate()
{
    // TODO: implement validation
}

web::json::value NumericsBigInteger::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Is_power_of_twoIsSet)
    {
        val[utility::conversions::to_string_t(U("is_power_of_two"))] = ModelBase::toJson(m_Is_power_of_two);
    }
    if(m_Is_zeroIsSet)
    {
        val[utility::conversions::to_string_t(U("is_zero"))] = ModelBase::toJson(m_Is_zero);
    }
    if(m_Is_oneIsSet)
    {
        val[utility::conversions::to_string_t(U("is_one"))] = ModelBase::toJson(m_Is_one);
    }
    if(m_Is_evenIsSet)
    {
        val[utility::conversions::to_string_t(U("is_even"))] = ModelBase::toJson(m_Is_even);
    }
    if(m_SignIsSet)
    {
        val[utility::conversions::to_string_t(U("sign"))] = ModelBase::toJson(m_Sign);
    }

    return val;
}

bool NumericsBigInteger::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("is_power_of_two"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_power_of_two")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsPowerOfTwo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsPowerOfTwo);
            setIsPowerOfTwo(refVal_setIsPowerOfTwo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_zero"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_zero")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsZero;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsZero);
            setIsZero(refVal_setIsZero);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_one"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_one")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsOne;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsOne);
            setIsOne(refVal_setIsOne);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_even"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_even")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsEven;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsEven);
            setIsEven(refVal_setIsEven);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sign"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sign")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSign;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSign);
            setSign(refVal_setSign);
        }
    }
    return ok;
}

void NumericsBigInteger::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Is_power_of_twoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_power_of_two")), m_Is_power_of_two));
    }
    if(m_Is_zeroIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_zero")), m_Is_zero));
    }
    if(m_Is_oneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_one")), m_Is_one));
    }
    if(m_Is_evenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_even")), m_Is_even));
    }
    if(m_SignIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sign")), m_Sign));
    }
}

bool NumericsBigInteger::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("is_power_of_two"))))
    {
        bool refVal_setIsPowerOfTwo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_power_of_two"))), refVal_setIsPowerOfTwo );
        setIsPowerOfTwo(refVal_setIsPowerOfTwo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_zero"))))
    {
        bool refVal_setIsZero;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_zero"))), refVal_setIsZero );
        setIsZero(refVal_setIsZero);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_one"))))
    {
        bool refVal_setIsOne;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_one"))), refVal_setIsOne );
        setIsOne(refVal_setIsOne);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_even"))))
    {
        bool refVal_setIsEven;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_even"))), refVal_setIsEven );
        setIsEven(refVal_setIsEven);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sign"))))
    {
        int32_t refVal_setSign;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sign"))), refVal_setSign );
        setSign(refVal_setSign);
    }
    return ok;
}

bool NumericsBigInteger::isIsPowerOfTwo() const
{
    return m_Is_power_of_two;
}

void NumericsBigInteger::setIsPowerOfTwo(bool value)
{
    m_Is_power_of_two = value;
    m_Is_power_of_twoIsSet = true;
}

bool NumericsBigInteger::isPowerOfTwoIsSet() const
{
    return m_Is_power_of_twoIsSet;
}

void NumericsBigInteger::unsetIs_power_of_two()
{
    m_Is_power_of_twoIsSet = false;
}
bool NumericsBigInteger::isIsZero() const
{
    return m_Is_zero;
}

void NumericsBigInteger::setIsZero(bool value)
{
    m_Is_zero = value;
    m_Is_zeroIsSet = true;
}

bool NumericsBigInteger::isZeroIsSet() const
{
    return m_Is_zeroIsSet;
}

void NumericsBigInteger::unsetIs_zero()
{
    m_Is_zeroIsSet = false;
}
bool NumericsBigInteger::isIsOne() const
{
    return m_Is_one;
}

void NumericsBigInteger::setIsOne(bool value)
{
    m_Is_one = value;
    m_Is_oneIsSet = true;
}

bool NumericsBigInteger::isOneIsSet() const
{
    return m_Is_oneIsSet;
}

void NumericsBigInteger::unsetIs_one()
{
    m_Is_oneIsSet = false;
}
bool NumericsBigInteger::isIsEven() const
{
    return m_Is_even;
}

void NumericsBigInteger::setIsEven(bool value)
{
    m_Is_even = value;
    m_Is_evenIsSet = true;
}

bool NumericsBigInteger::isEvenIsSet() const
{
    return m_Is_evenIsSet;
}

void NumericsBigInteger::unsetIs_even()
{
    m_Is_evenIsSet = false;
}
int32_t NumericsBigInteger::getSign() const
{
    return m_Sign;
}

void NumericsBigInteger::setSign(int32_t value)
{
    m_Sign = value;
    m_SignIsSet = true;
}

bool NumericsBigInteger::signIsSet() const
{
    return m_SignIsSet;
}

void NumericsBigInteger::unsetSign()
{
    m_SignIsSet = false;
}
}
}
}
}


