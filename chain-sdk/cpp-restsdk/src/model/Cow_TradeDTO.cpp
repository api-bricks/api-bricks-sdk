/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Cow_TradeDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Cow_TradeDTO::Cow_TradeDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Gas_price = utility::conversions::to_string_t("");
    m_Gas_priceIsSet = false;
    m_Gas_limit = utility::conversions::to_string_t("");
    m_Gas_limitIsSet = false;
    m_Fee_amount = utility::conversions::to_string_t("");
    m_Fee_amountIsSet = false;
    m_Tx_hash = utility::conversions::to_string_t("");
    m_Tx_hashIsSet = false;
    m_Settlement = utility::conversions::to_string_t("");
    m_SettlementIsSet = false;
    m_Buy_amount = utility::conversions::to_string_t("");
    m_Buy_amountIsSet = false;
    m_Sell_amount = utility::conversions::to_string_t("");
    m_Sell_amountIsSet = false;
    m_Sell_token = utility::conversions::to_string_t("");
    m_Sell_tokenIsSet = false;
    m_Buy_token = utility::conversions::to_string_t("");
    m_Buy_tokenIsSet = false;
    m_Order = utility::conversions::to_string_t("");
    m_OrderIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
    m_Pool_id = utility::conversions::to_string_t("");
    m_Pool_idIsSet = false;
    m_Transaction_id = utility::conversions::to_string_t("");
    m_Transaction_idIsSet = false;
    m_Evaluated_price = 0.0;
    m_Evaluated_priceIsSet = false;
    m_Evaluated_amount = 0.0;
    m_Evaluated_amountIsSet = false;
    m_Evaluated_aggressorIsSet = false;
}

Cow_TradeDTO::~Cow_TradeDTO()
{
}

void Cow_TradeDTO::validate()
{
    // TODO: implement validation
}

web::json::value Cow_TradeDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Gas_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_price"))] = ModelBase::toJson(m_Gas_price);
    }
    if(m_Gas_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_limit"))] = ModelBase::toJson(m_Gas_limit);
    }
    if(m_Fee_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("fee_amount"))] = ModelBase::toJson(m_Fee_amount);
    }
    if(m_Tx_hashIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_hash"))] = ModelBase::toJson(m_Tx_hash);
    }
    if(m_SettlementIsSet)
    {
        val[utility::conversions::to_string_t(U("settlement"))] = ModelBase::toJson(m_Settlement);
    }
    if(m_Buy_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("buy_amount"))] = ModelBase::toJson(m_Buy_amount);
    }
    if(m_Sell_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("sell_amount"))] = ModelBase::toJson(m_Sell_amount);
    }
    if(m_Sell_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("sell_token"))] = ModelBase::toJson(m_Sell_token);
    }
    if(m_Buy_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("buy_token"))] = ModelBase::toJson(m_Buy_token);
    }
    if(m_OrderIsSet)
    {
        val[utility::conversions::to_string_t(U("order"))] = ModelBase::toJson(m_Order);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }
    if(m_Pool_idIsSet)
    {
        val[utility::conversions::to_string_t(U("pool_id"))] = ModelBase::toJson(m_Pool_id);
    }
    if(m_Transaction_idIsSet)
    {
        val[utility::conversions::to_string_t(U("transaction_id"))] = ModelBase::toJson(m_Transaction_id);
    }
    if(m_Evaluated_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("evaluated_price"))] = ModelBase::toJson(m_Evaluated_price);
    }
    if(m_Evaluated_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("evaluated_amount"))] = ModelBase::toJson(m_Evaluated_amount);
    }
    if(m_Evaluated_aggressorIsSet)
    {
        val[utility::conversions::to_string_t(U("evaluated_aggressor"))] = ModelBase::toJson(m_Evaluated_aggressor);
    }

    return val;
}

bool Cow_TradeDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasPrice);
            setGasPrice(refVal_setGasPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_limit")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasLimit);
            setGasLimit(refVal_setGasLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fee_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fee_amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeeAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeeAmount);
            setFeeAmount(refVal_setFeeAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTxHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxHash);
            setTxHash(refVal_setTxHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("settlement"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("settlement")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSettlement;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSettlement);
            setSettlement(refVal_setSettlement);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buy_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buy_amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBuyAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyAmount);
            setBuyAmount(refVal_setBuyAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sell_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sell_amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSellAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSellAmount);
            setSellAmount(refVal_setSellAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sell_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sell_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSellToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSellToken);
            setSellToken(refVal_setSellToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buy_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buy_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBuyToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyToken);
            setBuyToken(refVal_setBuyToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("order")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrder);
            setOrder(refVal_setOrder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPoolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPoolId);
            setPoolId(refVal_setPoolId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transaction_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transaction_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTransactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransactionId);
            setTransactionId(refVal_setTransactionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("evaluated_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("evaluated_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setEvaluatedPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatedPrice);
            setEvaluatedPrice(refVal_setEvaluatedPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("evaluated_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("evaluated_amount")));
        if(!fieldValue.is_null())
        {
            double refVal_setEvaluatedAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatedAmount);
            setEvaluatedAmount(refVal_setEvaluatedAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("evaluated_aggressor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("evaluated_aggressor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Transactions_ETradeAggressiveSide> refVal_setEvaluatedAggressor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatedAggressor);
            setEvaluatedAggressor(refVal_setEvaluatedAggressor);
        }
    }
    return ok;
}

void Cow_TradeDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Gas_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_price")), m_Gas_price));
    }
    if(m_Gas_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_limit")), m_Gas_limit));
    }
    if(m_Fee_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fee_amount")), m_Fee_amount));
    }
    if(m_Tx_hashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_hash")), m_Tx_hash));
    }
    if(m_SettlementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("settlement")), m_Settlement));
    }
    if(m_Buy_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buy_amount")), m_Buy_amount));
    }
    if(m_Sell_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sell_amount")), m_Sell_amount));
    }
    if(m_Sell_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sell_token")), m_Sell_token));
    }
    if(m_Buy_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buy_token")), m_Buy_token));
    }
    if(m_OrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("order")), m_Order));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
    if(m_Pool_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool_id")), m_Pool_id));
    }
    if(m_Transaction_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transaction_id")), m_Transaction_id));
    }
    if(m_Evaluated_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("evaluated_price")), m_Evaluated_price));
    }
    if(m_Evaluated_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("evaluated_amount")), m_Evaluated_amount));
    }
    if(m_Evaluated_aggressorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("evaluated_aggressor")), m_Evaluated_aggressor));
    }
}

bool Cow_TradeDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_price"))))
    {
        utility::string_t refVal_setGasPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_price"))), refVal_setGasPrice );
        setGasPrice(refVal_setGasPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_limit"))))
    {
        utility::string_t refVal_setGasLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_limit"))), refVal_setGasLimit );
        setGasLimit(refVal_setGasLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fee_amount"))))
    {
        utility::string_t refVal_setFeeAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fee_amount"))), refVal_setFeeAmount );
        setFeeAmount(refVal_setFeeAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_hash"))))
    {
        utility::string_t refVal_setTxHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_hash"))), refVal_setTxHash );
        setTxHash(refVal_setTxHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("settlement"))))
    {
        utility::string_t refVal_setSettlement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("settlement"))), refVal_setSettlement );
        setSettlement(refVal_setSettlement);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buy_amount"))))
    {
        utility::string_t refVal_setBuyAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buy_amount"))), refVal_setBuyAmount );
        setBuyAmount(refVal_setBuyAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sell_amount"))))
    {
        utility::string_t refVal_setSellAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sell_amount"))), refVal_setSellAmount );
        setSellAmount(refVal_setSellAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sell_token"))))
    {
        utility::string_t refVal_setSellToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sell_token"))), refVal_setSellToken );
        setSellToken(refVal_setSellToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buy_token"))))
    {
        utility::string_t refVal_setBuyToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buy_token"))), refVal_setBuyToken );
        setBuyToken(refVal_setBuyToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("order"))))
    {
        utility::string_t refVal_setOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("order"))), refVal_setOrder );
        setOrder(refVal_setOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool_id"))))
    {
        utility::string_t refVal_setPoolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool_id"))), refVal_setPoolId );
        setPoolId(refVal_setPoolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transaction_id"))))
    {
        utility::string_t refVal_setTransactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transaction_id"))), refVal_setTransactionId );
        setTransactionId(refVal_setTransactionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("evaluated_price"))))
    {
        double refVal_setEvaluatedPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("evaluated_price"))), refVal_setEvaluatedPrice );
        setEvaluatedPrice(refVal_setEvaluatedPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("evaluated_amount"))))
    {
        double refVal_setEvaluatedAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("evaluated_amount"))), refVal_setEvaluatedAmount );
        setEvaluatedAmount(refVal_setEvaluatedAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("evaluated_aggressor"))))
    {
        std::shared_ptr<Transactions_ETradeAggressiveSide> refVal_setEvaluatedAggressor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("evaluated_aggressor"))), refVal_setEvaluatedAggressor );
        setEvaluatedAggressor(refVal_setEvaluatedAggressor);
    }
    return ok;
}

utility::datetime Cow_TradeDTO::getEntryTime() const
{
    return m_Entry_time;
}

void Cow_TradeDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool Cow_TradeDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void Cow_TradeDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime Cow_TradeDTO::getRecvTime() const
{
    return m_Recv_time;
}

void Cow_TradeDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool Cow_TradeDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void Cow_TradeDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t Cow_TradeDTO::getBlockNumber() const
{
    return m_Block_number;
}

void Cow_TradeDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool Cow_TradeDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void Cow_TradeDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t Cow_TradeDTO::getId() const
{
    return m_Id;
}

void Cow_TradeDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Cow_TradeDTO::idIsSet() const
{
    return m_IdIsSet;
}

void Cow_TradeDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Cow_TradeDTO::getTimestamp() const
{
    return m_Timestamp;
}

void Cow_TradeDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Cow_TradeDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Cow_TradeDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t Cow_TradeDTO::getGasPrice() const
{
    return m_Gas_price;
}

void Cow_TradeDTO::setGasPrice(const utility::string_t& value)
{
    m_Gas_price = value;
    m_Gas_priceIsSet = true;
}

bool Cow_TradeDTO::gasPriceIsSet() const
{
    return m_Gas_priceIsSet;
}

void Cow_TradeDTO::unsetGas_price()
{
    m_Gas_priceIsSet = false;
}
utility::string_t Cow_TradeDTO::getGasLimit() const
{
    return m_Gas_limit;
}

void Cow_TradeDTO::setGasLimit(const utility::string_t& value)
{
    m_Gas_limit = value;
    m_Gas_limitIsSet = true;
}

bool Cow_TradeDTO::gasLimitIsSet() const
{
    return m_Gas_limitIsSet;
}

void Cow_TradeDTO::unsetGas_limit()
{
    m_Gas_limitIsSet = false;
}
utility::string_t Cow_TradeDTO::getFeeAmount() const
{
    return m_Fee_amount;
}

void Cow_TradeDTO::setFeeAmount(const utility::string_t& value)
{
    m_Fee_amount = value;
    m_Fee_amountIsSet = true;
}

bool Cow_TradeDTO::feeAmountIsSet() const
{
    return m_Fee_amountIsSet;
}

void Cow_TradeDTO::unsetFee_amount()
{
    m_Fee_amountIsSet = false;
}
utility::string_t Cow_TradeDTO::getTxHash() const
{
    return m_Tx_hash;
}

void Cow_TradeDTO::setTxHash(const utility::string_t& value)
{
    m_Tx_hash = value;
    m_Tx_hashIsSet = true;
}

bool Cow_TradeDTO::txHashIsSet() const
{
    return m_Tx_hashIsSet;
}

void Cow_TradeDTO::unsetTx_hash()
{
    m_Tx_hashIsSet = false;
}
utility::string_t Cow_TradeDTO::getSettlement() const
{
    return m_Settlement;
}

void Cow_TradeDTO::setSettlement(const utility::string_t& value)
{
    m_Settlement = value;
    m_SettlementIsSet = true;
}

bool Cow_TradeDTO::settlementIsSet() const
{
    return m_SettlementIsSet;
}

void Cow_TradeDTO::unsetSettlement()
{
    m_SettlementIsSet = false;
}
utility::string_t Cow_TradeDTO::getBuyAmount() const
{
    return m_Buy_amount;
}

void Cow_TradeDTO::setBuyAmount(const utility::string_t& value)
{
    m_Buy_amount = value;
    m_Buy_amountIsSet = true;
}

bool Cow_TradeDTO::buyAmountIsSet() const
{
    return m_Buy_amountIsSet;
}

void Cow_TradeDTO::unsetBuy_amount()
{
    m_Buy_amountIsSet = false;
}
utility::string_t Cow_TradeDTO::getSellAmount() const
{
    return m_Sell_amount;
}

void Cow_TradeDTO::setSellAmount(const utility::string_t& value)
{
    m_Sell_amount = value;
    m_Sell_amountIsSet = true;
}

bool Cow_TradeDTO::sellAmountIsSet() const
{
    return m_Sell_amountIsSet;
}

void Cow_TradeDTO::unsetSell_amount()
{
    m_Sell_amountIsSet = false;
}
utility::string_t Cow_TradeDTO::getSellToken() const
{
    return m_Sell_token;
}

void Cow_TradeDTO::setSellToken(const utility::string_t& value)
{
    m_Sell_token = value;
    m_Sell_tokenIsSet = true;
}

bool Cow_TradeDTO::sellTokenIsSet() const
{
    return m_Sell_tokenIsSet;
}

void Cow_TradeDTO::unsetSell_token()
{
    m_Sell_tokenIsSet = false;
}
utility::string_t Cow_TradeDTO::getBuyToken() const
{
    return m_Buy_token;
}

void Cow_TradeDTO::setBuyToken(const utility::string_t& value)
{
    m_Buy_token = value;
    m_Buy_tokenIsSet = true;
}

bool Cow_TradeDTO::buyTokenIsSet() const
{
    return m_Buy_tokenIsSet;
}

void Cow_TradeDTO::unsetBuy_token()
{
    m_Buy_tokenIsSet = false;
}
utility::string_t Cow_TradeDTO::getOrder() const
{
    return m_Order;
}

void Cow_TradeDTO::setOrder(const utility::string_t& value)
{
    m_Order = value;
    m_OrderIsSet = true;
}

bool Cow_TradeDTO::orderIsSet() const
{
    return m_OrderIsSet;
}

void Cow_TradeDTO::unsetOrder()
{
    m_OrderIsSet = false;
}
int64_t Cow_TradeDTO::getVid() const
{
    return m_Vid;
}

void Cow_TradeDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool Cow_TradeDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void Cow_TradeDTO::unsetVid()
{
    m_VidIsSet = false;
}
utility::string_t Cow_TradeDTO::getPoolId() const
{
    return m_Pool_id;
}

void Cow_TradeDTO::setPoolId(const utility::string_t& value)
{
    m_Pool_id = value;
    m_Pool_idIsSet = true;
}

bool Cow_TradeDTO::poolIdIsSet() const
{
    return m_Pool_idIsSet;
}

void Cow_TradeDTO::unsetPool_id()
{
    m_Pool_idIsSet = false;
}
utility::string_t Cow_TradeDTO::getTransactionId() const
{
    return m_Transaction_id;
}

void Cow_TradeDTO::setTransactionId(const utility::string_t& value)
{
    m_Transaction_id = value;
    m_Transaction_idIsSet = true;
}

bool Cow_TradeDTO::transactionIdIsSet() const
{
    return m_Transaction_idIsSet;
}

void Cow_TradeDTO::unsetTransaction_id()
{
    m_Transaction_idIsSet = false;
}
double Cow_TradeDTO::getEvaluatedPrice() const
{
    return m_Evaluated_price;
}

void Cow_TradeDTO::setEvaluatedPrice(double value)
{
    m_Evaluated_price = value;
    m_Evaluated_priceIsSet = true;
}

bool Cow_TradeDTO::evaluatedPriceIsSet() const
{
    return m_Evaluated_priceIsSet;
}

void Cow_TradeDTO::unsetEvaluated_price()
{
    m_Evaluated_priceIsSet = false;
}
double Cow_TradeDTO::getEvaluatedAmount() const
{
    return m_Evaluated_amount;
}

void Cow_TradeDTO::setEvaluatedAmount(double value)
{
    m_Evaluated_amount = value;
    m_Evaluated_amountIsSet = true;
}

bool Cow_TradeDTO::evaluatedAmountIsSet() const
{
    return m_Evaluated_amountIsSet;
}

void Cow_TradeDTO::unsetEvaluated_amount()
{
    m_Evaluated_amountIsSet = false;
}
std::shared_ptr<Transactions_ETradeAggressiveSide> Cow_TradeDTO::getEvaluatedAggressor() const
{
    return m_Evaluated_aggressor;
}

void Cow_TradeDTO::setEvaluatedAggressor(const std::shared_ptr<Transactions_ETradeAggressiveSide>& value)
{
    m_Evaluated_aggressor = value;
    m_Evaluated_aggressorIsSet = true;
}

bool Cow_TradeDTO::evaluatedAggressorIsSet() const
{
    return m_Evaluated_aggressorIsSet;
}

void Cow_TradeDTO::unsetEvaluated_aggressor()
{
    m_Evaluated_aggressorIsSet = false;
}
}
}
}
}


