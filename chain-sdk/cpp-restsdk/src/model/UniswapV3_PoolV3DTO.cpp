/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UniswapV3_PoolV3DTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UniswapV3_PoolV3DTO::UniswapV3_PoolV3DTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Created_at_timestamp = utility::datetime();
    m_Created_at_timestampIsSet = false;
    m_Token_0 = utility::conversions::to_string_t("");
    m_Token_0IsSet = false;
    m_Token_1 = utility::conversions::to_string_t("");
    m_Token_1IsSet = false;
    m_Fee_tierIsSet = false;
    m_LiquidityIsSet = false;
    m_Sqrt_priceIsSet = false;
    m_Fee_growth_global_0x128IsSet = false;
    m_Fee_growth_global_1x128IsSet = false;
    m_Token_0_price = utility::conversions::to_string_t("");
    m_Token_0_priceIsSet = false;
    m_Token_1_price = utility::conversions::to_string_t("");
    m_Token_1_priceIsSet = false;
    m_TickIsSet = false;
    m_Observation_indexIsSet = false;
    m_Volume_token_0 = utility::conversions::to_string_t("");
    m_Volume_token_0IsSet = false;
    m_Volume_token_1 = utility::conversions::to_string_t("");
    m_Volume_token_1IsSet = false;
    m_Volume_usd = utility::conversions::to_string_t("");
    m_Volume_usdIsSet = false;
    m_Untracked_volume_usd = utility::conversions::to_string_t("");
    m_Untracked_volume_usdIsSet = false;
    m_Fees_usd = utility::conversions::to_string_t("");
    m_Fees_usdIsSet = false;
    m_Tx_countIsSet = false;
    m_Collected_fees_token_0 = utility::conversions::to_string_t("");
    m_Collected_fees_token_0IsSet = false;
    m_Collected_fees_token_1 = utility::conversions::to_string_t("");
    m_Collected_fees_token_1IsSet = false;
    m_Collected_fees_usd = utility::conversions::to_string_t("");
    m_Collected_fees_usdIsSet = false;
    m_Total_value_locked_token_0 = utility::conversions::to_string_t("");
    m_Total_value_locked_token_0IsSet = false;
    m_Total_value_locked_token_1 = utility::conversions::to_string_t("");
    m_Total_value_locked_token_1IsSet = false;
    m_Total_value_locked_eth = utility::conversions::to_string_t("");
    m_Total_value_locked_ethIsSet = false;
    m_Total_value_locked_usd = utility::conversions::to_string_t("");
    m_Total_value_locked_usdIsSet = false;
    m_Total_value_locked_usd_untracked = utility::conversions::to_string_t("");
    m_Total_value_locked_usd_untrackedIsSet = false;
    m_Liquidity_provider_count = utility::conversions::to_string_t("");
    m_Liquidity_provider_countIsSet = false;
    m_Evaluated_ask = 0.0;
    m_Evaluated_askIsSet = false;
}

UniswapV3_PoolV3DTO::~UniswapV3_PoolV3DTO()
{
}

void UniswapV3_PoolV3DTO::validate()
{
    // TODO: implement validation
}

web::json::value UniswapV3_PoolV3DTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Created_at_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("created_at_timestamp"))] = ModelBase::toJson(m_Created_at_timestamp);
    }
    if(m_Token_0IsSet)
    {
        val[utility::conversions::to_string_t(U("token_0"))] = ModelBase::toJson(m_Token_0);
    }
    if(m_Token_1IsSet)
    {
        val[utility::conversions::to_string_t(U("token_1"))] = ModelBase::toJson(m_Token_1);
    }
    if(m_Fee_tierIsSet)
    {
        val[utility::conversions::to_string_t(U("fee_tier"))] = ModelBase::toJson(m_Fee_tier);
    }
    if(m_LiquidityIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity"))] = ModelBase::toJson(m_Liquidity);
    }
    if(m_Sqrt_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("sqrt_price"))] = ModelBase::toJson(m_Sqrt_price);
    }
    if(m_Fee_growth_global_0x128IsSet)
    {
        val[utility::conversions::to_string_t(U("fee_growth_global_0x128"))] = ModelBase::toJson(m_Fee_growth_global_0x128);
    }
    if(m_Fee_growth_global_1x128IsSet)
    {
        val[utility::conversions::to_string_t(U("fee_growth_global_1x128"))] = ModelBase::toJson(m_Fee_growth_global_1x128);
    }
    if(m_Token_0_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("token_0_price"))] = ModelBase::toJson(m_Token_0_price);
    }
    if(m_Token_1_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("token_1_price"))] = ModelBase::toJson(m_Token_1_price);
    }
    if(m_TickIsSet)
    {
        val[utility::conversions::to_string_t(U("tick"))] = ModelBase::toJson(m_Tick);
    }
    if(m_Observation_indexIsSet)
    {
        val[utility::conversions::to_string_t(U("observation_index"))] = ModelBase::toJson(m_Observation_index);
    }
    if(m_Volume_token_0IsSet)
    {
        val[utility::conversions::to_string_t(U("volume_token_0"))] = ModelBase::toJson(m_Volume_token_0);
    }
    if(m_Volume_token_1IsSet)
    {
        val[utility::conversions::to_string_t(U("volume_token_1"))] = ModelBase::toJson(m_Volume_token_1);
    }
    if(m_Volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("volume_usd"))] = ModelBase::toJson(m_Volume_usd);
    }
    if(m_Untracked_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("untracked_volume_usd"))] = ModelBase::toJson(m_Untracked_volume_usd);
    }
    if(m_Fees_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("fees_usd"))] = ModelBase::toJson(m_Fees_usd);
    }
    if(m_Tx_countIsSet)
    {
        val[utility::conversions::to_string_t(U("tx_count"))] = ModelBase::toJson(m_Tx_count);
    }
    if(m_Collected_fees_token_0IsSet)
    {
        val[utility::conversions::to_string_t(U("collected_fees_token_0"))] = ModelBase::toJson(m_Collected_fees_token_0);
    }
    if(m_Collected_fees_token_1IsSet)
    {
        val[utility::conversions::to_string_t(U("collected_fees_token_1"))] = ModelBase::toJson(m_Collected_fees_token_1);
    }
    if(m_Collected_fees_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("collected_fees_usd"))] = ModelBase::toJson(m_Collected_fees_usd);
    }
    if(m_Total_value_locked_token_0IsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_token_0"))] = ModelBase::toJson(m_Total_value_locked_token_0);
    }
    if(m_Total_value_locked_token_1IsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_token_1"))] = ModelBase::toJson(m_Total_value_locked_token_1);
    }
    if(m_Total_value_locked_ethIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_eth"))] = ModelBase::toJson(m_Total_value_locked_eth);
    }
    if(m_Total_value_locked_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_usd"))] = ModelBase::toJson(m_Total_value_locked_usd);
    }
    if(m_Total_value_locked_usd_untrackedIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_usd_untracked"))] = ModelBase::toJson(m_Total_value_locked_usd_untracked);
    }
    if(m_Liquidity_provider_countIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity_provider_count"))] = ModelBase::toJson(m_Liquidity_provider_count);
    }
    if(m_Evaluated_askIsSet)
    {
        val[utility::conversions::to_string_t(U("evaluated_ask"))] = ModelBase::toJson(m_Evaluated_ask);
    }

    return val;
}

bool UniswapV3_PoolV3DTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_at_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_at_timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAtTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAtTimestamp);
            setCreatedAtTimestamp(refVal_setCreatedAtTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToken0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToken0);
            setToken0(refVal_setToken0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToken1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToken1);
            setToken1(refVal_setToken1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fee_tier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fee_tier")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setFeeTier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeeTier);
            setFeeTier(refVal_setFeeTier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setLiquidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidity);
            setLiquidity(refVal_setLiquidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sqrt_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sqrt_price")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setSqrtPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSqrtPrice);
            setSqrtPrice(refVal_setSqrtPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fee_growth_global_0x128"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fee_growth_global_0x128")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setFeeGrowthGlobal0x128;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeeGrowthGlobal0x128);
            setFeeGrowthGlobal0x128(refVal_setFeeGrowthGlobal0x128);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fee_growth_global_1x128"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fee_growth_global_1x128")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setFeeGrowthGlobal1x128;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeeGrowthGlobal1x128);
            setFeeGrowthGlobal1x128(refVal_setFeeGrowthGlobal1x128);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_0_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_0_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToken0Price;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToken0Price);
            setToken0Price(refVal_setToken0Price);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_1_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_1_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToken1Price;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToken1Price);
            setToken1Price(refVal_setToken1Price);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tick"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tick")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setTick;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTick);
            setTick(refVal_setTick);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("observation_index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("observation_index")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setObservationIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setObservationIndex);
            setObservationIndex(refVal_setObservationIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume_token_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume_token_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVolumeToken0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeToken0);
            setVolumeToken0(refVal_setVolumeToken0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume_token_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume_token_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVolumeToken1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeToken1);
            setVolumeToken1(refVal_setVolumeToken1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeUsd);
            setVolumeUsd(refVal_setVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("untracked_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("untracked_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUntrackedVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUntrackedVolumeUsd);
            setUntrackedVolumeUsd(refVal_setUntrackedVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fees_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fees_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeesUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeesUsd);
            setFeesUsd(refVal_setFeesUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tx_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tx_count")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Numerics_BigInteger> refVal_setTxCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTxCount);
            setTxCount(refVal_setTxCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collected_fees_token_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collected_fees_token_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectedFeesToken0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectedFeesToken0);
            setCollectedFeesToken0(refVal_setCollectedFeesToken0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collected_fees_token_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collected_fees_token_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectedFeesToken1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectedFeesToken1);
            setCollectedFeesToken1(refVal_setCollectedFeesToken1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("collected_fees_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("collected_fees_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCollectedFeesUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCollectedFeesUsd);
            setCollectedFeesUsd(refVal_setCollectedFeesUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_token_0"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_token_0")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedToken0;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedToken0);
            setTotalValueLockedToken0(refVal_setTotalValueLockedToken0);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_token_1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_token_1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedToken1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedToken1);
            setTotalValueLockedToken1(refVal_setTotalValueLockedToken1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_eth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_eth")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedEth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedEth);
            setTotalValueLockedEth(refVal_setTotalValueLockedEth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedUsd);
            setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_usd_untracked"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_usd_untracked")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedUsdUntracked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedUsdUntracked);
            setTotalValueLockedUsdUntracked(refVal_setTotalValueLockedUsdUntracked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity_provider_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity_provider_count")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLiquidityProviderCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidityProviderCount);
            setLiquidityProviderCount(refVal_setLiquidityProviderCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("evaluated_ask"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("evaluated_ask")));
        if(!fieldValue.is_null())
        {
            double refVal_setEvaluatedAsk;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatedAsk);
            setEvaluatedAsk(refVal_setEvaluatedAsk);
        }
    }
    return ok;
}

void UniswapV3_PoolV3DTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Created_at_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_at_timestamp")), m_Created_at_timestamp));
    }
    if(m_Token_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_0")), m_Token_0));
    }
    if(m_Token_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_1")), m_Token_1));
    }
    if(m_Fee_tierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fee_tier")), m_Fee_tier));
    }
    if(m_LiquidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity")), m_Liquidity));
    }
    if(m_Sqrt_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sqrt_price")), m_Sqrt_price));
    }
    if(m_Fee_growth_global_0x128IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fee_growth_global_0x128")), m_Fee_growth_global_0x128));
    }
    if(m_Fee_growth_global_1x128IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fee_growth_global_1x128")), m_Fee_growth_global_1x128));
    }
    if(m_Token_0_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_0_price")), m_Token_0_price));
    }
    if(m_Token_1_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_1_price")), m_Token_1_price));
    }
    if(m_TickIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tick")), m_Tick));
    }
    if(m_Observation_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("observation_index")), m_Observation_index));
    }
    if(m_Volume_token_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume_token_0")), m_Volume_token_0));
    }
    if(m_Volume_token_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume_token_1")), m_Volume_token_1));
    }
    if(m_Volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volume_usd")), m_Volume_usd));
    }
    if(m_Untracked_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("untracked_volume_usd")), m_Untracked_volume_usd));
    }
    if(m_Fees_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fees_usd")), m_Fees_usd));
    }
    if(m_Tx_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tx_count")), m_Tx_count));
    }
    if(m_Collected_fees_token_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collected_fees_token_0")), m_Collected_fees_token_0));
    }
    if(m_Collected_fees_token_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collected_fees_token_1")), m_Collected_fees_token_1));
    }
    if(m_Collected_fees_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("collected_fees_usd")), m_Collected_fees_usd));
    }
    if(m_Total_value_locked_token_0IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_token_0")), m_Total_value_locked_token_0));
    }
    if(m_Total_value_locked_token_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_token_1")), m_Total_value_locked_token_1));
    }
    if(m_Total_value_locked_ethIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_eth")), m_Total_value_locked_eth));
    }
    if(m_Total_value_locked_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_usd")), m_Total_value_locked_usd));
    }
    if(m_Total_value_locked_usd_untrackedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_usd_untracked")), m_Total_value_locked_usd_untracked));
    }
    if(m_Liquidity_provider_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity_provider_count")), m_Liquidity_provider_count));
    }
    if(m_Evaluated_askIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("evaluated_ask")), m_Evaluated_ask));
    }
}

bool UniswapV3_PoolV3DTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_at_timestamp"))))
    {
        utility::datetime refVal_setCreatedAtTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_at_timestamp"))), refVal_setCreatedAtTimestamp );
        setCreatedAtTimestamp(refVal_setCreatedAtTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_0"))))
    {
        utility::string_t refVal_setToken0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_0"))), refVal_setToken0 );
        setToken0(refVal_setToken0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_1"))))
    {
        utility::string_t refVal_setToken1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_1"))), refVal_setToken1 );
        setToken1(refVal_setToken1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fee_tier"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setFeeTier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fee_tier"))), refVal_setFeeTier );
        setFeeTier(refVal_setFeeTier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setLiquidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity"))), refVal_setLiquidity );
        setLiquidity(refVal_setLiquidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sqrt_price"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setSqrtPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sqrt_price"))), refVal_setSqrtPrice );
        setSqrtPrice(refVal_setSqrtPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fee_growth_global_0x128"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setFeeGrowthGlobal0x128;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fee_growth_global_0x128"))), refVal_setFeeGrowthGlobal0x128 );
        setFeeGrowthGlobal0x128(refVal_setFeeGrowthGlobal0x128);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fee_growth_global_1x128"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setFeeGrowthGlobal1x128;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fee_growth_global_1x128"))), refVal_setFeeGrowthGlobal1x128 );
        setFeeGrowthGlobal1x128(refVal_setFeeGrowthGlobal1x128);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_0_price"))))
    {
        utility::string_t refVal_setToken0Price;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_0_price"))), refVal_setToken0Price );
        setToken0Price(refVal_setToken0Price);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_1_price"))))
    {
        utility::string_t refVal_setToken1Price;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_1_price"))), refVal_setToken1Price );
        setToken1Price(refVal_setToken1Price);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tick"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setTick;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tick"))), refVal_setTick );
        setTick(refVal_setTick);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("observation_index"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setObservationIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("observation_index"))), refVal_setObservationIndex );
        setObservationIndex(refVal_setObservationIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume_token_0"))))
    {
        utility::string_t refVal_setVolumeToken0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume_token_0"))), refVal_setVolumeToken0 );
        setVolumeToken0(refVal_setVolumeToken0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume_token_1"))))
    {
        utility::string_t refVal_setVolumeToken1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume_token_1"))), refVal_setVolumeToken1 );
        setVolumeToken1(refVal_setVolumeToken1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volume_usd"))))
    {
        utility::string_t refVal_setVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volume_usd"))), refVal_setVolumeUsd );
        setVolumeUsd(refVal_setVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("untracked_volume_usd"))))
    {
        utility::string_t refVal_setUntrackedVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("untracked_volume_usd"))), refVal_setUntrackedVolumeUsd );
        setUntrackedVolumeUsd(refVal_setUntrackedVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fees_usd"))))
    {
        utility::string_t refVal_setFeesUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fees_usd"))), refVal_setFeesUsd );
        setFeesUsd(refVal_setFeesUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tx_count"))))
    {
        std::shared_ptr<Numerics_BigInteger> refVal_setTxCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tx_count"))), refVal_setTxCount );
        setTxCount(refVal_setTxCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collected_fees_token_0"))))
    {
        utility::string_t refVal_setCollectedFeesToken0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collected_fees_token_0"))), refVal_setCollectedFeesToken0 );
        setCollectedFeesToken0(refVal_setCollectedFeesToken0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collected_fees_token_1"))))
    {
        utility::string_t refVal_setCollectedFeesToken1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collected_fees_token_1"))), refVal_setCollectedFeesToken1 );
        setCollectedFeesToken1(refVal_setCollectedFeesToken1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("collected_fees_usd"))))
    {
        utility::string_t refVal_setCollectedFeesUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("collected_fees_usd"))), refVal_setCollectedFeesUsd );
        setCollectedFeesUsd(refVal_setCollectedFeesUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_token_0"))))
    {
        utility::string_t refVal_setTotalValueLockedToken0;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_token_0"))), refVal_setTotalValueLockedToken0 );
        setTotalValueLockedToken0(refVal_setTotalValueLockedToken0);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_token_1"))))
    {
        utility::string_t refVal_setTotalValueLockedToken1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_token_1"))), refVal_setTotalValueLockedToken1 );
        setTotalValueLockedToken1(refVal_setTotalValueLockedToken1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_eth"))))
    {
        utility::string_t refVal_setTotalValueLockedEth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_eth"))), refVal_setTotalValueLockedEth );
        setTotalValueLockedEth(refVal_setTotalValueLockedEth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        utility::string_t refVal_setTotalValueLockedUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_usd"))), refVal_setTotalValueLockedUsd );
        setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_usd_untracked"))))
    {
        utility::string_t refVal_setTotalValueLockedUsdUntracked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_usd_untracked"))), refVal_setTotalValueLockedUsdUntracked );
        setTotalValueLockedUsdUntracked(refVal_setTotalValueLockedUsdUntracked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity_provider_count"))))
    {
        utility::string_t refVal_setLiquidityProviderCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity_provider_count"))), refVal_setLiquidityProviderCount );
        setLiquidityProviderCount(refVal_setLiquidityProviderCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("evaluated_ask"))))
    {
        double refVal_setEvaluatedAsk;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("evaluated_ask"))), refVal_setEvaluatedAsk );
        setEvaluatedAsk(refVal_setEvaluatedAsk);
    }
    return ok;
}

utility::datetime UniswapV3_PoolV3DTO::getEntryTime() const
{
    return m_Entry_time;
}

void UniswapV3_PoolV3DTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UniswapV3_PoolV3DTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UniswapV3_PoolV3DTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UniswapV3_PoolV3DTO::getRecvTime() const
{
    return m_Recv_time;
}

void UniswapV3_PoolV3DTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UniswapV3_PoolV3DTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UniswapV3_PoolV3DTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UniswapV3_PoolV3DTO::getBlockNumber() const
{
    return m_Block_number;
}

void UniswapV3_PoolV3DTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UniswapV3_PoolV3DTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UniswapV3_PoolV3DTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
int64_t UniswapV3_PoolV3DTO::getVid() const
{
    return m_Vid;
}

void UniswapV3_PoolV3DTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool UniswapV3_PoolV3DTO::vidIsSet() const
{
    return m_VidIsSet;
}

void UniswapV3_PoolV3DTO::unsetVid()
{
    m_VidIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getId() const
{
    return m_Id;
}

void UniswapV3_PoolV3DTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UniswapV3_PoolV3DTO::idIsSet() const
{
    return m_IdIsSet;
}

void UniswapV3_PoolV3DTO::unsetId()
{
    m_IdIsSet = false;
}
utility::datetime UniswapV3_PoolV3DTO::getCreatedAtTimestamp() const
{
    return m_Created_at_timestamp;
}

void UniswapV3_PoolV3DTO::setCreatedAtTimestamp(const utility::datetime& value)
{
    m_Created_at_timestamp = value;
    m_Created_at_timestampIsSet = true;
}

bool UniswapV3_PoolV3DTO::createdAtTimestampIsSet() const
{
    return m_Created_at_timestampIsSet;
}

void UniswapV3_PoolV3DTO::unsetCreated_at_timestamp()
{
    m_Created_at_timestampIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getToken0() const
{
    return m_Token_0;
}

void UniswapV3_PoolV3DTO::setToken0(const utility::string_t& value)
{
    m_Token_0 = value;
    m_Token_0IsSet = true;
}

bool UniswapV3_PoolV3DTO::token0IsSet() const
{
    return m_Token_0IsSet;
}

void UniswapV3_PoolV3DTO::unsetToken_0()
{
    m_Token_0IsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getToken1() const
{
    return m_Token_1;
}

void UniswapV3_PoolV3DTO::setToken1(const utility::string_t& value)
{
    m_Token_1 = value;
    m_Token_1IsSet = true;
}

bool UniswapV3_PoolV3DTO::token1IsSet() const
{
    return m_Token_1IsSet;
}

void UniswapV3_PoolV3DTO::unsetToken_1()
{
    m_Token_1IsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_PoolV3DTO::getFeeTier() const
{
    return m_Fee_tier;
}

void UniswapV3_PoolV3DTO::setFeeTier(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Fee_tier = value;
    m_Fee_tierIsSet = true;
}

bool UniswapV3_PoolV3DTO::feeTierIsSet() const
{
    return m_Fee_tierIsSet;
}

void UniswapV3_PoolV3DTO::unsetFee_tier()
{
    m_Fee_tierIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_PoolV3DTO::getLiquidity() const
{
    return m_Liquidity;
}

void UniswapV3_PoolV3DTO::setLiquidity(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Liquidity = value;
    m_LiquidityIsSet = true;
}

bool UniswapV3_PoolV3DTO::liquidityIsSet() const
{
    return m_LiquidityIsSet;
}

void UniswapV3_PoolV3DTO::unsetLiquidity()
{
    m_LiquidityIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_PoolV3DTO::getSqrtPrice() const
{
    return m_Sqrt_price;
}

void UniswapV3_PoolV3DTO::setSqrtPrice(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Sqrt_price = value;
    m_Sqrt_priceIsSet = true;
}

bool UniswapV3_PoolV3DTO::sqrtPriceIsSet() const
{
    return m_Sqrt_priceIsSet;
}

void UniswapV3_PoolV3DTO::unsetSqrt_price()
{
    m_Sqrt_priceIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_PoolV3DTO::getFeeGrowthGlobal0x128() const
{
    return m_Fee_growth_global_0x128;
}

void UniswapV3_PoolV3DTO::setFeeGrowthGlobal0x128(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Fee_growth_global_0x128 = value;
    m_Fee_growth_global_0x128IsSet = true;
}

bool UniswapV3_PoolV3DTO::feeGrowthGlobal0x128IsSet() const
{
    return m_Fee_growth_global_0x128IsSet;
}

void UniswapV3_PoolV3DTO::unsetFee_growth_global_0x128()
{
    m_Fee_growth_global_0x128IsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_PoolV3DTO::getFeeGrowthGlobal1x128() const
{
    return m_Fee_growth_global_1x128;
}

void UniswapV3_PoolV3DTO::setFeeGrowthGlobal1x128(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Fee_growth_global_1x128 = value;
    m_Fee_growth_global_1x128IsSet = true;
}

bool UniswapV3_PoolV3DTO::feeGrowthGlobal1x128IsSet() const
{
    return m_Fee_growth_global_1x128IsSet;
}

void UniswapV3_PoolV3DTO::unsetFee_growth_global_1x128()
{
    m_Fee_growth_global_1x128IsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getToken0Price() const
{
    return m_Token_0_price;
}

void UniswapV3_PoolV3DTO::setToken0Price(const utility::string_t& value)
{
    m_Token_0_price = value;
    m_Token_0_priceIsSet = true;
}

bool UniswapV3_PoolV3DTO::token0PriceIsSet() const
{
    return m_Token_0_priceIsSet;
}

void UniswapV3_PoolV3DTO::unsetToken_0_price()
{
    m_Token_0_priceIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getToken1Price() const
{
    return m_Token_1_price;
}

void UniswapV3_PoolV3DTO::setToken1Price(const utility::string_t& value)
{
    m_Token_1_price = value;
    m_Token_1_priceIsSet = true;
}

bool UniswapV3_PoolV3DTO::token1PriceIsSet() const
{
    return m_Token_1_priceIsSet;
}

void UniswapV3_PoolV3DTO::unsetToken_1_price()
{
    m_Token_1_priceIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_PoolV3DTO::getTick() const
{
    return m_Tick;
}

void UniswapV3_PoolV3DTO::setTick(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Tick = value;
    m_TickIsSet = true;
}

bool UniswapV3_PoolV3DTO::tickIsSet() const
{
    return m_TickIsSet;
}

void UniswapV3_PoolV3DTO::unsetTick()
{
    m_TickIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_PoolV3DTO::getObservationIndex() const
{
    return m_Observation_index;
}

void UniswapV3_PoolV3DTO::setObservationIndex(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Observation_index = value;
    m_Observation_indexIsSet = true;
}

bool UniswapV3_PoolV3DTO::observationIndexIsSet() const
{
    return m_Observation_indexIsSet;
}

void UniswapV3_PoolV3DTO::unsetObservation_index()
{
    m_Observation_indexIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getVolumeToken0() const
{
    return m_Volume_token_0;
}

void UniswapV3_PoolV3DTO::setVolumeToken0(const utility::string_t& value)
{
    m_Volume_token_0 = value;
    m_Volume_token_0IsSet = true;
}

bool UniswapV3_PoolV3DTO::volumeToken0IsSet() const
{
    return m_Volume_token_0IsSet;
}

void UniswapV3_PoolV3DTO::unsetVolume_token_0()
{
    m_Volume_token_0IsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getVolumeToken1() const
{
    return m_Volume_token_1;
}

void UniswapV3_PoolV3DTO::setVolumeToken1(const utility::string_t& value)
{
    m_Volume_token_1 = value;
    m_Volume_token_1IsSet = true;
}

bool UniswapV3_PoolV3DTO::volumeToken1IsSet() const
{
    return m_Volume_token_1IsSet;
}

void UniswapV3_PoolV3DTO::unsetVolume_token_1()
{
    m_Volume_token_1IsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getVolumeUsd() const
{
    return m_Volume_usd;
}

void UniswapV3_PoolV3DTO::setVolumeUsd(const utility::string_t& value)
{
    m_Volume_usd = value;
    m_Volume_usdIsSet = true;
}

bool UniswapV3_PoolV3DTO::volumeUsdIsSet() const
{
    return m_Volume_usdIsSet;
}

void UniswapV3_PoolV3DTO::unsetVolume_usd()
{
    m_Volume_usdIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getUntrackedVolumeUsd() const
{
    return m_Untracked_volume_usd;
}

void UniswapV3_PoolV3DTO::setUntrackedVolumeUsd(const utility::string_t& value)
{
    m_Untracked_volume_usd = value;
    m_Untracked_volume_usdIsSet = true;
}

bool UniswapV3_PoolV3DTO::untrackedVolumeUsdIsSet() const
{
    return m_Untracked_volume_usdIsSet;
}

void UniswapV3_PoolV3DTO::unsetUntracked_volume_usd()
{
    m_Untracked_volume_usdIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getFeesUsd() const
{
    return m_Fees_usd;
}

void UniswapV3_PoolV3DTO::setFeesUsd(const utility::string_t& value)
{
    m_Fees_usd = value;
    m_Fees_usdIsSet = true;
}

bool UniswapV3_PoolV3DTO::feesUsdIsSet() const
{
    return m_Fees_usdIsSet;
}

void UniswapV3_PoolV3DTO::unsetFees_usd()
{
    m_Fees_usdIsSet = false;
}
std::shared_ptr<Numerics_BigInteger> UniswapV3_PoolV3DTO::getTxCount() const
{
    return m_Tx_count;
}

void UniswapV3_PoolV3DTO::setTxCount(const std::shared_ptr<Numerics_BigInteger>& value)
{
    m_Tx_count = value;
    m_Tx_countIsSet = true;
}

bool UniswapV3_PoolV3DTO::txCountIsSet() const
{
    return m_Tx_countIsSet;
}

void UniswapV3_PoolV3DTO::unsetTx_count()
{
    m_Tx_countIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getCollectedFeesToken0() const
{
    return m_Collected_fees_token_0;
}

void UniswapV3_PoolV3DTO::setCollectedFeesToken0(const utility::string_t& value)
{
    m_Collected_fees_token_0 = value;
    m_Collected_fees_token_0IsSet = true;
}

bool UniswapV3_PoolV3DTO::collectedFeesToken0IsSet() const
{
    return m_Collected_fees_token_0IsSet;
}

void UniswapV3_PoolV3DTO::unsetCollected_fees_token_0()
{
    m_Collected_fees_token_0IsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getCollectedFeesToken1() const
{
    return m_Collected_fees_token_1;
}

void UniswapV3_PoolV3DTO::setCollectedFeesToken1(const utility::string_t& value)
{
    m_Collected_fees_token_1 = value;
    m_Collected_fees_token_1IsSet = true;
}

bool UniswapV3_PoolV3DTO::collectedFeesToken1IsSet() const
{
    return m_Collected_fees_token_1IsSet;
}

void UniswapV3_PoolV3DTO::unsetCollected_fees_token_1()
{
    m_Collected_fees_token_1IsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getCollectedFeesUsd() const
{
    return m_Collected_fees_usd;
}

void UniswapV3_PoolV3DTO::setCollectedFeesUsd(const utility::string_t& value)
{
    m_Collected_fees_usd = value;
    m_Collected_fees_usdIsSet = true;
}

bool UniswapV3_PoolV3DTO::collectedFeesUsdIsSet() const
{
    return m_Collected_fees_usdIsSet;
}

void UniswapV3_PoolV3DTO::unsetCollected_fees_usd()
{
    m_Collected_fees_usdIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getTotalValueLockedToken0() const
{
    return m_Total_value_locked_token_0;
}

void UniswapV3_PoolV3DTO::setTotalValueLockedToken0(const utility::string_t& value)
{
    m_Total_value_locked_token_0 = value;
    m_Total_value_locked_token_0IsSet = true;
}

bool UniswapV3_PoolV3DTO::totalValueLockedToken0IsSet() const
{
    return m_Total_value_locked_token_0IsSet;
}

void UniswapV3_PoolV3DTO::unsetTotal_value_locked_token_0()
{
    m_Total_value_locked_token_0IsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getTotalValueLockedToken1() const
{
    return m_Total_value_locked_token_1;
}

void UniswapV3_PoolV3DTO::setTotalValueLockedToken1(const utility::string_t& value)
{
    m_Total_value_locked_token_1 = value;
    m_Total_value_locked_token_1IsSet = true;
}

bool UniswapV3_PoolV3DTO::totalValueLockedToken1IsSet() const
{
    return m_Total_value_locked_token_1IsSet;
}

void UniswapV3_PoolV3DTO::unsetTotal_value_locked_token_1()
{
    m_Total_value_locked_token_1IsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getTotalValueLockedEth() const
{
    return m_Total_value_locked_eth;
}

void UniswapV3_PoolV3DTO::setTotalValueLockedEth(const utility::string_t& value)
{
    m_Total_value_locked_eth = value;
    m_Total_value_locked_ethIsSet = true;
}

bool UniswapV3_PoolV3DTO::totalValueLockedEthIsSet() const
{
    return m_Total_value_locked_ethIsSet;
}

void UniswapV3_PoolV3DTO::unsetTotal_value_locked_eth()
{
    m_Total_value_locked_ethIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getTotalValueLockedUsd() const
{
    return m_Total_value_locked_usd;
}

void UniswapV3_PoolV3DTO::setTotalValueLockedUsd(const utility::string_t& value)
{
    m_Total_value_locked_usd = value;
    m_Total_value_locked_usdIsSet = true;
}

bool UniswapV3_PoolV3DTO::totalValueLockedUsdIsSet() const
{
    return m_Total_value_locked_usdIsSet;
}

void UniswapV3_PoolV3DTO::unsetTotal_value_locked_usd()
{
    m_Total_value_locked_usdIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getTotalValueLockedUsdUntracked() const
{
    return m_Total_value_locked_usd_untracked;
}

void UniswapV3_PoolV3DTO::setTotalValueLockedUsdUntracked(const utility::string_t& value)
{
    m_Total_value_locked_usd_untracked = value;
    m_Total_value_locked_usd_untrackedIsSet = true;
}

bool UniswapV3_PoolV3DTO::totalValueLockedUsdUntrackedIsSet() const
{
    return m_Total_value_locked_usd_untrackedIsSet;
}

void UniswapV3_PoolV3DTO::unsetTotal_value_locked_usd_untracked()
{
    m_Total_value_locked_usd_untrackedIsSet = false;
}
utility::string_t UniswapV3_PoolV3DTO::getLiquidityProviderCount() const
{
    return m_Liquidity_provider_count;
}

void UniswapV3_PoolV3DTO::setLiquidityProviderCount(const utility::string_t& value)
{
    m_Liquidity_provider_count = value;
    m_Liquidity_provider_countIsSet = true;
}

bool UniswapV3_PoolV3DTO::liquidityProviderCountIsSet() const
{
    return m_Liquidity_provider_countIsSet;
}

void UniswapV3_PoolV3DTO::unsetLiquidity_provider_count()
{
    m_Liquidity_provider_countIsSet = false;
}
double UniswapV3_PoolV3DTO::getEvaluatedAsk() const
{
    return m_Evaluated_ask;
}

void UniswapV3_PoolV3DTO::setEvaluatedAsk(double value)
{
    m_Evaluated_ask = value;
    m_Evaluated_askIsSet = true;
}

bool UniswapV3_PoolV3DTO::evaluatedAskIsSet() const
{
    return m_Evaluated_askIsSet;
}

void UniswapV3_PoolV3DTO::unsetEvaluated_ask()
{
    m_Evaluated_askIsSet = false;
}
}
}
}
}


