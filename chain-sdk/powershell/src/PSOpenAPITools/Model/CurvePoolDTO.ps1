#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
Pool address.
.PARAMETER Name
Pool's human-readable name.
.PARAMETER IsMeta
Identify whether pool is a metapool.
.PARAMETER RegistryAddress
Registry contract address from where this pool was registered.
.PARAMETER SwapAddress
Swap contract address.
.PARAMETER LpToken
Address of the token representing LP share.
.PARAMETER CoinCount
Number of coins composing the pool.
.PARAMETER UnderlyingCount
Number of underlying coins composing the pool.
.PARAMETER A
Amplification coefficient multiplied by n * (n - 1).
.PARAMETER Fee
Fee to charge for exchanges.
.PARAMETER AdminFee
Admin fee is represented as a percentage of the total fee collected on a swap.
.PARAMETER Owner
Admin address.
.PARAMETER VirtualPrice
Average dollar value of pool token.
.PARAMETER Locked

.PARAMETER AddedAt

.PARAMETER AddedAtBlock

.PARAMETER AddedAtTransaction

.PARAMETER RemovedAt

.PARAMETER RemovedAtBlock

.PARAMETER RemovedAtTransaction

.PARAMETER ExchangeCount

.PARAMETER GaugeCount

.PARAMETER Vid

.PARAMETER EvaluatedAsk
No description available.
.OUTPUTS

CurvePoolDTO<PSCustomObject>
#>

function Initialize-CurvePoolDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsMeta},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RegistryAddress},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SwapAddress},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LpToken},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CoinCount},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UnderlyingCount},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${A},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Fee},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AdminFee},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Owner},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VirtualPrice},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Locked},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${AddedAt},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddedAtBlock},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AddedAtTransaction},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemovedAt},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemovedAtBlock},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RemovedAtTransaction},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExchangeCount},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GaugeCount},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${EvaluatedAsk}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CurvePoolDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "name" = ${Name}
            "is_meta" = ${IsMeta}
            "registry_address" = ${RegistryAddress}
            "swap_address" = ${SwapAddress}
            "lp_token" = ${LpToken}
            "coin_count" = ${CoinCount}
            "underlying_count" = ${UnderlyingCount}
            "a" = ${A}
            "fee" = ${Fee}
            "admin_fee" = ${AdminFee}
            "owner" = ${Owner}
            "virtual_price" = ${VirtualPrice}
            "locked" = ${Locked}
            "added_at" = ${AddedAt}
            "added_at_block" = ${AddedAtBlock}
            "added_at_transaction" = ${AddedAtTransaction}
            "removed_at" = ${RemovedAt}
            "removed_at_block" = ${RemovedAtBlock}
            "removed_at_transaction" = ${RemovedAtTransaction}
            "exchange_count" = ${ExchangeCount}
            "gauge_count" = ${GaugeCount}
            "vid" = ${Vid}
            "evaluated_ask" = ${EvaluatedAsk}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CurvePoolDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CurvePoolDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CurvePoolDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCurvePoolDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CurvePoolDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CurvePoolDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "name", "is_meta", "registry_address", "swap_address", "lp_token", "coin_count", "underlying_count", "a", "fee", "admin_fee", "owner", "virtual_price", "locked", "added_at", "added_at_block", "added_at_transaction", "removed_at", "removed_at_block", "removed_at_transaction", "exchange_count", "gauge_count", "vid", "evaluated_ask")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_meta"))) { #optional property not found
            $IsMeta = $null
        } else {
            $IsMeta = $JsonParameters.PSobject.Properties["is_meta"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "registry_address"))) { #optional property not found
            $RegistryAddress = $null
        } else {
            $RegistryAddress = $JsonParameters.PSobject.Properties["registry_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "swap_address"))) { #optional property not found
            $SwapAddress = $null
        } else {
            $SwapAddress = $JsonParameters.PSobject.Properties["swap_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lp_token"))) { #optional property not found
            $LpToken = $null
        } else {
            $LpToken = $JsonParameters.PSobject.Properties["lp_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "coin_count"))) { #optional property not found
            $CoinCount = $null
        } else {
            $CoinCount = $JsonParameters.PSobject.Properties["coin_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "underlying_count"))) { #optional property not found
            $UnderlyingCount = $null
        } else {
            $UnderlyingCount = $JsonParameters.PSobject.Properties["underlying_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "a"))) { #optional property not found
            $A = $null
        } else {
            $A = $JsonParameters.PSobject.Properties["a"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fee"))) { #optional property not found
            $Fee = $null
        } else {
            $Fee = $JsonParameters.PSobject.Properties["fee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "admin_fee"))) { #optional property not found
            $AdminFee = $null
        } else {
            $AdminFee = $JsonParameters.PSobject.Properties["admin_fee"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtual_price"))) { #optional property not found
            $VirtualPrice = $null
        } else {
            $VirtualPrice = $JsonParameters.PSobject.Properties["virtual_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locked"))) { #optional property not found
            $Locked = $null
        } else {
            $Locked = $JsonParameters.PSobject.Properties["locked"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "added_at"))) { #optional property not found
            $AddedAt = $null
        } else {
            $AddedAt = $JsonParameters.PSobject.Properties["added_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "added_at_block"))) { #optional property not found
            $AddedAtBlock = $null
        } else {
            $AddedAtBlock = $JsonParameters.PSobject.Properties["added_at_block"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "added_at_transaction"))) { #optional property not found
            $AddedAtTransaction = $null
        } else {
            $AddedAtTransaction = $JsonParameters.PSobject.Properties["added_at_transaction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "removed_at"))) { #optional property not found
            $RemovedAt = $null
        } else {
            $RemovedAt = $JsonParameters.PSobject.Properties["removed_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "removed_at_block"))) { #optional property not found
            $RemovedAtBlock = $null
        } else {
            $RemovedAtBlock = $JsonParameters.PSobject.Properties["removed_at_block"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "removed_at_transaction"))) { #optional property not found
            $RemovedAtTransaction = $null
        } else {
            $RemovedAtTransaction = $JsonParameters.PSobject.Properties["removed_at_transaction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exchange_count"))) { #optional property not found
            $ExchangeCount = $null
        } else {
            $ExchangeCount = $JsonParameters.PSobject.Properties["exchange_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gauge_count"))) { #optional property not found
            $GaugeCount = $null
        } else {
            $GaugeCount = $JsonParameters.PSobject.Properties["gauge_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "evaluated_ask"))) { #optional property not found
            $EvaluatedAsk = $null
        } else {
            $EvaluatedAsk = $JsonParameters.PSobject.Properties["evaluated_ask"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "name" = ${Name}
            "is_meta" = ${IsMeta}
            "registry_address" = ${RegistryAddress}
            "swap_address" = ${SwapAddress}
            "lp_token" = ${LpToken}
            "coin_count" = ${CoinCount}
            "underlying_count" = ${UnderlyingCount}
            "a" = ${A}
            "fee" = ${Fee}
            "admin_fee" = ${AdminFee}
            "owner" = ${Owner}
            "virtual_price" = ${VirtualPrice}
            "locked" = ${Locked}
            "added_at" = ${AddedAt}
            "added_at_block" = ${AddedAtBlock}
            "added_at_transaction" = ${AddedAtTransaction}
            "removed_at" = ${RemovedAt}
            "removed_at_block" = ${RemovedAtBlock}
            "removed_at_transaction" = ${RemovedAtTransaction}
            "exchange_count" = ${ExchangeCount}
            "gauge_count" = ${GaugeCount}
            "vid" = ${Vid}
            "evaluated_ask" = ${EvaluatedAsk}
        }

        return $PSO
    }

}

