#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id

.PARAMETER Number
Sequential number in related to the realted voting app.
.PARAMETER App
Voting app instance.
.PARAMETER Creator
Proposal creator's account.
.PARAMETER ExecutionScript

.PARAMETER ExpireDate

.PARAMETER MinimumQuorum
Percentage of positive votes in total possible votes for this proposal to be accepted.
.PARAMETER RequiredSupport
Percentage of positive votes needed for this proposal to be accepted.
.PARAMETER SnapshotBlock

.PARAMETER VotingPower

.PARAMETER Metadata
Link to metadata file.
.PARAMETER Text
Proposal description text.
.PARAMETER VoteCount
Number of votes received by the proposal.
.PARAMETER PositiveVoteCount
Number of positive votes (yes) received by the proposal.
.PARAMETER NegativeVoteCount
Number of negative votes (no) received by the proposal.
.PARAMETER CurrentQuorum

.PARAMETER CurrentSupport

.PARAMETER StakedSupport

.PARAMETER TotalStaked

.PARAMETER Created

.PARAMETER CreatedAtBlock

.PARAMETER CreatedAtTransaction

.PARAMETER Updated

.PARAMETER UpdatedAtBlock

.PARAMETER UpdatedAtTransaction

.PARAMETER Executed

.PARAMETER ExecutedAtBlock

.PARAMETER ExecutedAtTransaction

.PARAMETER Vid

.OUTPUTS

CurveProposalDTO<PSCustomObject>
#>

function Initialize-CurveProposalDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Number},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${App},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Creator},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExecutionScript},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExpireDate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinimumQuorum},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequiredSupport},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapshotBlock},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VotingPower},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Metadata},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Text},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VoteCount},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PositiveVoteCount},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NegativeVoteCount},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrentQuorum},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrentSupport},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StakedSupport},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalStaked},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Created},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedAtBlock},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedAtTransaction},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Updated},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdatedAtBlock},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UpdatedAtTransaction},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Executed},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExecutedAtBlock},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExecutedAtTransaction},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CurveProposalDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "number" = ${Number}
            "app" = ${App}
            "creator" = ${Creator}
            "execution_script" = ${ExecutionScript}
            "expire_date" = ${ExpireDate}
            "minimum_quorum" = ${MinimumQuorum}
            "required_support" = ${RequiredSupport}
            "snapshot_block" = ${SnapshotBlock}
            "voting_power" = ${VotingPower}
            "metadata" = ${Metadata}
            "text" = ${Text}
            "vote_count" = ${VoteCount}
            "positive_vote_count" = ${PositiveVoteCount}
            "negative_vote_count" = ${NegativeVoteCount}
            "current_quorum" = ${CurrentQuorum}
            "current_support" = ${CurrentSupport}
            "staked_support" = ${StakedSupport}
            "total_staked" = ${TotalStaked}
            "created" = ${Created}
            "created_at_block" = ${CreatedAtBlock}
            "created_at_transaction" = ${CreatedAtTransaction}
            "updated" = ${Updated}
            "updated_at_block" = ${UpdatedAtBlock}
            "updated_at_transaction" = ${UpdatedAtTransaction}
            "executed" = ${Executed}
            "executed_at_block" = ${ExecutedAtBlock}
            "executed_at_transaction" = ${ExecutedAtTransaction}
            "vid" = ${Vid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CurveProposalDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CurveProposalDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CurveProposalDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCurveProposalDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CurveProposalDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CurveProposalDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "number", "app", "creator", "execution_script", "expire_date", "minimum_quorum", "required_support", "snapshot_block", "voting_power", "metadata", "text", "vote_count", "positive_vote_count", "negative_vote_count", "current_quorum", "current_support", "staked_support", "total_staked", "created", "created_at_block", "created_at_transaction", "updated", "updated_at_block", "updated_at_transaction", "executed", "executed_at_block", "executed_at_transaction", "vid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "number"))) { #optional property not found
            $Number = $null
        } else {
            $Number = $JsonParameters.PSobject.Properties["number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "app"))) { #optional property not found
            $App = $null
        } else {
            $App = $JsonParameters.PSobject.Properties["app"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creator"))) { #optional property not found
            $Creator = $null
        } else {
            $Creator = $JsonParameters.PSobject.Properties["creator"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "execution_script"))) { #optional property not found
            $ExecutionScript = $null
        } else {
            $ExecutionScript = $JsonParameters.PSobject.Properties["execution_script"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expire_date"))) { #optional property not found
            $ExpireDate = $null
        } else {
            $ExpireDate = $JsonParameters.PSobject.Properties["expire_date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minimum_quorum"))) { #optional property not found
            $MinimumQuorum = $null
        } else {
            $MinimumQuorum = $JsonParameters.PSobject.Properties["minimum_quorum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "required_support"))) { #optional property not found
            $RequiredSupport = $null
        } else {
            $RequiredSupport = $JsonParameters.PSobject.Properties["required_support"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapshot_block"))) { #optional property not found
            $SnapshotBlock = $null
        } else {
            $SnapshotBlock = $JsonParameters.PSobject.Properties["snapshot_block"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "voting_power"))) { #optional property not found
            $VotingPower = $null
        } else {
            $VotingPower = $JsonParameters.PSobject.Properties["voting_power"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "text"))) { #optional property not found
            $Text = $null
        } else {
            $Text = $JsonParameters.PSobject.Properties["text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vote_count"))) { #optional property not found
            $VoteCount = $null
        } else {
            $VoteCount = $JsonParameters.PSobject.Properties["vote_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "positive_vote_count"))) { #optional property not found
            $PositiveVoteCount = $null
        } else {
            $PositiveVoteCount = $JsonParameters.PSobject.Properties["positive_vote_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "negative_vote_count"))) { #optional property not found
            $NegativeVoteCount = $null
        } else {
            $NegativeVoteCount = $JsonParameters.PSobject.Properties["negative_vote_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "current_quorum"))) { #optional property not found
            $CurrentQuorum = $null
        } else {
            $CurrentQuorum = $JsonParameters.PSobject.Properties["current_quorum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "current_support"))) { #optional property not found
            $CurrentSupport = $null
        } else {
            $CurrentSupport = $JsonParameters.PSobject.Properties["current_support"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "staked_support"))) { #optional property not found
            $StakedSupport = $null
        } else {
            $StakedSupport = $JsonParameters.PSobject.Properties["staked_support"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_staked"))) { #optional property not found
            $TotalStaked = $null
        } else {
            $TotalStaked = $JsonParameters.PSobject.Properties["total_staked"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) { #optional property not found
            $Created = $null
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at_block"))) { #optional property not found
            $CreatedAtBlock = $null
        } else {
            $CreatedAtBlock = $JsonParameters.PSobject.Properties["created_at_block"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at_transaction"))) { #optional property not found
            $CreatedAtTransaction = $null
        } else {
            $CreatedAtTransaction = $JsonParameters.PSobject.Properties["created_at_transaction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated"))) { #optional property not found
            $Updated = $null
        } else {
            $Updated = $JsonParameters.PSobject.Properties["updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated_at_block"))) { #optional property not found
            $UpdatedAtBlock = $null
        } else {
            $UpdatedAtBlock = $JsonParameters.PSobject.Properties["updated_at_block"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "updated_at_transaction"))) { #optional property not found
            $UpdatedAtTransaction = $null
        } else {
            $UpdatedAtTransaction = $JsonParameters.PSobject.Properties["updated_at_transaction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "executed"))) { #optional property not found
            $Executed = $null
        } else {
            $Executed = $JsonParameters.PSobject.Properties["executed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "executed_at_block"))) { #optional property not found
            $ExecutedAtBlock = $null
        } else {
            $ExecutedAtBlock = $JsonParameters.PSobject.Properties["executed_at_block"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "executed_at_transaction"))) { #optional property not found
            $ExecutedAtTransaction = $null
        } else {
            $ExecutedAtTransaction = $JsonParameters.PSobject.Properties["executed_at_transaction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "number" = ${Number}
            "app" = ${App}
            "creator" = ${Creator}
            "execution_script" = ${ExecutionScript}
            "expire_date" = ${ExpireDate}
            "minimum_quorum" = ${MinimumQuorum}
            "required_support" = ${RequiredSupport}
            "snapshot_block" = ${SnapshotBlock}
            "voting_power" = ${VotingPower}
            "metadata" = ${Metadata}
            "text" = ${Text}
            "vote_count" = ${VoteCount}
            "positive_vote_count" = ${PositiveVoteCount}
            "negative_vote_count" = ${NegativeVoteCount}
            "current_quorum" = ${CurrentQuorum}
            "current_support" = ${CurrentSupport}
            "staked_support" = ${StakedSupport}
            "total_staked" = ${TotalStaked}
            "created" = ${Created}
            "created_at_block" = ${CreatedAtBlock}
            "created_at_transaction" = ${CreatedAtTransaction}
            "updated" = ${Updated}
            "updated_at_block" = ${UpdatedAtBlock}
            "updated_at_transaction" = ${UpdatedAtTransaction}
            "executed" = ${Executed}
            "executed_at_block" = ${ExecutedAtBlock}
            "executed_at_transaction" = ${ExecutedAtTransaction}
            "vid" = ${Vid}
        }

        return $PSO
    }

}

