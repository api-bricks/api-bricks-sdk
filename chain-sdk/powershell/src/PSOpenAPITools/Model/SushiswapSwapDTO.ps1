#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Swap are created for each token swap within a pair.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
Transaction hash plus index in Transaction swap array.
.PARAMETER Transaction
Reference to transaction swap was included in.
.PARAMETER Timestamp
Timestamp of swap, used for sorted lookups.
.PARAMETER Pair
Reference to pair.
.PARAMETER VarSender
Address that initiated the swap.
.PARAMETER Amount0In
Amount of token0 sold.
.PARAMETER Amount1In
Amount of token1 sold.
.PARAMETER Amount0Out
Amount of token0 received.
.PARAMETER Amount1Out
Amount of token1 received.
.PARAMETER To
Recipient of output tokens.
.PARAMETER LogIndex
Event index within transaction.
.PARAMETER AmountUsd
Derived amount of tokens sold in USD.
.PARAMETER Vid

.PARAMETER PoolId
No description available.
.PARAMETER TransactionId
No description available.
.PARAMETER EvaluatedPrice
No description available.
.PARAMETER EvaluatedAmount
No description available.
.PARAMETER EvaluatedAggressor
No description available.
.OUTPUTS

SushiswapSwapDTO<PSCustomObject>
#>

function Initialize-SushiswapSwapDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Transaction},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timestamp},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pair},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarSender},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Amount0In},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Amount1In},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Amount0Out},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Amount1Out},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${To},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LogIndex},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AmountUsd},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TransactionId},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${EvaluatedPrice},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${EvaluatedAmount},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Buy", "Sell", "EstimatedBuy", "EstimatedSell", "Unknown")]
        [PSCustomObject]
        ${EvaluatedAggressor}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SushiswapSwapDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "transaction" = ${Transaction}
            "timestamp" = ${Timestamp}
            "pair" = ${Pair}
            "sender" = ${VarSender}
            "amount_0_in" = ${Amount0In}
            "amount_1_in" = ${Amount1In}
            "amount_0_out" = ${Amount0Out}
            "amount_1_out" = ${Amount1Out}
            "to" = ${To}
            "log_index" = ${LogIndex}
            "amount_usd" = ${AmountUsd}
            "vid" = ${Vid}
            "pool_id" = ${PoolId}
            "transaction_id" = ${TransactionId}
            "evaluated_price" = ${EvaluatedPrice}
            "evaluated_amount" = ${EvaluatedAmount}
            "evaluated_aggressor" = ${EvaluatedAggressor}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SushiswapSwapDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to SushiswapSwapDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SushiswapSwapDTO<PSCustomObject>
#>
function ConvertFrom-JsonToSushiswapSwapDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SushiswapSwapDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SushiswapSwapDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "transaction", "timestamp", "pair", "sender", "amount_0_in", "amount_1_in", "amount_0_out", "amount_1_out", "to", "log_index", "amount_usd", "vid", "pool_id", "transaction_id", "evaluated_price", "evaluated_amount", "evaluated_aggressor")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transaction"))) { #optional property not found
            $Transaction = $null
        } else {
            $Transaction = $JsonParameters.PSobject.Properties["transaction"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pair"))) { #optional property not found
            $Pair = $null
        } else {
            $Pair = $JsonParameters.PSobject.Properties["pair"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sender"))) { #optional property not found
            $VarSender = $null
        } else {
            $VarSender = $JsonParameters.PSobject.Properties["sender"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_0_in"))) { #optional property not found
            $Amount0In = $null
        } else {
            $Amount0In = $JsonParameters.PSobject.Properties["amount_0_in"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_1_in"))) { #optional property not found
            $Amount1In = $null
        } else {
            $Amount1In = $JsonParameters.PSobject.Properties["amount_1_in"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_0_out"))) { #optional property not found
            $Amount0Out = $null
        } else {
            $Amount0Out = $JsonParameters.PSobject.Properties["amount_0_out"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_1_out"))) { #optional property not found
            $Amount1Out = $null
        } else {
            $Amount1Out = $JsonParameters.PSobject.Properties["amount_1_out"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) { #optional property not found
            $To = $null
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_index"))) { #optional property not found
            $LogIndex = $null
        } else {
            $LogIndex = $JsonParameters.PSobject.Properties["log_index"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_usd"))) { #optional property not found
            $AmountUsd = $null
        } else {
            $AmountUsd = $JsonParameters.PSobject.Properties["amount_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_id"))) { #optional property not found
            $PoolId = $null
        } else {
            $PoolId = $JsonParameters.PSobject.Properties["pool_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "transaction_id"))) { #optional property not found
            $TransactionId = $null
        } else {
            $TransactionId = $JsonParameters.PSobject.Properties["transaction_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "evaluated_price"))) { #optional property not found
            $EvaluatedPrice = $null
        } else {
            $EvaluatedPrice = $JsonParameters.PSobject.Properties["evaluated_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "evaluated_amount"))) { #optional property not found
            $EvaluatedAmount = $null
        } else {
            $EvaluatedAmount = $JsonParameters.PSobject.Properties["evaluated_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "evaluated_aggressor"))) { #optional property not found
            $EvaluatedAggressor = $null
        } else {
            $EvaluatedAggressor = $JsonParameters.PSobject.Properties["evaluated_aggressor"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "transaction" = ${Transaction}
            "timestamp" = ${Timestamp}
            "pair" = ${Pair}
            "sender" = ${VarSender}
            "amount_0_in" = ${Amount0In}
            "amount_1_in" = ${Amount1In}
            "amount_0_out" = ${Amount0Out}
            "amount_1_out" = ${Amount1Out}
            "to" = ${To}
            "log_index" = ${LogIndex}
            "amount_usd" = ${AmountUsd}
            "vid" = ${Vid}
            "pool_id" = ${PoolId}
            "transaction_id" = ${TransactionId}
            "evaluated_price" = ${EvaluatedPrice}
            "evaluated_amount" = ${EvaluatedAmount}
            "evaluated_aggressor" = ${EvaluatedAggressor}
        }

        return $PSO
    }

}

