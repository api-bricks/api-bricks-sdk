#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The Uniswap Factory entity is responsible for storing aggregate information across all Uniswap pairs. It can be used to view stats about total liquidity, volume, amount of pairs and more.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
Factory address.
.PARAMETER PoolCount
Amount of pools created.
.PARAMETER TxCount
Amount of transactions all time.
.PARAMETER TotalVolumeUsd
Total volume all time in derived USD.
.PARAMETER TotalVolumeEth
Total volume all time in derived ETH.
.PARAMETER TotalFeesUsd
Total swap fees all time in USD.
.PARAMETER TotalFeesEth
All volume even through less reliable USD values.
.PARAMETER UntrackedVolumeUsd
All volume even through less reliable USD values.
.PARAMETER TotalValueLockedUsd
Total value locked derived in USD.
.PARAMETER TotalValueLockedEth
Total value locked derived in ETH.
.PARAMETER TotalValueLockedUsdUntracked
Total value locked derived in USD untracked.
.PARAMETER TotalValueLockedEthUntracked
Total value locked derived in ETH untracked.
.PARAMETER Owner
Current owner of the factory.
.PARAMETER Vid

.OUTPUTS

UniswapV3FactoryDTO<PSCustomObject>
#>

function Initialize-UniswapV3FactoryDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TxCount},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalVolumeUsd},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalVolumeEth},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalFeesUsd},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalFeesEth},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UntrackedVolumeUsd},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalValueLockedUsd},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalValueLockedEth},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalValueLockedUsdUntracked},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalValueLockedEthUntracked},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Owner},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UniswapV3FactoryDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "pool_count" = ${PoolCount}
            "tx_count" = ${TxCount}
            "total_volume_usd" = ${TotalVolumeUsd}
            "total_volume_eth" = ${TotalVolumeEth}
            "total_fees_usd" = ${TotalFeesUsd}
            "total_fees_eth" = ${TotalFeesEth}
            "untracked_volume_usd" = ${UntrackedVolumeUsd}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "total_value_locked_eth" = ${TotalValueLockedEth}
            "total_value_locked_usd_untracked" = ${TotalValueLockedUsdUntracked}
            "total_value_locked_eth_untracked" = ${TotalValueLockedEthUntracked}
            "owner" = ${Owner}
            "vid" = ${Vid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UniswapV3FactoryDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UniswapV3FactoryDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UniswapV3FactoryDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUniswapV3FactoryDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UniswapV3FactoryDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UniswapV3FactoryDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "pool_count", "tx_count", "total_volume_usd", "total_volume_eth", "total_fees_usd", "total_fees_eth", "untracked_volume_usd", "total_value_locked_usd", "total_value_locked_eth", "total_value_locked_usd_untracked", "total_value_locked_eth_untracked", "owner", "vid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_count"))) { #optional property not found
            $PoolCount = $null
        } else {
            $PoolCount = $JsonParameters.PSobject.Properties["pool_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tx_count"))) { #optional property not found
            $TxCount = $null
        } else {
            $TxCount = $JsonParameters.PSobject.Properties["tx_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_volume_usd"))) { #optional property not found
            $TotalVolumeUsd = $null
        } else {
            $TotalVolumeUsd = $JsonParameters.PSobject.Properties["total_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_volume_eth"))) { #optional property not found
            $TotalVolumeEth = $null
        } else {
            $TotalVolumeEth = $JsonParameters.PSobject.Properties["total_volume_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_fees_usd"))) { #optional property not found
            $TotalFeesUsd = $null
        } else {
            $TotalFeesUsd = $JsonParameters.PSobject.Properties["total_fees_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_fees_eth"))) { #optional property not found
            $TotalFeesEth = $null
        } else {
            $TotalFeesEth = $JsonParameters.PSobject.Properties["total_fees_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "untracked_volume_usd"))) { #optional property not found
            $UntrackedVolumeUsd = $null
        } else {
            $UntrackedVolumeUsd = $JsonParameters.PSobject.Properties["untracked_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_value_locked_usd"))) { #optional property not found
            $TotalValueLockedUsd = $null
        } else {
            $TotalValueLockedUsd = $JsonParameters.PSobject.Properties["total_value_locked_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_value_locked_eth"))) { #optional property not found
            $TotalValueLockedEth = $null
        } else {
            $TotalValueLockedEth = $JsonParameters.PSobject.Properties["total_value_locked_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_value_locked_usd_untracked"))) { #optional property not found
            $TotalValueLockedUsdUntracked = $null
        } else {
            $TotalValueLockedUsdUntracked = $JsonParameters.PSobject.Properties["total_value_locked_usd_untracked"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_value_locked_eth_untracked"))) { #optional property not found
            $TotalValueLockedEthUntracked = $null
        } else {
            $TotalValueLockedEthUntracked = $JsonParameters.PSobject.Properties["total_value_locked_eth_untracked"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "pool_count" = ${PoolCount}
            "tx_count" = ${TxCount}
            "total_volume_usd" = ${TotalVolumeUsd}
            "total_volume_eth" = ${TotalVolumeEth}
            "total_fees_usd" = ${TotalFeesUsd}
            "total_fees_eth" = ${TotalFeesEth}
            "untracked_volume_usd" = ${UntrackedVolumeUsd}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "total_value_locked_eth" = ${TotalValueLockedEth}
            "total_value_locked_usd_untracked" = ${TotalValueLockedUsdUntracked}
            "total_value_locked_eth_untracked" = ${TotalValueLockedEthUntracked}
            "owner" = ${Owner}
            "vid" = ${Vid}
        }

        return $PSO
    }

}

