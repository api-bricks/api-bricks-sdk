#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber

.PARAMETER Vid

.PARAMETER BlockRange

.PARAMETER Id

.PARAMETER Marketplace

.PARAMETER Timestamp

.PARAMETER CollectionCount

.PARAMETER CumulativeTradeVolumeEth

.PARAMETER MarketplaceRevenueEth

.PARAMETER CreatorRevenueEth

.PARAMETER TotalRevenueEth

.PARAMETER TradeCount

.PARAMETER CumulativeUniqueTraders

.PARAMETER DailyActiveTraders

.PARAMETER DailyTradedCollectionCount

.PARAMETER DailyTradedItemCount

.OUTPUTS

CRYPTOPUNKSMarketplaceDailySnapshotDTO<PSCustomObject>
#>

function Initialize-CRYPTOPUNKSMarketplaceDailySnapshotDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BlockRange},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Marketplace},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timestamp},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CollectionCount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeTradeVolumeEth},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MarketplaceRevenueEth},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatorRevenueEth},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalRevenueEth},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TradeCount},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CumulativeUniqueTraders},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DailyActiveTraders},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DailyTradedCollectionCount},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DailyTradedItemCount}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CRYPTOPUNKSMarketplaceDailySnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "vid" = ${Vid}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "marketplace" = ${Marketplace}
            "timestamp" = ${Timestamp}
            "collection_count" = ${CollectionCount}
            "cumulative_trade_volume_eth" = ${CumulativeTradeVolumeEth}
            "marketplace_revenue_eth" = ${MarketplaceRevenueEth}
            "creator_revenue_eth" = ${CreatorRevenueEth}
            "total_revenue_eth" = ${TotalRevenueEth}
            "trade_count" = ${TradeCount}
            "cumulative_unique_traders" = ${CumulativeUniqueTraders}
            "daily_active_traders" = ${DailyActiveTraders}
            "daily_traded_collection_count" = ${DailyTradedCollectionCount}
            "daily_traded_item_count" = ${DailyTradedItemCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CRYPTOPUNKSMarketplaceDailySnapshotDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CRYPTOPUNKSMarketplaceDailySnapshotDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CRYPTOPUNKSMarketplaceDailySnapshotDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCRYPTOPUNKSMarketplaceDailySnapshotDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CRYPTOPUNKSMarketplaceDailySnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CRYPTOPUNKSMarketplaceDailySnapshotDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "vid", "block_range", "id", "marketplace", "timestamp", "collection_count", "cumulative_trade_volume_eth", "marketplace_revenue_eth", "creator_revenue_eth", "total_revenue_eth", "trade_count", "cumulative_unique_traders", "daily_active_traders", "daily_traded_collection_count", "daily_traded_item_count")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_range"))) { #optional property not found
            $BlockRange = $null
        } else {
            $BlockRange = $JsonParameters.PSobject.Properties["block_range"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketplace"))) { #optional property not found
            $Marketplace = $null
        } else {
            $Marketplace = $JsonParameters.PSobject.Properties["marketplace"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "collection_count"))) { #optional property not found
            $CollectionCount = $null
        } else {
            $CollectionCount = $JsonParameters.PSobject.Properties["collection_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_trade_volume_eth"))) { #optional property not found
            $CumulativeTradeVolumeEth = $null
        } else {
            $CumulativeTradeVolumeEth = $JsonParameters.PSobject.Properties["cumulative_trade_volume_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketplace_revenue_eth"))) { #optional property not found
            $MarketplaceRevenueEth = $null
        } else {
            $MarketplaceRevenueEth = $JsonParameters.PSobject.Properties["marketplace_revenue_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creator_revenue_eth"))) { #optional property not found
            $CreatorRevenueEth = $null
        } else {
            $CreatorRevenueEth = $JsonParameters.PSobject.Properties["creator_revenue_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_revenue_eth"))) { #optional property not found
            $TotalRevenueEth = $null
        } else {
            $TotalRevenueEth = $JsonParameters.PSobject.Properties["total_revenue_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trade_count"))) { #optional property not found
            $TradeCount = $null
        } else {
            $TradeCount = $JsonParameters.PSobject.Properties["trade_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_unique_traders"))) { #optional property not found
            $CumulativeUniqueTraders = $null
        } else {
            $CumulativeUniqueTraders = $JsonParameters.PSobject.Properties["cumulative_unique_traders"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_active_traders"))) { #optional property not found
            $DailyActiveTraders = $null
        } else {
            $DailyActiveTraders = $JsonParameters.PSobject.Properties["daily_active_traders"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_traded_collection_count"))) { #optional property not found
            $DailyTradedCollectionCount = $null
        } else {
            $DailyTradedCollectionCount = $JsonParameters.PSobject.Properties["daily_traded_collection_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_traded_item_count"))) { #optional property not found
            $DailyTradedItemCount = $null
        } else {
            $DailyTradedItemCount = $JsonParameters.PSobject.Properties["daily_traded_item_count"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "vid" = ${Vid}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "marketplace" = ${Marketplace}
            "timestamp" = ${Timestamp}
            "collection_count" = ${CollectionCount}
            "cumulative_trade_volume_eth" = ${CumulativeTradeVolumeEth}
            "marketplace_revenue_eth" = ${MarketplaceRevenueEth}
            "creator_revenue_eth" = ${CreatorRevenueEth}
            "total_revenue_eth" = ${TotalRevenueEth}
            "trade_count" = ${TradeCount}
            "cumulative_unique_traders" = ${CumulativeUniqueTraders}
            "daily_active_traders" = ${DailyActiveTraders}
            "daily_traded_collection_count" = ${DailyTradedCollectionCount}
            "daily_traded_item_count" = ${DailyTradedItemCount}
        }

        return $PSO
    }

}

