#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A type collecting global stats about this instance of Gnosis Protocol.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id

.PARAMETER VolumeInOwl
The total volume denominated in OWL (all sell amounts combined).
.PARAMETER UtilityInOwl
The total trader surplus in OWL.
.PARAMETER OwlBurnt
The total amount of OWL burnt (equivalent to fees rewarded to solvers).
.PARAMETER SettledBatchCount
The total number of settled batches.
.PARAMETER SettledTradeCount
The total number of settled trades.
.PARAMETER ListedTokens
The number of listed tokens.
.PARAMETER Vid

.OUTPUTS

DexStatsDTO<PSCustomObject>
#>

function Initialize-DexStatsDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeInOwl},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UtilityInOwl},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OwlBurnt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SettledBatchCount},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SettledTradeCount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ListedTokens},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DexStatsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "volume_in_owl" = ${VolumeInOwl}
            "utility_in_owl" = ${UtilityInOwl}
            "owl_burnt" = ${OwlBurnt}
            "settled_batch_count" = ${SettledBatchCount}
            "settled_trade_count" = ${SettledTradeCount}
            "listed_tokens" = ${ListedTokens}
            "vid" = ${Vid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DexStatsDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to DexStatsDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DexStatsDTO<PSCustomObject>
#>
function ConvertFrom-JsonToDexStatsDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DexStatsDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DexStatsDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "volume_in_owl", "utility_in_owl", "owl_burnt", "settled_batch_count", "settled_trade_count", "listed_tokens", "vid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_in_owl"))) { #optional property not found
            $VolumeInOwl = $null
        } else {
            $VolumeInOwl = $JsonParameters.PSobject.Properties["volume_in_owl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "utility_in_owl"))) { #optional property not found
            $UtilityInOwl = $null
        } else {
            $UtilityInOwl = $JsonParameters.PSobject.Properties["utility_in_owl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owl_burnt"))) { #optional property not found
            $OwlBurnt = $null
        } else {
            $OwlBurnt = $JsonParameters.PSobject.Properties["owl_burnt"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "settled_batch_count"))) { #optional property not found
            $SettledBatchCount = $null
        } else {
            $SettledBatchCount = $JsonParameters.PSobject.Properties["settled_batch_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "settled_trade_count"))) { #optional property not found
            $SettledTradeCount = $null
        } else {
            $SettledTradeCount = $JsonParameters.PSobject.Properties["settled_trade_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "listed_tokens"))) { #optional property not found
            $ListedTokens = $null
        } else {
            $ListedTokens = $JsonParameters.PSobject.Properties["listed_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "volume_in_owl" = ${VolumeInOwl}
            "utility_in_owl" = ${UtilityInOwl}
            "owl_burnt" = ${OwlBurnt}
            "settled_batch_count" = ${SettledBatchCount}
            "settled_trade_count" = ${SettledTradeCount}
            "listed_tokens" = ${ListedTokens}
            "vid" = ${Vid}
        }

        return $PSO
    }

}

