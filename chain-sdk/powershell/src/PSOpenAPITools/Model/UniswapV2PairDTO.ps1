#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Information about a pair. Includes references to each token within the pair, volume information, liquidity information, and more. The pair entity mirrors the pair smart contract, and also contains aggregated information about use.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Vid

.PARAMETER Id
Pair contract address.
.PARAMETER Token0
Reference to token0 as stored in pair contract.
.PARAMETER Token1
Reference to token1 as stored in pair contract.
.PARAMETER Reserve0
Reserve of token0.
.PARAMETER Reserve1
Reserve of token1.
.PARAMETER TotalSupply
Total supply of liquidity token distributed to LPs.
.PARAMETER ReserveEth
Total liquidity in pair stored as an amount of ETH.
.PARAMETER ReserveUsd
Total liquidity amount in pair stored as an amount of USD.
.PARAMETER TrackedReserveEth
Total liquidity with only tracked amount.
.PARAMETER Token0Price
Token0 per token1.
.PARAMETER Token1Price
Token1 per token0.
.PARAMETER VolumeToken0
Amount of token0 swapped on this pair.
.PARAMETER VolumeToken1
Amount of token1 swapped on this pair.
.PARAMETER VolumeUsd
Total amount swapped all time in this pair stored in USD (only tracked if USD liquidity is above minimum threshold).
.PARAMETER UntrackedVolumeUsd
Total amount swapped all time in this pair stored in USD, no minimum liquidity threshold.
.PARAMETER TxCount
No description available.
.PARAMETER CreatedAtTimestamp
Timestamp contract was created.
.PARAMETER LiquidityProviderCount
Total number of LPs.
.PARAMETER EvaluatedAsk
No description available.
.OUTPUTS

UniswapV2PairDTO<PSCustomObject>
#>

function Initialize-UniswapV2PairDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token0},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token1},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reserve0},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reserve1},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalSupply},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReserveEth},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReserveUsd},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TrackedReserveEth},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token0Price},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token1Price},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeToken0},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeToken1},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeUsd},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UntrackedVolumeUsd},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TxCount},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedAtTimestamp},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LiquidityProviderCount},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${EvaluatedAsk}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UniswapV2PairDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "vid" = ${Vid}
            "id" = ${Id}
            "token_0" = ${Token0}
            "token_1" = ${Token1}
            "reserve_0" = ${Reserve0}
            "reserve_1" = ${Reserve1}
            "total_supply" = ${TotalSupply}
            "reserve_eth" = ${ReserveEth}
            "reserve_usd" = ${ReserveUsd}
            "tracked_reserve_eth" = ${TrackedReserveEth}
            "token_0_price" = ${Token0Price}
            "token_1_price" = ${Token1Price}
            "volume_token_0" = ${VolumeToken0}
            "volume_token_1" = ${VolumeToken1}
            "volume_usd" = ${VolumeUsd}
            "untracked_volume_usd" = ${UntrackedVolumeUsd}
            "tx_count" = ${TxCount}
            "created_at_timestamp" = ${CreatedAtTimestamp}
            "liquidity_provider_count" = ${LiquidityProviderCount}
            "evaluated_ask" = ${EvaluatedAsk}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UniswapV2PairDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UniswapV2PairDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UniswapV2PairDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUniswapV2PairDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UniswapV2PairDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UniswapV2PairDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "vid", "id", "token_0", "token_1", "reserve_0", "reserve_1", "total_supply", "reserve_eth", "reserve_usd", "tracked_reserve_eth", "token_0_price", "token_1_price", "volume_token_0", "volume_token_1", "volume_usd", "untracked_volume_usd", "tx_count", "created_at_timestamp", "liquidity_provider_count", "evaluated_ask")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token_0"))) { #optional property not found
            $Token0 = $null
        } else {
            $Token0 = $JsonParameters.PSobject.Properties["token_0"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token_1"))) { #optional property not found
            $Token1 = $null
        } else {
            $Token1 = $JsonParameters.PSobject.Properties["token_1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reserve_0"))) { #optional property not found
            $Reserve0 = $null
        } else {
            $Reserve0 = $JsonParameters.PSobject.Properties["reserve_0"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reserve_1"))) { #optional property not found
            $Reserve1 = $null
        } else {
            $Reserve1 = $JsonParameters.PSobject.Properties["reserve_1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_supply"))) { #optional property not found
            $TotalSupply = $null
        } else {
            $TotalSupply = $JsonParameters.PSobject.Properties["total_supply"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reserve_eth"))) { #optional property not found
            $ReserveEth = $null
        } else {
            $ReserveEth = $JsonParameters.PSobject.Properties["reserve_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reserve_usd"))) { #optional property not found
            $ReserveUsd = $null
        } else {
            $ReserveUsd = $JsonParameters.PSobject.Properties["reserve_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tracked_reserve_eth"))) { #optional property not found
            $TrackedReserveEth = $null
        } else {
            $TrackedReserveEth = $JsonParameters.PSobject.Properties["tracked_reserve_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token_0_price"))) { #optional property not found
            $Token0Price = $null
        } else {
            $Token0Price = $JsonParameters.PSobject.Properties["token_0_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token_1_price"))) { #optional property not found
            $Token1Price = $null
        } else {
            $Token1Price = $JsonParameters.PSobject.Properties["token_1_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_token_0"))) { #optional property not found
            $VolumeToken0 = $null
        } else {
            $VolumeToken0 = $JsonParameters.PSobject.Properties["volume_token_0"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_token_1"))) { #optional property not found
            $VolumeToken1 = $null
        } else {
            $VolumeToken1 = $JsonParameters.PSobject.Properties["volume_token_1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_usd"))) { #optional property not found
            $VolumeUsd = $null
        } else {
            $VolumeUsd = $JsonParameters.PSobject.Properties["volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "untracked_volume_usd"))) { #optional property not found
            $UntrackedVolumeUsd = $null
        } else {
            $UntrackedVolumeUsd = $JsonParameters.PSobject.Properties["untracked_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tx_count"))) { #optional property not found
            $TxCount = $null
        } else {
            $TxCount = $JsonParameters.PSobject.Properties["tx_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at_timestamp"))) { #optional property not found
            $CreatedAtTimestamp = $null
        } else {
            $CreatedAtTimestamp = $JsonParameters.PSobject.Properties["created_at_timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity_provider_count"))) { #optional property not found
            $LiquidityProviderCount = $null
        } else {
            $LiquidityProviderCount = $JsonParameters.PSobject.Properties["liquidity_provider_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "evaluated_ask"))) { #optional property not found
            $EvaluatedAsk = $null
        } else {
            $EvaluatedAsk = $JsonParameters.PSobject.Properties["evaluated_ask"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "vid" = ${Vid}
            "id" = ${Id}
            "token_0" = ${Token0}
            "token_1" = ${Token1}
            "reserve_0" = ${Reserve0}
            "reserve_1" = ${Reserve1}
            "total_supply" = ${TotalSupply}
            "reserve_eth" = ${ReserveEth}
            "reserve_usd" = ${ReserveUsd}
            "tracked_reserve_eth" = ${TrackedReserveEth}
            "token_0_price" = ${Token0Price}
            "token_1_price" = ${Token1Price}
            "volume_token_0" = ${VolumeToken0}
            "volume_token_1" = ${VolumeToken1}
            "volume_usd" = ${VolumeUsd}
            "untracked_volume_usd" = ${UntrackedVolumeUsd}
            "tx_count" = ${TxCount}
            "created_at_timestamp" = ${CreatedAtTimestamp}
            "liquidity_provider_count" = ${LiquidityProviderCount}
            "evaluated_ask" = ${EvaluatedAsk}
        }

        return $PSO
    }

}

