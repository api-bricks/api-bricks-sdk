#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
App address.
.PARAMETER Address

.PARAMETER Codename

.PARAMETER MinimumBalance
Minimum balance needed to create a proposal.
.PARAMETER MinimumQuorum
Percentage of positive votes in total possible votes for a proposal to be accepted.
.PARAMETER MinimumTime
Minimum time needed to pass between user's previous proposal and a user creating a new proposal.
.PARAMETER RequiredSupport
Percentage of positive votes needed for a proposal to be accepted.
.PARAMETER VoteTime
Seconds that a proposal will be open for vote (unless enough votes have been cast to make an early decision).
.PARAMETER ProposalCount
Number of proposals created with this app.
.PARAMETER VoteCount
Number of votes received by all the proposals created with this app.
.PARAMETER Token
Address of the token used for voting.
.PARAMETER Vid

.OUTPUTS

CurveVotingAppDTO<PSCustomObject>
#>

function Initialize-CurveVotingAppDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Codename},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinimumBalance},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinimumQuorum},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MinimumTime},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequiredSupport},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VoteTime},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProposalCount},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VoteCount},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CurveVotingAppDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "address" = ${Address}
            "codename" = ${Codename}
            "minimum_balance" = ${MinimumBalance}
            "minimum_quorum" = ${MinimumQuorum}
            "minimum_time" = ${MinimumTime}
            "required_support" = ${RequiredSupport}
            "vote_time" = ${VoteTime}
            "proposal_count" = ${ProposalCount}
            "vote_count" = ${VoteCount}
            "token" = ${Token}
            "vid" = ${Vid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CurveVotingAppDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CurveVotingAppDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CurveVotingAppDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCurveVotingAppDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CurveVotingAppDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CurveVotingAppDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "address", "codename", "minimum_balance", "minimum_quorum", "minimum_time", "required_support", "vote_time", "proposal_count", "vote_count", "token", "vid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "codename"))) { #optional property not found
            $Codename = $null
        } else {
            $Codename = $JsonParameters.PSobject.Properties["codename"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minimum_balance"))) { #optional property not found
            $MinimumBalance = $null
        } else {
            $MinimumBalance = $JsonParameters.PSobject.Properties["minimum_balance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minimum_quorum"))) { #optional property not found
            $MinimumQuorum = $null
        } else {
            $MinimumQuorum = $JsonParameters.PSobject.Properties["minimum_quorum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minimum_time"))) { #optional property not found
            $MinimumTime = $null
        } else {
            $MinimumTime = $JsonParameters.PSobject.Properties["minimum_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "required_support"))) { #optional property not found
            $RequiredSupport = $null
        } else {
            $RequiredSupport = $JsonParameters.PSobject.Properties["required_support"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vote_time"))) { #optional property not found
            $VoteTime = $null
        } else {
            $VoteTime = $JsonParameters.PSobject.Properties["vote_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proposal_count"))) { #optional property not found
            $ProposalCount = $null
        } else {
            $ProposalCount = $JsonParameters.PSobject.Properties["proposal_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vote_count"))) { #optional property not found
            $VoteCount = $null
        } else {
            $VoteCount = $JsonParameters.PSobject.Properties["vote_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) { #optional property not found
            $Token = $null
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "address" = ${Address}
            "codename" = ${Codename}
            "minimum_balance" = ${MinimumBalance}
            "minimum_quorum" = ${MinimumQuorum}
            "minimum_time" = ${MinimumTime}
            "required_support" = ${RequiredSupport}
            "vote_time" = ${VoteTime}
            "proposal_count" = ${ProposalCount}
            "vote_count" = ${VoteCount}
            "token" = ${Token}
            "vid" = ${Vid}
        }

        return $PSO
    }

}

