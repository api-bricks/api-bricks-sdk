#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

The Sushiswap Factory entity is responsible for storing aggregate information across all Sushiswap pairs. It can be used to view stats about total liquidity, volume, amount of pairs and more.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
Factory address.
.PARAMETER PairCount
Amount of pairs created by the Sushiswap factory.
.PARAMETER VolumeUsd
All time USD volume across all pairs (USD is derived).
.PARAMETER VolumeEth
All time volume in ETH across all pairs (ETH is derived).
.PARAMETER UntrackedVolumeUsd
Untracked volume USD.
.PARAMETER LiquidityUsd
Total liquidity across all pairs stored as a derived USD amount.
.PARAMETER LiquidityEth
Total liquidity across all pairs stored as a derived ETH amount.
.PARAMETER TxCount
All time amount of transactions across all pairs.
.PARAMETER TokenCount
Total count of tokens.
.PARAMETER UserCount
Users count.
.PARAMETER Vid

.OUTPUTS

SushiswapFactoryDTO<PSCustomObject>
#>

function Initialize-SushiswapFactoryDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PairCount},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeUsd},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeEth},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UntrackedVolumeUsd},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LiquidityUsd},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LiquidityEth},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TxCount},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TokenCount},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserCount},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SushiswapFactoryDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "pair_count" = ${PairCount}
            "volume_usd" = ${VolumeUsd}
            "volume_eth" = ${VolumeEth}
            "untracked_volume_usd" = ${UntrackedVolumeUsd}
            "liquidity_usd" = ${LiquidityUsd}
            "liquidity_eth" = ${LiquidityEth}
            "tx_count" = ${TxCount}
            "token_count" = ${TokenCount}
            "user_count" = ${UserCount}
            "vid" = ${Vid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SushiswapFactoryDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to SushiswapFactoryDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SushiswapFactoryDTO<PSCustomObject>
#>
function ConvertFrom-JsonToSushiswapFactoryDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SushiswapFactoryDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SushiswapFactoryDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "pair_count", "volume_usd", "volume_eth", "untracked_volume_usd", "liquidity_usd", "liquidity_eth", "tx_count", "token_count", "user_count", "vid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pair_count"))) { #optional property not found
            $PairCount = $null
        } else {
            $PairCount = $JsonParameters.PSobject.Properties["pair_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_usd"))) { #optional property not found
            $VolumeUsd = $null
        } else {
            $VolumeUsd = $JsonParameters.PSobject.Properties["volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_eth"))) { #optional property not found
            $VolumeEth = $null
        } else {
            $VolumeEth = $JsonParameters.PSobject.Properties["volume_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "untracked_volume_usd"))) { #optional property not found
            $UntrackedVolumeUsd = $null
        } else {
            $UntrackedVolumeUsd = $JsonParameters.PSobject.Properties["untracked_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity_usd"))) { #optional property not found
            $LiquidityUsd = $null
        } else {
            $LiquidityUsd = $JsonParameters.PSobject.Properties["liquidity_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity_eth"))) { #optional property not found
            $LiquidityEth = $null
        } else {
            $LiquidityEth = $JsonParameters.PSobject.Properties["liquidity_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tx_count"))) { #optional property not found
            $TxCount = $null
        } else {
            $TxCount = $JsonParameters.PSobject.Properties["tx_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token_count"))) { #optional property not found
            $TokenCount = $null
        } else {
            $TokenCount = $JsonParameters.PSobject.Properties["token_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user_count"))) { #optional property not found
            $UserCount = $null
        } else {
            $UserCount = $JsonParameters.PSobject.Properties["user_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "pair_count" = ${PairCount}
            "volume_usd" = ${VolumeUsd}
            "volume_eth" = ${VolumeEth}
            "untracked_volume_usd" = ${UntrackedVolumeUsd}
            "liquidity_usd" = ${LiquidityUsd}
            "liquidity_eth" = ${LiquidityEth}
            "tx_count" = ${TxCount}
            "token_count" = ${TokenCount}
            "user_count" = ${UserCount}
            "vid" = ${Vid}
        }

        return $PSO
    }

}

