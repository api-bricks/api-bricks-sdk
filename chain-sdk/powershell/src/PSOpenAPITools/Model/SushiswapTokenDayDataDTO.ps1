#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Token data aggregated across all pairs that include token.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
Identifier, day start timestamp in unix / 86400.
.PARAMETER Date
Unix timestamp for start of day.
.PARAMETER Token
Reference to token entity.
.PARAMETER Volume
Amount of token swapped across all pairs throughout day.
.PARAMETER VolumeEth
Amount of token swapped across all pairs throughout day stored as a derived amount of ETH.
.PARAMETER VolumeUsd
Amount of token swapped across all pairs throughout day stored as a derived amount of USD.
.PARAMETER TxCount
Amount of transactions with this token across all pairs.
.PARAMETER Liquidity
Token amount of token deposited across all pairs.
.PARAMETER LiquidityEth
Token amount of token deposited across all pairs stored as amount of ETH.
.PARAMETER LiquidityUsd
Token amount of token deposited across all pairs stored as amount of USD.
.PARAMETER PriceUsd
Price of token in derived USD.
.PARAMETER Vid

.OUTPUTS

SushiswapTokenDayDataDTO<PSCustomObject>
#>

function Initialize-SushiswapTokenDayDataDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Date},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Volume},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeEth},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumeUsd},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TxCount},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Liquidity},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LiquidityEth},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LiquidityUsd},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PriceUsd},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SushiswapTokenDayDataDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "date" = ${Date}
            "token" = ${Token}
            "volume" = ${Volume}
            "volume_eth" = ${VolumeEth}
            "volume_usd" = ${VolumeUsd}
            "tx_count" = ${TxCount}
            "liquidity" = ${Liquidity}
            "liquidity_eth" = ${LiquidityEth}
            "liquidity_usd" = ${LiquidityUsd}
            "price_usd" = ${PriceUsd}
            "vid" = ${Vid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SushiswapTokenDayDataDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to SushiswapTokenDayDataDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SushiswapTokenDayDataDTO<PSCustomObject>
#>
function ConvertFrom-JsonToSushiswapTokenDayDataDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SushiswapTokenDayDataDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SushiswapTokenDayDataDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "date", "token", "volume", "volume_eth", "volume_usd", "tx_count", "liquidity", "liquidity_eth", "liquidity_usd", "price_usd", "vid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) { #optional property not found
            $Token = $null
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume"))) { #optional property not found
            $Volume = $null
        } else {
            $Volume = $JsonParameters.PSobject.Properties["volume"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_eth"))) { #optional property not found
            $VolumeEth = $null
        } else {
            $VolumeEth = $JsonParameters.PSobject.Properties["volume_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volume_usd"))) { #optional property not found
            $VolumeUsd = $null
        } else {
            $VolumeUsd = $JsonParameters.PSobject.Properties["volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tx_count"))) { #optional property not found
            $TxCount = $null
        } else {
            $TxCount = $JsonParameters.PSobject.Properties["tx_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity"))) { #optional property not found
            $Liquidity = $null
        } else {
            $Liquidity = $JsonParameters.PSobject.Properties["liquidity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity_eth"))) { #optional property not found
            $LiquidityEth = $null
        } else {
            $LiquidityEth = $JsonParameters.PSobject.Properties["liquidity_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity_usd"))) { #optional property not found
            $LiquidityUsd = $null
        } else {
            $LiquidityUsd = $JsonParameters.PSobject.Properties["liquidity_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_usd"))) { #optional property not found
            $PriceUsd = $null
        } else {
            $PriceUsd = $JsonParameters.PSobject.Properties["price_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "date" = ${Date}
            "token" = ${Token}
            "volume" = ${Volume}
            "volume_eth" = ${VolumeEth}
            "volume_usd" = ${VolumeUsd}
            "tx_count" = ${TxCount}
            "liquidity" = ${Liquidity}
            "liquidity_eth" = ${LiquidityEth}
            "liquidity_usd" = ${LiquidityUsd}
            "price_usd" = ${PriceUsd}
            "vid" = ${Vid}
        }

        return $PSO
    }

}

