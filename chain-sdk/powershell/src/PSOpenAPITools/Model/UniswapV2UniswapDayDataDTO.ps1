#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Tracks data across all pairs aggregated into a daily bucket.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
Unix timestamp for start of day / 86400 giving a unique day index.
.PARAMETER Date
Unix timestamp for start of day.
.PARAMETER DailyVolumeEth
Total volume across all pairs on this day, stored as a derived amount of ETH.
.PARAMETER DailyVolumeUsd
Total volume across all pairs on this day, stored as a derived amount of USD.
.PARAMETER DailyVolumeUntracked
Total volume across all pairs on this day, untracked.
.PARAMETER TotalVolumeEth
All time volume across all pairs in ETH up to and including this day.
.PARAMETER TotalLiquidityEth
Total liquidity across all pairs in ETH up to and including this day.
.PARAMETER TotalVolumeUsd
All time volume across all pairs in USD up to and including this day.
.PARAMETER TotalLiquidityUsd
Total liquidity across all pairs in USD up to and including this day.
.PARAMETER TxCount
Number of transactions throughout this day.
.PARAMETER Vid

.OUTPUTS

UniswapV2UniswapDayDataDTO<PSCustomObject>
#>

function Initialize-UniswapV2UniswapDayDataDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Date},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyVolumeEth},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyVolumeUsd},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyVolumeUntracked},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalVolumeEth},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalLiquidityEth},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalVolumeUsd},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalLiquidityUsd},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TxCount},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UniswapV2UniswapDayDataDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "date" = ${Date}
            "daily_volume_eth" = ${DailyVolumeEth}
            "daily_volume_usd" = ${DailyVolumeUsd}
            "daily_volume_untracked" = ${DailyVolumeUntracked}
            "total_volume_eth" = ${TotalVolumeEth}
            "total_liquidity_eth" = ${TotalLiquidityEth}
            "total_volume_usd" = ${TotalVolumeUsd}
            "total_liquidity_usd" = ${TotalLiquidityUsd}
            "tx_count" = ${TxCount}
            "vid" = ${Vid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UniswapV2UniswapDayDataDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UniswapV2UniswapDayDataDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UniswapV2UniswapDayDataDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUniswapV2UniswapDayDataDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UniswapV2UniswapDayDataDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UniswapV2UniswapDayDataDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "date", "daily_volume_eth", "daily_volume_usd", "daily_volume_untracked", "total_volume_eth", "total_liquidity_eth", "total_volume_usd", "total_liquidity_usd", "tx_count", "vid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_volume_eth"))) { #optional property not found
            $DailyVolumeEth = $null
        } else {
            $DailyVolumeEth = $JsonParameters.PSobject.Properties["daily_volume_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_volume_usd"))) { #optional property not found
            $DailyVolumeUsd = $null
        } else {
            $DailyVolumeUsd = $JsonParameters.PSobject.Properties["daily_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_volume_untracked"))) { #optional property not found
            $DailyVolumeUntracked = $null
        } else {
            $DailyVolumeUntracked = $JsonParameters.PSobject.Properties["daily_volume_untracked"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_volume_eth"))) { #optional property not found
            $TotalVolumeEth = $null
        } else {
            $TotalVolumeEth = $JsonParameters.PSobject.Properties["total_volume_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_liquidity_eth"))) { #optional property not found
            $TotalLiquidityEth = $null
        } else {
            $TotalLiquidityEth = $JsonParameters.PSobject.Properties["total_liquidity_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_volume_usd"))) { #optional property not found
            $TotalVolumeUsd = $null
        } else {
            $TotalVolumeUsd = $JsonParameters.PSobject.Properties["total_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_liquidity_usd"))) { #optional property not found
            $TotalLiquidityUsd = $null
        } else {
            $TotalLiquidityUsd = $JsonParameters.PSobject.Properties["total_liquidity_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tx_count"))) { #optional property not found
            $TxCount = $null
        } else {
            $TxCount = $JsonParameters.PSobject.Properties["tx_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "date" = ${Date}
            "daily_volume_eth" = ${DailyVolumeEth}
            "daily_volume_usd" = ${DailyVolumeUsd}
            "daily_volume_untracked" = ${DailyVolumeUntracked}
            "total_volume_eth" = ${TotalVolumeEth}
            "total_liquidity_eth" = ${TotalLiquidityEth}
            "total_volume_usd" = ${TotalVolumeUsd}
            "total_liquidity_usd" = ${TotalLiquidityUsd}
            "tx_count" = ${TxCount}
            "vid" = ${Vid}
        }

        return $PSO
    }

}

