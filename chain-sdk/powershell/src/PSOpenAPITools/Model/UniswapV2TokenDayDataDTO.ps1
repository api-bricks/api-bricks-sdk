#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Token data aggregated across all pairs that include token.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
Token address and day id (day start timestamp in unix / 86400) concatenated with a dash.
.PARAMETER Date
Unix timestamp for start of day.
.PARAMETER Token
Reference to token entity.
.PARAMETER DailyVolumeToken
Amount of token swapped across all pairs throughout day.
.PARAMETER DailyVolumeEth
Amount of token swapped across all pairs throughout day stored as a derived amount of ETH.
.PARAMETER DailyVolumeUsd
Amount of token swapped across all pairs throughout day stored as a derived amount of USD.
.PARAMETER DailyTxns
Amount of transactions with this token across all pairs.
.PARAMETER TotalLiquidityToken
Token amount of token deposited across all pairs.
.PARAMETER TotalLiquidityEth
Token amount of token deposited across all pairs stored as amount of ETH.
.PARAMETER TotalLiquidityUsd
Token amount of token deposited across all pairs stored as amount of USD.
.PARAMETER PriceUsd
Price of token in derived USD.
.PARAMETER Vid

.OUTPUTS

UniswapV2TokenDayDataDTO<PSCustomObject>
#>

function Initialize-UniswapV2TokenDayDataDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Date},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyVolumeToken},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyVolumeEth},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyVolumeUsd},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyTxns},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalLiquidityToken},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalLiquidityEth},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalLiquidityUsd},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PriceUsd},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UniswapV2TokenDayDataDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "date" = ${Date}
            "token" = ${Token}
            "daily_volume_token" = ${DailyVolumeToken}
            "daily_volume_eth" = ${DailyVolumeEth}
            "daily_volume_usd" = ${DailyVolumeUsd}
            "daily_txns" = ${DailyTxns}
            "total_liquidity_token" = ${TotalLiquidityToken}
            "total_liquidity_eth" = ${TotalLiquidityEth}
            "total_liquidity_usd" = ${TotalLiquidityUsd}
            "price_usd" = ${PriceUsd}
            "vid" = ${Vid}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UniswapV2TokenDayDataDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UniswapV2TokenDayDataDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UniswapV2TokenDayDataDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUniswapV2TokenDayDataDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UniswapV2TokenDayDataDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UniswapV2TokenDayDataDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "date", "token", "daily_volume_token", "daily_volume_eth", "daily_volume_usd", "daily_txns", "total_liquidity_token", "total_liquidity_eth", "total_liquidity_usd", "price_usd", "vid")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) { #optional property not found
            $Token = $null
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_volume_token"))) { #optional property not found
            $DailyVolumeToken = $null
        } else {
            $DailyVolumeToken = $JsonParameters.PSobject.Properties["daily_volume_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_volume_eth"))) { #optional property not found
            $DailyVolumeEth = $null
        } else {
            $DailyVolumeEth = $JsonParameters.PSobject.Properties["daily_volume_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_volume_usd"))) { #optional property not found
            $DailyVolumeUsd = $null
        } else {
            $DailyVolumeUsd = $JsonParameters.PSobject.Properties["daily_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_txns"))) { #optional property not found
            $DailyTxns = $null
        } else {
            $DailyTxns = $JsonParameters.PSobject.Properties["daily_txns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_liquidity_token"))) { #optional property not found
            $TotalLiquidityToken = $null
        } else {
            $TotalLiquidityToken = $JsonParameters.PSobject.Properties["total_liquidity_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_liquidity_eth"))) { #optional property not found
            $TotalLiquidityEth = $null
        } else {
            $TotalLiquidityEth = $JsonParameters.PSobject.Properties["total_liquidity_eth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_liquidity_usd"))) { #optional property not found
            $TotalLiquidityUsd = $null
        } else {
            $TotalLiquidityUsd = $JsonParameters.PSobject.Properties["total_liquidity_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "price_usd"))) { #optional property not found
            $PriceUsd = $null
        } else {
            $PriceUsd = $JsonParameters.PSobject.Properties["price_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "date" = ${Date}
            "token" = ${Token}
            "daily_volume_token" = ${DailyVolumeToken}
            "daily_volume_eth" = ${DailyVolumeEth}
            "daily_volume_usd" = ${DailyVolumeUsd}
            "daily_txns" = ${DailyTxns}
            "total_liquidity_token" = ${TotalLiquidityToken}
            "total_liquidity_eth" = ${TotalLiquidityEth}
            "total_liquidity_usd" = ${TotalLiquidityUsd}
            "price_usd" = ${PriceUsd}
            "vid" = ${Vid}
        }

        return $PSO
    }

}

