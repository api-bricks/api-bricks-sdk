<?php
/**
 * UniswapV3PoolDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UniswapV3PoolDTO Class Doc Comment
 *
 * @category Class
 * @description Information about a pool. Includes references to each token within the pool, volume information, liquidity information, and more. The pool entity mirrors the pool smart contract, and also contains aggregated information about use.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UniswapV3PoolDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UniswapV3.PoolDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_time' => '\DateTime',
        'recv_time' => '\DateTime',
        'block_number' => 'int',
        'vid' => 'int',
        'id' => 'string',
        'created_at_timestamp' => '\DateTime',
        'token_0' => 'string',
        'token_1' => 'string',
        'fee_tier' => '\OpenAPI\Client\Model\NumericsBigInteger',
        'liquidity' => '\OpenAPI\Client\Model\NumericsBigInteger',
        'sqrt_price' => '\OpenAPI\Client\Model\NumericsBigInteger',
        'fee_growth_global_0x128' => '\OpenAPI\Client\Model\NumericsBigInteger',
        'fee_growth_global_1x128' => '\OpenAPI\Client\Model\NumericsBigInteger',
        'token_0_price' => 'string',
        'token_1_price' => 'string',
        'tick' => '\OpenAPI\Client\Model\NumericsBigInteger',
        'observation_index' => '\OpenAPI\Client\Model\NumericsBigInteger',
        'volume_token_0' => 'string',
        'volume_token_1' => 'string',
        'volume_usd' => 'string',
        'untracked_volume_usd' => 'string',
        'fees_usd' => 'string',
        'tx_count' => '\OpenAPI\Client\Model\NumericsBigInteger',
        'collected_fees_token_0' => 'string',
        'collected_fees_token_1' => 'string',
        'collected_fees_usd' => 'string',
        'total_value_locked_token_0' => 'string',
        'total_value_locked_token_1' => 'string',
        'total_value_locked_eth' => 'string',
        'total_value_locked_usd' => 'string',
        'total_value_locked_usd_untracked' => 'string',
        'liquidity_provider_count' => 'string',
        'evaluated_ask' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_time' => 'date-time',
        'recv_time' => 'date-time',
        'block_number' => 'int64',
        'vid' => 'int64',
        'id' => null,
        'created_at_timestamp' => 'date-time',
        'token_0' => null,
        'token_1' => null,
        'fee_tier' => null,
        'liquidity' => null,
        'sqrt_price' => null,
        'fee_growth_global_0x128' => null,
        'fee_growth_global_1x128' => null,
        'token_0_price' => null,
        'token_1_price' => null,
        'tick' => null,
        'observation_index' => null,
        'volume_token_0' => null,
        'volume_token_1' => null,
        'volume_usd' => null,
        'untracked_volume_usd' => null,
        'fees_usd' => null,
        'tx_count' => null,
        'collected_fees_token_0' => null,
        'collected_fees_token_1' => null,
        'collected_fees_usd' => null,
        'total_value_locked_token_0' => null,
        'total_value_locked_token_1' => null,
        'total_value_locked_eth' => null,
        'total_value_locked_usd' => null,
        'total_value_locked_usd_untracked' => null,
        'liquidity_provider_count' => null,
        'evaluated_ask' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_time' => false,
		'recv_time' => false,
		'block_number' => false,
		'vid' => false,
		'id' => true,
		'created_at_timestamp' => false,
		'token_0' => true,
		'token_1' => true,
		'fee_tier' => false,
		'liquidity' => false,
		'sqrt_price' => false,
		'fee_growth_global_0x128' => false,
		'fee_growth_global_1x128' => false,
		'token_0_price' => true,
		'token_1_price' => true,
		'tick' => false,
		'observation_index' => false,
		'volume_token_0' => true,
		'volume_token_1' => true,
		'volume_usd' => true,
		'untracked_volume_usd' => true,
		'fees_usd' => true,
		'tx_count' => false,
		'collected_fees_token_0' => true,
		'collected_fees_token_1' => true,
		'collected_fees_usd' => true,
		'total_value_locked_token_0' => true,
		'total_value_locked_token_1' => true,
		'total_value_locked_eth' => true,
		'total_value_locked_usd' => true,
		'total_value_locked_usd_untracked' => true,
		'liquidity_provider_count' => true,
		'evaluated_ask' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_time' => 'entry_time',
        'recv_time' => 'recv_time',
        'block_number' => 'block_number',
        'vid' => 'vid',
        'id' => 'id',
        'created_at_timestamp' => 'created_at_timestamp',
        'token_0' => 'token_0',
        'token_1' => 'token_1',
        'fee_tier' => 'fee_tier',
        'liquidity' => 'liquidity',
        'sqrt_price' => 'sqrt_price',
        'fee_growth_global_0x128' => 'fee_growth_global_0x128',
        'fee_growth_global_1x128' => 'fee_growth_global_1x128',
        'token_0_price' => 'token_0_price',
        'token_1_price' => 'token_1_price',
        'tick' => 'tick',
        'observation_index' => 'observation_index',
        'volume_token_0' => 'volume_token_0',
        'volume_token_1' => 'volume_token_1',
        'volume_usd' => 'volume_usd',
        'untracked_volume_usd' => 'untracked_volume_usd',
        'fees_usd' => 'fees_usd',
        'tx_count' => 'tx_count',
        'collected_fees_token_0' => 'collected_fees_token_0',
        'collected_fees_token_1' => 'collected_fees_token_1',
        'collected_fees_usd' => 'collected_fees_usd',
        'total_value_locked_token_0' => 'total_value_locked_token_0',
        'total_value_locked_token_1' => 'total_value_locked_token_1',
        'total_value_locked_eth' => 'total_value_locked_eth',
        'total_value_locked_usd' => 'total_value_locked_usd',
        'total_value_locked_usd_untracked' => 'total_value_locked_usd_untracked',
        'liquidity_provider_count' => 'liquidity_provider_count',
        'evaluated_ask' => 'evaluated_ask'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_time' => 'setEntryTime',
        'recv_time' => 'setRecvTime',
        'block_number' => 'setBlockNumber',
        'vid' => 'setVid',
        'id' => 'setId',
        'created_at_timestamp' => 'setCreatedAtTimestamp',
        'token_0' => 'setToken0',
        'token_1' => 'setToken1',
        'fee_tier' => 'setFeeTier',
        'liquidity' => 'setLiquidity',
        'sqrt_price' => 'setSqrtPrice',
        'fee_growth_global_0x128' => 'setFeeGrowthGlobal0x128',
        'fee_growth_global_1x128' => 'setFeeGrowthGlobal1x128',
        'token_0_price' => 'setToken0Price',
        'token_1_price' => 'setToken1Price',
        'tick' => 'setTick',
        'observation_index' => 'setObservationIndex',
        'volume_token_0' => 'setVolumeToken0',
        'volume_token_1' => 'setVolumeToken1',
        'volume_usd' => 'setVolumeUsd',
        'untracked_volume_usd' => 'setUntrackedVolumeUsd',
        'fees_usd' => 'setFeesUsd',
        'tx_count' => 'setTxCount',
        'collected_fees_token_0' => 'setCollectedFeesToken0',
        'collected_fees_token_1' => 'setCollectedFeesToken1',
        'collected_fees_usd' => 'setCollectedFeesUsd',
        'total_value_locked_token_0' => 'setTotalValueLockedToken0',
        'total_value_locked_token_1' => 'setTotalValueLockedToken1',
        'total_value_locked_eth' => 'setTotalValueLockedEth',
        'total_value_locked_usd' => 'setTotalValueLockedUsd',
        'total_value_locked_usd_untracked' => 'setTotalValueLockedUsdUntracked',
        'liquidity_provider_count' => 'setLiquidityProviderCount',
        'evaluated_ask' => 'setEvaluatedAsk'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_time' => 'getEntryTime',
        'recv_time' => 'getRecvTime',
        'block_number' => 'getBlockNumber',
        'vid' => 'getVid',
        'id' => 'getId',
        'created_at_timestamp' => 'getCreatedAtTimestamp',
        'token_0' => 'getToken0',
        'token_1' => 'getToken1',
        'fee_tier' => 'getFeeTier',
        'liquidity' => 'getLiquidity',
        'sqrt_price' => 'getSqrtPrice',
        'fee_growth_global_0x128' => 'getFeeGrowthGlobal0x128',
        'fee_growth_global_1x128' => 'getFeeGrowthGlobal1x128',
        'token_0_price' => 'getToken0Price',
        'token_1_price' => 'getToken1Price',
        'tick' => 'getTick',
        'observation_index' => 'getObservationIndex',
        'volume_token_0' => 'getVolumeToken0',
        'volume_token_1' => 'getVolumeToken1',
        'volume_usd' => 'getVolumeUsd',
        'untracked_volume_usd' => 'getUntrackedVolumeUsd',
        'fees_usd' => 'getFeesUsd',
        'tx_count' => 'getTxCount',
        'collected_fees_token_0' => 'getCollectedFeesToken0',
        'collected_fees_token_1' => 'getCollectedFeesToken1',
        'collected_fees_usd' => 'getCollectedFeesUsd',
        'total_value_locked_token_0' => 'getTotalValueLockedToken0',
        'total_value_locked_token_1' => 'getTotalValueLockedToken1',
        'total_value_locked_eth' => 'getTotalValueLockedEth',
        'total_value_locked_usd' => 'getTotalValueLockedUsd',
        'total_value_locked_usd_untracked' => 'getTotalValueLockedUsdUntracked',
        'liquidity_provider_count' => 'getLiquidityProviderCount',
        'evaluated_ask' => 'getEvaluatedAsk'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_time', $data ?? [], null);
        $this->setIfExists('recv_time', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('vid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at_timestamp', $data ?? [], null);
        $this->setIfExists('token_0', $data ?? [], null);
        $this->setIfExists('token_1', $data ?? [], null);
        $this->setIfExists('fee_tier', $data ?? [], null);
        $this->setIfExists('liquidity', $data ?? [], null);
        $this->setIfExists('sqrt_price', $data ?? [], null);
        $this->setIfExists('fee_growth_global_0x128', $data ?? [], null);
        $this->setIfExists('fee_growth_global_1x128', $data ?? [], null);
        $this->setIfExists('token_0_price', $data ?? [], null);
        $this->setIfExists('token_1_price', $data ?? [], null);
        $this->setIfExists('tick', $data ?? [], null);
        $this->setIfExists('observation_index', $data ?? [], null);
        $this->setIfExists('volume_token_0', $data ?? [], null);
        $this->setIfExists('volume_token_1', $data ?? [], null);
        $this->setIfExists('volume_usd', $data ?? [], null);
        $this->setIfExists('untracked_volume_usd', $data ?? [], null);
        $this->setIfExists('fees_usd', $data ?? [], null);
        $this->setIfExists('tx_count', $data ?? [], null);
        $this->setIfExists('collected_fees_token_0', $data ?? [], null);
        $this->setIfExists('collected_fees_token_1', $data ?? [], null);
        $this->setIfExists('collected_fees_usd', $data ?? [], null);
        $this->setIfExists('total_value_locked_token_0', $data ?? [], null);
        $this->setIfExists('total_value_locked_token_1', $data ?? [], null);
        $this->setIfExists('total_value_locked_eth', $data ?? [], null);
        $this->setIfExists('total_value_locked_usd', $data ?? [], null);
        $this->setIfExists('total_value_locked_usd_untracked', $data ?? [], null);
        $this->setIfExists('liquidity_provider_count', $data ?? [], null);
        $this->setIfExists('evaluated_ask', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_time
     *
     * @return \DateTime|null
     */
    public function getEntryTime()
    {
        return $this->container['entry_time'];
    }

    /**
     * Sets entry_time
     *
     * @param \DateTime|null $entry_time entry_time
     *
     * @return self
     */
    public function setEntryTime($entry_time)
    {
        if (is_null($entry_time)) {
            throw new \InvalidArgumentException('non-nullable entry_time cannot be null');
        }
        $this->container['entry_time'] = $entry_time;

        return $this;
    }

    /**
     * Gets recv_time
     *
     * @return \DateTime|null
     */
    public function getRecvTime()
    {
        return $this->container['recv_time'];
    }

    /**
     * Sets recv_time
     *
     * @param \DateTime|null $recv_time recv_time
     *
     * @return self
     */
    public function setRecvTime($recv_time)
    {
        if (is_null($recv_time)) {
            throw new \InvalidArgumentException('non-nullable recv_time cannot be null');
        }
        $this->container['recv_time'] = $recv_time;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return int|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param int|null $block_number Number of block in which entity was recorded.
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            throw new \InvalidArgumentException('non-nullable block_number cannot be null');
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets vid
     *
     * @return int|null
     */
    public function getVid()
    {
        return $this->container['vid'];
    }

    /**
     * Sets vid
     *
     * @param int|null $vid 
     *
     * @return self
     */
    public function setVid($vid)
    {
        if (is_null($vid)) {
            throw new \InvalidArgumentException('non-nullable vid cannot be null');
        }
        $this->container['vid'] = $vid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Pool address.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at_timestamp
     *
     * @return \DateTime|null
     */
    public function getCreatedAtTimestamp()
    {
        return $this->container['created_at_timestamp'];
    }

    /**
     * Sets created_at_timestamp
     *
     * @param \DateTime|null $created_at_timestamp Creation time.
     *
     * @return self
     */
    public function setCreatedAtTimestamp($created_at_timestamp)
    {
        if (is_null($created_at_timestamp)) {
            throw new \InvalidArgumentException('non-nullable created_at_timestamp cannot be null');
        }
        $this->container['created_at_timestamp'] = $created_at_timestamp;

        return $this;
    }

    /**
     * Gets token_0
     *
     * @return string|null
     */
    public function getToken0()
    {
        return $this->container['token_0'];
    }

    /**
     * Sets token_0
     *
     * @param string|null $token_0 Reference to token0 as stored in pool contract.
     *
     * @return self
     */
    public function setToken0($token_0)
    {
        if (is_null($token_0)) {
            array_push($this->openAPINullablesSetToNull, 'token_0');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token_0', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token_0'] = $token_0;

        return $this;
    }

    /**
     * Gets token_1
     *
     * @return string|null
     */
    public function getToken1()
    {
        return $this->container['token_1'];
    }

    /**
     * Sets token_1
     *
     * @param string|null $token_1 Reference to token1 as stored in pool contract.
     *
     * @return self
     */
    public function setToken1($token_1)
    {
        if (is_null($token_1)) {
            array_push($this->openAPINullablesSetToNull, 'token_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token_1'] = $token_1;

        return $this;
    }

    /**
     * Gets fee_tier
     *
     * @return \OpenAPI\Client\Model\NumericsBigInteger|null
     */
    public function getFeeTier()
    {
        return $this->container['fee_tier'];
    }

    /**
     * Sets fee_tier
     *
     * @param \OpenAPI\Client\Model\NumericsBigInteger|null $fee_tier fee_tier
     *
     * @return self
     */
    public function setFeeTier($fee_tier)
    {
        if (is_null($fee_tier)) {
            throw new \InvalidArgumentException('non-nullable fee_tier cannot be null');
        }
        $this->container['fee_tier'] = $fee_tier;

        return $this;
    }

    /**
     * Gets liquidity
     *
     * @return \OpenAPI\Client\Model\NumericsBigInteger|null
     */
    public function getLiquidity()
    {
        return $this->container['liquidity'];
    }

    /**
     * Sets liquidity
     *
     * @param \OpenAPI\Client\Model\NumericsBigInteger|null $liquidity liquidity
     *
     * @return self
     */
    public function setLiquidity($liquidity)
    {
        if (is_null($liquidity)) {
            throw new \InvalidArgumentException('non-nullable liquidity cannot be null');
        }
        $this->container['liquidity'] = $liquidity;

        return $this;
    }

    /**
     * Gets sqrt_price
     *
     * @return \OpenAPI\Client\Model\NumericsBigInteger|null
     */
    public function getSqrtPrice()
    {
        return $this->container['sqrt_price'];
    }

    /**
     * Sets sqrt_price
     *
     * @param \OpenAPI\Client\Model\NumericsBigInteger|null $sqrt_price sqrt_price
     *
     * @return self
     */
    public function setSqrtPrice($sqrt_price)
    {
        if (is_null($sqrt_price)) {
            throw new \InvalidArgumentException('non-nullable sqrt_price cannot be null');
        }
        $this->container['sqrt_price'] = $sqrt_price;

        return $this;
    }

    /**
     * Gets fee_growth_global_0x128
     *
     * @return \OpenAPI\Client\Model\NumericsBigInteger|null
     */
    public function getFeeGrowthGlobal0x128()
    {
        return $this->container['fee_growth_global_0x128'];
    }

    /**
     * Sets fee_growth_global_0x128
     *
     * @param \OpenAPI\Client\Model\NumericsBigInteger|null $fee_growth_global_0x128 fee_growth_global_0x128
     *
     * @return self
     */
    public function setFeeGrowthGlobal0x128($fee_growth_global_0x128)
    {
        if (is_null($fee_growth_global_0x128)) {
            throw new \InvalidArgumentException('non-nullable fee_growth_global_0x128 cannot be null');
        }
        $this->container['fee_growth_global_0x128'] = $fee_growth_global_0x128;

        return $this;
    }

    /**
     * Gets fee_growth_global_1x128
     *
     * @return \OpenAPI\Client\Model\NumericsBigInteger|null
     */
    public function getFeeGrowthGlobal1x128()
    {
        return $this->container['fee_growth_global_1x128'];
    }

    /**
     * Sets fee_growth_global_1x128
     *
     * @param \OpenAPI\Client\Model\NumericsBigInteger|null $fee_growth_global_1x128 fee_growth_global_1x128
     *
     * @return self
     */
    public function setFeeGrowthGlobal1x128($fee_growth_global_1x128)
    {
        if (is_null($fee_growth_global_1x128)) {
            throw new \InvalidArgumentException('non-nullable fee_growth_global_1x128 cannot be null');
        }
        $this->container['fee_growth_global_1x128'] = $fee_growth_global_1x128;

        return $this;
    }

    /**
     * Gets token_0_price
     *
     * @return string|null
     */
    public function getToken0Price()
    {
        return $this->container['token_0_price'];
    }

    /**
     * Sets token_0_price
     *
     * @param string|null $token_0_price Token0 per token1.
     *
     * @return self
     */
    public function setToken0Price($token_0_price)
    {
        if (is_null($token_0_price)) {
            array_push($this->openAPINullablesSetToNull, 'token_0_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token_0_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token_0_price'] = $token_0_price;

        return $this;
    }

    /**
     * Gets token_1_price
     *
     * @return string|null
     */
    public function getToken1Price()
    {
        return $this->container['token_1_price'];
    }

    /**
     * Sets token_1_price
     *
     * @param string|null $token_1_price Token1 per token0.
     *
     * @return self
     */
    public function setToken1Price($token_1_price)
    {
        if (is_null($token_1_price)) {
            array_push($this->openAPINullablesSetToNull, 'token_1_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token_1_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token_1_price'] = $token_1_price;

        return $this;
    }

    /**
     * Gets tick
     *
     * @return \OpenAPI\Client\Model\NumericsBigInteger|null
     */
    public function getTick()
    {
        return $this->container['tick'];
    }

    /**
     * Sets tick
     *
     * @param \OpenAPI\Client\Model\NumericsBigInteger|null $tick tick
     *
     * @return self
     */
    public function setTick($tick)
    {
        if (is_null($tick)) {
            throw new \InvalidArgumentException('non-nullable tick cannot be null');
        }
        $this->container['tick'] = $tick;

        return $this;
    }

    /**
     * Gets observation_index
     *
     * @return \OpenAPI\Client\Model\NumericsBigInteger|null
     */
    public function getObservationIndex()
    {
        return $this->container['observation_index'];
    }

    /**
     * Sets observation_index
     *
     * @param \OpenAPI\Client\Model\NumericsBigInteger|null $observation_index observation_index
     *
     * @return self
     */
    public function setObservationIndex($observation_index)
    {
        if (is_null($observation_index)) {
            throw new \InvalidArgumentException('non-nullable observation_index cannot be null');
        }
        $this->container['observation_index'] = $observation_index;

        return $this;
    }

    /**
     * Gets volume_token_0
     *
     * @return string|null
     */
    public function getVolumeToken0()
    {
        return $this->container['volume_token_0'];
    }

    /**
     * Sets volume_token_0
     *
     * @param string|null $volume_token_0 All time token0 swapped.
     *
     * @return self
     */
    public function setVolumeToken0($volume_token_0)
    {
        if (is_null($volume_token_0)) {
            array_push($this->openAPINullablesSetToNull, 'volume_token_0');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_token_0', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_token_0'] = $volume_token_0;

        return $this;
    }

    /**
     * Gets volume_token_1
     *
     * @return string|null
     */
    public function getVolumeToken1()
    {
        return $this->container['volume_token_1'];
    }

    /**
     * Sets volume_token_1
     *
     * @param string|null $volume_token_1 All time token1 swapped.
     *
     * @return self
     */
    public function setVolumeToken1($volume_token_1)
    {
        if (is_null($volume_token_1)) {
            array_push($this->openAPINullablesSetToNull, 'volume_token_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_token_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_token_1'] = $volume_token_1;

        return $this;
    }

    /**
     * Gets volume_usd
     *
     * @return string|null
     */
    public function getVolumeUsd()
    {
        return $this->container['volume_usd'];
    }

    /**
     * Sets volume_usd
     *
     * @param string|null $volume_usd All time USD swapped.
     *
     * @return self
     */
    public function setVolumeUsd($volume_usd)
    {
        if (is_null($volume_usd)) {
            array_push($this->openAPINullablesSetToNull, 'volume_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('volume_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['volume_usd'] = $volume_usd;

        return $this;
    }

    /**
     * Gets untracked_volume_usd
     *
     * @return string|null
     */
    public function getUntrackedVolumeUsd()
    {
        return $this->container['untracked_volume_usd'];
    }

    /**
     * Sets untracked_volume_usd
     *
     * @param string|null $untracked_volume_usd All time USD swapped, unfiltered for unreliable USD pools.
     *
     * @return self
     */
    public function setUntrackedVolumeUsd($untracked_volume_usd)
    {
        if (is_null($untracked_volume_usd)) {
            array_push($this->openAPINullablesSetToNull, 'untracked_volume_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('untracked_volume_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['untracked_volume_usd'] = $untracked_volume_usd;

        return $this;
    }

    /**
     * Gets fees_usd
     *
     * @return string|null
     */
    public function getFeesUsd()
    {
        return $this->container['fees_usd'];
    }

    /**
     * Sets fees_usd
     *
     * @param string|null $fees_usd Fees in USD.
     *
     * @return self
     */
    public function setFeesUsd($fees_usd)
    {
        if (is_null($fees_usd)) {
            array_push($this->openAPINullablesSetToNull, 'fees_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fees_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fees_usd'] = $fees_usd;

        return $this;
    }

    /**
     * Gets tx_count
     *
     * @return \OpenAPI\Client\Model\NumericsBigInteger|null
     */
    public function getTxCount()
    {
        return $this->container['tx_count'];
    }

    /**
     * Sets tx_count
     *
     * @param \OpenAPI\Client\Model\NumericsBigInteger|null $tx_count tx_count
     *
     * @return self
     */
    public function setTxCount($tx_count)
    {
        if (is_null($tx_count)) {
            throw new \InvalidArgumentException('non-nullable tx_count cannot be null');
        }
        $this->container['tx_count'] = $tx_count;

        return $this;
    }

    /**
     * Gets collected_fees_token_0
     *
     * @return string|null
     */
    public function getCollectedFeesToken0()
    {
        return $this->container['collected_fees_token_0'];
    }

    /**
     * Sets collected_fees_token_0
     *
     * @param string|null $collected_fees_token_0 All time fees collected token0.
     *
     * @return self
     */
    public function setCollectedFeesToken0($collected_fees_token_0)
    {
        if (is_null($collected_fees_token_0)) {
            array_push($this->openAPINullablesSetToNull, 'collected_fees_token_0');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('collected_fees_token_0', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['collected_fees_token_0'] = $collected_fees_token_0;

        return $this;
    }

    /**
     * Gets collected_fees_token_1
     *
     * @return string|null
     */
    public function getCollectedFeesToken1()
    {
        return $this->container['collected_fees_token_1'];
    }

    /**
     * Sets collected_fees_token_1
     *
     * @param string|null $collected_fees_token_1 All time fees collected token1.
     *
     * @return self
     */
    public function setCollectedFeesToken1($collected_fees_token_1)
    {
        if (is_null($collected_fees_token_1)) {
            array_push($this->openAPINullablesSetToNull, 'collected_fees_token_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('collected_fees_token_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['collected_fees_token_1'] = $collected_fees_token_1;

        return $this;
    }

    /**
     * Gets collected_fees_usd
     *
     * @return string|null
     */
    public function getCollectedFeesUsd()
    {
        return $this->container['collected_fees_usd'];
    }

    /**
     * Sets collected_fees_usd
     *
     * @param string|null $collected_fees_usd All time fees collected derived USD.
     *
     * @return self
     */
    public function setCollectedFeesUsd($collected_fees_usd)
    {
        if (is_null($collected_fees_usd)) {
            array_push($this->openAPINullablesSetToNull, 'collected_fees_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('collected_fees_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['collected_fees_usd'] = $collected_fees_usd;

        return $this;
    }

    /**
     * Gets total_value_locked_token_0
     *
     * @return string|null
     */
    public function getTotalValueLockedToken0()
    {
        return $this->container['total_value_locked_token_0'];
    }

    /**
     * Sets total_value_locked_token_0
     *
     * @param string|null $total_value_locked_token_0 Total token 0 across all ticks.
     *
     * @return self
     */
    public function setTotalValueLockedToken0($total_value_locked_token_0)
    {
        if (is_null($total_value_locked_token_0)) {
            array_push($this->openAPINullablesSetToNull, 'total_value_locked_token_0');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_value_locked_token_0', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_value_locked_token_0'] = $total_value_locked_token_0;

        return $this;
    }

    /**
     * Gets total_value_locked_token_1
     *
     * @return string|null
     */
    public function getTotalValueLockedToken1()
    {
        return $this->container['total_value_locked_token_1'];
    }

    /**
     * Sets total_value_locked_token_1
     *
     * @param string|null $total_value_locked_token_1 
     *
     * @return self
     */
    public function setTotalValueLockedToken1($total_value_locked_token_1)
    {
        if (is_null($total_value_locked_token_1)) {
            array_push($this->openAPINullablesSetToNull, 'total_value_locked_token_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_value_locked_token_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_value_locked_token_1'] = $total_value_locked_token_1;

        return $this;
    }

    /**
     * Gets total_value_locked_eth
     *
     * @return string|null
     */
    public function getTotalValueLockedEth()
    {
        return $this->container['total_value_locked_eth'];
    }

    /**
     * Sets total_value_locked_eth
     *
     * @param string|null $total_value_locked_eth Total token 1 across all ticks.
     *
     * @return self
     */
    public function setTotalValueLockedEth($total_value_locked_eth)
    {
        if (is_null($total_value_locked_eth)) {
            array_push($this->openAPINullablesSetToNull, 'total_value_locked_eth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_value_locked_eth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_value_locked_eth'] = $total_value_locked_eth;

        return $this;
    }

    /**
     * Gets total_value_locked_usd
     *
     * @return string|null
     */
    public function getTotalValueLockedUsd()
    {
        return $this->container['total_value_locked_usd'];
    }

    /**
     * Sets total_value_locked_usd
     *
     * @param string|null $total_value_locked_usd Total value locked USD.
     *
     * @return self
     */
    public function setTotalValueLockedUsd($total_value_locked_usd)
    {
        if (is_null($total_value_locked_usd)) {
            array_push($this->openAPINullablesSetToNull, 'total_value_locked_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_value_locked_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_value_locked_usd'] = $total_value_locked_usd;

        return $this;
    }

    /**
     * Gets total_value_locked_usd_untracked
     *
     * @return string|null
     */
    public function getTotalValueLockedUsdUntracked()
    {
        return $this->container['total_value_locked_usd_untracked'];
    }

    /**
     * Sets total_value_locked_usd_untracked
     *
     * @param string|null $total_value_locked_usd_untracked Total value locked derived ETH.
     *
     * @return self
     */
    public function setTotalValueLockedUsdUntracked($total_value_locked_usd_untracked)
    {
        if (is_null($total_value_locked_usd_untracked)) {
            array_push($this->openAPINullablesSetToNull, 'total_value_locked_usd_untracked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_value_locked_usd_untracked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_value_locked_usd_untracked'] = $total_value_locked_usd_untracked;

        return $this;
    }

    /**
     * Gets liquidity_provider_count
     *
     * @return string|null
     */
    public function getLiquidityProviderCount()
    {
        return $this->container['liquidity_provider_count'];
    }

    /**
     * Sets liquidity_provider_count
     *
     * @param string|null $liquidity_provider_count Liquidity providers count, used to detect new exchanges.
     *
     * @return self
     */
    public function setLiquidityProviderCount($liquidity_provider_count)
    {
        if (is_null($liquidity_provider_count)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity_provider_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity_provider_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity_provider_count'] = $liquidity_provider_count;

        return $this;
    }

    /**
     * Gets evaluated_ask
     *
     * @return float|null
     */
    public function getEvaluatedAsk()
    {
        return $this->container['evaluated_ask'];
    }

    /**
     * Sets evaluated_ask
     *
     * @param float|null $evaluated_ask evaluated_ask
     *
     * @return self
     */
    public function setEvaluatedAsk($evaluated_ask)
    {
        if (is_null($evaluated_ask)) {
            throw new \InvalidArgumentException('non-nullable evaluated_ask cannot be null');
        }
        $this->container['evaluated_ask'] = $evaluated_ask;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


