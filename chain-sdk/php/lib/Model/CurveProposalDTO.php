<?php
/**
 * CurveProposalDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CurveProposalDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CurveProposalDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Curve.ProposalDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_time' => '\DateTime',
        'recv_time' => '\DateTime',
        'block_number' => 'int',
        'id' => 'string',
        'number' => 'string',
        'app' => 'string',
        'creator' => 'string',
        'execution_script' => 'string',
        'expire_date' => 'string',
        'minimum_quorum' => 'string',
        'required_support' => 'string',
        'snapshot_block' => 'string',
        'voting_power' => 'string',
        'metadata' => 'string',
        'text' => 'string',
        'vote_count' => 'string',
        'positive_vote_count' => 'string',
        'negative_vote_count' => 'string',
        'current_quorum' => 'string',
        'current_support' => 'string',
        'staked_support' => 'string',
        'total_staked' => 'string',
        'created' => 'string',
        'created_at_block' => 'string',
        'created_at_transaction' => 'string',
        'updated' => 'string',
        'updated_at_block' => 'string',
        'updated_at_transaction' => 'string',
        'executed' => 'string',
        'executed_at_block' => 'string',
        'executed_at_transaction' => 'string',
        'vid' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_time' => 'date-time',
        'recv_time' => 'date-time',
        'block_number' => 'int64',
        'id' => null,
        'number' => null,
        'app' => null,
        'creator' => null,
        'execution_script' => null,
        'expire_date' => null,
        'minimum_quorum' => null,
        'required_support' => null,
        'snapshot_block' => null,
        'voting_power' => null,
        'metadata' => null,
        'text' => null,
        'vote_count' => null,
        'positive_vote_count' => null,
        'negative_vote_count' => null,
        'current_quorum' => null,
        'current_support' => null,
        'staked_support' => null,
        'total_staked' => null,
        'created' => null,
        'created_at_block' => null,
        'created_at_transaction' => null,
        'updated' => null,
        'updated_at_block' => null,
        'updated_at_transaction' => null,
        'executed' => null,
        'executed_at_block' => null,
        'executed_at_transaction' => null,
        'vid' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_time' => false,
		'recv_time' => false,
		'block_number' => false,
		'id' => true,
		'number' => true,
		'app' => true,
		'creator' => true,
		'execution_script' => true,
		'expire_date' => true,
		'minimum_quorum' => true,
		'required_support' => true,
		'snapshot_block' => true,
		'voting_power' => true,
		'metadata' => true,
		'text' => true,
		'vote_count' => true,
		'positive_vote_count' => true,
		'negative_vote_count' => true,
		'current_quorum' => true,
		'current_support' => true,
		'staked_support' => true,
		'total_staked' => true,
		'created' => true,
		'created_at_block' => true,
		'created_at_transaction' => true,
		'updated' => true,
		'updated_at_block' => true,
		'updated_at_transaction' => true,
		'executed' => true,
		'executed_at_block' => true,
		'executed_at_transaction' => true,
		'vid' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_time' => 'entry_time',
        'recv_time' => 'recv_time',
        'block_number' => 'block_number',
        'id' => 'id',
        'number' => 'number',
        'app' => 'app',
        'creator' => 'creator',
        'execution_script' => 'execution_script',
        'expire_date' => 'expire_date',
        'minimum_quorum' => 'minimum_quorum',
        'required_support' => 'required_support',
        'snapshot_block' => 'snapshot_block',
        'voting_power' => 'voting_power',
        'metadata' => 'metadata',
        'text' => 'text',
        'vote_count' => 'vote_count',
        'positive_vote_count' => 'positive_vote_count',
        'negative_vote_count' => 'negative_vote_count',
        'current_quorum' => 'current_quorum',
        'current_support' => 'current_support',
        'staked_support' => 'staked_support',
        'total_staked' => 'total_staked',
        'created' => 'created',
        'created_at_block' => 'created_at_block',
        'created_at_transaction' => 'created_at_transaction',
        'updated' => 'updated',
        'updated_at_block' => 'updated_at_block',
        'updated_at_transaction' => 'updated_at_transaction',
        'executed' => 'executed',
        'executed_at_block' => 'executed_at_block',
        'executed_at_transaction' => 'executed_at_transaction',
        'vid' => 'vid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_time' => 'setEntryTime',
        'recv_time' => 'setRecvTime',
        'block_number' => 'setBlockNumber',
        'id' => 'setId',
        'number' => 'setNumber',
        'app' => 'setApp',
        'creator' => 'setCreator',
        'execution_script' => 'setExecutionScript',
        'expire_date' => 'setExpireDate',
        'minimum_quorum' => 'setMinimumQuorum',
        'required_support' => 'setRequiredSupport',
        'snapshot_block' => 'setSnapshotBlock',
        'voting_power' => 'setVotingPower',
        'metadata' => 'setMetadata',
        'text' => 'setText',
        'vote_count' => 'setVoteCount',
        'positive_vote_count' => 'setPositiveVoteCount',
        'negative_vote_count' => 'setNegativeVoteCount',
        'current_quorum' => 'setCurrentQuorum',
        'current_support' => 'setCurrentSupport',
        'staked_support' => 'setStakedSupport',
        'total_staked' => 'setTotalStaked',
        'created' => 'setCreated',
        'created_at_block' => 'setCreatedAtBlock',
        'created_at_transaction' => 'setCreatedAtTransaction',
        'updated' => 'setUpdated',
        'updated_at_block' => 'setUpdatedAtBlock',
        'updated_at_transaction' => 'setUpdatedAtTransaction',
        'executed' => 'setExecuted',
        'executed_at_block' => 'setExecutedAtBlock',
        'executed_at_transaction' => 'setExecutedAtTransaction',
        'vid' => 'setVid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_time' => 'getEntryTime',
        'recv_time' => 'getRecvTime',
        'block_number' => 'getBlockNumber',
        'id' => 'getId',
        'number' => 'getNumber',
        'app' => 'getApp',
        'creator' => 'getCreator',
        'execution_script' => 'getExecutionScript',
        'expire_date' => 'getExpireDate',
        'minimum_quorum' => 'getMinimumQuorum',
        'required_support' => 'getRequiredSupport',
        'snapshot_block' => 'getSnapshotBlock',
        'voting_power' => 'getVotingPower',
        'metadata' => 'getMetadata',
        'text' => 'getText',
        'vote_count' => 'getVoteCount',
        'positive_vote_count' => 'getPositiveVoteCount',
        'negative_vote_count' => 'getNegativeVoteCount',
        'current_quorum' => 'getCurrentQuorum',
        'current_support' => 'getCurrentSupport',
        'staked_support' => 'getStakedSupport',
        'total_staked' => 'getTotalStaked',
        'created' => 'getCreated',
        'created_at_block' => 'getCreatedAtBlock',
        'created_at_transaction' => 'getCreatedAtTransaction',
        'updated' => 'getUpdated',
        'updated_at_block' => 'getUpdatedAtBlock',
        'updated_at_transaction' => 'getUpdatedAtTransaction',
        'executed' => 'getExecuted',
        'executed_at_block' => 'getExecutedAtBlock',
        'executed_at_transaction' => 'getExecutedAtTransaction',
        'vid' => 'getVid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_time', $data ?? [], null);
        $this->setIfExists('recv_time', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('app', $data ?? [], null);
        $this->setIfExists('creator', $data ?? [], null);
        $this->setIfExists('execution_script', $data ?? [], null);
        $this->setIfExists('expire_date', $data ?? [], null);
        $this->setIfExists('minimum_quorum', $data ?? [], null);
        $this->setIfExists('required_support', $data ?? [], null);
        $this->setIfExists('snapshot_block', $data ?? [], null);
        $this->setIfExists('voting_power', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('vote_count', $data ?? [], null);
        $this->setIfExists('positive_vote_count', $data ?? [], null);
        $this->setIfExists('negative_vote_count', $data ?? [], null);
        $this->setIfExists('current_quorum', $data ?? [], null);
        $this->setIfExists('current_support', $data ?? [], null);
        $this->setIfExists('staked_support', $data ?? [], null);
        $this->setIfExists('total_staked', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('created_at_block', $data ?? [], null);
        $this->setIfExists('created_at_transaction', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('updated_at_block', $data ?? [], null);
        $this->setIfExists('updated_at_transaction', $data ?? [], null);
        $this->setIfExists('executed', $data ?? [], null);
        $this->setIfExists('executed_at_block', $data ?? [], null);
        $this->setIfExists('executed_at_transaction', $data ?? [], null);
        $this->setIfExists('vid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_time
     *
     * @return \DateTime|null
     */
    public function getEntryTime()
    {
        return $this->container['entry_time'];
    }

    /**
     * Sets entry_time
     *
     * @param \DateTime|null $entry_time entry_time
     *
     * @return self
     */
    public function setEntryTime($entry_time)
    {
        if (is_null($entry_time)) {
            throw new \InvalidArgumentException('non-nullable entry_time cannot be null');
        }
        $this->container['entry_time'] = $entry_time;

        return $this;
    }

    /**
     * Gets recv_time
     *
     * @return \DateTime|null
     */
    public function getRecvTime()
    {
        return $this->container['recv_time'];
    }

    /**
     * Sets recv_time
     *
     * @param \DateTime|null $recv_time recv_time
     *
     * @return self
     */
    public function setRecvTime($recv_time)
    {
        if (is_null($recv_time)) {
            throw new \InvalidArgumentException('non-nullable recv_time cannot be null');
        }
        $this->container['recv_time'] = $recv_time;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return int|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param int|null $block_number Number of block in which entity was recorded.
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            throw new \InvalidArgumentException('non-nullable block_number cannot be null');
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Sequential number in related to the realted voting app.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets app
     *
     * @return string|null
     */
    public function getApp()
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     *
     * @param string|null $app Voting app instance.
     *
     * @return self
     */
    public function setApp($app)
    {
        if (is_null($app)) {
            array_push($this->openAPINullablesSetToNull, 'app');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['app'] = $app;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string|null $creator Proposal creator's account.
     *
     * @return self
     */
    public function setCreator($creator)
    {
        if (is_null($creator)) {
            array_push($this->openAPINullablesSetToNull, 'creator');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creator', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets execution_script
     *
     * @return string|null
     */
    public function getExecutionScript()
    {
        return $this->container['execution_script'];
    }

    /**
     * Sets execution_script
     *
     * @param string|null $execution_script 
     *
     * @return self
     */
    public function setExecutionScript($execution_script)
    {
        if (is_null($execution_script)) {
            array_push($this->openAPINullablesSetToNull, 'execution_script');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('execution_script', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['execution_script'] = $execution_script;

        return $this;
    }

    /**
     * Gets expire_date
     *
     * @return string|null
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     *
     * @param string|null $expire_date 
     *
     * @return self
     */
    public function setExpireDate($expire_date)
    {
        if (is_null($expire_date)) {
            array_push($this->openAPINullablesSetToNull, 'expire_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expire_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets minimum_quorum
     *
     * @return string|null
     */
    public function getMinimumQuorum()
    {
        return $this->container['minimum_quorum'];
    }

    /**
     * Sets minimum_quorum
     *
     * @param string|null $minimum_quorum Percentage of positive votes in total possible votes for this proposal to be accepted.
     *
     * @return self
     */
    public function setMinimumQuorum($minimum_quorum)
    {
        if (is_null($minimum_quorum)) {
            array_push($this->openAPINullablesSetToNull, 'minimum_quorum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('minimum_quorum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['minimum_quorum'] = $minimum_quorum;

        return $this;
    }

    /**
     * Gets required_support
     *
     * @return string|null
     */
    public function getRequiredSupport()
    {
        return $this->container['required_support'];
    }

    /**
     * Sets required_support
     *
     * @param string|null $required_support Percentage of positive votes needed for this proposal to be accepted.
     *
     * @return self
     */
    public function setRequiredSupport($required_support)
    {
        if (is_null($required_support)) {
            array_push($this->openAPINullablesSetToNull, 'required_support');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('required_support', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['required_support'] = $required_support;

        return $this;
    }

    /**
     * Gets snapshot_block
     *
     * @return string|null
     */
    public function getSnapshotBlock()
    {
        return $this->container['snapshot_block'];
    }

    /**
     * Sets snapshot_block
     *
     * @param string|null $snapshot_block 
     *
     * @return self
     */
    public function setSnapshotBlock($snapshot_block)
    {
        if (is_null($snapshot_block)) {
            array_push($this->openAPINullablesSetToNull, 'snapshot_block');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('snapshot_block', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['snapshot_block'] = $snapshot_block;

        return $this;
    }

    /**
     * Gets voting_power
     *
     * @return string|null
     */
    public function getVotingPower()
    {
        return $this->container['voting_power'];
    }

    /**
     * Sets voting_power
     *
     * @param string|null $voting_power 
     *
     * @return self
     */
    public function setVotingPower($voting_power)
    {
        if (is_null($voting_power)) {
            array_push($this->openAPINullablesSetToNull, 'voting_power');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voting_power', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voting_power'] = $voting_power;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Link to metadata file.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text Proposal description text.
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            array_push($this->openAPINullablesSetToNull, 'text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets vote_count
     *
     * @return string|null
     */
    public function getVoteCount()
    {
        return $this->container['vote_count'];
    }

    /**
     * Sets vote_count
     *
     * @param string|null $vote_count Number of votes received by the proposal.
     *
     * @return self
     */
    public function setVoteCount($vote_count)
    {
        if (is_null($vote_count)) {
            array_push($this->openAPINullablesSetToNull, 'vote_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vote_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vote_count'] = $vote_count;

        return $this;
    }

    /**
     * Gets positive_vote_count
     *
     * @return string|null
     */
    public function getPositiveVoteCount()
    {
        return $this->container['positive_vote_count'];
    }

    /**
     * Sets positive_vote_count
     *
     * @param string|null $positive_vote_count Number of positive votes (yes) received by the proposal.
     *
     * @return self
     */
    public function setPositiveVoteCount($positive_vote_count)
    {
        if (is_null($positive_vote_count)) {
            array_push($this->openAPINullablesSetToNull, 'positive_vote_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('positive_vote_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['positive_vote_count'] = $positive_vote_count;

        return $this;
    }

    /**
     * Gets negative_vote_count
     *
     * @return string|null
     */
    public function getNegativeVoteCount()
    {
        return $this->container['negative_vote_count'];
    }

    /**
     * Sets negative_vote_count
     *
     * @param string|null $negative_vote_count Number of negative votes (no) received by the proposal.
     *
     * @return self
     */
    public function setNegativeVoteCount($negative_vote_count)
    {
        if (is_null($negative_vote_count)) {
            array_push($this->openAPINullablesSetToNull, 'negative_vote_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('negative_vote_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['negative_vote_count'] = $negative_vote_count;

        return $this;
    }

    /**
     * Gets current_quorum
     *
     * @return string|null
     */
    public function getCurrentQuorum()
    {
        return $this->container['current_quorum'];
    }

    /**
     * Sets current_quorum
     *
     * @param string|null $current_quorum 
     *
     * @return self
     */
    public function setCurrentQuorum($current_quorum)
    {
        if (is_null($current_quorum)) {
            array_push($this->openAPINullablesSetToNull, 'current_quorum');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_quorum', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_quorum'] = $current_quorum;

        return $this;
    }

    /**
     * Gets current_support
     *
     * @return string|null
     */
    public function getCurrentSupport()
    {
        return $this->container['current_support'];
    }

    /**
     * Sets current_support
     *
     * @param string|null $current_support 
     *
     * @return self
     */
    public function setCurrentSupport($current_support)
    {
        if (is_null($current_support)) {
            array_push($this->openAPINullablesSetToNull, 'current_support');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_support', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_support'] = $current_support;

        return $this;
    }

    /**
     * Gets staked_support
     *
     * @return string|null
     */
    public function getStakedSupport()
    {
        return $this->container['staked_support'];
    }

    /**
     * Sets staked_support
     *
     * @param string|null $staked_support 
     *
     * @return self
     */
    public function setStakedSupport($staked_support)
    {
        if (is_null($staked_support)) {
            array_push($this->openAPINullablesSetToNull, 'staked_support');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staked_support', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['staked_support'] = $staked_support;

        return $this;
    }

    /**
     * Gets total_staked
     *
     * @return string|null
     */
    public function getTotalStaked()
    {
        return $this->container['total_staked'];
    }

    /**
     * Sets total_staked
     *
     * @param string|null $total_staked 
     *
     * @return self
     */
    public function setTotalStaked($total_staked)
    {
        if (is_null($total_staked)) {
            array_push($this->openAPINullablesSetToNull, 'total_staked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_staked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_staked'] = $total_staked;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created 
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets created_at_block
     *
     * @return string|null
     */
    public function getCreatedAtBlock()
    {
        return $this->container['created_at_block'];
    }

    /**
     * Sets created_at_block
     *
     * @param string|null $created_at_block 
     *
     * @return self
     */
    public function setCreatedAtBlock($created_at_block)
    {
        if (is_null($created_at_block)) {
            array_push($this->openAPINullablesSetToNull, 'created_at_block');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at_block', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at_block'] = $created_at_block;

        return $this;
    }

    /**
     * Gets created_at_transaction
     *
     * @return string|null
     */
    public function getCreatedAtTransaction()
    {
        return $this->container['created_at_transaction'];
    }

    /**
     * Sets created_at_transaction
     *
     * @param string|null $created_at_transaction 
     *
     * @return self
     */
    public function setCreatedAtTransaction($created_at_transaction)
    {
        if (is_null($created_at_transaction)) {
            array_push($this->openAPINullablesSetToNull, 'created_at_transaction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at_transaction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at_transaction'] = $created_at_transaction;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string|null $updated 
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            array_push($this->openAPINullablesSetToNull, 'updated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets updated_at_block
     *
     * @return string|null
     */
    public function getUpdatedAtBlock()
    {
        return $this->container['updated_at_block'];
    }

    /**
     * Sets updated_at_block
     *
     * @param string|null $updated_at_block 
     *
     * @return self
     */
    public function setUpdatedAtBlock($updated_at_block)
    {
        if (is_null($updated_at_block)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at_block');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at_block', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at_block'] = $updated_at_block;

        return $this;
    }

    /**
     * Gets updated_at_transaction
     *
     * @return string|null
     */
    public function getUpdatedAtTransaction()
    {
        return $this->container['updated_at_transaction'];
    }

    /**
     * Sets updated_at_transaction
     *
     * @param string|null $updated_at_transaction 
     *
     * @return self
     */
    public function setUpdatedAtTransaction($updated_at_transaction)
    {
        if (is_null($updated_at_transaction)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at_transaction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at_transaction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at_transaction'] = $updated_at_transaction;

        return $this;
    }

    /**
     * Gets executed
     *
     * @return string|null
     */
    public function getExecuted()
    {
        return $this->container['executed'];
    }

    /**
     * Sets executed
     *
     * @param string|null $executed 
     *
     * @return self
     */
    public function setExecuted($executed)
    {
        if (is_null($executed)) {
            array_push($this->openAPINullablesSetToNull, 'executed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('executed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['executed'] = $executed;

        return $this;
    }

    /**
     * Gets executed_at_block
     *
     * @return string|null
     */
    public function getExecutedAtBlock()
    {
        return $this->container['executed_at_block'];
    }

    /**
     * Sets executed_at_block
     *
     * @param string|null $executed_at_block 
     *
     * @return self
     */
    public function setExecutedAtBlock($executed_at_block)
    {
        if (is_null($executed_at_block)) {
            array_push($this->openAPINullablesSetToNull, 'executed_at_block');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('executed_at_block', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['executed_at_block'] = $executed_at_block;

        return $this;
    }

    /**
     * Gets executed_at_transaction
     *
     * @return string|null
     */
    public function getExecutedAtTransaction()
    {
        return $this->container['executed_at_transaction'];
    }

    /**
     * Sets executed_at_transaction
     *
     * @param string|null $executed_at_transaction 
     *
     * @return self
     */
    public function setExecutedAtTransaction($executed_at_transaction)
    {
        if (is_null($executed_at_transaction)) {
            array_push($this->openAPINullablesSetToNull, 'executed_at_transaction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('executed_at_transaction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['executed_at_transaction'] = $executed_at_transaction;

        return $this;
    }

    /**
     * Gets vid
     *
     * @return int|null
     */
    public function getVid()
    {
        return $this->container['vid'];
    }

    /**
     * Sets vid
     *
     * @param int|null $vid 
     *
     * @return self
     */
    public function setVid($vid)
    {
        if (is_null($vid)) {
            throw new \InvalidArgumentException('non-nullable vid cannot be null');
        }
        $this->container['vid'] = $vid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


