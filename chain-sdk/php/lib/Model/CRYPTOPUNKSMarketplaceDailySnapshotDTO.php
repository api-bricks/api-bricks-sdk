<?php
/**
 * CRYPTOPUNKSMarketplaceDailySnapshotDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CRYPTOPUNKSMarketplaceDailySnapshotDTO Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CRYPTOPUNKSMarketplaceDailySnapshotDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CRYPTOPUNKS.MarketplaceDailySnapshotDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_time' => '\DateTime',
        'recv_time' => '\DateTime',
        'block_number' => 'string',
        'vid' => 'int',
        'block_range' => 'string',
        'id' => 'string',
        'marketplace' => 'string',
        'timestamp' => 'string',
        'collection_count' => 'int',
        'cumulative_trade_volume_eth' => 'string',
        'marketplace_revenue_eth' => 'string',
        'creator_revenue_eth' => 'string',
        'total_revenue_eth' => 'string',
        'trade_count' => 'int',
        'cumulative_unique_traders' => 'int',
        'daily_active_traders' => 'int',
        'daily_traded_collection_count' => 'int',
        'daily_traded_item_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_time' => 'date-time',
        'recv_time' => 'date-time',
        'block_number' => null,
        'vid' => 'int64',
        'block_range' => null,
        'id' => null,
        'marketplace' => null,
        'timestamp' => null,
        'collection_count' => 'int32',
        'cumulative_trade_volume_eth' => null,
        'marketplace_revenue_eth' => null,
        'creator_revenue_eth' => null,
        'total_revenue_eth' => null,
        'trade_count' => 'int32',
        'cumulative_unique_traders' => 'int32',
        'daily_active_traders' => 'int32',
        'daily_traded_collection_count' => 'int32',
        'daily_traded_item_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_time' => false,
		'recv_time' => false,
		'block_number' => true,
		'vid' => false,
		'block_range' => true,
		'id' => true,
		'marketplace' => true,
		'timestamp' => true,
		'collection_count' => false,
		'cumulative_trade_volume_eth' => true,
		'marketplace_revenue_eth' => true,
		'creator_revenue_eth' => true,
		'total_revenue_eth' => true,
		'trade_count' => false,
		'cumulative_unique_traders' => false,
		'daily_active_traders' => false,
		'daily_traded_collection_count' => false,
		'daily_traded_item_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_time' => 'entry_time',
        'recv_time' => 'recv_time',
        'block_number' => 'block_number',
        'vid' => 'vid',
        'block_range' => 'block_range',
        'id' => 'id',
        'marketplace' => 'marketplace',
        'timestamp' => 'timestamp',
        'collection_count' => 'collection_count',
        'cumulative_trade_volume_eth' => 'cumulative_trade_volume_eth',
        'marketplace_revenue_eth' => 'marketplace_revenue_eth',
        'creator_revenue_eth' => 'creator_revenue_eth',
        'total_revenue_eth' => 'total_revenue_eth',
        'trade_count' => 'trade_count',
        'cumulative_unique_traders' => 'cumulative_unique_traders',
        'daily_active_traders' => 'daily_active_traders',
        'daily_traded_collection_count' => 'daily_traded_collection_count',
        'daily_traded_item_count' => 'daily_traded_item_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_time' => 'setEntryTime',
        'recv_time' => 'setRecvTime',
        'block_number' => 'setBlockNumber',
        'vid' => 'setVid',
        'block_range' => 'setBlockRange',
        'id' => 'setId',
        'marketplace' => 'setMarketplace',
        'timestamp' => 'setTimestamp',
        'collection_count' => 'setCollectionCount',
        'cumulative_trade_volume_eth' => 'setCumulativeTradeVolumeEth',
        'marketplace_revenue_eth' => 'setMarketplaceRevenueEth',
        'creator_revenue_eth' => 'setCreatorRevenueEth',
        'total_revenue_eth' => 'setTotalRevenueEth',
        'trade_count' => 'setTradeCount',
        'cumulative_unique_traders' => 'setCumulativeUniqueTraders',
        'daily_active_traders' => 'setDailyActiveTraders',
        'daily_traded_collection_count' => 'setDailyTradedCollectionCount',
        'daily_traded_item_count' => 'setDailyTradedItemCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_time' => 'getEntryTime',
        'recv_time' => 'getRecvTime',
        'block_number' => 'getBlockNumber',
        'vid' => 'getVid',
        'block_range' => 'getBlockRange',
        'id' => 'getId',
        'marketplace' => 'getMarketplace',
        'timestamp' => 'getTimestamp',
        'collection_count' => 'getCollectionCount',
        'cumulative_trade_volume_eth' => 'getCumulativeTradeVolumeEth',
        'marketplace_revenue_eth' => 'getMarketplaceRevenueEth',
        'creator_revenue_eth' => 'getCreatorRevenueEth',
        'total_revenue_eth' => 'getTotalRevenueEth',
        'trade_count' => 'getTradeCount',
        'cumulative_unique_traders' => 'getCumulativeUniqueTraders',
        'daily_active_traders' => 'getDailyActiveTraders',
        'daily_traded_collection_count' => 'getDailyTradedCollectionCount',
        'daily_traded_item_count' => 'getDailyTradedItemCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_time', $data ?? [], null);
        $this->setIfExists('recv_time', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('vid', $data ?? [], null);
        $this->setIfExists('block_range', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('marketplace', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('collection_count', $data ?? [], null);
        $this->setIfExists('cumulative_trade_volume_eth', $data ?? [], null);
        $this->setIfExists('marketplace_revenue_eth', $data ?? [], null);
        $this->setIfExists('creator_revenue_eth', $data ?? [], null);
        $this->setIfExists('total_revenue_eth', $data ?? [], null);
        $this->setIfExists('trade_count', $data ?? [], null);
        $this->setIfExists('cumulative_unique_traders', $data ?? [], null);
        $this->setIfExists('daily_active_traders', $data ?? [], null);
        $this->setIfExists('daily_traded_collection_count', $data ?? [], null);
        $this->setIfExists('daily_traded_item_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_time
     *
     * @return \DateTime|null
     */
    public function getEntryTime()
    {
        return $this->container['entry_time'];
    }

    /**
     * Sets entry_time
     *
     * @param \DateTime|null $entry_time entry_time
     *
     * @return self
     */
    public function setEntryTime($entry_time)
    {
        if (is_null($entry_time)) {
            throw new \InvalidArgumentException('non-nullable entry_time cannot be null');
        }
        $this->container['entry_time'] = $entry_time;

        return $this;
    }

    /**
     * Gets recv_time
     *
     * @return \DateTime|null
     */
    public function getRecvTime()
    {
        return $this->container['recv_time'];
    }

    /**
     * Sets recv_time
     *
     * @param \DateTime|null $recv_time recv_time
     *
     * @return self
     */
    public function setRecvTime($recv_time)
    {
        if (is_null($recv_time)) {
            throw new \InvalidArgumentException('non-nullable recv_time cannot be null');
        }
        $this->container['recv_time'] = $recv_time;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return string|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param string|null $block_number 
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            array_push($this->openAPINullablesSetToNull, 'block_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets vid
     *
     * @return int|null
     */
    public function getVid()
    {
        return $this->container['vid'];
    }

    /**
     * Sets vid
     *
     * @param int|null $vid 
     *
     * @return self
     */
    public function setVid($vid)
    {
        if (is_null($vid)) {
            throw new \InvalidArgumentException('non-nullable vid cannot be null');
        }
        $this->container['vid'] = $vid;

        return $this;
    }

    /**
     * Gets block_range
     *
     * @return string|null
     */
    public function getBlockRange()
    {
        return $this->container['block_range'];
    }

    /**
     * Sets block_range
     *
     * @param string|null $block_range 
     *
     * @return self
     */
    public function setBlockRange($block_range)
    {
        if (is_null($block_range)) {
            array_push($this->openAPINullablesSetToNull, 'block_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_range'] = $block_range;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id 
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets marketplace
     *
     * @return string|null
     */
    public function getMarketplace()
    {
        return $this->container['marketplace'];
    }

    /**
     * Sets marketplace
     *
     * @param string|null $marketplace 
     *
     * @return self
     */
    public function setMarketplace($marketplace)
    {
        if (is_null($marketplace)) {
            array_push($this->openAPINullablesSetToNull, 'marketplace');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('marketplace', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['marketplace'] = $marketplace;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp 
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets collection_count
     *
     * @return int|null
     */
    public function getCollectionCount()
    {
        return $this->container['collection_count'];
    }

    /**
     * Sets collection_count
     *
     * @param int|null $collection_count 
     *
     * @return self
     */
    public function setCollectionCount($collection_count)
    {
        if (is_null($collection_count)) {
            throw new \InvalidArgumentException('non-nullable collection_count cannot be null');
        }
        $this->container['collection_count'] = $collection_count;

        return $this;
    }

    /**
     * Gets cumulative_trade_volume_eth
     *
     * @return string|null
     */
    public function getCumulativeTradeVolumeEth()
    {
        return $this->container['cumulative_trade_volume_eth'];
    }

    /**
     * Sets cumulative_trade_volume_eth
     *
     * @param string|null $cumulative_trade_volume_eth 
     *
     * @return self
     */
    public function setCumulativeTradeVolumeEth($cumulative_trade_volume_eth)
    {
        if (is_null($cumulative_trade_volume_eth)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_trade_volume_eth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_trade_volume_eth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_trade_volume_eth'] = $cumulative_trade_volume_eth;

        return $this;
    }

    /**
     * Gets marketplace_revenue_eth
     *
     * @return string|null
     */
    public function getMarketplaceRevenueEth()
    {
        return $this->container['marketplace_revenue_eth'];
    }

    /**
     * Sets marketplace_revenue_eth
     *
     * @param string|null $marketplace_revenue_eth 
     *
     * @return self
     */
    public function setMarketplaceRevenueEth($marketplace_revenue_eth)
    {
        if (is_null($marketplace_revenue_eth)) {
            array_push($this->openAPINullablesSetToNull, 'marketplace_revenue_eth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('marketplace_revenue_eth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['marketplace_revenue_eth'] = $marketplace_revenue_eth;

        return $this;
    }

    /**
     * Gets creator_revenue_eth
     *
     * @return string|null
     */
    public function getCreatorRevenueEth()
    {
        return $this->container['creator_revenue_eth'];
    }

    /**
     * Sets creator_revenue_eth
     *
     * @param string|null $creator_revenue_eth 
     *
     * @return self
     */
    public function setCreatorRevenueEth($creator_revenue_eth)
    {
        if (is_null($creator_revenue_eth)) {
            array_push($this->openAPINullablesSetToNull, 'creator_revenue_eth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creator_revenue_eth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creator_revenue_eth'] = $creator_revenue_eth;

        return $this;
    }

    /**
     * Gets total_revenue_eth
     *
     * @return string|null
     */
    public function getTotalRevenueEth()
    {
        return $this->container['total_revenue_eth'];
    }

    /**
     * Sets total_revenue_eth
     *
     * @param string|null $total_revenue_eth 
     *
     * @return self
     */
    public function setTotalRevenueEth($total_revenue_eth)
    {
        if (is_null($total_revenue_eth)) {
            array_push($this->openAPINullablesSetToNull, 'total_revenue_eth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_revenue_eth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_revenue_eth'] = $total_revenue_eth;

        return $this;
    }

    /**
     * Gets trade_count
     *
     * @return int|null
     */
    public function getTradeCount()
    {
        return $this->container['trade_count'];
    }

    /**
     * Sets trade_count
     *
     * @param int|null $trade_count 
     *
     * @return self
     */
    public function setTradeCount($trade_count)
    {
        if (is_null($trade_count)) {
            throw new \InvalidArgumentException('non-nullable trade_count cannot be null');
        }
        $this->container['trade_count'] = $trade_count;

        return $this;
    }

    /**
     * Gets cumulative_unique_traders
     *
     * @return int|null
     */
    public function getCumulativeUniqueTraders()
    {
        return $this->container['cumulative_unique_traders'];
    }

    /**
     * Sets cumulative_unique_traders
     *
     * @param int|null $cumulative_unique_traders 
     *
     * @return self
     */
    public function setCumulativeUniqueTraders($cumulative_unique_traders)
    {
        if (is_null($cumulative_unique_traders)) {
            throw new \InvalidArgumentException('non-nullable cumulative_unique_traders cannot be null');
        }
        $this->container['cumulative_unique_traders'] = $cumulative_unique_traders;

        return $this;
    }

    /**
     * Gets daily_active_traders
     *
     * @return int|null
     */
    public function getDailyActiveTraders()
    {
        return $this->container['daily_active_traders'];
    }

    /**
     * Sets daily_active_traders
     *
     * @param int|null $daily_active_traders 
     *
     * @return self
     */
    public function setDailyActiveTraders($daily_active_traders)
    {
        if (is_null($daily_active_traders)) {
            throw new \InvalidArgumentException('non-nullable daily_active_traders cannot be null');
        }
        $this->container['daily_active_traders'] = $daily_active_traders;

        return $this;
    }

    /**
     * Gets daily_traded_collection_count
     *
     * @return int|null
     */
    public function getDailyTradedCollectionCount()
    {
        return $this->container['daily_traded_collection_count'];
    }

    /**
     * Sets daily_traded_collection_count
     *
     * @param int|null $daily_traded_collection_count 
     *
     * @return self
     */
    public function setDailyTradedCollectionCount($daily_traded_collection_count)
    {
        if (is_null($daily_traded_collection_count)) {
            throw new \InvalidArgumentException('non-nullable daily_traded_collection_count cannot be null');
        }
        $this->container['daily_traded_collection_count'] = $daily_traded_collection_count;

        return $this;
    }

    /**
     * Gets daily_traded_item_count
     *
     * @return int|null
     */
    public function getDailyTradedItemCount()
    {
        return $this->container['daily_traded_item_count'];
    }

    /**
     * Sets daily_traded_item_count
     *
     * @param int|null $daily_traded_item_count 
     *
     * @return self
     */
    public function setDailyTradedItemCount($daily_traded_item_count)
    {
        if (is_null($daily_traded_item_count)) {
            throw new \InvalidArgumentException('non-nullable daily_traded_item_count cannot be null');
        }
        $this->container['daily_traded_item_count'] = $daily_traded_item_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


