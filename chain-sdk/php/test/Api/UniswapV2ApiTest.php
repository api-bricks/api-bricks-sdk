<?php
/**
 * UniswapV2ApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * UniswapV2ApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UniswapV2ApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for uniswapV2BundlesCurrent
     *
     * Bundles (current).
     *
     */
    public function testUniswapV2BundlesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2BurnsCurrent
     *
     * Burns (current).
     *
     */
    public function testUniswapV2BurnsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetBundlesHistorical
     *
     * Bundles (historical).
     *
     */
    public function testUniswapV2GetBundlesHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetBurnsHistorical
     *
     * Burns (historical).
     *
     */
    public function testUniswapV2GetBurnsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetLiquidityPositionSnapshotsHistorical
     *
     * LiquidityPositionSnapshots (historical).
     *
     */
    public function testUniswapV2GetLiquidityPositionSnapshotsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetLiquidityPositionsHistorical
     *
     * LiquidityPositions (historical).
     *
     */
    public function testUniswapV2GetLiquidityPositionsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetMintsHistorical
     *
     * Mints (historical).
     *
     */
    public function testUniswapV2GetMintsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetPairDayDataHistorical
     *
     * PairDayData (historical).
     *
     */
    public function testUniswapV2GetPairDayDataHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetPairHourDataHistorical
     *
     * PairHourData (historical).
     *
     */
    public function testUniswapV2GetPairHourDataHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetPairsHistorical
     *
     * Pairs (historical).
     *
     */
    public function testUniswapV2GetPairsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetSwapsHistorical
     *
     * Swaps (historical).
     *
     */
    public function testUniswapV2GetSwapsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetTokenDayDataHistorical
     *
     * TokenDayData (historical).
     *
     */
    public function testUniswapV2GetTokenDayDataHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetTokensHistorical
     *
     * Tokens (historical).
     *
     */
    public function testUniswapV2GetTokensHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetTransactionsHistorical
     *
     * Transactions (historical).
     *
     */
    public function testUniswapV2GetTransactionsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetUniswapDayDataHistorical
     *
     * UniswapDayData (historical).
     *
     */
    public function testUniswapV2GetUniswapDayDataHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetUniswapFactoriesHistorical
     *
     * UniswapFactories (historical).
     *
     */
    public function testUniswapV2GetUniswapFactoriesHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2GetUsersHistorical
     *
     * Users (historical).
     *
     */
    public function testUniswapV2GetUsersHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2LiquidityPositionSnapshotsCurrent
     *
     * LiquidityPositionSnapshots (current).
     *
     */
    public function testUniswapV2LiquidityPositionSnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2LiquidityPositionsCurrent
     *
     * LiquidityPositions (current).
     *
     */
    public function testUniswapV2LiquidityPositionsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2MintsCurrent
     *
     * Mints (current).
     *
     */
    public function testUniswapV2MintsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2PairDayDataCurrent
     *
     * PairDayData (current).
     *
     */
    public function testUniswapV2PairDayDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2PairHourDataCurrent
     *
     * PairHourData (current).
     *
     */
    public function testUniswapV2PairHourDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2PairsCurrent
     *
     * Pairs (current).
     *
     */
    public function testUniswapV2PairsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2SwapsCurrent
     *
     * Swaps (current).
     *
     */
    public function testUniswapV2SwapsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2TokenDayDataCurrent
     *
     * TokenDayData (current).
     *
     */
    public function testUniswapV2TokenDayDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2TokensCurrent
     *
     * Tokens (current).
     *
     */
    public function testUniswapV2TokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2TransactionsCurrent
     *
     * Transactions (current).
     *
     */
    public function testUniswapV2TransactionsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2UniswapDayDataCurrent
     *
     * UniswapDayData (current).
     *
     */
    public function testUniswapV2UniswapDayDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2UniswapFactoriesCurrent
     *
     * UniswapFactories (current).
     *
     */
    public function testUniswapV2UniswapFactoriesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV2UsersCurrent
     *
     * Users (current).
     *
     */
    public function testUniswapV2UsersCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
