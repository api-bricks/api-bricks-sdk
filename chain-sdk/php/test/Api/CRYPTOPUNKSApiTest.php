<?php
/**
 * CRYPTOPUNKSApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * CRYPTOPUNKSApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CRYPTOPUNKSApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cRYPTOPUNKSBidsCurrent
     *
     * Bids (current).
     *
     */
    public function testCRYPTOPUNKSBidsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSCollectionDailySnapshotsCurrent
     *
     * CollectionDailySnapshots (current).
     *
     */
    public function testCRYPTOPUNKSCollectionDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSCollectionsCurrent
     *
     * Collections (current).
     *
     */
    public function testCRYPTOPUNKSCollectionsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSDataSourcesCurrent
     *
     * DataSources (current).
     *
     */
    public function testCRYPTOPUNKSDataSourcesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSGetBidsHistorical
     *
     * Bids (historical).
     *
     */
    public function testCRYPTOPUNKSGetBidsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSGetCollectionDailySnapshotsHistorical
     *
     * CollectionDailySnapshots (historical).
     *
     */
    public function testCRYPTOPUNKSGetCollectionDailySnapshotsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSGetCollectionsHistorical
     *
     * Collections (historical).
     *
     */
    public function testCRYPTOPUNKSGetCollectionsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSGetDataSourcesHistorical
     *
     * DataSources (historical).
     *
     */
    public function testCRYPTOPUNKSGetDataSourcesHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSGetItemsHistorical
     *
     * Items (historical).
     *
     */
    public function testCRYPTOPUNKSGetItemsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSGetMarketPlacesHistorical
     *
     * MarketPlaces (historical).
     *
     */
    public function testCRYPTOPUNKSGetMarketPlacesHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical
     *
     * MarketplaceDailySnapshots (historical).
     *
     */
    public function testCRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSGetTradesHistorical
     *
     * Trades (historical).
     *
     */
    public function testCRYPTOPUNKSGetTradesHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSGetUsersHistorical
     *
     * Users (historical).
     *
     */
    public function testCRYPTOPUNKSGetUsersHistorical()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSItemsCurrent
     *
     * Items (current).
     *
     */
    public function testCRYPTOPUNKSItemsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSMarketPlacesCurrent
     *
     * MarketPlaces (current).
     *
     */
    public function testCRYPTOPUNKSMarketPlacesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSMarketplaceDailySnapshotsCurrent
     *
     * MarketplaceDailySnapshots (current).
     *
     */
    public function testCRYPTOPUNKSMarketplaceDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSTradesCurrent
     *
     * Trades (current).
     *
     */
    public function testCRYPTOPUNKSTradesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cRYPTOPUNKSUsersCurrent
     *
     * Users (current).
     *
     */
    public function testCRYPTOPUNKSUsersCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
