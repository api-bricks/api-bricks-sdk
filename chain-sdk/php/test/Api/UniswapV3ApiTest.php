<?php
/**
 * UniswapV3ApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OnChain API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * UniswapV3ApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UniswapV3ApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for uniswapV3GetBundlesCurrent
     *
     * Bundles (current).
     *
     */
    public function testUniswapV3GetBundlesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetBurnsCurrent
     *
     * Burns (current).
     *
     */
    public function testUniswapV3GetBurnsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetDayDataCurrent
     *
     * DayData (current).
     *
     */
    public function testUniswapV3GetDayDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetFactoryCurrent
     *
     * Factory (current).
     *
     */
    public function testUniswapV3GetFactoryCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetMintsCurrent
     *
     * Mints (current).
     *
     */
    public function testUniswapV3GetMintsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetPoolsCurrent
     *
     * Pools (current) ðŸ”¥.
     *
     */
    public function testUniswapV3GetPoolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetPoolsDayDataCurrent
     *
     * PoolsDayData (current).
     *
     */
    public function testUniswapV3GetPoolsDayDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetPoolsHourDataCurrent
     *
     * PoolsHourData (current).
     *
     */
    public function testUniswapV3GetPoolsHourDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetPositionsCurrent
     *
     * Positions (current).
     *
     */
    public function testUniswapV3GetPositionsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetPositionsSnapshotsCurrent
     *
     * PositionsSnapshots (current).
     *
     */
    public function testUniswapV3GetPositionsSnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetSwapsCurrent
     *
     * Swaps (current) ðŸ”¥.
     *
     */
    public function testUniswapV3GetSwapsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetTicksCurrent
     *
     * Ticks (current).
     *
     */
    public function testUniswapV3GetTicksCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetTicksDayDataCurrent
     *
     * TicksDayData (current).
     *
     */
    public function testUniswapV3GetTicksDayDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetTokensCurrent
     *
     * Tokens (current) ðŸ”¥.
     *
     */
    public function testUniswapV3GetTokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetTokensDayDataCurrent
     *
     * TokensDayData (current).
     *
     */
    public function testUniswapV3GetTokensDayDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uniswapV3GetTokensHourDataCurrent
     *
     * TokensHourData (current).
     *
     */
    public function testUniswapV3GetTokensHourDataCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
