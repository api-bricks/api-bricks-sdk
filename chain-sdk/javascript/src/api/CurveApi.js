/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CurveAccountDTO from '../model/CurveAccountDTO';
import CurveAddLiquidityEventDTO from '../model/CurveAddLiquidityEventDTO';
import CurveAdminFeeChangeLogDTO from '../model/CurveAdminFeeChangeLogDTO';
import CurveAmplificationCoeffChangeLogDTO from '../model/CurveAmplificationCoeffChangeLogDTO';
import CurveCoinDTO from '../model/CurveCoinDTO';
import CurveContractDTO from '../model/CurveContractDTO';
import CurveContractVersionDTO from '../model/CurveContractVersionDTO';
import CurveDailyVolumeDTO from '../model/CurveDailyVolumeDTO';
import CurveExchangeDTO from '../model/CurveExchangeDTO';
import CurveFeeChangeLogDTO from '../model/CurveFeeChangeLogDTO';
import CurveGaugeDTO from '../model/CurveGaugeDTO';
import CurveGaugeDepositDTO from '../model/CurveGaugeDepositDTO';
import CurveGaugeLiquidityDTO from '../model/CurveGaugeLiquidityDTO';
import CurveGaugeTotalWeightDTO from '../model/CurveGaugeTotalWeightDTO';
import CurveGaugeTypeDTO from '../model/CurveGaugeTypeDTO';
import CurveGaugeTypeWeightDTO from '../model/CurveGaugeTypeWeightDTO';
import CurveGaugeWeightDTO from '../model/CurveGaugeWeightDTO';
import CurveGaugeWeightVoteDTO from '../model/CurveGaugeWeightVoteDTO';
import CurveGaugeWithdrawDTO from '../model/CurveGaugeWithdrawDTO';
import CurveHourlyVolumeDTO from '../model/CurveHourlyVolumeDTO';
import CurveLpTokenDTO from '../model/CurveLpTokenDTO';
import CurvePoolDTO from '../model/CurvePoolDTO';
import CurveProposalDTO from '../model/CurveProposalDTO';
import CurveProposalVoteDTO from '../model/CurveProposalVoteDTO';
import CurveRemoveLiquidityEventDTO from '../model/CurveRemoveLiquidityEventDTO';
import CurveRemoveLiquidityOneEventDTO from '../model/CurveRemoveLiquidityOneEventDTO';
import CurveSystemStateDTO from '../model/CurveSystemStateDTO';
import CurveTokenDTO from '../model/CurveTokenDTO';
import CurveTransferOwnershipEventDTO from '../model/CurveTransferOwnershipEventDTO';
import CurveUnderlyingCoinDTO from '../model/CurveUnderlyingCoinDTO';
import CurveVotingAppDTO from '../model/CurveVotingAppDTO';
import CurveWeeklyVolumeDTO from '../model/CurveWeeklyVolumeDTO';

/**
* Curve service.
* @module api/CurveApi
* @version v1
*/
export default class CurveApi {

    /**
    * Constructs a new CurveApi. 
    * @alias module:api/CurveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the curveGetAccountDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetAccountDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAccountDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AccountDTOs (historical) ðŸ”¥
     * Gets AccountDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetAccountDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAccountDTO>}
     */
    curveGetAccountDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAccountDTO];
      return this.apiClient.callApi(
        '/dapps/curve/AccountDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAccountsHistorical operation.
     * @callback module:api/CurveApi~curveGetAccountsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAccountDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts (historical)
     * Gets accounts.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetAccountsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAccountDTO>}
     */
    curveGetAccountsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAccountDTO];
      return this.apiClient.callApi(
        '/dapps/curve/accounts/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAddLiquidityEventDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetAddLiquidityEventDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAddLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddLiquidityEventDTOs (historical) ðŸ”¥
     * Gets AddLiquidityEventDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetAddLiquidityEventDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAddLiquidityEventDTO>}
     */
    curveGetAddLiquidityEventDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAddLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/AddLiquidityEventDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAddLiquidityEventsHistorical operation.
     * @callback module:api/CurveApi~curveGetAddLiquidityEventsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAddLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddLiquidityEvents (historical)
     * Gets add liquidity events.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetAddLiquidityEventsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAddLiquidityEventDTO>}
     */
    curveGetAddLiquidityEventsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAddLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/addLiquidityEvents/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAdminFeeChangeLogDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetAdminFeeChangeLogDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAdminFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AdminFeeChangeLogDTOs (historical) ðŸ”¥
     * Gets AdminFeeChangeLogDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetAdminFeeChangeLogDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAdminFeeChangeLogDTO>}
     */
    curveGetAdminFeeChangeLogDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAdminFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/AdminFeeChangeLogDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAdminFeeChangeLogsHistorical operation.
     * @callback module:api/CurveApi~curveGetAdminFeeChangeLogsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAdminFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AdminFeeChangeLogs (historical)
     * Gets admin fee change logs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetAdminFeeChangeLogsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAdminFeeChangeLogDTO>}
     */
    curveGetAdminFeeChangeLogsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAdminFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/adminFeeChangeLogs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAmplificationCoeffChangeLogDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetAmplificationCoeffChangeLogDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAmplificationCoeffChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AmplificationCoeffChangeLogDTOs (historical) ðŸ”¥
     * Gets AmplificationCoeffChangeLogDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetAmplificationCoeffChangeLogDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAmplificationCoeffChangeLogDTO>}
     */
    curveGetAmplificationCoeffChangeLogDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAmplificationCoeffChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/AmplificationCoeffChangeLogDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAmplificationCoeffChangeLogsHistorical operation.
     * @callback module:api/CurveApi~curveGetAmplificationCoeffChangeLogsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAmplificationCoeffChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AmplificationCoeffChangeLogs (historical)
     * Gets amplification coeff change logs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetAmplificationCoeffChangeLogsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAmplificationCoeffChangeLogDTO>}
     */
    curveGetAmplificationCoeffChangeLogsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAmplificationCoeffChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/amplificationCoeffChangeLogs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetCoinDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetCoinDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CoinDTOs (historical) ðŸ”¥
     * Gets CoinDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetCoinDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveCoinDTO>}
     */
    curveGetCoinDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/CoinDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetCoinsHistorical operation.
     * @callback module:api/CurveApi~curveGetCoinsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Coins (historical)
     * Gets coins.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetCoinsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveCoinDTO>}
     */
    curveGetCoinsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/coins/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetContractDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetContractDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ContractDTOs (historical) ðŸ”¥
     * Gets ContractDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetContractDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractDTO>}
     */
    curveGetContractDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractDTO];
      return this.apiClient.callApi(
        '/dapps/curve/ContractDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetContractVersionDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetContractVersionDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractVersionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ContractVersionDTOs (historical) ðŸ”¥
     * Gets ContractVersionDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetContractVersionDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractVersionDTO>}
     */
    curveGetContractVersionDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractVersionDTO];
      return this.apiClient.callApi(
        '/dapps/curve/ContractVersionDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetContractsHistorical operation.
     * @callback module:api/CurveApi~curveGetContractsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contracts (historical)
     * Gets contracts.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetContractsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractDTO>}
     */
    curveGetContractsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractDTO];
      return this.apiClient.callApi(
        '/dapps/curve/contracts/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetContractsVersionsHistorical operation.
     * @callback module:api/CurveApi~curveGetContractsVersionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractVersionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ContractsVersions (historical)
     * Gets contracts versions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetContractsVersionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractVersionDTO>}
     */
    curveGetContractsVersionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractVersionDTO];
      return this.apiClient.callApi(
        '/dapps/curve/contractsVersions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetDailyVolumeDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetDailyVolumeDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveDailyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DailyVolumeDTOs (historical) ðŸ”¥
     * Gets DailyVolumeDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetDailyVolumeDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveDailyVolumeDTO>}
     */
    curveGetDailyVolumeDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveDailyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/DailyVolumeDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetDailyVolumesHistorical operation.
     * @callback module:api/CurveApi~curveGetDailyVolumesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveDailyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DailyVolumes (historical)
     * Gets daily volumes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetDailyVolumesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveDailyVolumeDTO>}
     */
    curveGetDailyVolumesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveDailyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/dailyVolumes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetExchangeDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetExchangeDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveExchangeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ExchangeDTOs (historical) ðŸ”¥
     * Gets ExchangeDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetExchangeDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveExchangeDTO>}
     */
    curveGetExchangeDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveExchangeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/ExchangeDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetExchangesHistorical operation.
     * @callback module:api/CurveApi~curveGetExchangesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveExchangeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchanges (historical) ðŸ”¥
     * Gets exchanges.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetExchangesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveExchangeDTO>}
     */
    curveGetExchangesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveExchangeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/exchanges/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetFeeChangeLogDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetFeeChangeLogDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FeeChangeLogDTOs (historical) ðŸ”¥
     * Gets FeeChangeLogDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetFeeChangeLogDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveFeeChangeLogDTO>}
     */
    curveGetFeeChangeLogDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/FeeChangeLogDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetFeeChangeLogsHistorical operation.
     * @callback module:api/CurveApi~curveGetFeeChangeLogsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FeeChangeLogs (historical)
     * Gets fee change logs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetFeeChangeLogsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveFeeChangeLogDTO>}
     */
    curveGetFeeChangeLogsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/feeChangeLogs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeDTOs (historical) ðŸ”¥
     * Gets GaugeDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugeDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDTO>}
     */
    curveGetGaugeDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/GaugeDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeDepositDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeDepositDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDepositDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeDepositDTOs (historical) ðŸ”¥
     * Gets GaugeDepositDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugeDepositDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDepositDTO>}
     */
    curveGetGaugeDepositDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDepositDTO];
      return this.apiClient.callApi(
        '/dapps/curve/GaugeDepositDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeLiquidityDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeLiquidityDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeLiquidityDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeLiquidityDTOs (historical) ðŸ”¥
     * Gets GaugeLiquidityDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugeLiquidityDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeLiquidityDTO>}
     */
    curveGetGaugeLiquidityDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeLiquidityDTO];
      return this.apiClient.callApi(
        '/dapps/curve/GaugeLiquidityDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeTotalWeightDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeTotalWeightDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTotalWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTotalWeightDTOs (historical) ðŸ”¥
     * Gets GaugeTotalWeightDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugeTotalWeightDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTotalWeightDTO>}
     */
    curveGetGaugeTotalWeightDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTotalWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/GaugeTotalWeightDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeTypeDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeTypeDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTypeDTOs (historical) ðŸ”¥
     * Gets GaugeTypeDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugeTypeDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeDTO>}
     */
    curveGetGaugeTypeDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/GaugeTypeDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeTypeWeightDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeTypeWeightDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTypeWeightDTOs (historical) ðŸ”¥
     * Gets GaugeTypeWeightDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugeTypeWeightDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeWeightDTO>}
     */
    curveGetGaugeTypeWeightDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/GaugeTypeWeightDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeWeightDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeWeightDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWeightDTOs (historical) ðŸ”¥
     * Gets GaugeWeightDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugeWeightDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightDTO>}
     */
    curveGetGaugeWeightDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/GaugeWeightDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeWeightVoteDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeWeightVoteDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWeightVoteDTOs (historical) ðŸ”¥
     * Gets GaugeWeightVoteDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugeWeightVoteDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightVoteDTO>}
     */
    curveGetGaugeWeightVoteDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/GaugeWeightVoteDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeWithdrawDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeWithdrawDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWithdrawDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWithdrawDTOs (historical) ðŸ”¥
     * Gets GaugeWithdrawDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugeWithdrawDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWithdrawDTO>}
     */
    curveGetGaugeWithdrawDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWithdrawDTO];
      return this.apiClient.callApi(
        '/dapps/curve/GaugeWithdrawDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesDepositsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesDepositsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDepositDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugesDeposits (historical)
     * Gets gauges deposits.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetGaugesDepositsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDepositDTO>}
     */
    curveGetGaugesDepositsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDepositDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugesDeposits/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gauges (historical)
     * Gets gauges.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetGaugesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDTO>}
     */
    curveGetGaugesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gauges/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesLiquidityHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesLiquidityHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeLiquidityDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugesLiquidity (historical)
     * Gets gauges liquidity.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetGaugesLiquidityHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeLiquidityDTO>}
     */
    curveGetGaugesLiquidityHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeLiquidityDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugesLiquidity/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesTotalWeightsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesTotalWeightsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTotalWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugesTotalWeights (historical)
     * Gets gauges total weights.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetGaugesTotalWeightsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTotalWeightDTO>}
     */
    curveGetGaugesTotalWeightsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTotalWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugesTotalWeights/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesTypesHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesTypesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugesTypes (historical)
     * Gets gauges types.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetGaugesTypesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeDTO>}
     */
    curveGetGaugesTypesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugesTypes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesTypesWeightsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesTypesWeightsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugesTypesWeights (historical)
     * Gets gauges types weights.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetGaugesTypesWeightsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeWeightDTO>}
     */
    curveGetGaugesTypesWeightsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugesTypesWeights/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesWeightsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesWeightsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugesWeights (historical)
     * Gets gauges weights.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetGaugesWeightsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightDTO>}
     */
    curveGetGaugesWeightsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugesWeights/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesWeightsVotesHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesWeightsVotesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugesWeightsVotes (historical)
     * Gets gauges weights votes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetGaugesWeightsVotesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightVoteDTO>}
     */
    curveGetGaugesWeightsVotesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugesWeightsVotes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesWithdrawHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesWithdrawHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWithdrawDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugesWithdraw (historical)
     * Gets gauges withdraws.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetGaugesWithdrawHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWithdrawDTO>}
     */
    curveGetGaugesWithdrawHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWithdrawDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugesWithdraws/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetHourlyVolumeDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetHourlyVolumeDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveHourlyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HourlyVolumeDTOs (historical) ðŸ”¥
     * Gets HourlyVolumeDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetHourlyVolumeDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveHourlyVolumeDTO>}
     */
    curveGetHourlyVolumeDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveHourlyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/HourlyVolumeDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetHourlyVolumesHistorical operation.
     * @callback module:api/CurveApi~curveGetHourlyVolumesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveHourlyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HourlyVolumes (historical)
     * Gets hourly volumes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetHourlyVolumesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveHourlyVolumeDTO>}
     */
    curveGetHourlyVolumesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveHourlyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/hourlyVolumes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetLpTokenDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetLpTokenDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveLpTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LpTokenDTOs (historical) ðŸ”¥
     * Gets LpTokenDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetLpTokenDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveLpTokenDTO>}
     */
    curveGetLpTokenDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveLpTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/LpTokenDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetLpTokensHistorical operation.
     * @callback module:api/CurveApi~curveGetLpTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveLpTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LpTokens (historical)
     * Gets lp tokens.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetLpTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveLpTokenDTO>}
     */
    curveGetLpTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveLpTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/lpTokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetPoolDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetPoolDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurvePoolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PoolDTOs (historical) ðŸ”¥
     * Gets PoolDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetPoolDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurvePoolDTO>}
     */
    curveGetPoolDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurvePoolDTO];
      return this.apiClient.callApi(
        '/dapps/curve/PoolDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetPoolsHistorical operation.
     * @callback module:api/CurveApi~curveGetPoolsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurvePoolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (historical) ðŸ”¥
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetPoolsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurvePoolDTO>}
     */
    curveGetPoolsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurvePoolDTO];
      return this.apiClient.callApi(
        '/dapps/curve/pools/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetProposalDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetProposalDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProposalDTOs (historical) ðŸ”¥
     * Gets ProposalDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetProposalDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalDTO>}
     */
    curveGetProposalDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalDTO];
      return this.apiClient.callApi(
        '/dapps/curve/ProposalDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetProposalVoteDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetProposalVoteDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProposalVoteDTOs (historical) ðŸ”¥
     * Gets ProposalVoteDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetProposalVoteDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalVoteDTO>}
     */
    curveGetProposalVoteDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/ProposalVoteDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetProposalsHistorical operation.
     * @callback module:api/CurveApi~curveGetProposalsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Proposals (historical)
     * Gets proposals.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetProposalsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalDTO>}
     */
    curveGetProposalsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalDTO];
      return this.apiClient.callApi(
        '/dapps/curve/proposals/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetProposalsVotesHistorical operation.
     * @callback module:api/CurveApi~curveGetProposalsVotesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProposalsVotes (historical)
     * Gets proposals votes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetProposalsVotesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalVoteDTO>}
     */
    curveGetProposalsVotesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/proposalsVotes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetRemoveLiquidityEventDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetRemoveLiquidityEventDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityEventDTOs (historical) ðŸ”¥
     * Gets RemoveLiquidityEventDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetRemoveLiquidityEventDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityEventDTO>}
     */
    curveGetRemoveLiquidityEventDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/RemoveLiquidityEventDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetRemoveLiquidityEventsHistorical operation.
     * @callback module:api/CurveApi~curveGetRemoveLiquidityEventsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityEvents (historical)
     * Gets remove liquidity events.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetRemoveLiquidityEventsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityEventDTO>}
     */
    curveGetRemoveLiquidityEventsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/removeLiquidityEvents/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetRemoveLiquidityOneEventDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetRemoveLiquidityOneEventDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityOneEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityOneEventDTOs (historical) ðŸ”¥
     * Gets RemoveLiquidityOneEventDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetRemoveLiquidityOneEventDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityOneEventDTO>}
     */
    curveGetRemoveLiquidityOneEventDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityOneEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/RemoveLiquidityOneEventDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetRemoveLiquidityOneEventsHistorical operation.
     * @callback module:api/CurveApi~curveGetRemoveLiquidityOneEventsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityOneEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityOneEvents (historical)
     * Gets remove liquidity one events.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetRemoveLiquidityOneEventsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityOneEventDTO>}
     */
    curveGetRemoveLiquidityOneEventsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityOneEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/removeLiquidityOneEvents/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetSystemStateDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetSystemStateDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveSystemStateDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SystemStateDTOs (historical) ðŸ”¥
     * Gets SystemStateDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetSystemStateDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveSystemStateDTO>}
     */
    curveGetSystemStateDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveSystemStateDTO];
      return this.apiClient.callApi(
        '/dapps/curve/SystemStateDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetSystemStatesHistorical operation.
     * @callback module:api/CurveApi~curveGetSystemStatesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveSystemStateDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SystemStates (historical)
     * Gets system states.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetSystemStatesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveSystemStateDTO>}
     */
    curveGetSystemStatesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveSystemStateDTO];
      return this.apiClient.callApi(
        '/dapps/curve/systemStates/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetTokenDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetTokenDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenDTOs (historical) ðŸ”¥
     * Gets TokenDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetTokenDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTokenDTO>}
     */
    curveGetTokenDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/TokenDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetTokensHistorical operation.
     * @callback module:api/CurveApi~curveGetTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (historical) ðŸ”¥
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.tokenId 
     * @param {module:api/CurveApi~curveGetTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTokenDTO>}
     */
    curveGetTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'tokenId': opts['tokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/tokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetTransferOwnershipEventDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetTransferOwnershipEventDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTransferOwnershipEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TransferOwnershipEventDTOs (historical) ðŸ”¥
     * Gets TransferOwnershipEventDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetTransferOwnershipEventDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTransferOwnershipEventDTO>}
     */
    curveGetTransferOwnershipEventDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTransferOwnershipEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/TransferOwnershipEventDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetTransferOwnershipEventsHistorical operation.
     * @callback module:api/CurveApi~curveGetTransferOwnershipEventsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTransferOwnershipEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TransferOwnershipEvents (historical)
     * Gets transfer ownership events.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetTransferOwnershipEventsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTransferOwnershipEventDTO>}
     */
    curveGetTransferOwnershipEventsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTransferOwnershipEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/transferOwnershipEvents/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetUnderlyingCoinDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetUnderlyingCoinDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveUnderlyingCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnderlyingCoinDTOs (historical) ðŸ”¥
     * Gets UnderlyingCoinDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetUnderlyingCoinDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveUnderlyingCoinDTO>}
     */
    curveGetUnderlyingCoinDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveUnderlyingCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/UnderlyingCoinDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetUnderlyingCoinsHistorical operation.
     * @callback module:api/CurveApi~curveGetUnderlyingCoinsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveUnderlyingCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnderlyingCoins (historical)
     * Gets underlying coins.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetUnderlyingCoinsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveUnderlyingCoinDTO>}
     */
    curveGetUnderlyingCoinsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveUnderlyingCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/underlyingCoins/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetVotingAppDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetVotingAppDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveVotingAppDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VotingAppDTOs (historical) ðŸ”¥
     * Gets VotingAppDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetVotingAppDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveVotingAppDTO>}
     */
    curveGetVotingAppDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveVotingAppDTO];
      return this.apiClient.callApi(
        '/dapps/curve/VotingAppDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetVotingAppsHistorical operation.
     * @callback module:api/CurveApi~curveGetVotingAppsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveVotingAppDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VotingApps (historical)
     * Gets voting apps.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/CurveApi~curveGetVotingAppsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveVotingAppDTO>}
     */
    curveGetVotingAppsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveVotingAppDTO];
      return this.apiClient.callApi(
        '/dapps/curve/votingApps/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetWeeklyVolumeDTOsHistorical operation.
     * @callback module:api/CurveApi~curveGetWeeklyVolumeDTOsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveWeeklyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WeeklyVolumeDTOs (historical) ðŸ”¥
     * Gets WeeklyVolumeDTOs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetWeeklyVolumeDTOsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveWeeklyVolumeDTO>}
     */
    curveGetWeeklyVolumeDTOsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveWeeklyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/WeeklyVolumeDTOs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetWeeklyVolumesHistorical operation.
     * @callback module:api/CurveApi~curveGetWeeklyVolumesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveWeeklyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WeeklyVolumes (historical)
     * Gets weekly volumes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/CurveApi~curveGetWeeklyVolumesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveWeeklyVolumeDTO>}
     */
    curveGetWeeklyVolumesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveWeeklyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/weeklyVolumes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
