/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CurveAccountDTO from '../model/CurveAccountDTO';
import CurveAddLiquidityEventDTO from '../model/CurveAddLiquidityEventDTO';
import CurveAdminFeeChangeLogDTO from '../model/CurveAdminFeeChangeLogDTO';
import CurveAmplificationCoeffChangeLogDTO from '../model/CurveAmplificationCoeffChangeLogDTO';
import CurveCoinDTO from '../model/CurveCoinDTO';
import CurveContractDTO from '../model/CurveContractDTO';
import CurveContractVersionDTO from '../model/CurveContractVersionDTO';
import CurveDailyVolumeDTO from '../model/CurveDailyVolumeDTO';
import CurveExchangeDTO from '../model/CurveExchangeDTO';
import CurveFeeChangeLogDTO from '../model/CurveFeeChangeLogDTO';
import CurveGaugeDTO from '../model/CurveGaugeDTO';
import CurveGaugeDepositDTO from '../model/CurveGaugeDepositDTO';
import CurveGaugeLiquidityDTO from '../model/CurveGaugeLiquidityDTO';
import CurveGaugeTotalWeightDTO from '../model/CurveGaugeTotalWeightDTO';
import CurveGaugeTypeDTO from '../model/CurveGaugeTypeDTO';
import CurveGaugeTypeWeightDTO from '../model/CurveGaugeTypeWeightDTO';
import CurveGaugeWeightDTO from '../model/CurveGaugeWeightDTO';
import CurveGaugeWeightVoteDTO from '../model/CurveGaugeWeightVoteDTO';
import CurveGaugeWithdrawDTO from '../model/CurveGaugeWithdrawDTO';
import CurveHourlyVolumeDTO from '../model/CurveHourlyVolumeDTO';
import CurveLpTokenDTO from '../model/CurveLpTokenDTO';
import CurvePoolDTO from '../model/CurvePoolDTO';
import CurveProposalDTO from '../model/CurveProposalDTO';
import CurveProposalVoteDTO from '../model/CurveProposalVoteDTO';
import CurveRemoveLiquidityEventDTO from '../model/CurveRemoveLiquidityEventDTO';
import CurveRemoveLiquidityOneEventDTO from '../model/CurveRemoveLiquidityOneEventDTO';
import CurveSystemStateDTO from '../model/CurveSystemStateDTO';
import CurveTokenDTO from '../model/CurveTokenDTO';
import CurveTransferOwnershipEventDTO from '../model/CurveTransferOwnershipEventDTO';
import CurveUnderlyingCoinDTO from '../model/CurveUnderlyingCoinDTO';
import CurveVotingAppDTO from '../model/CurveVotingAppDTO';
import CurveWeeklyVolumeDTO from '../model/CurveWeeklyVolumeDTO';

/**
* Curve service.
* @module api/CurveApi
* @version v1
*/
export default class CurveApi {

    /**
    * Constructs a new CurveApi. 
    * @alias module:api/CurveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the curveAccountsCurrent operation.
     * @callback module:api/CurveApi~curveAccountsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAccountDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts (current)
     * Gets accounts.
     * @param {module:api/CurveApi~curveAccountsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAccountDTO>}
     */
    curveAccountsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAccountDTO];
      return this.apiClient.callApi(
        '/dapps/curve/accounts/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveAddLiquidityEventsCurrent operation.
     * @callback module:api/CurveApi~curveAddLiquidityEventsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAddLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddLiquidityEvents (current)
     * Gets addLiquidityEvents.
     * @param {module:api/CurveApi~curveAddLiquidityEventsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAddLiquidityEventDTO>}
     */
    curveAddLiquidityEventsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAddLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/addLiquidityEvents/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveAdminFeeChangeLogsCurrent operation.
     * @callback module:api/CurveApi~curveAdminFeeChangeLogsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAdminFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AdminFeeChangeLogs (current)
     * Gets adminFeeChangeLogs.
     * @param {module:api/CurveApi~curveAdminFeeChangeLogsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAdminFeeChangeLogDTO>}
     */
    curveAdminFeeChangeLogsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAdminFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/adminFeeChangeLogs/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveAmplificationCoeffChangeLogsCurrent operation.
     * @callback module:api/CurveApi~curveAmplificationCoeffChangeLogsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAmplificationCoeffChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AmplificationCoeffChangeLogs (current)
     * Gets amplificationCoeffChangeLogs.
     * @param {module:api/CurveApi~curveAmplificationCoeffChangeLogsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAmplificationCoeffChangeLogDTO>}
     */
    curveAmplificationCoeffChangeLogsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAmplificationCoeffChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/amplificationCoeffChangeLogs/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveCoinsCurrent operation.
     * @callback module:api/CurveApi~curveCoinsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Coins (current)
     * Gets coins.
     * @param {module:api/CurveApi~curveCoinsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveCoinDTO>}
     */
    curveCoinsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/coins/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveContractVersionsCurrent operation.
     * @callback module:api/CurveApi~curveContractVersionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractVersionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ContractVersions (current)
     * Gets contractVersions.
     * @param {module:api/CurveApi~curveContractVersionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractVersionDTO>}
     */
    curveContractVersionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractVersionDTO];
      return this.apiClient.callApi(
        '/dapps/curve/contractVersions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveContractsCurrent operation.
     * @callback module:api/CurveApi~curveContractsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contracts (current)
     * Gets contracts.
     * @param {module:api/CurveApi~curveContractsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractDTO>}
     */
    curveContractsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractDTO];
      return this.apiClient.callApi(
        '/dapps/curve/contracts/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveDailyVolumesCurrent operation.
     * @callback module:api/CurveApi~curveDailyVolumesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveDailyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DailyVolumes (current)
     * Gets dailyVolumes.
     * @param {module:api/CurveApi~curveDailyVolumesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveDailyVolumeDTO>}
     */
    curveDailyVolumesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveDailyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/dailyVolumes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveExchangesCurrent operation.
     * @callback module:api/CurveApi~curveExchangesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveExchangeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchanges (current)
     * Gets exchanges.
     * @param {Object} opts Optional parameters
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveExchangesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveExchangeDTO>}
     */
    curveExchangesCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveExchangeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/exchanges/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveFeeChangeLogsCurrent operation.
     * @callback module:api/CurveApi~curveFeeChangeLogsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FeeChangeLogs (current)
     * Gets feeChangeLogs.
     * @param {module:api/CurveApi~curveFeeChangeLogsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveFeeChangeLogDTO>}
     */
    curveFeeChangeLogsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/feeChangeLogs/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeDepositsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeDepositsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDepositDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeDeposits (current)
     * Gets gaugeDeposits.
     * @param {module:api/CurveApi~curveGaugeDepositsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDepositDTO>}
     */
    curveGaugeDepositsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDepositDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeDeposits/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeLiquiditiesCurrent operation.
     * @callback module:api/CurveApi~curveGaugeLiquiditiesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeLiquidityDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeLiquidities (current)
     * Gets gaugeLiquidities.
     * @param {module:api/CurveApi~curveGaugeLiquiditiesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeLiquidityDTO>}
     */
    curveGaugeLiquiditiesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeLiquidityDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeLiquidities/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeTotalWeightsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeTotalWeightsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTotalWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTotalWeights (current)
     * Gets gaugeTotalWeights.
     * @param {module:api/CurveApi~curveGaugeTotalWeightsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTotalWeightDTO>}
     */
    curveGaugeTotalWeightsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTotalWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeTotalWeights/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeTypeWeightsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeTypeWeightsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTypeWeights (current)
     * Gets gaugeTypeWeights.
     * @param {module:api/CurveApi~curveGaugeTypeWeightsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeWeightDTO>}
     */
    curveGaugeTypeWeightsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeTypeWeights/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeTypesCurrent operation.
     * @callback module:api/CurveApi~curveGaugeTypesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTypes (current)
     * Gets gaugeTypes.
     * @param {module:api/CurveApi~curveGaugeTypesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeDTO>}
     */
    curveGaugeTypesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeTypes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeWeightVotesCurrent operation.
     * @callback module:api/CurveApi~curveGaugeWeightVotesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWeightVotes (current)
     * Gets gaugeWeightVotes.
     * @param {module:api/CurveApi~curveGaugeWeightVotesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightVoteDTO>}
     */
    curveGaugeWeightVotesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeWeightVotes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeWeightsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeWeightsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWeights (current)
     * Gets gaugeWeights.
     * @param {module:api/CurveApi~curveGaugeWeightsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightDTO>}
     */
    curveGaugeWeightsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeWeights/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeWithdrawsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeWithdrawsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWithdrawDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWithdraws (current)
     * Gets gaugeWithdraws.
     * @param {module:api/CurveApi~curveGaugeWithdrawsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWithdrawDTO>}
     */
    curveGaugeWithdrawsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWithdrawDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeWithdraws/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugesCurrent operation.
     * @callback module:api/CurveApi~curveGaugesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gauges (current)
     * Gets gauges.
     * @param {module:api/CurveApi~curveGaugesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDTO>}
     */
    curveGaugesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gauges/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAccountsHistorical operation.
     * @callback module:api/CurveApi~curveGetAccountsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAccountDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts (historical)
     * Gets accounts.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [address] 
     * @param {module:api/CurveApi~curveGetAccountsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAccountDTO>}
     */
    curveGetAccountsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'address': opts['address']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAccountDTO];
      return this.apiClient.callApi(
        '/dapps/curve/accounts/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAddLiquidityEventsHistorical operation.
     * @callback module:api/CurveApi~curveGetAddLiquidityEventsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAddLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddLiquidityEvents (historical)
     * Gets addLiquidityEvents.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetAddLiquidityEventsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAddLiquidityEventDTO>}
     */
    curveGetAddLiquidityEventsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAddLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/addLiquidityEvents/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAdminFeeChangeLogsHistorical operation.
     * @callback module:api/CurveApi~curveGetAdminFeeChangeLogsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAdminFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AdminFeeChangeLogs (historical)
     * Gets adminFeeChangeLogs.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetAdminFeeChangeLogsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAdminFeeChangeLogDTO>}
     */
    curveGetAdminFeeChangeLogsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAdminFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/adminFeeChangeLogs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetAmplificationCoeffChangeLogsHistorical operation.
     * @callback module:api/CurveApi~curveGetAmplificationCoeffChangeLogsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAmplificationCoeffChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AmplificationCoeffChangeLogs (historical)
     * Gets amplificationCoeffChangeLogs.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetAmplificationCoeffChangeLogsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAmplificationCoeffChangeLogDTO>}
     */
    curveGetAmplificationCoeffChangeLogsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAmplificationCoeffChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/amplificationCoeffChangeLogs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetCoinsHistorical operation.
     * @callback module:api/CurveApi~curveGetCoinsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Coins (historical)
     * Gets coins.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] Identifier, format: (pool_id)-(coin_index).
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetCoinsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveCoinDTO>}
     */
    curveGetCoinsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/coins/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetContractVersionsHistorical operation.
     * @callback module:api/CurveApi~curveGetContractVersionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractVersionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ContractVersions (historical)
     * Gets contractVersions.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [address] 
     * @param {module:api/CurveApi~curveGetContractVersionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractVersionDTO>}
     */
    curveGetContractVersionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'address': opts['address']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractVersionDTO];
      return this.apiClient.callApi(
        '/dapps/curve/contractVersions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetContractsHistorical operation.
     * @callback module:api/CurveApi~curveGetContractsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contracts (historical)
     * Gets contracts.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {module:api/CurveApi~curveGetContractsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractDTO>}
     */
    curveGetContractsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractDTO];
      return this.apiClient.callApi(
        '/dapps/curve/contracts/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetDailyVolumesHistorical operation.
     * @callback module:api/CurveApi~curveGetDailyVolumesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveDailyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DailyVolumes (historical)
     * Gets dailyVolumes.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetDailyVolumesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveDailyVolumeDTO>}
     */
    curveGetDailyVolumesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveDailyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/dailyVolumes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetExchangesHistorical operation.
     * @callback module:api/CurveApi~curveGetExchangesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveExchangeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchanges (historical)
     * Gets exchanges.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetExchangesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveExchangeDTO>}
     */
    curveGetExchangesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveExchangeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/exchanges/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetFeeChangeLogsHistorical operation.
     * @callback module:api/CurveApi~curveGetFeeChangeLogsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FeeChangeLogs (historical)
     * Gets feeChangeLogs.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetFeeChangeLogsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveFeeChangeLogDTO>}
     */
    curveGetFeeChangeLogsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/feeChangeLogs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeDepositsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeDepositsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDepositDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeDeposits (historical)
     * Gets gaugeDeposits.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {module:api/CurveApi~curveGetGaugeDepositsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDepositDTO>}
     */
    curveGetGaugeDepositsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDepositDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeDeposits/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeLiquiditiesHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeLiquiditiesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeLiquidityDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeLiquidities (historical)
     * Gets gaugeLiquidities.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [user] 
     * @param {module:api/CurveApi~curveGetGaugeLiquiditiesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeLiquidityDTO>}
     */
    curveGetGaugeLiquiditiesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeLiquidityDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeLiquidities/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeTotalWeightsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeTotalWeightsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTotalWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTotalWeights (historical)
     * Gets gaugeTotalWeights.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {module:api/CurveApi~curveGetGaugeTotalWeightsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTotalWeightDTO>}
     */
    curveGetGaugeTotalWeightsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTotalWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeTotalWeights/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeTypeWeightsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeTypeWeightsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTypeWeights (historical)
     * Gets gaugeTypeWeights.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {module:api/CurveApi~curveGetGaugeTypeWeightsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeWeightDTO>}
     */
    curveGetGaugeTypeWeightsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeTypeWeights/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeTypesHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeTypesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTypes (historical)
     * Gets gaugeTypes.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [name] 
     * @param {module:api/CurveApi~curveGetGaugeTypesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeDTO>}
     */
    curveGetGaugeTypesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeTypes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeWeightVotesHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeWeightVotesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWeightVotes (historical)
     * Gets gaugeWeightVotes.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [user] 
     * @param {module:api/CurveApi~curveGetGaugeWeightVotesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightVoteDTO>}
     */
    curveGetGaugeWeightVotesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeWeightVotes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeWeightsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeWeightsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWeights (historical)
     * Gets gaugeWeights.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {module:api/CurveApi~curveGetGaugeWeightsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightDTO>}
     */
    curveGetGaugeWeightsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeWeights/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugeWithdrawsHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugeWithdrawsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWithdrawDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWithdraws (historical)
     * Gets gaugeWithdraws.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {module:api/CurveApi~curveGetGaugeWithdrawsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWithdrawDTO>}
     */
    curveGetGaugeWithdrawsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWithdrawDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeWithdraws/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetGaugesHistorical operation.
     * @callback module:api/CurveApi~curveGetGaugesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gauges (historical)
     * Gets gauges.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [address] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetGaugesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDTO>}
     */
    curveGetGaugesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'address': opts['address'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gauges/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetHourlyVolumesHistorical operation.
     * @callback module:api/CurveApi~curveGetHourlyVolumesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveHourlyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HourlyVolumes (historical)
     * Gets hourlyVolumes.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetHourlyVolumesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveHourlyVolumeDTO>}
     */
    curveGetHourlyVolumesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveHourlyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/hourlyVolumes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetLpTokensHistorical operation.
     * @callback module:api/CurveApi~curveGetLpTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveLpTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LpTokens (historical)
     * Gets lpTokens.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [address] 
     * @param {String} [name] 
     * @param {String} [symbol] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetLpTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveLpTokenDTO>}
     */
    curveGetLpTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'address': opts['address'],
        'name': opts['name'],
        'symbol': opts['symbol'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveLpTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/lpTokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetPoolsHistorical operation.
     * @callback module:api/CurveApi~curveGetPoolsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurvePoolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (historical)
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] Pool address.
     * @param {String} [name] Pool's human-readable name.
     * @param {module:api/CurveApi~curveGetPoolsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurvePoolDTO>}
     */
    curveGetPoolsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurvePoolDTO];
      return this.apiClient.callApi(
        '/dapps/curve/pools/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetProposalVotesHistorical operation.
     * @callback module:api/CurveApi~curveGetProposalVotesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProposalVotes (historical)
     * Gets proposalVotes.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {module:api/CurveApi~curveGetProposalVotesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalVoteDTO>}
     */
    curveGetProposalVotesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/proposalVotes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetProposalsHistorical operation.
     * @callback module:api/CurveApi~curveGetProposalsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Proposals (historical)
     * Gets proposals.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {module:api/CurveApi~curveGetProposalsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalDTO>}
     */
    curveGetProposalsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalDTO];
      return this.apiClient.callApi(
        '/dapps/curve/proposals/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetRemoveLiquidityEventsHistorical operation.
     * @callback module:api/CurveApi~curveGetRemoveLiquidityEventsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityEvents (historical)
     * Gets removeLiquidityEvents.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetRemoveLiquidityEventsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityEventDTO>}
     */
    curveGetRemoveLiquidityEventsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/removeLiquidityEvents/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetRemoveLiquidityOneEventsHistorical operation.
     * @callback module:api/CurveApi~curveGetRemoveLiquidityOneEventsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityOneEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityOneEvents (historical)
     * Gets removeLiquidityOneEvents.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetRemoveLiquidityOneEventsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityOneEventDTO>}
     */
    curveGetRemoveLiquidityOneEventsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityOneEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/removeLiquidityOneEvents/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetSystemStatesHistorical operation.
     * @callback module:api/CurveApi~curveGetSystemStatesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveSystemStateDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SystemStates (historical)
     * Gets systemStates.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] Singleton ID, equals to 'current'.
     * @param {module:api/CurveApi~curveGetSystemStatesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveSystemStateDTO>}
     */
    curveGetSystemStatesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveSystemStateDTO];
      return this.apiClient.callApi(
        '/dapps/curve/systemStates/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetTokensHistorical operation.
     * @callback module:api/CurveApi~curveGetTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (historical)
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [address] 
     * @param {String} [name] 
     * @param {String} [symbol] 
     * @param {module:api/CurveApi~curveGetTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTokenDTO>}
     */
    curveGetTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'address': opts['address'],
        'name': opts['name'],
        'symbol': opts['symbol']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/tokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetTransferOwnershipEventsHistorical operation.
     * @callback module:api/CurveApi~curveGetTransferOwnershipEventsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTransferOwnershipEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TransferOwnershipEvents (historical)
     * Gets transferOwnershipEvents.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetTransferOwnershipEventsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTransferOwnershipEventDTO>}
     */
    curveGetTransferOwnershipEventsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTransferOwnershipEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/transferOwnershipEvents/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetUnderlyingCoinsHistorical operation.
     * @callback module:api/CurveApi~curveGetUnderlyingCoinsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveUnderlyingCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnderlyingCoins (historical)
     * Gets underlyingCoins.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] Equals to: (pool_id)-(coin_index).
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetUnderlyingCoinsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveUnderlyingCoinDTO>}
     */
    curveGetUnderlyingCoinsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveUnderlyingCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/underlyingCoins/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetVotingAppsHistorical operation.
     * @callback module:api/CurveApi~curveGetVotingAppsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveVotingAppDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VotingApps (historical)
     * Gets votingApps.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] App address.
     * @param {String} [address] 
     * @param {module:api/CurveApi~curveGetVotingAppsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveVotingAppDTO>}
     */
    curveGetVotingAppsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'address': opts['address']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveVotingAppDTO];
      return this.apiClient.callApi(
        '/dapps/curve/votingApps/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGetWeeklyVolumesHistorical operation.
     * @callback module:api/CurveApi~curveGetWeeklyVolumesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveWeeklyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WeeklyVolumes (historical)
     * Gets weeklyVolumes.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] 
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveGetWeeklyVolumesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveWeeklyVolumeDTO>}
     */
    curveGetWeeklyVolumesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveWeeklyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/weeklyVolumes/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveHourlyVolumesCurrent operation.
     * @callback module:api/CurveApi~curveHourlyVolumesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveHourlyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HourlyVolumes (current)
     * Gets hourlyVolumes.
     * @param {module:api/CurveApi~curveHourlyVolumesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveHourlyVolumeDTO>}
     */
    curveHourlyVolumesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveHourlyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/hourlyVolumes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveLpTokensCurrent operation.
     * @callback module:api/CurveApi~curveLpTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveLpTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LpTokens (current)
     * Gets lpTokens.
     * @param {module:api/CurveApi~curveLpTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveLpTokenDTO>}
     */
    curveLpTokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveLpTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/lpTokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curvePoolsCurrent operation.
     * @callback module:api/CurveApi~curvePoolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurvePoolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (current)
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Pool address.
     * @param {module:api/CurveApi~curvePoolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurvePoolDTO>}
     */
    curvePoolsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurvePoolDTO];
      return this.apiClient.callApi(
        '/dapps/curve/pools/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveProposalVotesCurrent operation.
     * @callback module:api/CurveApi~curveProposalVotesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProposalVotes (current)
     * Gets proposalVotes.
     * @param {module:api/CurveApi~curveProposalVotesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalVoteDTO>}
     */
    curveProposalVotesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/proposalVotes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveProposalsCurrent operation.
     * @callback module:api/CurveApi~curveProposalsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Proposals (current)
     * Gets proposals.
     * @param {module:api/CurveApi~curveProposalsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalDTO>}
     */
    curveProposalsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalDTO];
      return this.apiClient.callApi(
        '/dapps/curve/proposals/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveRemoveLiquidityEventsCurrent operation.
     * @callback module:api/CurveApi~curveRemoveLiquidityEventsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityEvents (current)
     * Gets removeLiquidityEvents.
     * @param {module:api/CurveApi~curveRemoveLiquidityEventsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityEventDTO>}
     */
    curveRemoveLiquidityEventsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/removeLiquidityEvents/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveRemoveLiquidityOneEventsCurrent operation.
     * @callback module:api/CurveApi~curveRemoveLiquidityOneEventsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityOneEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityOneEvents (current)
     * Gets removeLiquidityOneEvents.
     * @param {module:api/CurveApi~curveRemoveLiquidityOneEventsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityOneEventDTO>}
     */
    curveRemoveLiquidityOneEventsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityOneEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/removeLiquidityOneEvents/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveSystemStatesCurrent operation.
     * @callback module:api/CurveApi~curveSystemStatesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveSystemStateDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SystemStates (current)
     * Gets systemStates.
     * @param {module:api/CurveApi~curveSystemStatesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveSystemStateDTO>}
     */
    curveSystemStatesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveSystemStateDTO];
      return this.apiClient.callApi(
        '/dapps/curve/systemStates/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveTokensCurrent operation.
     * @callback module:api/CurveApi~curveTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (current)
     * Gets tokens.
     * @param {module:api/CurveApi~curveTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTokenDTO>}
     */
    curveTokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveTransferOwnershipEventsCurrent operation.
     * @callback module:api/CurveApi~curveTransferOwnershipEventsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTransferOwnershipEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TransferOwnershipEvents (current)
     * Gets transferOwnershipEvents.
     * @param {module:api/CurveApi~curveTransferOwnershipEventsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTransferOwnershipEventDTO>}
     */
    curveTransferOwnershipEventsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTransferOwnershipEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/transferOwnershipEvents/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveUnderlyingCoinsCurrent operation.
     * @callback module:api/CurveApi~curveUnderlyingCoinsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveUnderlyingCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnderlyingCoins (current)
     * Gets underlyingCoins.
     * @param {module:api/CurveApi~curveUnderlyingCoinsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveUnderlyingCoinDTO>}
     */
    curveUnderlyingCoinsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveUnderlyingCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/underlyingCoins/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveVotingAppsCurrent operation.
     * @callback module:api/CurveApi~curveVotingAppsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveVotingAppDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VotingApps (current)
     * Gets votingApps.
     * @param {module:api/CurveApi~curveVotingAppsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveVotingAppDTO>}
     */
    curveVotingAppsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveVotingAppDTO];
      return this.apiClient.callApi(
        '/dapps/curve/votingApps/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveWeeklyVolumesCurrent operation.
     * @callback module:api/CurveApi~curveWeeklyVolumesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveWeeklyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WeeklyVolumes (current)
     * Gets weeklyVolumes.
     * @param {module:api/CurveApi~curveWeeklyVolumesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveWeeklyVolumeDTO>}
     */
    curveWeeklyVolumesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveWeeklyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/weeklyVolumes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
