/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UniswapV3BundleV3DTO from '../model/UniswapV3BundleV3DTO';
import UniswapV3BurnV3DTO from '../model/UniswapV3BurnV3DTO';
import UniswapV3FactoryV3DTO from '../model/UniswapV3FactoryV3DTO';
import UniswapV3MintV3DTO from '../model/UniswapV3MintV3DTO';
import UniswapV3PoolDayDataV3DTO from '../model/UniswapV3PoolDayDataV3DTO';
import UniswapV3PoolHourDataV3DTO from '../model/UniswapV3PoolHourDataV3DTO';
import UniswapV3PoolV3DTO from '../model/UniswapV3PoolV3DTO';
import UniswapV3PositionSnapshotV3DTO from '../model/UniswapV3PositionSnapshotV3DTO';
import UniswapV3PositionV3DTO from '../model/UniswapV3PositionV3DTO';
import UniswapV3SwapV3DTO from '../model/UniswapV3SwapV3DTO';
import UniswapV3TickDayDataV3DTO from '../model/UniswapV3TickDayDataV3DTO';
import UniswapV3TickV3DTO from '../model/UniswapV3TickV3DTO';
import UniswapV3TokenHourDataV3DTO from '../model/UniswapV3TokenHourDataV3DTO';
import UniswapV3TokenV3DTO from '../model/UniswapV3TokenV3DTO';
import UniswapV3TokenV3DayDataDTO from '../model/UniswapV3TokenV3DayDataDTO';
import UniswapV3TransactionV3DTO from '../model/UniswapV3TransactionV3DTO';
import UniswapV3UniswapDayDataV3DTO from '../model/UniswapV3UniswapDayDataV3DTO';

/**
* UniswapV3 service.
* @module api/UniswapV3Api
* @version v1
*/
export default class UniswapV3Api {

    /**
    * Constructs a new UniswapV3Api. 
    * @alias module:api/UniswapV3Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uniswapV3GetBundlesCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetBundlesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3BundleV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetBundles (current)
     * Gets bundles.
     * @param {module:api/UniswapV3Api~uniswapV3GetBundlesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3BundleV3DTO>}
     */
    uniswapV3GetBundlesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3BundleV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/bundles/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetBundlesHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetBundlesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3BundleV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetBundles (historical)
     * Gets bundles.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/UniswapV3Api~uniswapV3GetBundlesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3BundleV3DTO>}
     */
    uniswapV3GetBundlesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3BundleV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/bundles/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetBurnsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetBurnsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3BurnV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetBurns (current)
     * Gets burns.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetBurnsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3BurnV3DTO>}
     */
    uniswapV3GetBurnsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3BurnV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/burns/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetBurnsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetBurnsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3BurnV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetBurns (historical)
     * Gets burns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetBurnsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3BurnV3DTO>}
     */
    uniswapV3GetBurnsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3BurnV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/burns/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetDayDataCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetDayDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3UniswapDayDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDayData (current)
     * Gets uniswapv3 day data.
     * @param {module:api/UniswapV3Api~uniswapV3GetDayDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3UniswapDayDataV3DTO>}
     */
    uniswapV3GetDayDataCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3UniswapDayDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/dayData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetDayDataHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetDayDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3UniswapDayDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetDayData (historical)
     * Gets uniswapv3 day data.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/UniswapV3Api~uniswapV3GetDayDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3UniswapDayDataV3DTO>}
     */
    uniswapV3GetDayDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3UniswapDayDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/dayData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetFactoryCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetFactoryCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3FactoryV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetFactory (current)
     * Gets factory.
     * @param {module:api/UniswapV3Api~uniswapV3GetFactoryCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3FactoryV3DTO>}
     */
    uniswapV3GetFactoryCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3FactoryV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/factory/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetFactoryHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetFactoryHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3FactoryV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetFactory (historical)
     * Gets factory.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/UniswapV3Api~uniswapV3GetFactoryHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3FactoryV3DTO>}
     */
    uniswapV3GetFactoryHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3FactoryV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/factory/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetMintsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetMintsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3MintV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetMints (current)
     * Gets mints.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetMintsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3MintV3DTO>}
     */
    uniswapV3GetMintsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3MintV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/mints/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetMintsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetMintsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3MintV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetMints (historical)
     * Gets mints.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetMintsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3MintV3DTO>}
     */
    uniswapV3GetMintsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3MintV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/mints/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPoolsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPoolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPools (current) 🔥
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPoolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolV3DTO>}
     */
    uniswapV3GetPoolsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/pools/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPoolsDayDataCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPoolsDayDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolDayDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPoolsDayData (current)
     * Gets pools day data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPoolsDayDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolDayDataV3DTO>}
     */
    uniswapV3GetPoolsDayDataCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolDayDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/poolsDayData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPoolsDayDataHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPoolsDayDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolDayDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPoolsDayData (historical)
     * Gets pools day data.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPoolsDayDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolDayDataV3DTO>}
     */
    uniswapV3GetPoolsDayDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolDayDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/poolsDayData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPoolsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPoolsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPools (historical) 🔥
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPoolsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolV3DTO>}
     */
    uniswapV3GetPoolsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/pools/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPoolsHourDataCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPoolsHourDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolHourDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPoolsHourData (current)
     * Gets pools hour data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPoolsHourDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolHourDataV3DTO>}
     */
    uniswapV3GetPoolsHourDataCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolHourDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/poolsHourData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPoolsHourDataHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPoolsHourDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolHourDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPoolsHourData (historical)
     * Gets pools hour data.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPoolsHourDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolHourDataV3DTO>}
     */
    uniswapV3GetPoolsHourDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolHourDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/poolsHourData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPositionsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPositionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PositionV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPositions (current)
     * Gets positions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPositionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PositionV3DTO>}
     */
    uniswapV3GetPositionsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PositionV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/positions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPositionsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPositionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PositionV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPositions (historical)
     * Gets positions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPositionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PositionV3DTO>}
     */
    uniswapV3GetPositionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PositionV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/positions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPositionsSnaphotsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPositionsSnaphotsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PositionSnapshotV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPositionsSnaphots (historical)
     * Gets positions snapshots.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPositionsSnaphotsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PositionSnapshotV3DTO>}
     */
    uniswapV3GetPositionsSnaphotsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PositionSnapshotV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/positionsSnapshots/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPositionsSnapshotsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPositionsSnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PositionSnapshotV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetPositionsSnapshots (current)
     * Gets positions snapshots.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetPositionsSnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PositionSnapshotV3DTO>}
     */
    uniswapV3GetPositionsSnapshotsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PositionSnapshotV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/positionSnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetSwapsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetSwapsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3SwapV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetSwaps (current) 🔥
     * Gets swaps.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetSwapsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3SwapV3DTO>}
     */
    uniswapV3GetSwapsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3SwapV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/swaps/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetSwapsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetSwapsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3SwapV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetSwaps (historical) 🔥
     * Gets swaps.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetSwapsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3SwapV3DTO>}
     */
    uniswapV3GetSwapsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3SwapV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/swaps/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTicksCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTicksCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TickV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTicks (current)
     * Gets ticks.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTicksCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TickV3DTO>}
     */
    uniswapV3GetTicksCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TickV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/ticks/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTicksDayDataCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTicksDayDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TickDayDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTicksDayData (current)
     * Gets ticks day data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTicksDayDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TickDayDataV3DTO>}
     */
    uniswapV3GetTicksDayDataCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TickDayDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/ticksDayData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTicksDayDataHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTicksDayDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TickDayDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTicksDayData (historical)
     * Gets ticks day data.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTicksDayDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TickDayDataV3DTO>}
     */
    uniswapV3GetTicksDayDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TickDayDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/ticksDayData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTicksHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTicksHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TickV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTicks (historical)
     * Gets ticks.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTicksHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TickV3DTO>}
     */
    uniswapV3GetTicksHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TickV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/ticks/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTokensCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTokens (current) 🔥
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTokenId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenV3DTO>}
     */
    uniswapV3GetTokensCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_token_id': opts['filterTokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTokensDayDataCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTokensDayDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenV3DayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTokensDayData (current)
     * Gets tokens day data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTokenId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTokensDayDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenV3DayDataDTO>}
     */
    uniswapV3GetTokensDayDataCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_token_id': opts['filterTokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenV3DayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokensDayData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTokensDayDataHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTokensDayDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenV3DayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTokensDayData (historical)
     * Gets tokens day data.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.tokenId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTokensDayDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenV3DayDataDTO>}
     */
    uniswapV3GetTokensDayDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'tokenId': opts['tokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenV3DayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokensDayData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTokensHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTokens (historical) 🔥
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.tokenId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenV3DTO>}
     */
    uniswapV3GetTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'tokenId': opts['tokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTokensHourDataCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTokensHourDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenHourDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTokensHourData (current)
     * Gets tokens hour data.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterTokenId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTokensHourDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenHourDataV3DTO>}
     */
    uniswapV3GetTokensHourDataCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_token_id': opts['filterTokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenHourDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokensHourData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTokensHourDataHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTokensHourDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenHourDataV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTokensHourData (historical)
     * Gets tokens hour data.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.tokenId 
     * @param {module:api/UniswapV3Api~uniswapV3GetTokensHourDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenHourDataV3DTO>}
     */
    uniswapV3GetTokensHourDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'tokenId': opts['tokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenHourDataV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokensHourData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTransactionsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTransactionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TransactionV3DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTransactions (historical)
     * Gets transactions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/UniswapV3Api~uniswapV3GetTransactionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TransactionV3DTO>}
     */
    uniswapV3GetTransactionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TransactionV3DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/transactions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
