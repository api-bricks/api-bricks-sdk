/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UniswapV3BundleDTO from '../model/UniswapV3BundleDTO';
import UniswapV3BurnDTO from '../model/UniswapV3BurnDTO';
import UniswapV3FactoryDTO from '../model/UniswapV3FactoryDTO';
import UniswapV3MintDTO from '../model/UniswapV3MintDTO';
import UniswapV3PoolDTO from '../model/UniswapV3PoolDTO';
import UniswapV3PoolDayDataDTO from '../model/UniswapV3PoolDayDataDTO';
import UniswapV3PoolHourDataDTO from '../model/UniswapV3PoolHourDataDTO';
import UniswapV3PositionDTO from '../model/UniswapV3PositionDTO';
import UniswapV3PositionSnapshotDTO from '../model/UniswapV3PositionSnapshotDTO';
import UniswapV3SwapDTO from '../model/UniswapV3SwapDTO';
import UniswapV3TickDTO from '../model/UniswapV3TickDTO';
import UniswapV3TickDayDataDTO from '../model/UniswapV3TickDayDataDTO';
import UniswapV3TokenDTO from '../model/UniswapV3TokenDTO';
import UniswapV3TokenHourDataDTO from '../model/UniswapV3TokenHourDataDTO';
import UniswapV3TokenV3DayDataDTO from '../model/UniswapV3TokenV3DayDataDTO';
import UniswapV3TransactionDTO from '../model/UniswapV3TransactionDTO';
import UniswapV3UniswapDayDataDTO from '../model/UniswapV3UniswapDayDataDTO';

/**
* UniswapV3 service.
* @module api/UniswapV3Api
* @version v1
*/
export default class UniswapV3Api {

    /**
    * Constructs a new UniswapV3Api. 
    * @alias module:api/UniswapV3Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uniswapV3BundlesCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3BundlesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3BundleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bundles (current)
     * Gets bundles.
     * @param {module:api/UniswapV3Api~uniswapV3BundlesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3BundleDTO>}
     */
    uniswapV3BundlesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3BundleDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/bundles/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3BurnsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3BurnsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3BurnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burns (current)
     * Gets burns.
     * @param {module:api/UniswapV3Api~uniswapV3BurnsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3BurnDTO>}
     */
    uniswapV3BurnsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3BurnDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/burns/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3FactorysCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3FactorysCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3FactoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Factorys (current)
     * Gets factorys.
     * @param {module:api/UniswapV3Api~uniswapV3FactorysCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3FactoryDTO>}
     */
    uniswapV3FactorysCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3FactoryDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/factorys/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetBundlesHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetBundlesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3BundleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bundles (historical)
     * Gets bundles.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id 
     * @param {module:api/UniswapV3Api~uniswapV3GetBundlesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3BundleDTO>}
     */
    uniswapV3GetBundlesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3BundleDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/bundles/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetBurnsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetBurnsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3BurnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burns (historical)
     * Gets burns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Transaction hash + '#' + index in mints Transaction array.
     * @param {String} opts.pool Pool position is within.
     * @param {String} opts.token0 Reference to token0 as stored in pool contract.
     * @param {String} opts.token1 Reference to token1 as stored in pool contract.
     * @param {module:api/UniswapV3Api~uniswapV3GetBurnsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3BurnDTO>}
     */
    uniswapV3GetBurnsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool'],
        'token_0': opts['token0'],
        'token_1': opts['token1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3BurnDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/burns/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetFactorysHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetFactorysHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3FactoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Factorys (historical)
     * Gets factorys.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Factory address.
     * @param {module:api/UniswapV3Api~uniswapV3GetFactorysHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3FactoryDTO>}
     */
    uniswapV3GetFactorysHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3FactoryDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/factorys/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetMintsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetMintsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3MintDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mints (historical)
     * Gets mints.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Transaction hash + '#' + index in mints Transaction array.
     * @param {String} opts.pool Pool address.
     * @param {String} opts.token0 Reference to token0 as stored in pool contract.
     * @param {String} opts.token1 Reference to token1 as stored in pool contract.
     * @param {module:api/UniswapV3Api~uniswapV3GetMintsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3MintDTO>}
     */
    uniswapV3GetMintsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool'],
        'token_0': opts['token0'],
        'token_1': opts['token1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3MintDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/mints/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPoolDayDatasHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPoolDayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PoolDayDatas (historical)
     * Gets poolDayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.pool 
     * @param {module:api/UniswapV3Api~uniswapV3GetPoolDayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolDayDataDTO>}
     */
    uniswapV3GetPoolDayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/poolDayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPoolHourDatasHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPoolHourDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PoolHourDatas (historical)
     * Gets poolHourDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.pool 
     * @param {module:api/UniswapV3Api~uniswapV3GetPoolHourDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolHourDataDTO>}
     */
    uniswapV3GetPoolHourDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/poolHourDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPoolsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPoolsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (historical)
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Pool address.
     * @param {String} opts.token0 Reference to token0 as stored in pool contract.
     * @param {String} opts.token1 Reference to token1 as stored in pool contract.
     * @param {module:api/UniswapV3Api~uniswapV3GetPoolsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolDTO>}
     */
    uniswapV3GetPoolsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'token_0': opts['token0'],
        'token_1': opts['token1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/pools/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPositionSnapshotsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPositionSnapshotsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PositionSnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PositionSnapshots (historical)
     * Gets positionSnapshots.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.pool 
     * @param {module:api/UniswapV3Api~uniswapV3GetPositionSnapshotsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PositionSnapshotDTO>}
     */
    uniswapV3GetPositionSnapshotsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PositionSnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/positionSnapshots/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetPositionsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetPositionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PositionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Positions (historical)
     * Gets positions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id NFT token identifier.
     * @param {String} opts.pool Pool position is within.
     * @param {String} opts.token0 Reference to token0 as stored in pair contract.
     * @param {String} opts.token1 Reference to token1 as stored in pair contract.
     * @param {module:api/UniswapV3Api~uniswapV3GetPositionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PositionDTO>}
     */
    uniswapV3GetPositionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool'],
        'token_0': opts['token0'],
        'token_1': opts['token1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PositionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/positions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetSwapsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetSwapsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3SwapDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (historical)
     * Gets swaps.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Identifier, format: transaction hash + \"#\" + index in swaps Transaction array.
     * @param {String} opts.pool Pool swap occured within.
     * @param {String} opts.token0 Reference to token0 as stored in pair contract.
     * @param {String} opts.token1 Reference to token1 as stored in pair contract.
     * @param {module:api/UniswapV3Api~uniswapV3GetSwapsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3SwapDTO>}
     */
    uniswapV3GetSwapsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool'],
        'token_0': opts['token0'],
        'token_1': opts['token1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3SwapDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/swaps/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTickDayDatasHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTickDayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TickDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TickDayDatas (historical)
     * Gets tickDayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.pool 
     * @param {module:api/UniswapV3Api~uniswapV3GetTickDayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TickDayDataDTO>}
     */
    uniswapV3GetTickDayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TickDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tickDayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTicksHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTicksHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TickDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ticks (historical)
     * Gets ticks.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.pool 
     * @param {module:api/UniswapV3Api~uniswapV3GetTicksHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TickDTO>}
     */
    uniswapV3GetTicksHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TickDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/ticks/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTokenHourDatasHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTokenHourDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenHourDatas (historical)
     * Gets tokenHourDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Token address concatendated with date.
     * @param {module:api/UniswapV3Api~uniswapV3GetTokenHourDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenHourDataDTO>}
     */
    uniswapV3GetTokenHourDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokenHourDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTokenV3DayDatasHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTokenV3DayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenV3DayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenV3DayDatas (historical)
     * Gets tokenV3DayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Token address concatendated with date.
     * @param {module:api/UniswapV3Api~uniswapV3GetTokenV3DayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenV3DayDataDTO>}
     */
    uniswapV3GetTokenV3DayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenV3DayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokenV3DayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTokensHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (historical)
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Token address.
     * @param {String} opts.symbol Token symbol.
     * @param {String} opts.name Token name.
     * @param {module:api/UniswapV3Api~uniswapV3GetTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenDTO>}
     */
    uniswapV3GetTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'symbol': opts['symbol'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetTransactionsHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetTransactionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TransactionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions (historical)
     * Gets transactions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Transaction hash.
     * @param {module:api/UniswapV3Api~uniswapV3GetTransactionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TransactionDTO>}
     */
    uniswapV3GetTransactionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TransactionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/transactions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3GetUniswapDayDatasHistorical operation.
     * @callback module:api/UniswapV3Api~uniswapV3GetUniswapDayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3UniswapDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UniswapDayDatas (historical)
     * Gets uniswapDayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Timestamp rounded to current day by dividing by 86400.
     * @param {module:api/UniswapV3Api~uniswapV3GetUniswapDayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3UniswapDayDataDTO>}
     */
    uniswapV3GetUniswapDayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3UniswapDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/uniswapDayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3MintsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3MintsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3MintDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mints (current)
     * Gets mints.
     * @param {module:api/UniswapV3Api~uniswapV3MintsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3MintDTO>}
     */
    uniswapV3MintsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3MintDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/mints/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3PoolDayDatasCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3PoolDayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PoolDayDatas (current)
     * Gets poolDayDatas.
     * @param {module:api/UniswapV3Api~uniswapV3PoolDayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolDayDataDTO>}
     */
    uniswapV3PoolDayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/poolDayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3PoolHourDatasCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3PoolHourDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PoolHourDatas (current)
     * Gets poolHourDatas.
     * @param {module:api/UniswapV3Api~uniswapV3PoolHourDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolHourDataDTO>}
     */
    uniswapV3PoolHourDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/poolHourDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3PoolsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3PoolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PoolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (current)
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Pool address.
     * @param {module:api/UniswapV3Api~uniswapV3PoolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PoolDTO>}
     */
    uniswapV3PoolsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PoolDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/pools/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3PositionSnapshotsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3PositionSnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PositionSnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PositionSnapshots (current)
     * Gets positionSnapshots.
     * @param {module:api/UniswapV3Api~uniswapV3PositionSnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PositionSnapshotDTO>}
     */
    uniswapV3PositionSnapshotsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PositionSnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/positionSnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3PositionsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3PositionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3PositionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Positions (current)
     * Gets positions.
     * @param {module:api/UniswapV3Api~uniswapV3PositionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3PositionDTO>}
     */
    uniswapV3PositionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3PositionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/positions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3SwapsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3SwapsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3SwapDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (current)
     * Gets swaps.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pool Pool swap occured within.
     * @param {module:api/UniswapV3Api~uniswapV3SwapsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3SwapDTO>}
     */
    uniswapV3SwapsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3SwapDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/swaps/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3TickDayDatasCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3TickDayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TickDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TickDayDatas (current)
     * Gets tickDayDatas.
     * @param {module:api/UniswapV3Api~uniswapV3TickDayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TickDayDataDTO>}
     */
    uniswapV3TickDayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TickDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tickDayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3TicksCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3TicksCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TickDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ticks (current)
     * Gets ticks.
     * @param {module:api/UniswapV3Api~uniswapV3TicksCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TickDTO>}
     */
    uniswapV3TicksCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TickDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/ticks/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3TokenHourDatasCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3TokenHourDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenHourDatas (current)
     * Gets tokenHourDatas.
     * @param {module:api/UniswapV3Api~uniswapV3TokenHourDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenHourDataDTO>}
     */
    uniswapV3TokenHourDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokenHourDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3TokenV3DayDatasCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3TokenV3DayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenV3DayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenV3DayDatas (current)
     * Gets tokenV3DayDatas.
     * @param {module:api/UniswapV3Api~uniswapV3TokenV3DayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenV3DayDataDTO>}
     */
    uniswapV3TokenV3DayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenV3DayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokenV3DayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3TokensCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3TokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (current)
     * Gets tokens.
     * @param {module:api/UniswapV3Api~uniswapV3TokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TokenDTO>}
     */
    uniswapV3TokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TokenDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3TransactionsCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3TransactionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3TransactionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions (current)
     * Gets transactions.
     * @param {module:api/UniswapV3Api~uniswapV3TransactionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3TransactionDTO>}
     */
    uniswapV3TransactionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3TransactionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/transactions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV3UniswapDayDatasCurrent operation.
     * @callback module:api/UniswapV3Api~uniswapV3UniswapDayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV3UniswapDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UniswapDayDatas (current)
     * Gets uniswapDayDatas.
     * @param {module:api/UniswapV3Api~uniswapV3UniswapDayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV3UniswapDayDataDTO>}
     */
    uniswapV3UniswapDayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV3UniswapDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv3/uniswapDayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
