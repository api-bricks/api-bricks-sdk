/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UniswapV2BundleDTO from '../model/UniswapV2BundleDTO';
import UniswapV2BurnDTO from '../model/UniswapV2BurnDTO';
import UniswapV2LiquidityPositionDTO from '../model/UniswapV2LiquidityPositionDTO';
import UniswapV2LiquidityPositionSnapshotDTO from '../model/UniswapV2LiquidityPositionSnapshotDTO';
import UniswapV2MintDTO from '../model/UniswapV2MintDTO';
import UniswapV2PairDTO from '../model/UniswapV2PairDTO';
import UniswapV2PairDayDataDTO from '../model/UniswapV2PairDayDataDTO';
import UniswapV2PairHourDataDTO from '../model/UniswapV2PairHourDataDTO';
import UniswapV2SwapDTO from '../model/UniswapV2SwapDTO';
import UniswapV2TokenDTO from '../model/UniswapV2TokenDTO';
import UniswapV2TokenDayDataDTO from '../model/UniswapV2TokenDayDataDTO';
import UniswapV2TransactionDTO from '../model/UniswapV2TransactionDTO';
import UniswapV2UniswapDayDataDTO from '../model/UniswapV2UniswapDayDataDTO';
import UniswapV2UniswapFactoryDTO from '../model/UniswapV2UniswapFactoryDTO';
import UniswapV2UserDTO from '../model/UniswapV2UserDTO';

/**
* UniswapV2 service.
* @module api/UniswapV2Api
* @version v1
*/
export default class UniswapV2Api {

    /**
    * Constructs a new UniswapV2Api. 
    * @alias module:api/UniswapV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uniswapV2BundlesCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2BundlesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2BundleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bundles (current)
     * Gets bundles.
     * @param {module:api/UniswapV2Api~uniswapV2BundlesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2BundleDTO>}
     */
    uniswapV2BundlesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2BundleDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/bundles/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2BurnsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2BurnsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2BurnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burns (current)
     * Gets burns.
     * @param {module:api/UniswapV2Api~uniswapV2BurnsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2BurnDTO>}
     */
    uniswapV2BurnsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2BurnDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/burns/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetBundlesHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetBundlesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2BundleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bundles (historical) ðŸ”¥
     * Gets bundles.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Constant 1.
     * @param {module:api/UniswapV2Api~uniswapV2GetBundlesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2BundleDTO>}
     */
    uniswapV2GetBundlesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2BundleDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/bundles/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetBurnsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetBurnsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2BurnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burns (historical) ðŸ”¥
     * Gets burns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Transaction hash plus index in the transaction burn array
     * @param {String} opts.pair Reference to pair.
     * @param {module:api/UniswapV2Api~uniswapV2GetBurnsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2BurnDTO>}
     */
    uniswapV2GetBurnsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2BurnDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/burns/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetLiquidityPositionSnapshotsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetLiquidityPositionSnapshotsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2LiquidityPositionSnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositionSnapshots (historical) ðŸ”¥
     * Gets liquidityPositionSnapshots.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.user 
     * @param {String} opts.pair 
     * @param {module:api/UniswapV2Api~uniswapV2GetLiquidityPositionSnapshotsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2LiquidityPositionSnapshotDTO>}
     */
    uniswapV2GetLiquidityPositionSnapshotsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'user': opts['user'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2LiquidityPositionSnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/liquidityPositionSnapshots/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetLiquidityPositionsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetLiquidityPositionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2LiquidityPositionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositions (historical) ðŸ”¥
     * Gets liquidityPositions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id User address and pair address concatenated with a dash.
     * @param {String} opts.user Reference to user.
     * @param {String} opts.pair Reference to the pair liquidity is being provided on.
     * @param {module:api/UniswapV2Api~uniswapV2GetLiquidityPositionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2LiquidityPositionDTO>}
     */
    uniswapV2GetLiquidityPositionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'user': opts['user'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2LiquidityPositionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/liquidityPositions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetMintsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetMintsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2MintDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mints (historical) ðŸ”¥
     * Gets mints.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Transaction hash plus index in the transaction mint array.
     * @param {String} opts.pair Reference to pair.
     * @param {module:api/UniswapV2Api~uniswapV2GetMintsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2MintDTO>}
     */
    uniswapV2GetMintsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2MintDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/mints/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetPairDayDatasHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetPairDayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairDayDatas (historical) ðŸ”¥
     * Gets pairDayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id 
     * @param {String} opts.token0 Reference to token0.
     * @param {String} opts.token1 Reference to token1.
     * @param {module:api/UniswapV2Api~uniswapV2GetPairDayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairDayDataDTO>}
     */
    uniswapV2GetPairDayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'token_0': opts['token0'],
        'token_1': opts['token1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pairDayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetPairHourDatasHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetPairHourDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairHourDatas (historical) ðŸ”¥
     * Gets pairHourDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id 
     * @param {String} opts.pair Address for pair contract.
     * @param {module:api/UniswapV2Api~uniswapV2GetPairHourDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairHourDataDTO>}
     */
    uniswapV2GetPairHourDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pairHourDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetPairsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetPairsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pairs (historical) ðŸ”¥
     * Gets pairs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Pair contract address.
     * @param {String} opts.token0 Reference to token0 as stored in pair contract.
     * @param {String} opts.token1 Reference to token1 as stored in pair contract.
     * @param {module:api/UniswapV2Api~uniswapV2GetPairsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairDTO>}
     */
    uniswapV2GetPairsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'token_0': opts['token0'],
        'token_1': opts['token1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pairs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetPoolsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetPoolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (current) ðŸ”¥
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetPoolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairDTO>}
     */
    uniswapV2GetPoolsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pools/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetSwapsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetSwapsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2SwapDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (current) ðŸ”¥
     * Gets swaps.
     * @param {module:api/UniswapV2Api~uniswapV2GetSwapsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2SwapDTO>}
     */
    uniswapV2GetSwapsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2SwapDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/swaps/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetSwapsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetSwapsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2SwapDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (historical) ðŸ”¥
     * Gets swaps.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Transaction hash plus index in Transaction swap array.
     * @param {String} opts.pair Reference to pair.
     * @param {module:api/UniswapV2Api~uniswapV2GetSwapsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2SwapDTO>}
     */
    uniswapV2GetSwapsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2SwapDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/swaps/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetTokenDayDatasHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetTokenDayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TokenDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenDayDatas (historical) ðŸ”¥
     * Gets tokenDayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Token address and day id (day start timestamp in unix / 86400) concatenated with a dash.
     * @param {module:api/UniswapV2Api~uniswapV2GetTokenDayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TokenDayDataDTO>}
     */
    uniswapV2GetTokenDayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TokenDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/tokenDayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetTokensCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (current) ðŸ”¥
     * Gets tokens.
     * @param {module:api/UniswapV2Api~uniswapV2GetTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TokenDTO>}
     */
    uniswapV2GetTokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TokenDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetTokensHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (historical) ðŸ”¥
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Token address.
     * @param {String} opts.symbol Token symbol.
     * @param {String} opts.name Token name.
     * @param {module:api/UniswapV2Api~uniswapV2GetTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TokenDTO>}
     */
    uniswapV2GetTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'symbol': opts['symbol'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TokenDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/tokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetTransactionsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetTransactionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TransactionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions (historical) ðŸ”¥
     * Gets transactions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Ethereum transaction hash.
     * @param {module:api/UniswapV2Api~uniswapV2GetTransactionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TransactionDTO>}
     */
    uniswapV2GetTransactionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TransactionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/transactions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetUniswapDayDatasHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetUniswapDayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UniswapDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UniswapDayDatas (historical) ðŸ”¥
     * Gets uniswapDayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Unix timestamp for start of day / 86400 giving a unique day index.
     * @param {module:api/UniswapV2Api~uniswapV2GetUniswapDayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UniswapDayDataDTO>}
     */
    uniswapV2GetUniswapDayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UniswapDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/uniswapDayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetUniswapFactorysHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetUniswapFactorysHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UniswapFactoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UniswapFactorys (historical) ðŸ”¥
     * Gets uniswapFactorys.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Factory address.
     * @param {module:api/UniswapV2Api~uniswapV2GetUniswapFactorysHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UniswapFactoryDTO>}
     */
    uniswapV2GetUniswapFactorysHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UniswapFactoryDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/uniswapFactorys/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetUsersHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetUsersHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users (historical) ðŸ”¥
     * Gets users.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id User address.
     * @param {module:api/UniswapV2Api~uniswapV2GetUsersHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UserDTO>}
     */
    uniswapV2GetUsersHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UserDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/users/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2LiquidityPositionSnapshotsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2LiquidityPositionSnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2LiquidityPositionSnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositionSnapshots (current)
     * Gets liquidityPositionSnapshots.
     * @param {module:api/UniswapV2Api~uniswapV2LiquidityPositionSnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2LiquidityPositionSnapshotDTO>}
     */
    uniswapV2LiquidityPositionSnapshotsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2LiquidityPositionSnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/liquidityPositionSnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2LiquidityPositionsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2LiquidityPositionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2LiquidityPositionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositions (current)
     * Gets liquidityPositions.
     * @param {module:api/UniswapV2Api~uniswapV2LiquidityPositionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2LiquidityPositionDTO>}
     */
    uniswapV2LiquidityPositionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2LiquidityPositionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/liquidityPositions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2MintsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2MintsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2MintDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mints (current)
     * Gets mints.
     * @param {module:api/UniswapV2Api~uniswapV2MintsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2MintDTO>}
     */
    uniswapV2MintsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2MintDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/mints/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2PairDayDatasCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2PairDayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairDayDatas (current)
     * Gets pairDayDatas.
     * @param {module:api/UniswapV2Api~uniswapV2PairDayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairDayDataDTO>}
     */
    uniswapV2PairDayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pairDayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2PairHourDatasCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2PairHourDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairHourDatas (current)
     * Gets pairHourDatas.
     * @param {module:api/UniswapV2Api~uniswapV2PairHourDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairHourDataDTO>}
     */
    uniswapV2PairHourDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pairHourDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2PairsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2PairsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pairs (current)
     * Gets pairs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Pair contract address.
     * @param {module:api/UniswapV2Api~uniswapV2PairsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairDTO>}
     */
    uniswapV2PairsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pairs/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2TokenDayDatasCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2TokenDayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TokenDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenDayDatas (current)
     * Gets tokenDayDatas.
     * @param {module:api/UniswapV2Api~uniswapV2TokenDayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TokenDayDataDTO>}
     */
    uniswapV2TokenDayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TokenDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/tokenDayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2TransactionsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2TransactionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TransactionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions (current)
     * Gets transactions.
     * @param {module:api/UniswapV2Api~uniswapV2TransactionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TransactionDTO>}
     */
    uniswapV2TransactionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TransactionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/transactions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2UniswapDayDatasCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2UniswapDayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UniswapDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UniswapDayDatas (current)
     * Gets uniswapDayDatas.
     * @param {module:api/UniswapV2Api~uniswapV2UniswapDayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UniswapDayDataDTO>}
     */
    uniswapV2UniswapDayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UniswapDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/uniswapDayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2UniswapFactorysCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2UniswapFactorysCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UniswapFactoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UniswapFactorys (current)
     * Gets uniswapFactorys.
     * @param {module:api/UniswapV2Api~uniswapV2UniswapFactorysCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UniswapFactoryDTO>}
     */
    uniswapV2UniswapFactorysCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UniswapFactoryDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/uniswapFactorys/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2UsersCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2UsersCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users (current)
     * Gets users.
     * @param {module:api/UniswapV2Api~uniswapV2UsersCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UserDTO>}
     */
    uniswapV2UsersCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UserDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/users/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
