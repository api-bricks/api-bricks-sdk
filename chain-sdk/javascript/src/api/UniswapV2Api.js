/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UniswapV2BundleV2DTO from '../model/UniswapV2BundleV2DTO';
import UniswapV2BurnV2DTO from '../model/UniswapV2BurnV2DTO';
import UniswapV2LiquidityPositionSnapshotV2DTO from '../model/UniswapV2LiquidityPositionSnapshotV2DTO';
import UniswapV2LiquidityPositionV2DTO from '../model/UniswapV2LiquidityPositionV2DTO';
import UniswapV2MintV2DTO from '../model/UniswapV2MintV2DTO';
import UniswapV2PairDayDataV2DTO from '../model/UniswapV2PairDayDataV2DTO';
import UniswapV2PairHourDataV2DTO from '../model/UniswapV2PairHourDataV2DTO';
import UniswapV2PairV2DTO from '../model/UniswapV2PairV2DTO';
import UniswapV2SwapV2DTO from '../model/UniswapV2SwapV2DTO';
import UniswapV2TokenDayDataV2DTO from '../model/UniswapV2TokenDayDataV2DTO';
import UniswapV2TokenV2DTO from '../model/UniswapV2TokenV2DTO';
import UniswapV2TransactionV2DTO from '../model/UniswapV2TransactionV2DTO';
import UniswapV2UniswapDayDataV2DTO from '../model/UniswapV2UniswapDayDataV2DTO';
import UniswapV2UniswapFactoryV2DTO from '../model/UniswapV2UniswapFactoryV2DTO';
import UniswapV2UserV2DTO from '../model/UniswapV2UserV2DTO';

/**
* UniswapV2 service.
* @module api/UniswapV2Api
* @version v1
*/
export default class UniswapV2Api {

    /**
    * Constructs a new UniswapV2Api. 
    * @alias module:api/UniswapV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uniswapV2GetBundlesHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetBundlesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2BundleV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bundles (historical)
     * Gets bundles.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/UniswapV2Api~uniswapV2GetBundlesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2BundleV2DTO>}
     */
    uniswapV2GetBundlesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2BundleV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/bundles/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetBurnsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetBurnsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2BurnV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burns (historical)
     * Gets burns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetBurnsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2BurnV2DTO>}
     */
    uniswapV2GetBurnsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2BurnV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/burns/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetDayDataHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetDayDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UniswapDayDataV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DayData (historical)
     * Gets uniswapv2 day data.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/UniswapV2Api~uniswapV2GetDayDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UniswapDayDataV2DTO>}
     */
    uniswapV2GetDayDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UniswapDayDataV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/dayData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetFactoryHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetFactoryHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UniswapFactoryV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Factory (historical)
     * Gets factory.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/UniswapV2Api~uniswapV2GetFactoryHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UniswapFactoryV2DTO>}
     */
    uniswapV2GetFactoryHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UniswapFactoryV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/factory/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetLiquidityPositionsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetLiquidityPositionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2LiquidityPositionV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositions (historical)
     * Gets liquidity positions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetLiquidityPositionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2LiquidityPositionV2DTO>}
     */
    uniswapV2GetLiquidityPositionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2LiquidityPositionV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/liquidityPositions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetLiquidityPositionsSnapshotsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetLiquidityPositionsSnapshotsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2LiquidityPositionSnapshotV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositionsSnapshots (historical)
     * Gets liquidity positions snapshots.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetLiquidityPositionsSnapshotsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2LiquidityPositionSnapshotV2DTO>}
     */
    uniswapV2GetLiquidityPositionsSnapshotsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2LiquidityPositionSnapshotV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/liquidityPositionsSnapshots/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetMintsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetMintsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2MintV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mints (historical)
     * Gets mints.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetMintsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2MintV2DTO>}
     */
    uniswapV2GetMintsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2MintV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/mints/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetPoolsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetPoolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (current) 🔥
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterPoolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetPoolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairV2DTO>}
     */
    uniswapV2GetPoolsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_pool_id': opts['filterPoolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pools/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetPoolsDayDataHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetPoolsDayDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairDayDataV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PoolsDayData (historical)
     * Gets pools day data.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetPoolsDayDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairDayDataV2DTO>}
     */
    uniswapV2GetPoolsDayDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairDayDataV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/poolsDayData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetPoolsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetPoolsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (historical) 🔥
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetPoolsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairV2DTO>}
     */
    uniswapV2GetPoolsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pools/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetPoolsHourDataHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetPoolsHourDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairHourDataV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PoolsHourData (historical)
     * Gets pools tracked each our.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetPoolsHourDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairHourDataV2DTO>}
     */
    uniswapV2GetPoolsHourDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairHourDataV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/poolsHourData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetSwapsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetSwapsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2SwapV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (current) 🔥
     * Gets swaps.
     * @param {module:api/UniswapV2Api~uniswapV2GetSwapsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2SwapV2DTO>}
     */
    uniswapV2GetSwapsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2SwapV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/swaps/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetSwapsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetSwapsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2SwapV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (historical) 🔥
     * Gets swaps.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.poolId 
     * @param {module:api/UniswapV2Api~uniswapV2GetSwapsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2SwapV2DTO>}
     */
    uniswapV2GetSwapsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'poolId': opts['poolId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2SwapV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/swaps/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetTokensCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TokenV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (current) 🔥
     * Gets tokens.
     * @param {module:api/UniswapV2Api~uniswapV2GetTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TokenV2DTO>}
     */
    uniswapV2GetTokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TokenV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetTokensDayDataHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetTokensDayDataHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TokenDayDataV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokensDayData (historical)
     * Gets tokens day data.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.tokenId 
     * @param {module:api/UniswapV2Api~uniswapV2GetTokensDayDataHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TokenDayDataV2DTO>}
     */
    uniswapV2GetTokensDayDataHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'tokenId': opts['tokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TokenDayDataV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/tokensDayData/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetTokensHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TokenV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (historical) 🔥
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.tokenId 
     * @param {module:api/UniswapV2Api~uniswapV2GetTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TokenV2DTO>}
     */
    uniswapV2GetTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'tokenId': opts['tokenId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TokenV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/tokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetTransactionsHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetTransactionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TransactionV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions (historical)
     * Gets transactions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/UniswapV2Api~uniswapV2GetTransactionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TransactionV2DTO>}
     */
    uniswapV2GetTransactionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TransactionV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/transactions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2GetUsersHistorical operation.
     * @callback module:api/UniswapV2Api~uniswapV2GetUsersHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UserV2DTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users (historical)
     * Gets users.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {module:api/UniswapV2Api~uniswapV2GetUsersHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UserV2DTO>}
     */
    uniswapV2GetUsersHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UserV2DTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/users/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
