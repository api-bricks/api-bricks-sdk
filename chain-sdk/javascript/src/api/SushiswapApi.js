/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CurveExchangeDTO from '../model/CurveExchangeDTO';
import DexTradeDTO from '../model/DexTradeDTO';
import SushiswapBundleDTO from '../model/SushiswapBundleDTO';
import SushiswapBurnDTO from '../model/SushiswapBurnDTO';
import SushiswapDayDataDTO from '../model/SushiswapDayDataDTO';
import SushiswapFactoryDTO from '../model/SushiswapFactoryDTO';
import SushiswapHourDataDTO from '../model/SushiswapHourDataDTO';
import SushiswapLiquidityPositionDTO from '../model/SushiswapLiquidityPositionDTO';
import SushiswapLiquidityPositionSnapshotDTO from '../model/SushiswapLiquidityPositionSnapshotDTO';
import SushiswapMintDTO from '../model/SushiswapMintDTO';
import SushiswapPairDTO from '../model/SushiswapPairDTO';
import SushiswapPairDayDataDTO from '../model/SushiswapPairDayDataDTO';
import SushiswapPairHourDataDTO from '../model/SushiswapPairHourDataDTO';
import SushiswapSwapDTO from '../model/SushiswapSwapDTO';
import SushiswapTokenDTO from '../model/SushiswapTokenDTO';
import SushiswapTokenDayDataDTO from '../model/SushiswapTokenDayDataDTO';
import SushiswapTransactionDTO from '../model/SushiswapTransactionDTO';
import SushiswapUserDTO from '../model/SushiswapUserDTO';

/**
* Sushiswap service.
* @module api/SushiswapApi
* @version v1
*/
export default class SushiswapApi {

    /**
    * Constructs a new SushiswapApi. 
    * @alias module:api/SushiswapApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the curveGetExchangesCurrent operation.
     * @callback module:api/SushiswapApi~curveGetExchangesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveExchangeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchanges (current) ðŸ”¥
     * Gets exchanges.
     * @param {module:api/SushiswapApi~curveGetExchangesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveExchangeDTO>}
     */
    curveGetExchangesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveExchangeDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/exchanges/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dexGetTradesCurrent operation.
     * @callback module:api/SushiswapApi~dexGetTradesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DexTradeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trades (current) ðŸ”¥
     * Gets trades.
     * @param {module:api/SushiswapApi~dexGetTradesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DexTradeDTO>}
     */
    dexGetTradesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [DexTradeDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/trades/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapBundlesCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapBundlesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapBundleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bundles (current)
     * Gets bundles.
     * @param {module:api/SushiswapApi~sushiswapBundlesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapBundleDTO>}
     */
    sushiswapBundlesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapBundleDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/bundles/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapBurnsCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapBurnsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapBurnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burns (current)
     * Gets burns.
     * @param {module:api/SushiswapApi~sushiswapBurnsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapBurnDTO>}
     */
    sushiswapBurnsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapBurnDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/burns/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapDayDatasCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapDayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DayDatas (current)
     * Gets dayDatas.
     * @param {module:api/SushiswapApi~sushiswapDayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapDayDataDTO>}
     */
    sushiswapDayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/dayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapFactorysCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapFactorysCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapFactoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Factorys (current)
     * Gets factorys.
     * @param {module:api/SushiswapApi~sushiswapFactorysCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapFactoryDTO>}
     */
    sushiswapFactorysCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapFactoryDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/factorys/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetBundlesHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetBundlesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapBundleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bundles (historical) ðŸ”¥
     * Gets bundles.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Hardcoded to '1'.
     * @param {module:api/SushiswapApi~sushiswapGetBundlesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapBundleDTO>}
     */
    sushiswapGetBundlesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapBundleDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/bundles/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetBurnsHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetBurnsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapBurnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burns (historical) ðŸ”¥
     * Gets burns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.pair 
     * @param {module:api/SushiswapApi~sushiswapGetBurnsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapBurnDTO>}
     */
    sushiswapGetBurnsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapBurnDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/burns/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetDayDatasHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetDayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DayDatas (historical) ðŸ”¥
     * Gets dayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Unix timestamp for start of day / 86400 giving a unique day index.
     * @param {module:api/SushiswapApi~sushiswapGetDayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapDayDataDTO>}
     */
    sushiswapGetDayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/dayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetFactorysHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetFactorysHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapFactoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Factorys (historical) ðŸ”¥
     * Gets factorys.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Factory address.
     * @param {module:api/SushiswapApi~sushiswapGetFactorysHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapFactoryDTO>}
     */
    sushiswapGetFactorysHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapFactoryDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/factorys/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetHourDatasHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetHourDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HourDatas (historical) ðŸ”¥
     * Gets hourDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Start of hour timestamp.
     * @param {module:api/SushiswapApi~sushiswapGetHourDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapHourDataDTO>}
     */
    sushiswapGetHourDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/hourDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetLiquidityPositionSnapshotsHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetLiquidityPositionSnapshotsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapLiquidityPositionSnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositionSnapshots (historical) ðŸ”¥
     * Gets liquidityPositionSnapshots.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.user 
     * @param {String} opts.pair 
     * @param {module:api/SushiswapApi~sushiswapGetLiquidityPositionSnapshotsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapLiquidityPositionSnapshotDTO>}
     */
    sushiswapGetLiquidityPositionSnapshotsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'user': opts['user'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapLiquidityPositionSnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/liquidityPositionSnapshots/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetLiquidityPositionsHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetLiquidityPositionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapLiquidityPositionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositions (historical) ðŸ”¥
     * Gets liquidityPositions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.user 
     * @param {String} opts.pair 
     * @param {module:api/SushiswapApi~sushiswapGetLiquidityPositionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapLiquidityPositionDTO>}
     */
    sushiswapGetLiquidityPositionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'user': opts['user'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapLiquidityPositionDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/liquidityPositions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetMintsHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetMintsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapMintDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mints (historical) ðŸ”¥
     * Gets mints.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.pair 
     * @param {module:api/SushiswapApi~sushiswapGetMintsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapMintDTO>}
     */
    sushiswapGetMintsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapMintDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/mints/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetPairDayDatasHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetPairDayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapPairDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairDayDatas (historical) ðŸ”¥
     * Gets pairDayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.pair 
     * @param {String} opts.token0 
     * @param {String} opts.token1 
     * @param {module:api/SushiswapApi~sushiswapGetPairDayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapPairDayDataDTO>}
     */
    sushiswapGetPairDayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pair': opts['pair'],
        'token_0': opts['token0'],
        'token_1': opts['token1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapPairDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/pairDayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetPairHourDatasHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetPairHourDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapPairHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairHourDatas (historical) ðŸ”¥
     * Gets pairHourDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.pair 
     * @param {module:api/SushiswapApi~sushiswapGetPairHourDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapPairHourDataDTO>}
     */
    sushiswapGetPairHourDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapPairHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/pairHourDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetPairsHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetPairsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapPairDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pairs (historical) ðŸ”¥
     * Gets pairs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock 
     * @param {Number} opts.endBlock 
     * @param {Date} opts.startDate 
     * @param {Date} opts.endDate 
     * @param {String} opts.id 
     * @param {String} opts.name 
     * @param {String} opts.token0 
     * @param {String} opts.token1 
     * @param {module:api/SushiswapApi~sushiswapGetPairsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapPairDTO>}
     */
    sushiswapGetPairsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'name': opts['name'],
        'token_0': opts['token0'],
        'token_1': opts['token1']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapPairDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/pairs/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetPoolsCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapGetPoolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapPairDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (current) ðŸ”¥
     * Gets pools.
     * @param {module:api/SushiswapApi~sushiswapGetPoolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapPairDTO>}
     */
    sushiswapGetPoolsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapPairDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/pools/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetSwapsHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetSwapsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapSwapDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (historical) ðŸ”¥
     * Gets swaps.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Transaction hash plus index in Transaction swap array.
     * @param {String} opts.pair Reference to pair.
     * @param {module:api/SushiswapApi~sushiswapGetSwapsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapSwapDTO>}
     */
    sushiswapGetSwapsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapSwapDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/swaps/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetTokenDayDatasHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetTokenDayDatasHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapTokenDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenDayDatas (historical) ðŸ”¥
     * Gets tokenDayDatas.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Identifier, day start timestamp in unix / 86400.
     * @param {module:api/SushiswapApi~sushiswapGetTokenDayDatasHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapTokenDayDataDTO>}
     */
    sushiswapGetTokenDayDatasHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapTokenDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/tokenDayDatas/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetTokensHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (historical) ðŸ”¥
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Token address.
     * @param {String} opts.symbol Token symbol.
     * @param {String} opts.name Token name.
     * @param {module:api/SushiswapApi~sushiswapGetTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapTokenDTO>}
     */
    sushiswapGetTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'symbol': opts['symbol'],
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapTokenDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/tokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetTransactionsHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetTransactionsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapTransactionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions (historical) ðŸ”¥
     * Gets transactions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id Ethereum transaction hash.
     * @param {module:api/SushiswapApi~sushiswapGetTransactionsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapTransactionDTO>}
     */
    sushiswapGetTransactionsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapTransactionDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/transactions/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapGetUsersHistorical operation.
     * @callback module:api/SushiswapApi~sushiswapGetUsersHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapUserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users (historical) ðŸ”¥
     * Gets users.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} opts.endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} opts.startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} opts.endDate The end date of timeframe.
     * @param {String} opts.id User address.
     * @param {module:api/SushiswapApi~sushiswapGetUsersHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapUserDTO>}
     */
    sushiswapGetUsersHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapUserDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/users/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapHourDatasCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapHourDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HourDatas (current)
     * Gets hourDatas.
     * @param {module:api/SushiswapApi~sushiswapHourDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapHourDataDTO>}
     */
    sushiswapHourDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/hourDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapLiquidityPositionSnapshotsCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapLiquidityPositionSnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapLiquidityPositionSnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositionSnapshots (current)
     * Gets liquidityPositionSnapshots.
     * @param {module:api/SushiswapApi~sushiswapLiquidityPositionSnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapLiquidityPositionSnapshotDTO>}
     */
    sushiswapLiquidityPositionSnapshotsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapLiquidityPositionSnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/liquidityPositionSnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapLiquidityPositionsCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapLiquidityPositionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapLiquidityPositionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositions (current)
     * Gets liquidityPositions.
     * @param {module:api/SushiswapApi~sushiswapLiquidityPositionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapLiquidityPositionDTO>}
     */
    sushiswapLiquidityPositionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapLiquidityPositionDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/liquidityPositions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapMintsCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapMintsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapMintDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mints (current)
     * Gets mints.
     * @param {module:api/SushiswapApi~sushiswapMintsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapMintDTO>}
     */
    sushiswapMintsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapMintDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/mints/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapPairDayDatasCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapPairDayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapPairDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairDayDatas (current)
     * Gets pairDayDatas.
     * @param {module:api/SushiswapApi~sushiswapPairDayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapPairDayDataDTO>}
     */
    sushiswapPairDayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapPairDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/pairDayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapPairHourDatasCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapPairHourDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapPairHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairHourDatas (current)
     * Gets pairHourDatas.
     * @param {module:api/SushiswapApi~sushiswapPairHourDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapPairHourDataDTO>}
     */
    sushiswapPairHourDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapPairHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/pairHourDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapPairsCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapPairsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapPairDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pairs (current)
     * Gets pairs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Pair contract address.
     * @param {module:api/SushiswapApi~sushiswapPairsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapPairDTO>}
     */
    sushiswapPairsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapPairDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/pairs/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapSwapsCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapSwapsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapSwapDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (current)
     * Gets swaps.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pair Reference to pair.
     * @param {module:api/SushiswapApi~sushiswapSwapsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapSwapDTO>}
     */
    sushiswapSwapsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapSwapDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/swaps/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapTokenDayDatasCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapTokenDayDatasCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapTokenDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenDayDatas (current)
     * Gets tokenDayDatas.
     * @param {module:api/SushiswapApi~sushiswapTokenDayDatasCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapTokenDayDataDTO>}
     */
    sushiswapTokenDayDatasCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapTokenDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/tokenDayDatas/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapTokensCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (current)
     * Gets tokens.
     * @param {module:api/SushiswapApi~sushiswapTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapTokenDTO>}
     */
    sushiswapTokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapTokenDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapTransactionsCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapTransactionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapTransactionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions (current)
     * Gets transactions.
     * @param {module:api/SushiswapApi~sushiswapTransactionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapTransactionDTO>}
     */
    sushiswapTransactionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapTransactionDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/transactions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sushiswapUsersCurrent operation.
     * @callback module:api/SushiswapApi~sushiswapUsersCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SushiswapUserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users (current)
     * Gets users.
     * @param {module:api/SushiswapApi~sushiswapUsersCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SushiswapUserDTO>}
     */
    sushiswapUsersCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [SushiswapUserDTO];
      return this.apiClient.callApi(
        '/dapps/sushiswap/users/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
