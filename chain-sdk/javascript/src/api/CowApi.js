/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CowOrderDTO from '../model/CowOrderDTO';
import CowSettlementDTO from '../model/CowSettlementDTO';
import CowTokenDTO from '../model/CowTokenDTO';
import CowTradeDTO from '../model/CowTradeDTO';
import CowUserDTO from '../model/CowUserDTO';

/**
* Cow service.
* @module api/CowApi
* @version v1
*/
export default class CowApi {

    /**
    * Constructs a new CowApi. 
    * @alias module:api/CowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cowGetOrdersHistorical operation.
     * @callback module:api/CowApi~cowGetOrdersHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowOrderDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Orders (historical)
     * Gets orders.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] User's address.
     * @param {module:api/CowApi~cowGetOrdersHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowOrderDTO>}
     */
    cowGetOrdersHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowOrderDTO];
      return this.apiClient.callApi(
        '/dapps/cow/orders/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cowGetSettlementsHistorical operation.
     * @callback module:api/CowApi~cowGetSettlementsHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowSettlementDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Settlements (historical)
     * Gets settlements.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] Transaction hash.
     * @param {module:api/CowApi~cowGetSettlementsHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowSettlementDTO>}
     */
    cowGetSettlementsHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowSettlementDTO];
      return this.apiClient.callApi(
        '/dapps/cow/settlements/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cowGetTokensHistorical operation.
     * @callback module:api/CowApi~cowGetTokensHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (historical)
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] Token's address.
     * @param {String} [address] Token's address.
     * @param {String} [name] Token name fetched by ERC20 contract call.
     * @param {String} [symbol] Token symbol fetched by contract call.
     * @param {module:api/CowApi~cowGetTokensHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowTokenDTO>}
     */
    cowGetTokensHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'address': opts['address'],
        'name': opts['name'],
        'symbol': opts['symbol']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowTokenDTO];
      return this.apiClient.callApi(
        '/dapps/cow/tokens/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cowGetTradesHistorical operation.
     * @callback module:api/CowApi~cowGetTradesHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowTradeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trades (historical)
     * Gets trades.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] Identifier, format: (order id)|(transaction hash)|(event index).
     * @param {String} [sellToken] Address of token that is sold.
     * @param {String} [buyToken] Address of token that is bought.
     * @param {module:api/CowApi~cowGetTradesHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowTradeDTO>}
     */
    cowGetTradesHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'sell_token': opts['sellToken'],
        'buy_token': opts['buyToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowTradeDTO];
      return this.apiClient.callApi(
        '/dapps/cow/trades/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cowGetUsersHistorical operation.
     * @callback module:api/CowApi~cowGetUsersHistoricalCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowUserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users (historical)
     * Gets users.
     * @param {Object} opts Optional parameters
     * @param {Number} [startBlock] The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
     * @param {Number} [endBlock] The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
     * @param {Date} [startDate] The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
     * @param {Date} [endDate] The end date of timeframe.
     * @param {String} [id] User's address.
     * @param {String} [address] User's address.
     * @param {module:api/CowApi~cowGetUsersHistoricalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowUserDTO>}
     */
    cowGetUsersHistorical(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startBlock': opts['startBlock'],
        'endBlock': opts['endBlock'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'id': opts['id'],
        'address': opts['address']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowUserDTO];
      return this.apiClient.callApi(
        '/dapps/cow/users/historical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cowOrdersCurrent operation.
     * @callback module:api/CowApi~cowOrdersCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowOrderDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Orders (current)
     * Gets orders.
     * @param {module:api/CowApi~cowOrdersCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowOrderDTO>}
     */
    cowOrdersCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowOrderDTO];
      return this.apiClient.callApi(
        '/dapps/cow/orders/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cowSettlementsCurrent operation.
     * @callback module:api/CowApi~cowSettlementsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowSettlementDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Settlements (current)
     * Gets settlements.
     * @param {module:api/CowApi~cowSettlementsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowSettlementDTO>}
     */
    cowSettlementsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowSettlementDTO];
      return this.apiClient.callApi(
        '/dapps/cow/settlements/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cowTokensCurrent operation.
     * @callback module:api/CowApi~cowTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (current)
     * Gets tokens.
     * @param {module:api/CowApi~cowTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowTokenDTO>}
     */
    cowTokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowTokenDTO];
      return this.apiClient.callApi(
        '/dapps/cow/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cowTradesCurrent operation.
     * @callback module:api/CowApi~cowTradesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowTradeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trades (current)
     * Gets trades.
     * @param {module:api/CowApi~cowTradesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowTradeDTO>}
     */
    cowTradesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowTradeDTO];
      return this.apiClient.callApi(
        '/dapps/cow/trades/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cowUsersCurrent operation.
     * @callback module:api/CowApi~cowUsersCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CowUserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users (current)
     * Gets users.
     * @param {module:api/CowApi~cowUsersCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CowUserDTO>}
     */
    cowUsersCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CowUserDTO];
      return this.apiClient.callApi(
        '/dapps/cow/users/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
