/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OnChainDappsRestApi);
  }
}(this, function(expect, OnChainDappsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OnChainDappsRestApi.CRYPTOPUNKSApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CRYPTOPUNKSApi', function() {
    describe('cRYPTOPUNKSBidsCurrent', function() {
      it('should call cRYPTOPUNKSBidsCurrent successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSBidsCurrent
        //instance.cRYPTOPUNKSBidsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSCollectionDailySnapshotsCurrent', function() {
      it('should call cRYPTOPUNKSCollectionDailySnapshotsCurrent successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSCollectionDailySnapshotsCurrent
        //instance.cRYPTOPUNKSCollectionDailySnapshotsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSCollectionsCurrent', function() {
      it('should call cRYPTOPUNKSCollectionsCurrent successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSCollectionsCurrent
        //instance.cRYPTOPUNKSCollectionsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSDataSourcesCurrent', function() {
      it('should call cRYPTOPUNKSDataSourcesCurrent successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSDataSourcesCurrent
        //instance.cRYPTOPUNKSDataSourcesCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSGetBidsHistorical', function() {
      it('should call cRYPTOPUNKSGetBidsHistorical successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSGetBidsHistorical
        //instance.cRYPTOPUNKSGetBidsHistorical(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSGetCollectionDailySnapshotsHistorical', function() {
      it('should call cRYPTOPUNKSGetCollectionDailySnapshotsHistorical successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSGetCollectionDailySnapshotsHistorical
        //instance.cRYPTOPUNKSGetCollectionDailySnapshotsHistorical(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSGetCollectionsHistorical', function() {
      it('should call cRYPTOPUNKSGetCollectionsHistorical successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSGetCollectionsHistorical
        //instance.cRYPTOPUNKSGetCollectionsHistorical(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSGetDataSourcesHistorical', function() {
      it('should call cRYPTOPUNKSGetDataSourcesHistorical successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSGetDataSourcesHistorical
        //instance.cRYPTOPUNKSGetDataSourcesHistorical(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSGetItemsHistorical', function() {
      it('should call cRYPTOPUNKSGetItemsHistorical successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSGetItemsHistorical
        //instance.cRYPTOPUNKSGetItemsHistorical(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSGetMarketPlacesHistorical', function() {
      it('should call cRYPTOPUNKSGetMarketPlacesHistorical successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSGetMarketPlacesHistorical
        //instance.cRYPTOPUNKSGetMarketPlacesHistorical(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical', function() {
      it('should call cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical
        //instance.cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSGetTradesHistorical', function() {
      it('should call cRYPTOPUNKSGetTradesHistorical successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSGetTradesHistorical
        //instance.cRYPTOPUNKSGetTradesHistorical(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSGetUsersHistorical', function() {
      it('should call cRYPTOPUNKSGetUsersHistorical successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSGetUsersHistorical
        //instance.cRYPTOPUNKSGetUsersHistorical(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSItemsCurrent', function() {
      it('should call cRYPTOPUNKSItemsCurrent successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSItemsCurrent
        //instance.cRYPTOPUNKSItemsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSMarketPlacesCurrent', function() {
      it('should call cRYPTOPUNKSMarketPlacesCurrent successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSMarketPlacesCurrent
        //instance.cRYPTOPUNKSMarketPlacesCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSMarketplaceDailySnapshotsCurrent', function() {
      it('should call cRYPTOPUNKSMarketplaceDailySnapshotsCurrent successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSMarketplaceDailySnapshotsCurrent
        //instance.cRYPTOPUNKSMarketplaceDailySnapshotsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSTradesCurrent', function() {
      it('should call cRYPTOPUNKSTradesCurrent successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSTradesCurrent
        //instance.cRYPTOPUNKSTradesCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cRYPTOPUNKSUsersCurrent', function() {
      it('should call cRYPTOPUNKSUsersCurrent successfully', function(done) {
        //uncomment below and update the code to test cRYPTOPUNKSUsersCurrent
        //instance.cRYPTOPUNKSUsersCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
