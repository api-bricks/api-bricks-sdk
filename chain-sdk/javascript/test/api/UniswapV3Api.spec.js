/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OnChainApi);
  }
}(this, function(expect, OnChainApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OnChainApi.UniswapV3Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UniswapV3Api', function() {
    describe('uniswapV3GetBundlesCurrent', function() {
      it('should call uniswapV3GetBundlesCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetBundlesCurrent
        //instance.uniswapV3GetBundlesCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetBurnsCurrent', function() {
      it('should call uniswapV3GetBurnsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetBurnsCurrent
        //instance.uniswapV3GetBurnsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetDayDataCurrent', function() {
      it('should call uniswapV3GetDayDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetDayDataCurrent
        //instance.uniswapV3GetDayDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetFactoryCurrent', function() {
      it('should call uniswapV3GetFactoryCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetFactoryCurrent
        //instance.uniswapV3GetFactoryCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetMintsCurrent', function() {
      it('should call uniswapV3GetMintsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetMintsCurrent
        //instance.uniswapV3GetMintsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetPoolsCurrent', function() {
      it('should call uniswapV3GetPoolsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetPoolsCurrent
        //instance.uniswapV3GetPoolsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetPoolsDayDataCurrent', function() {
      it('should call uniswapV3GetPoolsDayDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetPoolsDayDataCurrent
        //instance.uniswapV3GetPoolsDayDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetPoolsHourDataCurrent', function() {
      it('should call uniswapV3GetPoolsHourDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetPoolsHourDataCurrent
        //instance.uniswapV3GetPoolsHourDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetPositionsCurrent', function() {
      it('should call uniswapV3GetPositionsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetPositionsCurrent
        //instance.uniswapV3GetPositionsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetPositionsSnapshotsCurrent', function() {
      it('should call uniswapV3GetPositionsSnapshotsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetPositionsSnapshotsCurrent
        //instance.uniswapV3GetPositionsSnapshotsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetSwapsCurrent', function() {
      it('should call uniswapV3GetSwapsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetSwapsCurrent
        //instance.uniswapV3GetSwapsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetTicksCurrent', function() {
      it('should call uniswapV3GetTicksCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetTicksCurrent
        //instance.uniswapV3GetTicksCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetTicksDayDataCurrent', function() {
      it('should call uniswapV3GetTicksDayDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetTicksDayDataCurrent
        //instance.uniswapV3GetTicksDayDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetTokensCurrent', function() {
      it('should call uniswapV3GetTokensCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetTokensCurrent
        //instance.uniswapV3GetTokensCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetTokensDayDataCurrent', function() {
      it('should call uniswapV3GetTokensDayDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetTokensDayDataCurrent
        //instance.uniswapV3GetTokensDayDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV3GetTokensHourDataCurrent', function() {
      it('should call uniswapV3GetTokensHourDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV3GetTokensHourDataCurrent
        //instance.uniswapV3GetTokensHourDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
