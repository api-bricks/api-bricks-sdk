# NOTE: This file is auto generated by OpenAPI Generator 6.2.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainAPI.Api.UniswapV3 do
  @moduledoc """
  API calls for all endpoints tagged `UniswapV3`.
  """

  alias OnChainAPI.Connection
  import OnChainAPI.RequestBuilder

  @doc """
  GetBundles

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%BundleV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_bundle_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.BundleV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_bundle_current_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/bundle/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.BundleV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_bundles_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_bundles_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/bundles/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetBurns

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%BurnV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_burns_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.BurnV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_burns_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/burns/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.BurnV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_burns_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_burns_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/burns/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_day_data_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_day_data_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/dayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetFactory

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `chain_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%FactoryV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_factory_current_get(Tesla.Env.client, String.t, keyword()) :: {:ok, list(OnChainAPI.Model.FactoryV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_factory_current_get(connection, chain_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/factory/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.FactoryV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_factory_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_factory_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/factory/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetMints

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%MintV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_mints_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.MintV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_mints_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/mints/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.MintV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_mints_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_mints_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/mints/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_poi_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_poi_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poi/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_pool_day_data_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_pool_day_data_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_pool_hour_data_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_pool_hour_data_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolHourData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetPools

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%PoolV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_pools_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.PoolV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_pools_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/pools/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.PoolV3Dto{}]}
    ])
  end

  @doc """
  GetPoolsDayData

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%PoolDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_pools_day_data_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.PoolDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_pools_day_data_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolsDayData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.PoolDayDataV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_pools_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_pools_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/pools/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetPoolsHourData

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%PoolHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_pools_hour_data_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.PoolHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_pools_hour_data_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolsHourData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.PoolHourDataV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_position_snapshot_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_position_snapshot_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positionSnapshot/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetPositionSnapshot

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%PositionSnapshotV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_position_snapshots_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.PositionSnapshotV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_position_snapshots_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positionSnapshots/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.PositionSnapshotV3Dto{}]}
    ])
  end

  @doc """
  GetPositions

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%PositionV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_positions_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.PositionV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_positions_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positions/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.PositionV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_positions_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_positions_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetSwaps

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%SwapV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_swaps_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SwapV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_swaps_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/swaps/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SwapV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_swaps_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_swaps_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/swaps/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_tick_day_data_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_tick_day_data_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tickDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetTicks

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%TickV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_ticks_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.TickV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_ticks_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/ticks/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.TickV3Dto{}]}
    ])
  end

  @doc """
  GetTicksDayData

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): Filter pool id

  ### Returns

  - `{:ok, [%TickDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_ticks_day_data_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.TickDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_ticks_day_data_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/ticksDayData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.TickDayDataV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:pool_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_ticks_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_ticks_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/ticks/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:token_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_token_day_data_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_token_day_data_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokenDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:token_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_token_hour_data_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_token_hour_data_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokenHourData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetTokens

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_token_id` (String.t): 

  ### Returns

  - `{:ok, [%TokenV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_tokens_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.TokenV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_tokens_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_token_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokens/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.TokenV3Dto{}]}
    ])
  end

  @doc """
  GetTokensDayData

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_token_id` (String.t): 

  ### Returns

  - `{:ok, [%TokenV3DayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_tokens_day_data_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.TokenV3DayDataDto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_tokens_day_data_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_token_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokensDayData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.TokenV3DayDataDto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 
    - `:token_id` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_tokens_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_tokens_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetTokensHourData

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_token_id` (String.t): 

  ### Returns

  - `{:ok, [%TokenHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_tokens_hour_data_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.TokenHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_tokens_hour_data_current_get(connection, opts \\ []) do
    optional_params = %{
      :filter_token_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokensHourData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.TokenHourDataV3Dto{}]}
    ])
  end

  @doc """

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:start_block` (integer()): 
    - `:end_block` (integer()): 
    - `:start_date` (DateTime.t): 
    - `:end_date` (DateTime.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_transactions_historical_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_transactions_historical_get(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/transactions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false}
    ])
  end

  @doc """
  GetUniswapDayData

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dapps_uniswapv3_uniswap_day_data_current_get(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def dapps_uniswapv3_uniswap_day_data_current_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/uniswapDayData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapDayDataV3Dto{}]}
    ])
  end
end
