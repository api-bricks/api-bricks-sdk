# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainAPI.Api.UniswapV3 do
  @moduledoc """
  API calls for all endpoints tagged `UniswapV3`.
  """

  alias OnChainAPI.Connection
  import OnChainAPI.RequestBuilder

  @doc """
  BundleV3s (historical) ðŸ”¥
  Gets bundlev3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3BundleV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_bundle_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3BundleV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_bundle_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/bundlev3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3BundleV3Dto{}]}
    ])
  end

  @doc """
  Bundles (current)
  Gets bundles.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV3BundleV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_bundles__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3BundleV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_bundles__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/bundles/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3BundleV3Dto{}]}
    ])
  end

  @doc """
  BurnV3s (historical) ðŸ”¥
  Gets burnv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Transaction hash + '#' + index in mints Transaction array.
    - `:pool` (String.t): Pool position is within.
    - `:token_0` (String.t): Reference to token0 as stored in pool contract.
    - `:token_1` (String.t): Reference to token1 as stored in pool contract.

  ### Returns

  - `{:ok, [%UniswapV3BurnV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_burn_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3BurnV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_burn_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query,
      :token_0 => :query,
      :token_1 => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/burnv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3BurnV3Dto{}]}
    ])
  end

  @doc """
  Burns (current)
  Gets burns.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3BurnV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_burns__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3BurnV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_burns__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/burns/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3BurnV3Dto{}]}
    ])
  end

  @doc """
  DayData (current)
  Gets uniswapv3 day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV3UniswapDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3UniswapDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_day_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/dayData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3UniswapDayDataV3Dto{}]}
    ])
  end

  @doc """
  Factory (current)
  Gets factory.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV3FactoryV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_factory__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3FactoryV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_factory__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/factory/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3FactoryV3Dto{}]}
    ])
  end

  @doc """
  FactoryV3s (historical) ðŸ”¥
  Gets factoryv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Factory address.

  ### Returns

  - `{:ok, [%UniswapV3FactoryV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_factory_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3FactoryV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_factory_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/factoryv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3FactoryV3Dto{}]}
    ])
  end

  @doc """
  MintV3s (historical) ðŸ”¥
  Gets mintv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Transaction hash + '#' + index in mints Transaction array.
    - `:pool` (String.t): Pool address.
    - `:token_0` (String.t): Reference to token0 as stored in pool contract.
    - `:token_1` (String.t): Reference to token1 as stored in pool contract.

  ### Returns

  - `{:ok, [%UniswapV3MintV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_mint_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3MintV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_mint_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query,
      :token_0 => :query,
      :token_1 => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/mintv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3MintV3Dto{}]}
    ])
  end

  @doc """
  Mints (current)
  Gets mints.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3MintV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_mints__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3MintV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_mints__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/mints/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3MintV3Dto{}]}
    ])
  end

  @doc """
  PoolDayDataV3s (historical) ðŸ”¥
  Gets pooldaydatav3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pool_day_data_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pool_day_data_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/pooldaydatav3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolDayDataV3Dto{}]}
    ])
  end

  @doc """
  PoolHourDataV3s (historical) ðŸ”¥
  Gets poolhourdatav3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pool_hour_data_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pool_hour_data_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolhourdatav3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolHourDataV3Dto{}]}
    ])
  end

  @doc """
  PoolV3s (historical) ðŸ”¥
  Gets poolv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Pool address.
    - `:token_0` (String.t): Reference to token0 as stored in pool contract.
    - `:token_1` (String.t): Reference to token1 as stored in pool contract.

  ### Returns

  - `{:ok, [%UniswapV3PoolV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pool_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pool_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :token_0 => :query,
      :token_1 => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolV3Dto{}]}
    ])
  end

  @doc """
  Pools (current) ðŸ”¥
  Gets pools.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pools__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pools__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/pools/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolV3Dto{}]}
    ])
  end

  @doc """
  PoolsDayData (current)
  Gets pools day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pools_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pools_day_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolsDayData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolDayDataV3Dto{}]}
    ])
  end

  @doc """
  PoolsHourData (current)
  Gets pools hour data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pools_hour_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pools_hour_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolsHourData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolHourDataV3Dto{}]}
    ])
  end

  @doc """
  PositionSnapshotV3s (historical) ðŸ”¥
  Gets positionsnapshotv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PositionSnapshotV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_position_snapshot_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PositionSnapshotV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_position_snapshot_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positionsnapshotv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PositionSnapshotV3Dto{}]}
    ])
  end

  @doc """
  PositionV3s (historical) ðŸ”¥
  Gets positionv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): NFT token identifier.
    - `:pool` (String.t): Pool position is within.
    - `:token_0` (String.t): Reference to token0 as stored in pair contract.
    - `:token_1` (String.t): Reference to token1 as stored in pair contract.

  ### Returns

  - `{:ok, [%UniswapV3PositionV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_position_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PositionV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_position_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query,
      :token_0 => :query,
      :token_1 => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positionv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PositionV3Dto{}]}
    ])
  end

  @doc """
  Positions (current)
  Gets positions.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PositionV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_positions__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PositionV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_positions__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positions/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PositionV3Dto{}]}
    ])
  end

  @doc """
  PositionsSnapshots (current)
  Gets positions snapshots.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PositionSnapshotV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_positions_snapshots__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PositionSnapshotV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_positions_snapshots__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positionSnapshots/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PositionSnapshotV3Dto{}]}
    ])
  end

  @doc """
  SwapV3s (historical) ðŸ”¥
  Gets swapv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Identifier, format: transaction hash + \"#\" + index in swaps Transaction array.
    - `:pool` (String.t): Pool swap occured within.
    - `:token_0` (String.t): Reference to token0 as stored in pair contract.
    - `:token_1` (String.t): Reference to token1 as stored in pair contract.

  ### Returns

  - `{:ok, [%UniswapV3SwapV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_swap_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3SwapV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_swap_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query,
      :token_0 => :query,
      :token_1 => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/swapv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3SwapV3Dto{}]}
    ])
  end

  @doc """
  Swaps (current) ðŸ”¥
  Gets swaps.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3SwapV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_swaps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3SwapV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_swaps__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/swaps/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3SwapV3Dto{}]}
    ])
  end

  @doc """
  TickDayDataV3s (historical) ðŸ”¥
  Gets tickdaydatav3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TickDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tick_day_data_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TickDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tick_day_data_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tickdaydatav3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TickDayDataV3Dto{}]}
    ])
  end

  @doc """
  TickV3s (historical) ðŸ”¥
  Gets tickv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TickV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tick_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TickV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tick_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tickv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TickV3Dto{}]}
    ])
  end

  @doc """
  Ticks (current)
  Gets ticks.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TickV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_ticks__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TickV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_ticks__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/ticks/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TickV3Dto{}]}
    ])
  end

  @doc """
  TicksDayData (current)
  Gets ticks day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TickDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_ticks_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TickDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_ticks_day_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/ticksDayData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TickDayDataV3Dto{}]}
    ])
  end

  @doc """
  TokenHourDataV3s (historical) ðŸ”¥
  Gets tokenhourdatav3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Token address concatendated with date.

  ### Returns

  - `{:ok, [%UniswapV3TokenHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_token_hour_data_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_token_hour_data_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokenhourdatav3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenHourDataV3Dto{}]}
    ])
  end

  @doc """
  TokenV3DayDatas (historical) ðŸ”¥
  Gets tokenv3daydatas.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Token address concatendated with date.

  ### Returns

  - `{:ok, [%UniswapV3TokenV3DayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_token_v3_day_datas__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenV3DayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_token_v3_day_datas__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokenv3daydatas/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenV3DayDataDto{}]}
    ])
  end

  @doc """
  TokenV3s (historical) ðŸ”¥
  Gets tokenv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Token address.
    - `:symbol` (String.t): Token symbol.
    - `:name` (String.t): Token name.

  ### Returns

  - `{:ok, [%UniswapV3TokenV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_token_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_token_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :symbol => :query,
      :name => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokenv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenV3Dto{}]}
    ])
  end

  @doc """
  Tokens (current) ðŸ”¥
  Gets tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_token_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TokenV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tokens__current(connection, opts \\ []) do
    optional_params = %{
      :filter_token_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokens/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenV3Dto{}]}
    ])
  end

  @doc """
  TokensDayData (current)
  Gets tokens day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_token_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TokenV3DayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tokens_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenV3DayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tokens_day_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_token_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokensDayData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenV3DayDataDto{}]}
    ])
  end

  @doc """
  TokensHourData (current)
  Gets tokens hour data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_token_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TokenHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tokens_hour_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tokens_hour_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_token_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokensHourData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenHourDataV3Dto{}]}
    ])
  end

  @doc """
  TransactionV3s (historical) ðŸ”¥
  Gets transactionv3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Transaction hash.

  ### Returns

  - `{:ok, [%UniswapV3TransactionV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_transaction_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TransactionV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_transaction_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/transactionv3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TransactionV3Dto{}]}
    ])
  end

  @doc """
  UniswapDayDataV3s (historical) ðŸ”¥
  Gets uniswapdaydatav3s.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Timestamp rounded to current day by dividing by 86400.

  ### Returns

  - `{:ok, [%UniswapV3UniswapDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_uniswap_day_data_v3s__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3UniswapDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_uniswap_day_data_v3s__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/uniswapdaydatav3s/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3UniswapDayDataV3Dto{}]}
    ])
  end
end
