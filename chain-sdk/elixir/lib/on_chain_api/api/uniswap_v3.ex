# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainAPI.Api.UniswapV3 do
  @moduledoc """
  API calls for all endpoints tagged `UniswapV3`.
  """

  alias OnChainAPI.Connection
  import OnChainAPI.RequestBuilder

  @doc """
  GetBundles (current)
  Gets bundles.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV3BundleV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_bundles__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3BundleV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_bundles__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/bundles/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3BundleV3Dto{}]}
    ])
  end

  @doc """
  GetBundles (historical)
  Gets bundles.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%UniswapV3BundleV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_bundles__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3BundleV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_bundles__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/bundles/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3BundleV3Dto{}]}
    ])
  end

  @doc """
  GetBurns (current)
  Gets burns.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3BurnV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_burns__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3BurnV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_burns__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/burns/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3BurnV3Dto{}]}
    ])
  end

  @doc """
  GetBurns (historical)
  Gets burns.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3BurnV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_burns__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3BurnV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_burns__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/burns/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3BurnV3Dto{}]}
    ])
  end

  @doc """
  GetDayData (current)
  Gets uniswapv3 day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV3UniswapDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3UniswapDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_day_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/dayData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3UniswapDayDataV3Dto{}]}
    ])
  end

  @doc """
  GetDayData (historical)
  Gets uniswapv3 day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%UniswapV3UniswapDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3UniswapDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/dayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3UniswapDayDataV3Dto{}]}
    ])
  end

  @doc """
  GetFactory (current)
  Gets factory.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV3FactoryV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_factory__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3FactoryV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_factory__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/factory/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3FactoryV3Dto{}]}
    ])
  end

  @doc """
  GetFactory (historical)
  Gets factory.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%UniswapV3FactoryV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_factory__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3FactoryV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_factory__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/factory/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3FactoryV3Dto{}]}
    ])
  end

  @doc """
  GetMints (current)
  Gets mints.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3MintV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_mints__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3MintV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_mints__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/mints/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3MintV3Dto{}]}
    ])
  end

  @doc """
  GetMints (historical)
  Gets mints.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3MintV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_mints__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3MintV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_mints__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/mints/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3MintV3Dto{}]}
    ])
  end

  @doc """
  GetPools (current) 🔥
  Gets pools.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pools__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pools__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/pools/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolV3Dto{}]}
    ])
  end

  @doc """
  GetPools (historical) 🔥
  Gets pools.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pools__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pools__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/pools/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolV3Dto{}]}
    ])
  end

  @doc """
  GetPoolsDayData (current)
  Gets pools day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pools_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pools_day_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolsDayData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolDayDataV3Dto{}]}
    ])
  end

  @doc """
  GetPoolsDayData (historical)
  Gets pools day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pools_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pools_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolsDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolDayDataV3Dto{}]}
    ])
  end

  @doc """
  GetPoolsHourData (current)
  Gets pools hour data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pools_hour_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pools_hour_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolsHourData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolHourDataV3Dto{}]}
    ])
  end

  @doc """
  GetPoolsHourData (historical)
  Gets pools hour data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PoolHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_pools_hour_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PoolHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_pools_hour_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/poolsHourData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PoolHourDataV3Dto{}]}
    ])
  end

  @doc """
  GetPositions (current)
  Gets positions.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PositionV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_positions__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PositionV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_positions__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positions/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PositionV3Dto{}]}
    ])
  end

  @doc """
  GetPositions (historical)
  Gets positions.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PositionV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_positions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PositionV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_positions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PositionV3Dto{}]}
    ])
  end

  @doc """
  GetPositionsSnaphots (historical)
  Gets positions snapshots.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PositionSnapshotV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_positions_snaphots__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PositionSnapshotV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_positions_snaphots__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positionsSnapshots/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PositionSnapshotV3Dto{}]}
    ])
  end

  @doc """
  GetPositionsSnapshots (current)
  Gets positions snapshots.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3PositionSnapshotV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_positions_snapshots__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3PositionSnapshotV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_positions_snapshots__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/positionSnapshots/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3PositionSnapshotV3Dto{}]}
    ])
  end

  @doc """
  GetSwaps (current) 🔥
  Gets swaps.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3SwapV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_swaps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3SwapV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_swaps__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/swaps/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3SwapV3Dto{}]}
    ])
  end

  @doc """
  GetSwaps (historical) 🔥
  Gets swaps.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3SwapV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_swaps__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3SwapV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_swaps__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/swaps/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3SwapV3Dto{}]}
    ])
  end

  @doc """
  GetTicks (current)
  Gets ticks.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TickV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_ticks__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TickV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_ticks__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/ticks/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TickV3Dto{}]}
    ])
  end

  @doc """
  GetTicks (historical)
  Gets ticks.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TickV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_ticks__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TickV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_ticks__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/ticks/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TickV3Dto{}]}
    ])
  end

  @doc """
  GetTicksDayData (current)
  Gets ticks day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TickDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_ticks_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TickDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_ticks_day_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/ticksDayData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TickDayDataV3Dto{}]}
    ])
  end

  @doc """
  GetTicksDayData (historical)
  Gets ticks day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TickDayDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_ticks_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TickDayDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_ticks_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/ticksDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TickDayDataV3Dto{}]}
    ])
  end

  @doc """
  GetTokens (current) 🔥
  Gets tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_token_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TokenV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tokens__current(connection, opts \\ []) do
    optional_params = %{
      :filter_token_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokens/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenV3Dto{}]}
    ])
  end

  @doc """
  GetTokens (historical) 🔥
  Gets tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TokenV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenV3Dto{}]}
    ])
  end

  @doc """
  GetTokensDayData (current)
  Gets tokens day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_token_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TokenV3DayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tokens_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenV3DayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tokens_day_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_token_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokensDayData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenV3DayDataDto{}]}
    ])
  end

  @doc """
  GetTokensDayData (historical)
  Gets tokens day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TokenV3DayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tokens_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenV3DayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tokens_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokensDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenV3DayDataDto{}]}
    ])
  end

  @doc """
  GetTokensHourData (current)
  Gets tokens hour data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_token_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TokenHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tokens_hour_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tokens_hour_data__current(connection, opts \\ []) do
    optional_params = %{
      :filter_token_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokensHourData/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenHourDataV3Dto{}]}
    ])
  end

  @doc """
  GetTokensHourData (historical)
  Gets tokens hour data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV3TokenHourDataV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_tokens_hour_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TokenHourDataV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_tokens_hour_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/tokensHourData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TokenHourDataV3Dto{}]}
    ])
  end

  @doc """
  GetTransactions (historical)
  Gets transactions.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%UniswapV3TransactionV3Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v3_get_transactions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV3TransactionV3Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v3_get_transactions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv3/transactions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV3TransactionV3Dto{}]}
    ])
  end
end
