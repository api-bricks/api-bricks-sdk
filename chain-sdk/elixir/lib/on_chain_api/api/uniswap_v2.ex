# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainAPI.Api.UniswapV2 do
  @moduledoc """
  API calls for all endpoints tagged `UniswapV2`.
  """

  alias OnChainAPI.Connection
  import OnChainAPI.RequestBuilder

  @doc """
  Bundles (historical)
  Gets bundles.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%UniswapV2BundleV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_bundles__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2BundleV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_bundles__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/bundles/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2BundleV2Dto{}]}
    ])
  end

  @doc """
  Burns (historical)
  Gets burns.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2BurnV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_burns__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2BurnV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_burns__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/burns/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2BurnV2Dto{}]}
    ])
  end

  @doc """
  DayData (historical)
  Gets uniswapv2 day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%UniswapV2UniswapDayDataV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2UniswapDayDataV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/dayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2UniswapDayDataV2Dto{}]}
    ])
  end

  @doc """
  Factory (historical)
  Gets factory.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%UniswapV2UniswapFactoryV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_factory__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2UniswapFactoryV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_factory__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/factory/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2UniswapFactoryV2Dto{}]}
    ])
  end

  @doc """
  LiquidityPositions (historical)
  Gets liquidity positions.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2LiquidityPositionV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_liquidity_positions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2LiquidityPositionV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_liquidity_positions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/liquidityPositions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2LiquidityPositionV2Dto{}]}
    ])
  end

  @doc """
  LiquidityPositionsSnapshots (historical)
  Gets liquidity positions snapshots.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2LiquidityPositionSnapshotV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_liquidity_positions_snapshots__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2LiquidityPositionSnapshotV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_liquidity_positions_snapshots__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/liquidityPositionsSnapshots/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2LiquidityPositionSnapshotV2Dto{}]}
    ])
  end

  @doc """
  Mints (historical)
  Gets mints.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2MintV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_mints__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2MintV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_mints__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/mints/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2MintV2Dto{}]}
    ])
  end

  @doc """
  Pools (current) ðŸ”¥
  Gets pools.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:filter_pool_id` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2PairV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_pools__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2PairV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_pools__current(connection, opts \\ []) do
    optional_params = %{
      :filter_pool_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/pools/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2PairV2Dto{}]}
    ])
  end

  @doc """
  Pools (historical) ðŸ”¥
  Gets pools.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2PairV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_pools__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2PairV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_pools__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/pools/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2PairV2Dto{}]}
    ])
  end

  @doc """
  PoolsDayData (historical)
  Gets pools day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2PairDayDataV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_pools_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2PairDayDataV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_pools_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/poolsDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2PairDayDataV2Dto{}]}
    ])
  end

  @doc """
  PoolsHourData (historical)
  Gets pools tracked each our.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2PairHourDataV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_pools_hour_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2PairHourDataV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_pools_hour_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/poolsHourData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2PairHourDataV2Dto{}]}
    ])
  end

  @doc """
  Swaps (current) ðŸ”¥
  Gets swaps.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2SwapV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_swaps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2SwapV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_swaps__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/swaps/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2SwapV2Dto{}]}
    ])
  end

  @doc """
  Swaps (historical) ðŸ”¥
  Gets swaps.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2SwapV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_swaps__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2SwapV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_swaps__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/swaps/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2SwapV2Dto{}]}
    ])
  end

  @doc """
  Tokens (current) ðŸ”¥
  Gets tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2TokenV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2TokenV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2TokenV2Dto{}]}
    ])
  end

  @doc """
  Tokens (historical) ðŸ”¥
  Gets tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2TokenV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2TokenV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/tokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2TokenV2Dto{}]}
    ])
  end

  @doc """
  TokensDayData (historical)
  Gets tokens day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%UniswapV2TokenDayDataV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_tokens_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2TokenDayDataV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_tokens_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/tokensDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2TokenDayDataV2Dto{}]}
    ])
  end

  @doc """
  Transactions (historical)
  Gets transactions.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%UniswapV2TransactionV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_transactions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2TransactionV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_transactions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/transactions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2TransactionV2Dto{}]}
    ])
  end

  @doc """
  Users (historical)
  Gets users.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%UniswapV2UserV2Dto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_users__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.UniswapV2UserV2Dto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_users__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/users/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.UniswapV2UserV2Dto{}]}
    ])
  end
end
