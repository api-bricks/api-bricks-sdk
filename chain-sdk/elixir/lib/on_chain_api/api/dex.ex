# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainAPI.Api.Dex do
  @moduledoc """
  API calls for all endpoints tagged `Dex`.
  """

  alias OnChainAPI.Connection
  import OnChainAPI.RequestBuilder

  @doc """
  Batches (historical)
  Gets batches.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%DexBatchDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_batches__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexBatchDto.t)} | {:error, Tesla.Env.t}
  def dex_get_batches__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/batches/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexBatchDto{}]}
    ])
  end

  @doc """
  Deposits (historical)
  Gets deposits.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%DexDepositDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_deposits__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexDepositDto.t)} | {:error, Tesla.Env.t}
  def dex_get_deposits__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/deposits/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexDepositDto{}]}
    ])
  end

  @doc """
  Orders (historical)
  Gets orders.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%DexOrderDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_orders__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexOrderDto.t)} | {:error, Tesla.Env.t}
  def dex_get_orders__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/orders/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexOrderDto{}]}
    ])
  end

  @doc """
  Prices (historical)
  Gets prices.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%DexPriceDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_prices__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexPriceDto.t)} | {:error, Tesla.Env.t}
  def dex_get_prices__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/prices/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexPriceDto{}]}
    ])
  end

  @doc """
  Solutions (historical)
  Gets solutions.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%DexSolutionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_solutions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexSolutionDto.t)} | {:error, Tesla.Env.t}
  def dex_get_solutions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/solutions/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexSolutionDto{}]}
    ])
  end

  @doc """
  Stats (historical)
  Gets stats.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%DexStatsDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_stats__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexStatsDto.t)} | {:error, Tesla.Env.t}
  def dex_get_stats__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/stats/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexStatsDto{}]}
    ])
  end

  @doc """
  Tokens (historical) ðŸ”¥
  Gets tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%DexTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexTokenDto.t)} | {:error, Tesla.Env.t}
  def dex_get_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/tokens/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexTokenDto{}]}
    ])
  end

  @doc """
  Trades (historical) ðŸ”¥
  Gets trades.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%DexTradeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_trades__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexTradeDto.t)} | {:error, Tesla.Env.t}
  def dex_get_trades__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/trades/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexTradeDto{}]}
    ])
  end

  @doc """
  Users (historical)
  Gets users.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%DexUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_users__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexUserDto.t)} | {:error, Tesla.Env.t}
  def dex_get_users__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/users/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexUserDto{}]}
    ])
  end

  @doc """
  Withdraws (historical)
  Gets withdraws.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%DexWithdrawDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_withdraws__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexWithdrawDto.t)} | {:error, Tesla.Env.t}
  def dex_get_withdraws__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/withdraws/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexWithdrawDto{}]}
    ])
  end

  @doc """
  WithdrawsRequests (historical)
  Gets withdraws requests.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%DexWithdrawRequestDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_withdraws_requests__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexWithdrawRequestDto.t)} | {:error, Tesla.Env.t}
  def dex_get_withdraws_requests__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/withdrawsRequests/historical-manual")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexWithdrawRequestDto{}]}
    ])
  end
end
