# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainAPI.Api.Sushiswap do
  @moduledoc """
  API calls for all endpoints tagged `Sushiswap`.
  """

  alias OnChainAPI.Connection
  import OnChainAPI.RequestBuilder

  @doc """
  Exchanges (current) ðŸ”¥
  Gets exchanges.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveExchangeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_exchanges__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveExchangeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_exchanges__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/exchanges/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveExchangeDto{}]}
    ])
  end

  @doc """
  Trades (current) ðŸ”¥
  Gets trades.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexTradeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_trades__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexTradeDto.t)} | {:error, Tesla.Env.t}
  def dex_get_trades__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/trades/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexTradeDto{}]}
    ])
  end

  @doc """
  Pools (current) ðŸ”¥
  Gets pools.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapPairDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_pools__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapPairDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_pools__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/pools/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapPairDto{}]}
    ])
  end

  @doc """
  Swaps (current) ðŸ”¥
  Gets swaps.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapSwapDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_swaps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapSwapDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_swaps__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/swaps/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapSwapDto{}]}
    ])
  end

  @doc """
  Tokens (current) ðŸ”¥
  Gets tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapTokenDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapTokenDto{}]}
    ])
  end
end
