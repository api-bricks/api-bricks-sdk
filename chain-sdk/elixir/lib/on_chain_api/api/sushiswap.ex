# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainAPI.Api.Sushiswap do
  @moduledoc """
  API calls for all endpoints tagged `Sushiswap`.
  """

  alias OnChainAPI.Connection
  import OnChainAPI.RequestBuilder

  @doc """
  Exchanges (current) ðŸ”¥
  Gets exchanges.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveExchangeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_exchanges__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveExchangeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_exchanges__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/exchanges/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveExchangeDto{}]}
    ])
  end

  @doc """
  Trades (current) ðŸ”¥
  Gets trades.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexTradeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_trades__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.DexTradeDto.t)} | {:error, Tesla.Env.t}
  def dex_get_trades__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/trades/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.DexTradeDto{}]}
    ])
  end

  @doc """
  BundleDTOs (historical) ðŸ”¥
  Gets BundleDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapBundleDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_bundle_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapBundleDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_bundle_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/BundleDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapBundleDto{}]}
    ])
  end

  @doc """
  Bundles (historical)
  Gets bundles.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): AAAAAAAAAA
    - `:endBlock` (integer()): BBBBBBBBBBBB
    - `:startDate` (DateTime.t): CCCCCCCCC
    - `:endDate` (DateTime.t): DDDDDDDDDDD

  ### Returns

  - `{:ok, [%SushiswapBundleDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_bundles__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapBundleDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_bundles__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/bundles/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapBundleDto{}]}
    ])
  end

  @doc """
  BurnDTOs (historical) ðŸ”¥
  Gets BurnDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapBurnDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_burn_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapBurnDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_burn_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/BurnDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapBurnDto{}]}
    ])
  end

  @doc """
  Burns (historical)
  Gets burns.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapBurnDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_burns__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapBurnDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_burns__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/burns/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapBurnDto{}]}
    ])
  end

  @doc """
  DayData (historical)
  Gets day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%SushiswapDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapDayDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/dayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapDayDataDto{}]}
    ])
  end

  @doc """
  DayDataDTOs (historical) ðŸ”¥
  Gets DayDataDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_day_data_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapDayDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_day_data_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/DayDataDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapDayDataDto{}]}
    ])
  end

  @doc """
  Factory (historical)
  Gets factory.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%SushiswapFactoryDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_factory__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapFactoryDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_factory__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/factory/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapFactoryDto{}]}
    ])
  end

  @doc """
  FactoryDTOs (historical) ðŸ”¥
  Gets FactoryDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapFactoryDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_factory_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapFactoryDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_factory_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/FactoryDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapFactoryDto{}]}
    ])
  end

  @doc """
  HourData (historical)
  Gets hour data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%SushiswapHourDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_hour_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapHourDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_hour_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/hourData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapHourDataDto{}]}
    ])
  end

  @doc """
  HourDataDTOs (historical) ðŸ”¥
  Gets HourDataDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapHourDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_hour_data_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapHourDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_hour_data_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/HourDataDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapHourDataDto{}]}
    ])
  end

  @doc """
  LiquidityPosition (historical)
  Gets liquidity position.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapLiquidityPositionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_liquidity_position__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapLiquidityPositionDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_liquidity_position__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/liquidityPosition/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapLiquidityPositionDto{}]}
    ])
  end

  @doc """
  LiquidityPositionDTOs (historical) ðŸ”¥
  Gets LiquidityPositionDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapLiquidityPositionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_liquidity_position_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapLiquidityPositionDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_liquidity_position_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/LiquidityPositionDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapLiquidityPositionDto{}]}
    ])
  end

  @doc """
  LiquidityPositionSnapshot (historical)
  Gets liquidity position snapshot.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapLiquidityPositionSnapshotDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_liquidity_position_snapshot__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapLiquidityPositionSnapshotDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_liquidity_position_snapshot__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/liquidityPositionSnapshots/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapLiquidityPositionSnapshotDto{}]}
    ])
  end

  @doc """
  LiquidityPositionSnapshotDTOs (historical) ðŸ”¥
  Gets LiquidityPositionSnapshotDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapLiquidityPositionSnapshotDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_liquidity_position_snapshot_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapLiquidityPositionSnapshotDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_liquidity_position_snapshot_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/LiquidityPositionSnapshotDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapLiquidityPositionSnapshotDto{}]}
    ])
  end

  @doc """
  MintDTOs (historical) ðŸ”¥
  Gets MintDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapMintDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_mint_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapMintDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_mint_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/MintDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapMintDto{}]}
    ])
  end

  @doc """
  Mints (historical)
  Gets mints.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapMintDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_mints__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapMintDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_mints__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/mints/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapMintDto{}]}
    ])
  end

  @doc """
  PairDayDataDTOs (historical) ðŸ”¥
  Gets PairDayDataDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapPairDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_pair_day_data_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapPairDayDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_pair_day_data_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/PairDayDataDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapPairDayDataDto{}]}
    ])
  end

  @doc """
  PairDTOs (historical) ðŸ”¥
  Gets PairDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapPairDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_pair_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapPairDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_pair_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/PairDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapPairDto{}]}
    ])
  end

  @doc """
  PairHourDataDTOs (historical) ðŸ”¥
  Gets PairHourDataDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapPairHourDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_pair_hour_data_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapPairHourDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_pair_hour_data_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/PairHourDataDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapPairHourDataDto{}]}
    ])
  end

  @doc """
  Pools (current) ðŸ”¥
  Gets pools.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapPairDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_pools__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapPairDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_pools__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/pools/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapPairDto{}]}
    ])
  end

  @doc """
  Pools (historical) ðŸ”¥
  Gets list of pools for given filters.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe
    - `:poolId` (String.t): The pool address.

  ### Returns

  - `{:ok, [%SushiswapPairDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_pools__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapPairDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_pools__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/pools/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapPairDto{}]}
    ])
  end

  @doc """
  PoolsDayData (historical)
  Gets pools day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapPairDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_pools_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapPairDayDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_pools_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/poolsDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapPairDayDataDto{}]}
    ])
  end

  @doc """
  PoolsHourData (historical)
  Gets pools tracked each our.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapPairHourDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_pools_hour_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapPairHourDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_pools_hour_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/poolsHourData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapPairHourDataDto{}]}
    ])
  end

  @doc """
  SwapDTOs (historical) ðŸ”¥
  Gets SwapDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapSwapDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_swap_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapSwapDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_swap_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/SwapDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapSwapDto{}]}
    ])
  end

  @doc """
  Swaps (current) ðŸ”¥
  Gets swaps.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapSwapDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_swaps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapSwapDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_swaps__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/swaps/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapSwapDto{}]}
    ])
  end

  @doc """
  Swaps (historical) ðŸ”¥
  Gets list of swaps for given filters.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe
    - `:poolId` (String.t): The pool address.

  ### Returns

  - `{:ok, [%SushiswapSwapDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_swaps__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapSwapDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_swaps__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/swaps/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapSwapDto{}]}
    ])
  end

  @doc """
  TokenDayDataDTOs (historical) ðŸ”¥
  Gets TokenDayDataDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapTokenDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_token_day_data_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapTokenDayDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_token_day_data_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/TokenDayDataDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapTokenDayDataDto{}]}
    ])
  end

  @doc """
  TokenDTOs (historical) ðŸ”¥
  Gets TokenDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_token_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapTokenDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_token_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/TokenDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapTokenDto{}]}
    ])
  end

  @doc """
  Tokens (current) ðŸ”¥
  Gets tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapTokenDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapTokenDto{}]}
    ])
  end

  @doc """
  Tokens (historical) ðŸ”¥
  Gets list of tokens for given filters.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe
    - `:tokenId` (String.t): The token address.

  ### Returns

  - `{:ok, [%SushiswapTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapTokenDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/tokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapTokenDto{}]}
    ])
  end

  @doc """
  TokensDayData (historical)
  Gets tokens day data.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapTokenDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_tokens_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapTokenDayDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_tokens_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/tokensDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapTokenDayDataDto{}]}
    ])
  end

  @doc """
  TransactionDTOs (historical) ðŸ”¥
  Gets TransactionDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapTransactionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_transaction_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapTransactionDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_transaction_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/TransactionDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapTransactionDto{}]}
    ])
  end

  @doc """
  Transactions (historical)
  Gets transactions.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%SushiswapTransactionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_transactions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapTransactionDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_transactions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/transactions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapTransactionDto{}]}
    ])
  end

  @doc """
  UserDTOs (historical) ðŸ”¥
  Gets UserDTOs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%SushiswapUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_user_dtos__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapUserDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_user_dtos__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/UserDTOs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapUserDto{}]}
    ])
  end

  @doc """
  Users (historical)
  Gets users.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%SushiswapUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_get_users__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.SushiswapUserDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_get_users__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/users/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.SushiswapUserDto{}]}
    ])
  end
end
