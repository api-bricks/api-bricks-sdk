# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainAPI.Api.Curve do
  @moduledoc """
  API calls for all endpoints tagged `Curve`.
  """

  alias OnChainAPI.Connection
  import OnChainAPI.RequestBuilder

  @doc """
  Accounts (historical)
  Gets accounts.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveAccountDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_accounts__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveAccountDto.t)} | {:error, Tesla.Env.t}
  def curve_get_accounts__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/accounts/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveAccountDto{}]}
    ])
  end

  @doc """
  AddLiquidityEvents (historical)
  Gets add liquidity events.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveAddLiquidityEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_add_liquidity_events__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveAddLiquidityEventDto.t)} | {:error, Tesla.Env.t}
  def curve_get_add_liquidity_events__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/addLiquidityEvents/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveAddLiquidityEventDto{}]}
    ])
  end

  @doc """
  AdminFeeChangeLogs (historical)
  Gets admin fee change logs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveAdminFeeChangeLogDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_admin_fee_change_logs__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveAdminFeeChangeLogDto.t)} | {:error, Tesla.Env.t}
  def curve_get_admin_fee_change_logs__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/adminFeeChangeLogs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveAdminFeeChangeLogDto{}]}
    ])
  end

  @doc """
  AmplificationCoeffChangeLogs (historical)
  Gets amplification coeff change logs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveAmplificationCoeffChangeLogDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_amplification_coeff_change_logs__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveAmplificationCoeffChangeLogDto.t)} | {:error, Tesla.Env.t}
  def curve_get_amplification_coeff_change_logs__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/amplificationCoeffChangeLogs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveAmplificationCoeffChangeLogDto{}]}
    ])
  end

  @doc """
  Coins (historical)
  Gets coins.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveCoinDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_coins__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveCoinDto.t)} | {:error, Tesla.Env.t}
  def curve_get_coins__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/coins/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveCoinDto{}]}
    ])
  end

  @doc """
  Contracts (historical)
  Gets contracts.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveContractDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_contracts__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveContractDto.t)} | {:error, Tesla.Env.t}
  def curve_get_contracts__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/contracts/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveContractDto{}]}
    ])
  end

  @doc """
  ContractsVersions (historical)
  Gets contracts versions.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveContractVersionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_contracts_versions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveContractVersionDto.t)} | {:error, Tesla.Env.t}
  def curve_get_contracts_versions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/contractsVersions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveContractVersionDto{}]}
    ])
  end

  @doc """
  DailyVolumes (historical)
  Gets daily volumes.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveDailyVolumeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_daily_volumes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveDailyVolumeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_daily_volumes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/dailyVolumes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveDailyVolumeDto{}]}
    ])
  end

  @doc """
  Exchanges (historical) ðŸ”¥
  Gets exchanges.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveExchangeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_exchanges__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveExchangeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_exchanges__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/exchanges/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveExchangeDto{}]}
    ])
  end

  @doc """
  FeeChangeLogs (historical)
  Gets fee change logs.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveFeeChangeLogDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_fee_change_logs__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveFeeChangeLogDto.t)} | {:error, Tesla.Env.t}
  def curve_get_fee_change_logs__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/feeChangeLogs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveFeeChangeLogDto{}]}
    ])
  end

  @doc """
  Gauges (historical)
  Gets gauges.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveGaugeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gauges/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveGaugeDto{}]}
    ])
  end

  @doc """
  GaugesDeposits (historical)
  Gets gauges deposits.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveGaugeDepositDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges_deposits__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveGaugeDepositDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges_deposits__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugesDeposits/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveGaugeDepositDto{}]}
    ])
  end

  @doc """
  GaugesLiquidity (historical)
  Gets gauges liquidity.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveGaugeLiquidityDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges_liquidity__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveGaugeLiquidityDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges_liquidity__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugesLiquidity/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveGaugeLiquidityDto{}]}
    ])
  end

  @doc """
  GaugesTotalWeights (historical)
  Gets gauges total weights.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveGaugeTotalWeightDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges_total_weights__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveGaugeTotalWeightDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges_total_weights__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugesTotalWeights/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveGaugeTotalWeightDto{}]}
    ])
  end

  @doc """
  GaugesTypes (historical)
  Gets gauges types.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveGaugeTypeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges_types__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveGaugeTypeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges_types__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugesTypes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveGaugeTypeDto{}]}
    ])
  end

  @doc """
  GaugesTypesWeights (historical)
  Gets gauges types weights.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveGaugeTypeWeightDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges_types_weights__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveGaugeTypeWeightDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges_types_weights__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugesTypesWeights/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveGaugeTypeWeightDto{}]}
    ])
  end

  @doc """
  GaugesWeights (historical)
  Gets gauges weights.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveGaugeWeightDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges_weights__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveGaugeWeightDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges_weights__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugesWeights/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveGaugeWeightDto{}]}
    ])
  end

  @doc """
  GaugesWeightsVotes (historical)
  Gets gauges weights votes.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveGaugeWeightVoteDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges_weights_votes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveGaugeWeightVoteDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges_weights_votes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugesWeightsVotes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveGaugeWeightVoteDto{}]}
    ])
  end

  @doc """
  GaugesWithdraw (historical)
  Gets gauges withdraws.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveGaugeWithdrawDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges_withdraw__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveGaugeWithdrawDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges_withdraw__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugesWithdraws/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveGaugeWithdrawDto{}]}
    ])
  end

  @doc """
  HourlyVolumes (historical)
  Gets hourly volumes.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveHourlyVolumeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_hourly_volumes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveHourlyVolumeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_hourly_volumes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/hourlyVolumes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveHourlyVolumeDto{}]}
    ])
  end

  @doc """
  LpTokens (historical)
  Gets lp tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveLpTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_lp_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveLpTokenDto.t)} | {:error, Tesla.Env.t}
  def curve_get_lp_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/lpTokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveLpTokenDto{}]}
    ])
  end

  @doc """
  Pools (historical) ðŸ”¥
  Gets pools.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurvePoolDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_pools__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurvePoolDto.t)} | {:error, Tesla.Env.t}
  def curve_get_pools__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/pools/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurvePoolDto{}]}
    ])
  end

  @doc """
  Proposals (historical)
  Gets proposals.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveProposalDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_proposals__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveProposalDto.t)} | {:error, Tesla.Env.t}
  def curve_get_proposals__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/proposals/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveProposalDto{}]}
    ])
  end

  @doc """
  ProposalsVotes (historical)
  Gets proposals votes.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveProposalVoteDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_proposals_votes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveProposalVoteDto.t)} | {:error, Tesla.Env.t}
  def curve_get_proposals_votes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/proposalsVotes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveProposalVoteDto{}]}
    ])
  end

  @doc """
  RemoveLiquidityEvents (historical)
  Gets remove liquidity events.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveRemoveLiquidityEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_remove_liquidity_events__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveRemoveLiquidityEventDto.t)} | {:error, Tesla.Env.t}
  def curve_get_remove_liquidity_events__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/removeLiquidityEvents/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveRemoveLiquidityEventDto{}]}
    ])
  end

  @doc """
  RemoveLiquidityOneEvents (historical)
  Gets remove liquidity one events.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveRemoveLiquidityOneEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_remove_liquidity_one_events__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveRemoveLiquidityOneEventDto.t)} | {:error, Tesla.Env.t}
  def curve_get_remove_liquidity_one_events__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/removeLiquidityOneEvents/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveRemoveLiquidityOneEventDto{}]}
    ])
  end

  @doc """
  SystemStates (historical)
  Gets system states.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveSystemStateDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_system_states__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveSystemStateDto.t)} | {:error, Tesla.Env.t}
  def curve_get_system_states__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/systemStates/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveSystemStateDto{}]}
    ])
  end

  @doc """
  Tokens (historical) ðŸ”¥
  Gets tokens.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:tokenId` (String.t): 

  ### Returns

  - `{:ok, [%CurveTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveTokenDto.t)} | {:error, Tesla.Env.t}
  def curve_get_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :tokenId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/tokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveTokenDto{}]}
    ])
  end

  @doc """
  TransferOwnershipEvents (historical)
  Gets transfer ownership events.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveTransferOwnershipEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_transfer_ownership_events__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveTransferOwnershipEventDto.t)} | {:error, Tesla.Env.t}
  def curve_get_transfer_ownership_events__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/transferOwnershipEvents/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveTransferOwnershipEventDto{}]}
    ])
  end

  @doc """
  UnderlyingCoins (historical)
  Gets underlying coins.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveUnderlyingCoinDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_underlying_coins__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveUnderlyingCoinDto.t)} | {:error, Tesla.Env.t}
  def curve_get_underlying_coins__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/underlyingCoins/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveUnderlyingCoinDto{}]}
    ])
  end

  @doc """
  VotingApps (historical)
  Gets voting apps.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 

  ### Returns

  - `{:ok, [%CurveVotingAppDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_voting_apps__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveVotingAppDto.t)} | {:error, Tesla.Env.t}
  def curve_get_voting_apps__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/votingApps/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveVotingAppDto{}]}
    ])
  end

  @doc """
  WeeklyVolumes (historical)
  Gets weekly volumes.

  ### Parameters

  - `connection` (OnChainAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): 
    - `:endBlock` (integer()): 
    - `:startDate` (DateTime.t): 
    - `:endDate` (DateTime.t): 
    - `:poolId` (String.t): 

  ### Returns

  - `{:ok, [%CurveWeeklyVolumeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_weekly_volumes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainAPI.Model.CurveWeeklyVolumeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_weekly_volumes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :poolId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/weeklyVolumes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainAPI.Model.CurveWeeklyVolumeDto{}]}
    ])
  end
end
