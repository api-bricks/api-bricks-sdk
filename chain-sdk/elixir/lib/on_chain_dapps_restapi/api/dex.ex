# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainDapps-RESTAPI.Api.Dex do
  @moduledoc """
  API calls for all endpoints tagged `Dex`.
  """

  alias OnChainDapps-RESTAPI.Connection
  import OnChainDapps-RESTAPI.RequestBuilder

  @doc """
  Batches (current)
  Gets batches.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexBatchDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_batches__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexBatchDto.t)} | {:error, Tesla.Env.t}
  def dex_batches__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/batches/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexBatchDto{}]}
    ])
  end

  @doc """
  Deposits (current)
  Gets deposits.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexDepositDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_deposits__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexDepositDto.t)} | {:error, Tesla.Env.t}
  def dex_deposits__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/deposits/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexDepositDto{}]}
    ])
  end

  @doc """
  Batches (historical)
  Gets batches.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Identifier.

  ### Returns

  - `{:ok, [%DexBatchDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_batches__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexBatchDto.t)} | {:error, Tesla.Env.t}
  def dex_get_batches__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/batches/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexBatchDto{}]}
    ])
  end

  @doc """
  Deposits (historical)
  Gets deposits.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Identifier, format: (transaction hash)-(token id).
    - `:user` (String.t): User address.

  ### Returns

  - `{:ok, [%DexDepositDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_deposits__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexDepositDto.t)} | {:error, Tesla.Env.t}
  def dex_get_deposits__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :user => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/deposits/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexDepositDto{}]}
    ])
  end

  @doc """
  Orders (historical)
  Gets orders.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Identifier, format: (owner address)-(order id)
    - `:buy_token` (String.t): Identifier of token that was bought.
    - `:sell_token` (String.t): Identifier of token that was sold.

  ### Returns

  - `{:ok, [%DexOrderDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_orders__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexOrderDto.t)} | {:error, Tesla.Env.t}
  def dex_get_orders__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :buy_token => :query,
      :sell_token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/orders/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexOrderDto{}]}
    ])
  end

  @doc """
  Prices (historical)
  Gets prices.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Identifier, format: (token id)-(batch id).

  ### Returns

  - `{:ok, [%DexPriceDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_prices__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexPriceDto.t)} | {:error, Tesla.Env.t}
  def dex_get_prices__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/prices/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexPriceDto{}]}
    ])
  end

  @doc """
  Solutions (historical)
  Gets solutions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%DexSolutionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_solutions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexSolutionDto.t)} | {:error, Tesla.Env.t}
  def dex_get_solutions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/solutions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexSolutionDto{}]}
    ])
  end

  @doc """
  Stats (historical)
  Gets stats.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%DexStatsDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_stats__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexStatsDto.t)} | {:error, Tesla.Env.t}
  def dex_get_stats__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/stats/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexStatsDto{}]}
    ])
  end

  @doc """
  Tokens (historical)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:address` (String.t): 
    - `:symbol` (String.t): 
    - `:name` (String.t): 

  ### Returns

  - `{:ok, [%DexTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexTokenDto.t)} | {:error, Tesla.Env.t}
  def dex_get_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :address => :query,
      :symbol => :query,
      :name => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/tokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexTokenDto{}]}
    ])
  end

  @doc """
  Trades (historical)
  Gets trades.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:buy_token` (String.t): 
    - `:sell_token` (String.t): 

  ### Returns

  - `{:ok, [%DexTradeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_trades__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexTradeDto.t)} | {:error, Tesla.Env.t}
  def dex_get_trades__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :buy_token => :query,
      :sell_token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/trades/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexTradeDto{}]}
    ])
  end

  @doc """
  Users (historical)
  Gets users.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%DexUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_users__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexUserDto.t)} | {:error, Tesla.Env.t}
  def dex_get_users__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/users/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexUserDto{}]}
    ])
  end

  @doc """
  WithdrawRequests (historical)
  Gets withdrawRequests.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Identifier, format: (transaction hash)-(id).
    - `:user` (String.t): 

  ### Returns

  - `{:ok, [%DexWithdrawRequestDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_withdraw_requests__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexWithdrawRequestDto.t)} | {:error, Tesla.Env.t}
  def dex_get_withdraw_requests__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :user => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/withdrawRequests/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexWithdrawRequestDto{}]}
    ])
  end

  @doc """
  Withdraws (historical)
  Gets withdraws.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Identifier, format: (transaction hash)-(id).
    - `:user` (String.t): 

  ### Returns

  - `{:ok, [%DexWithdrawDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_get_withdraws__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexWithdrawDto.t)} | {:error, Tesla.Env.t}
  def dex_get_withdraws__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :user => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/withdraws/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexWithdrawDto{}]}
    ])
  end

  @doc """
  Orders (current)
  Gets orders.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexOrderDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_orders__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexOrderDto.t)} | {:error, Tesla.Env.t}
  def dex_orders__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/orders/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexOrderDto{}]}
    ])
  end

  @doc """
  Prices (current)
  Gets prices.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexPriceDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_prices__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexPriceDto.t)} | {:error, Tesla.Env.t}
  def dex_prices__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/prices/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexPriceDto{}]}
    ])
  end

  @doc """
  Solutions (current)
  Gets solutions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexSolutionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_solutions__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexSolutionDto.t)} | {:error, Tesla.Env.t}
  def dex_solutions__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/solutions/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexSolutionDto{}]}
    ])
  end

  @doc """
  Stats (current)
  Gets stats.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexStatsDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_stats__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexStatsDto.t)} | {:error, Tesla.Env.t}
  def dex_stats__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/stats/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexStatsDto{}]}
    ])
  end

  @doc """
  Tokens (current)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexTokenDto.t)} | {:error, Tesla.Env.t}
  def dex_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexTokenDto{}]}
    ])
  end

  @doc """
  Trades (current)
  Gets trades.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexTradeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_trades__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexTradeDto.t)} | {:error, Tesla.Env.t}
  def dex_trades__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/trades/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexTradeDto{}]}
    ])
  end

  @doc """
  Users (current)
  Gets users.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_users__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexUserDto.t)} | {:error, Tesla.Env.t}
  def dex_users__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/users/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexUserDto{}]}
    ])
  end

  @doc """
  WithdrawRequests (current)
  Gets withdrawRequests.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexWithdrawRequestDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_withdraw_requests__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexWithdrawRequestDto.t)} | {:error, Tesla.Env.t}
  def dex_withdraw_requests__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/withdrawRequests/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexWithdrawRequestDto{}]}
    ])
  end

  @doc """
  Withdraws (current)
  Gets withdraws.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexWithdrawDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_withdraws__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexWithdrawDto.t)} | {:error, Tesla.Env.t}
  def dex_withdraws__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/withdraws/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexWithdrawDto{}]}
    ])
  end
end
