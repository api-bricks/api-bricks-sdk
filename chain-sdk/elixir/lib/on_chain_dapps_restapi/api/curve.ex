# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainDapps-RESTAPI.Api.Curve do
  @moduledoc """
  API calls for all endpoints tagged `Curve`.
  """

  alias OnChainDapps-RESTAPI.Connection
  import OnChainDapps-RESTAPI.RequestBuilder

  @doc """
  Accounts (current)
  Gets accounts.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveAccountDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_accounts__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveAccountDto.t)} | {:error, Tesla.Env.t}
  def curve_accounts__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/accounts/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveAccountDto{}]}
    ])
  end

  @doc """
  AddLiquidityEvents (current)
  Gets addLiquidityEvents.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveAddLiquidityEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_add_liquidity_events__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveAddLiquidityEventDto.t)} | {:error, Tesla.Env.t}
  def curve_add_liquidity_events__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/addLiquidityEvents/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveAddLiquidityEventDto{}]}
    ])
  end

  @doc """
  AdminFeeChangeLogs (current)
  Gets adminFeeChangeLogs.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveAdminFeeChangeLogDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_admin_fee_change_logs__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveAdminFeeChangeLogDto.t)} | {:error, Tesla.Env.t}
  def curve_admin_fee_change_logs__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/adminFeeChangeLogs/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveAdminFeeChangeLogDto{}]}
    ])
  end

  @doc """
  AmplificationCoeffChangeLogs (current)
  Gets amplificationCoeffChangeLogs.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveAmplificationCoeffChangeLogDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_amplification_coeff_change_logs__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveAmplificationCoeffChangeLogDto.t)} | {:error, Tesla.Env.t}
  def curve_amplification_coeff_change_logs__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/amplificationCoeffChangeLogs/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveAmplificationCoeffChangeLogDto{}]}
    ])
  end

  @doc """
  Coins (current)
  Gets coins.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveCoinDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_coins__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveCoinDto.t)} | {:error, Tesla.Env.t}
  def curve_coins__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/coins/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveCoinDto{}]}
    ])
  end

  @doc """
  ContractVersions (current)
  Gets contractVersions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveContractVersionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_contract_versions__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveContractVersionDto.t)} | {:error, Tesla.Env.t}
  def curve_contract_versions__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/contractVersions/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveContractVersionDto{}]}
    ])
  end

  @doc """
  Contracts (current)
  Gets contracts.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveContractDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_contracts__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveContractDto.t)} | {:error, Tesla.Env.t}
  def curve_contracts__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/contracts/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveContractDto{}]}
    ])
  end

  @doc """
  DailyVolumes (current)
  Gets dailyVolumes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveDailyVolumeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_daily_volumes__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveDailyVolumeDto.t)} | {:error, Tesla.Env.t}
  def curve_daily_volumes__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/dailyVolumes/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveDailyVolumeDto{}]}
    ])
  end

  @doc """
  Exchanges (current)
  Gets exchanges.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveExchangeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_exchanges__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveExchangeDto.t)} | {:error, Tesla.Env.t}
  def curve_exchanges__current(connection, opts \\ []) do
    optional_params = %{
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/exchanges/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveExchangeDto{}]}
    ])
  end

  @doc """
  FeeChangeLogs (current)
  Gets feeChangeLogs.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveFeeChangeLogDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_fee_change_logs__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveFeeChangeLogDto.t)} | {:error, Tesla.Env.t}
  def curve_fee_change_logs__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/feeChangeLogs/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveFeeChangeLogDto{}]}
    ])
  end

  @doc """
  GaugeDeposits (current)
  Gets gaugeDeposits.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveGaugeDepositDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_gauge_deposits__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeDepositDto.t)} | {:error, Tesla.Env.t}
  def curve_gauge_deposits__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeDeposits/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeDepositDto{}]}
    ])
  end

  @doc """
  GaugeLiquidities (current)
  Gets gaugeLiquidities.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveGaugeLiquidityDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_gauge_liquidities__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeLiquidityDto.t)} | {:error, Tesla.Env.t}
  def curve_gauge_liquidities__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeLiquidities/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeLiquidityDto{}]}
    ])
  end

  @doc """
  GaugeTotalWeights (current)
  Gets gaugeTotalWeights.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveGaugeTotalWeightDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_gauge_total_weights__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeTotalWeightDto.t)} | {:error, Tesla.Env.t}
  def curve_gauge_total_weights__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeTotalWeights/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeTotalWeightDto{}]}
    ])
  end

  @doc """
  GaugeTypeWeights (current)
  Gets gaugeTypeWeights.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveGaugeTypeWeightDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_gauge_type_weights__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeTypeWeightDto.t)} | {:error, Tesla.Env.t}
  def curve_gauge_type_weights__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeTypeWeights/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeTypeWeightDto{}]}
    ])
  end

  @doc """
  GaugeTypes (current)
  Gets gaugeTypes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveGaugeTypeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_gauge_types__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeTypeDto.t)} | {:error, Tesla.Env.t}
  def curve_gauge_types__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeTypes/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeTypeDto{}]}
    ])
  end

  @doc """
  GaugeWeightVotes (current)
  Gets gaugeWeightVotes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveGaugeWeightVoteDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_gauge_weight_votes__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeWeightVoteDto.t)} | {:error, Tesla.Env.t}
  def curve_gauge_weight_votes__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeWeightVotes/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeWeightVoteDto{}]}
    ])
  end

  @doc """
  GaugeWeights (current)
  Gets gaugeWeights.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveGaugeWeightDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_gauge_weights__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeWeightDto.t)} | {:error, Tesla.Env.t}
  def curve_gauge_weights__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeWeights/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeWeightDto{}]}
    ])
  end

  @doc """
  GaugeWithdraws (current)
  Gets gaugeWithdraws.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveGaugeWithdrawDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_gauge_withdraws__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeWithdrawDto.t)} | {:error, Tesla.Env.t}
  def curve_gauge_withdraws__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeWithdraws/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeWithdrawDto{}]}
    ])
  end

  @doc """
  Gauges (current)
  Gets gauges.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveGaugeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_gauges__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeDto.t)} | {:error, Tesla.Env.t}
  def curve_gauges__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gauges/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeDto{}]}
    ])
  end

  @doc """
  Accounts (historical)
  Gets accounts.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:address` (String.t): 

  ### Returns

  - `{:ok, [%CurveAccountDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_accounts__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveAccountDto.t)} | {:error, Tesla.Env.t}
  def curve_get_accounts__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :address => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/accounts/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveAccountDto{}]}
    ])
  end

  @doc """
  AddLiquidityEvents (historical)
  Gets addLiquidityEvents.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveAddLiquidityEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_add_liquidity_events__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveAddLiquidityEventDto.t)} | {:error, Tesla.Env.t}
  def curve_get_add_liquidity_events__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/addLiquidityEvents/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveAddLiquidityEventDto{}]}
    ])
  end

  @doc """
  AdminFeeChangeLogs (historical)
  Gets adminFeeChangeLogs.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveAdminFeeChangeLogDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_admin_fee_change_logs__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveAdminFeeChangeLogDto.t)} | {:error, Tesla.Env.t}
  def curve_get_admin_fee_change_logs__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/adminFeeChangeLogs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveAdminFeeChangeLogDto{}]}
    ])
  end

  @doc """
  AmplificationCoeffChangeLogs (historical)
  Gets amplificationCoeffChangeLogs.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveAmplificationCoeffChangeLogDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_amplification_coeff_change_logs__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveAmplificationCoeffChangeLogDto.t)} | {:error, Tesla.Env.t}
  def curve_get_amplification_coeff_change_logs__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/amplificationCoeffChangeLogs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveAmplificationCoeffChangeLogDto{}]}
    ])
  end

  @doc """
  Coins (historical)
  Gets coins.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Identifier, format: (pool_id)-(coin_index).
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveCoinDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_coins__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveCoinDto.t)} | {:error, Tesla.Env.t}
  def curve_get_coins__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/coins/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveCoinDto{}]}
    ])
  end

  @doc """
  ContractVersions (historical)
  Gets contractVersions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:address` (String.t): 

  ### Returns

  - `{:ok, [%CurveContractVersionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_contract_versions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveContractVersionDto.t)} | {:error, Tesla.Env.t}
  def curve_get_contract_versions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :address => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/contractVersions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveContractVersionDto{}]}
    ])
  end

  @doc """
  Contracts (historical)
  Gets contracts.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CurveContractDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_contracts__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveContractDto.t)} | {:error, Tesla.Env.t}
  def curve_get_contracts__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/contracts/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveContractDto{}]}
    ])
  end

  @doc """
  DailyVolumes (historical)
  Gets dailyVolumes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveDailyVolumeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_daily_volumes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveDailyVolumeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_daily_volumes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/dailyVolumes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveDailyVolumeDto{}]}
    ])
  end

  @doc """
  Exchanges (historical)
  Gets exchanges.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveExchangeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_exchanges__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveExchangeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_exchanges__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/exchanges/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveExchangeDto{}]}
    ])
  end

  @doc """
  FeeChangeLogs (historical)
  Gets feeChangeLogs.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveFeeChangeLogDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_fee_change_logs__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveFeeChangeLogDto.t)} | {:error, Tesla.Env.t}
  def curve_get_fee_change_logs__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/feeChangeLogs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveFeeChangeLogDto{}]}
    ])
  end

  @doc """
  GaugeDeposits (historical)
  Gets gaugeDeposits.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeDepositDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauge_deposits__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeDepositDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauge_deposits__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeDeposits/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeDepositDto{}]}
    ])
  end

  @doc """
  GaugeLiquidities (historical)
  Gets gaugeLiquidities.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:user` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeLiquidityDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauge_liquidities__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeLiquidityDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauge_liquidities__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :user => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeLiquidities/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeLiquidityDto{}]}
    ])
  end

  @doc """
  GaugeTotalWeights (historical)
  Gets gaugeTotalWeights.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeTotalWeightDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauge_total_weights__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeTotalWeightDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauge_total_weights__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeTotalWeights/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeTotalWeightDto{}]}
    ])
  end

  @doc """
  GaugeTypeWeights (historical)
  Gets gaugeTypeWeights.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeTypeWeightDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauge_type_weights__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeTypeWeightDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauge_type_weights__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeTypeWeights/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeTypeWeightDto{}]}
    ])
  end

  @doc """
  GaugeTypes (historical)
  Gets gaugeTypes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:name` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeTypeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauge_types__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeTypeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauge_types__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :name => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeTypes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeTypeDto{}]}
    ])
  end

  @doc """
  GaugeWeightVotes (historical)
  Gets gaugeWeightVotes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:user` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeWeightVoteDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauge_weight_votes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeWeightVoteDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauge_weight_votes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :user => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeWeightVotes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeWeightVoteDto{}]}
    ])
  end

  @doc """
  GaugeWeights (historical)
  Gets gaugeWeights.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeWeightDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauge_weights__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeWeightDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauge_weights__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeWeights/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeWeightDto{}]}
    ])
  end

  @doc """
  GaugeWithdraws (historical)
  Gets gaugeWithdraws.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeWithdrawDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauge_withdraws__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeWithdrawDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauge_withdraws__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gaugeWithdraws/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeWithdrawDto{}]}
    ])
  end

  @doc """
  Gauges (historical)
  Gets gauges.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:address` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveGaugeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_gauges__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveGaugeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_gauges__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :address => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/gauges/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveGaugeDto{}]}
    ])
  end

  @doc """
  HourlyVolumes (historical)
  Gets hourlyVolumes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveHourlyVolumeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_hourly_volumes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveHourlyVolumeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_hourly_volumes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/hourlyVolumes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveHourlyVolumeDto{}]}
    ])
  end

  @doc """
  LpTokens (historical)
  Gets lpTokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:address` (String.t): 
    - `:name` (String.t): 
    - `:symbol` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveLpTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_lp_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveLpTokenDto.t)} | {:error, Tesla.Env.t}
  def curve_get_lp_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :address => :query,
      :name => :query,
      :symbol => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/lpTokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveLpTokenDto{}]}
    ])
  end

  @doc """
  Pools (historical)
  Gets pools.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Pool address.
    - `:name` (String.t): Pool's human-readable name.

  ### Returns

  - `{:ok, [%CurvePoolDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_pools__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurvePoolDto.t)} | {:error, Tesla.Env.t}
  def curve_get_pools__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :name => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/pools/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurvePoolDto{}]}
    ])
  end

  @doc """
  ProposalVotes (historical)
  Gets proposalVotes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CurveProposalVoteDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_proposal_votes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveProposalVoteDto.t)} | {:error, Tesla.Env.t}
  def curve_get_proposal_votes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/proposalVotes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveProposalVoteDto{}]}
    ])
  end

  @doc """
  Proposals (historical)
  Gets proposals.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CurveProposalDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_proposals__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveProposalDto.t)} | {:error, Tesla.Env.t}
  def curve_get_proposals__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/proposals/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveProposalDto{}]}
    ])
  end

  @doc """
  RemoveLiquidityEvents (historical)
  Gets removeLiquidityEvents.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveRemoveLiquidityEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_remove_liquidity_events__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveRemoveLiquidityEventDto.t)} | {:error, Tesla.Env.t}
  def curve_get_remove_liquidity_events__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/removeLiquidityEvents/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveRemoveLiquidityEventDto{}]}
    ])
  end

  @doc """
  RemoveLiquidityOneEvents (historical)
  Gets removeLiquidityOneEvents.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveRemoveLiquidityOneEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_remove_liquidity_one_events__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveRemoveLiquidityOneEventDto.t)} | {:error, Tesla.Env.t}
  def curve_get_remove_liquidity_one_events__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/removeLiquidityOneEvents/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveRemoveLiquidityOneEventDto{}]}
    ])
  end

  @doc """
  SystemStates (historical)
  Gets systemStates.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Singleton ID, equals to 'current'.

  ### Returns

  - `{:ok, [%CurveSystemStateDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_system_states__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveSystemStateDto.t)} | {:error, Tesla.Env.t}
  def curve_get_system_states__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/systemStates/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveSystemStateDto{}]}
    ])
  end

  @doc """
  Tokens (historical)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:address` (String.t): 
    - `:name` (String.t): 
    - `:symbol` (String.t): 

  ### Returns

  - `{:ok, [%CurveTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveTokenDto.t)} | {:error, Tesla.Env.t}
  def curve_get_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :address => :query,
      :name => :query,
      :symbol => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/tokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveTokenDto{}]}
    ])
  end

  @doc """
  TransferOwnershipEvents (historical)
  Gets transferOwnershipEvents.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveTransferOwnershipEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_transfer_ownership_events__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveTransferOwnershipEventDto.t)} | {:error, Tesla.Env.t}
  def curve_get_transfer_ownership_events__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/transferOwnershipEvents/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveTransferOwnershipEventDto{}]}
    ])
  end

  @doc """
  UnderlyingCoins (historical)
  Gets underlyingCoins.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Equals to: (pool_id)-(coin_index).
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveUnderlyingCoinDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_underlying_coins__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveUnderlyingCoinDto.t)} | {:error, Tesla.Env.t}
  def curve_get_underlying_coins__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/underlyingCoins/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveUnderlyingCoinDto{}]}
    ])
  end

  @doc """
  VotingApps (historical)
  Gets votingApps.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): App address.
    - `:address` (String.t): 

  ### Returns

  - `{:ok, [%CurveVotingAppDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_voting_apps__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveVotingAppDto.t)} | {:error, Tesla.Env.t}
  def curve_get_voting_apps__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :address => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/votingApps/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveVotingAppDto{}]}
    ])
  end

  @doc """
  WeeklyVolumes (historical)
  Gets weeklyVolumes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pool` (String.t): 

  ### Returns

  - `{:ok, [%CurveWeeklyVolumeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_get_weekly_volumes__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveWeeklyVolumeDto.t)} | {:error, Tesla.Env.t}
  def curve_get_weekly_volumes__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pool => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/weeklyVolumes/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveWeeklyVolumeDto{}]}
    ])
  end

  @doc """
  HourlyVolumes (current)
  Gets hourlyVolumes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveHourlyVolumeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_hourly_volumes__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveHourlyVolumeDto.t)} | {:error, Tesla.Env.t}
  def curve_hourly_volumes__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/hourlyVolumes/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveHourlyVolumeDto{}]}
    ])
  end

  @doc """
  LpTokens (current)
  Gets lpTokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveLpTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_lp_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveLpTokenDto.t)} | {:error, Tesla.Env.t}
  def curve_lp_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/lpTokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveLpTokenDto{}]}
    ])
  end

  @doc """
  Pools (current)
  Gets pools.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): Pool address.

  ### Returns

  - `{:ok, [%CurvePoolDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_pools__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurvePoolDto.t)} | {:error, Tesla.Env.t}
  def curve_pools__current(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/pools/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurvePoolDto{}]}
    ])
  end

  @doc """
  ProposalVotes (current)
  Gets proposalVotes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveProposalVoteDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_proposal_votes__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveProposalVoteDto.t)} | {:error, Tesla.Env.t}
  def curve_proposal_votes__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/proposalVotes/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveProposalVoteDto{}]}
    ])
  end

  @doc """
  Proposals (current)
  Gets proposals.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveProposalDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_proposals__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveProposalDto.t)} | {:error, Tesla.Env.t}
  def curve_proposals__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/proposals/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveProposalDto{}]}
    ])
  end

  @doc """
  RemoveLiquidityEvents (current)
  Gets removeLiquidityEvents.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveRemoveLiquidityEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_remove_liquidity_events__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveRemoveLiquidityEventDto.t)} | {:error, Tesla.Env.t}
  def curve_remove_liquidity_events__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/removeLiquidityEvents/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveRemoveLiquidityEventDto{}]}
    ])
  end

  @doc """
  RemoveLiquidityOneEvents (current)
  Gets removeLiquidityOneEvents.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveRemoveLiquidityOneEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_remove_liquidity_one_events__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveRemoveLiquidityOneEventDto.t)} | {:error, Tesla.Env.t}
  def curve_remove_liquidity_one_events__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/removeLiquidityOneEvents/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveRemoveLiquidityOneEventDto{}]}
    ])
  end

  @doc """
  SystemStates (current)
  Gets systemStates.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveSystemStateDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_system_states__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveSystemStateDto.t)} | {:error, Tesla.Env.t}
  def curve_system_states__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/systemStates/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveSystemStateDto{}]}
    ])
  end

  @doc """
  Tokens (current)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveTokenDto.t)} | {:error, Tesla.Env.t}
  def curve_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveTokenDto{}]}
    ])
  end

  @doc """
  TransferOwnershipEvents (current)
  Gets transferOwnershipEvents.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveTransferOwnershipEventDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_transfer_ownership_events__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveTransferOwnershipEventDto.t)} | {:error, Tesla.Env.t}
  def curve_transfer_ownership_events__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/transferOwnershipEvents/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveTransferOwnershipEventDto{}]}
    ])
  end

  @doc """
  UnderlyingCoins (current)
  Gets underlyingCoins.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveUnderlyingCoinDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_underlying_coins__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveUnderlyingCoinDto.t)} | {:error, Tesla.Env.t}
  def curve_underlying_coins__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/underlyingCoins/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveUnderlyingCoinDto{}]}
    ])
  end

  @doc """
  VotingApps (current)
  Gets votingApps.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveVotingAppDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_voting_apps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveVotingAppDto.t)} | {:error, Tesla.Env.t}
  def curve_voting_apps__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/votingApps/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveVotingAppDto{}]}
    ])
  end

  @doc """
  WeeklyVolumes (current)
  Gets weeklyVolumes.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CurveWeeklyVolumeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec curve_weekly_volumes__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CurveWeeklyVolumeDto.t)} | {:error, Tesla.Env.t}
  def curve_weekly_volumes__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/curve/weeklyVolumes/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CurveWeeklyVolumeDto{}]}
    ])
  end
end
