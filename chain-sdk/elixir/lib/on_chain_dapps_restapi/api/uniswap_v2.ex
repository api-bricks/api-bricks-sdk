# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainDapps-RESTAPI.Api.UniswapV2 do
  @moduledoc """
  API calls for all endpoints tagged `UniswapV2`.
  """

  alias OnChainDapps-RESTAPI.Connection
  import OnChainDapps-RESTAPI.RequestBuilder

  @doc """
  Bundles (current)
  Gets bundles.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2BundleDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_bundles__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2BundleDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_bundles__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/bundles/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2BundleDto{}]}
    ])
  end

  @doc """
  Burns (current)
  Gets burns.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2BurnDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_burns__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2BurnDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_burns__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/burns/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2BurnDto{}]}
    ])
  end

  @doc """
  Bundles (historical)
  Gets bundles.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Constant 1.

  ### Returns

  - `{:ok, [%UniswapV2BundleDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_bundles__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2BundleDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_bundles__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/bundles/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2BundleDto{}]}
    ])
  end

  @doc """
  Burns (historical)
  Gets burns.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Transaction hash plus index in the transaction burn array
    - `:pair` (String.t): Reference to pair.

  ### Returns

  - `{:ok, [%UniswapV2BurnDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_burns__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2BurnDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_burns__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pair => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/burns/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2BurnDto{}]}
    ])
  end

  @doc """
  LiquidityPositionSnapshots (historical)
  Gets liquidityPositionSnapshots.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Identifier, format: (pair address)-(user address)
    - `:user` (String.t): Reference to user.
    - `:pair` (String.t): Reference to the pair liquidity is being provided on.

  ### Returns

  - `{:ok, [%UniswapV2LiquidityPositionSnapshotDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_liquidity_position_snapshots__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2LiquidityPositionSnapshotDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_liquidity_position_snapshots__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :user => :query,
      :pair => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/liquidityPositionSnapshots/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2LiquidityPositionSnapshotDto{}]}
    ])
  end

  @doc """
  LiquidityPositions (historical)
  Gets liquidityPositions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): User address and pair address concatenated with a dash.
    - `:user` (String.t): Reference to user.
    - `:pair` (String.t): Reference to the pair liquidity is being provided on.

  ### Returns

  - `{:ok, [%UniswapV2LiquidityPositionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_liquidity_positions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2LiquidityPositionDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_liquidity_positions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :user => :query,
      :pair => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/liquidityPositions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2LiquidityPositionDto{}]}
    ])
  end

  @doc """
  Mints (historical)
  Gets mints.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Transaction hash plus index in the transaction mint array.
    - `:pair` (String.t): Reference to pair.

  ### Returns

  - `{:ok, [%UniswapV2MintDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_mints__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2MintDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_mints__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pair => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/mints/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2MintDto{}]}
    ])
  end

  @doc """
  PairDayData (historical)
  Gets pairDayData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:token_0` (String.t): Reference to token0.
    - `:token_1` (String.t): Reference to token1.

  ### Returns

  - `{:ok, [%UniswapV2PairDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_pair_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2PairDayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_pair_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :token_0 => :query,
      :token_1 => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/pairDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2PairDayDataDto{}]}
    ])
  end

  @doc """
  PairHourData (historical)
  Gets pairHourData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 
    - `:pair` (String.t): Address for pair contract.

  ### Returns

  - `{:ok, [%UniswapV2PairHourDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_pair_hour_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2PairHourDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_pair_hour_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pair => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/pairHourData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2PairHourDataDto{}]}
    ])
  end

  @doc """
  Pairs (historical)
  Gets pairs.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Pair contract address.
    - `:token_0` (String.t): Reference to token0 as stored in pair contract.
    - `:token_1` (String.t): Reference to token1 as stored in pair contract.

  ### Returns

  - `{:ok, [%UniswapV2PairDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_pairs__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2PairDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_pairs__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :token_0 => :query,
      :token_1 => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/pairs/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2PairDto{}]}
    ])
  end

  @doc """
  Swaps (historical)
  Gets swaps.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Transaction hash plus index in Transaction swap array.
    - `:pair` (String.t): Reference to pair.

  ### Returns

  - `{:ok, [%UniswapV2SwapDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_swaps__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2SwapDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_swaps__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :pair => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/swaps/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2SwapDto{}]}
    ])
  end

  @doc """
  TokenDayData (historical)
  Gets tokenDayData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Token address and day id (day start timestamp in unix / 86400) concatenated with a dash.

  ### Returns

  - `{:ok, [%UniswapV2TokenDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_token_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2TokenDayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_token_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/tokenDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2TokenDayDataDto{}]}
    ])
  end

  @doc """
  Tokens (historical)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Token address.
    - `:symbol` (String.t): Token symbol.
    - `:name` (String.t): Token name.

  ### Returns

  - `{:ok, [%UniswapV2TokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_tokens__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2TokenDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_tokens__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query,
      :symbol => :query,
      :name => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/tokens/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2TokenDto{}]}
    ])
  end

  @doc """
  Transactions (historical)
  Gets transactions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Ethereum transaction hash.

  ### Returns

  - `{:ok, [%UniswapV2TransactionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_transactions__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2TransactionDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_transactions__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/transactions/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2TransactionDto{}]}
    ])
  end

  @doc """
  UniswapDayData (historical)
  Gets uniswapDayData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Unix timestamp for start of day / 86400 giving a unique day index.

  ### Returns

  - `{:ok, [%UniswapV2UniswapDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_uniswap_day_data__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2UniswapDayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_uniswap_day_data__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/uniswapDayData/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2UniswapDayDataDto{}]}
    ])
  end

  @doc """
  UniswapFactories (historical)
  Gets uniswapFactories.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): Factory address.

  ### Returns

  - `{:ok, [%UniswapV2UniswapFactoryDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_uniswap_factories__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2UniswapFactoryDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_uniswap_factories__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/uniswapFactories/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2UniswapFactoryDto{}]}
    ])
  end

  @doc """
  Users (historical)
  Gets users.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): User address.

  ### Returns

  - `{:ok, [%UniswapV2UserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_get_users__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2UserDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_get_users__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/users/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2UserDto{}]}
    ])
  end

  @doc """
  LiquidityPositionSnapshots (current)
  Gets liquidityPositionSnapshots.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2LiquidityPositionSnapshotDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_liquidity_position_snapshots__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2LiquidityPositionSnapshotDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_liquidity_position_snapshots__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/liquidityPositionSnapshots/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2LiquidityPositionSnapshotDto{}]}
    ])
  end

  @doc """
  LiquidityPositions (current)
  Gets liquidityPositions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2LiquidityPositionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_liquidity_positions__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2LiquidityPositionDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_liquidity_positions__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/liquidityPositions/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2LiquidityPositionDto{}]}
    ])
  end

  @doc """
  Mints (current)
  Gets mints.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2MintDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_mints__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2MintDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_mints__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/mints/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2MintDto{}]}
    ])
  end

  @doc """
  PairDayData (current)
  Gets pairDayData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2PairDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_pair_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2PairDayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_pair_day_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/pairDayData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2PairDayDataDto{}]}
    ])
  end

  @doc """
  PairHourData (current)
  Gets pairHourData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2PairHourDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_pair_hour_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2PairHourDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_pair_hour_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/pairHourData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2PairHourDataDto{}]}
    ])
  end

  @doc """
  Pairs (current)
  Gets pairs.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): Pair contract address.

  ### Returns

  - `{:ok, [%UniswapV2PairDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_pairs__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2PairDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_pairs__current(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/pairs/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2PairDto{}]}
    ])
  end

  @doc """
  Swaps (current)
  Gets swaps.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:pair` (String.t): Reference to pair.

  ### Returns

  - `{:ok, [%UniswapV2SwapDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_swaps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2SwapDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_swaps__current(connection, opts \\ []) do
    optional_params = %{
      :pair => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/swaps/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2SwapDto{}]}
    ])
  end

  @doc """
  TokenDayData (current)
  Gets tokenDayData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2TokenDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_token_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2TokenDayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_token_day_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/tokenDayData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2TokenDayDataDto{}]}
    ])
  end

  @doc """
  Tokens (current)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2TokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2TokenDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2TokenDto{}]}
    ])
  end

  @doc """
  Transactions (current)
  Gets transactions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2TransactionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_transactions__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2TransactionDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_transactions__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/transactions/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2TransactionDto{}]}
    ])
  end

  @doc """
  UniswapDayData (current)
  Gets uniswapDayData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2UniswapDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_uniswap_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2UniswapDayDataDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_uniswap_day_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/uniswapDayData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2UniswapDayDataDto{}]}
    ])
  end

  @doc """
  UniswapFactories (current)
  Gets uniswapFactories.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2UniswapFactoryDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_uniswap_factories__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2UniswapFactoryDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_uniswap_factories__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/uniswapFactories/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2UniswapFactoryDto{}]}
    ])
  end

  @doc """
  Users (current)
  Gets users.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2UserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec uniswap_v2_users__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2UserDto.t)} | {:error, Tesla.Env.t}
  def uniswap_v2_users__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswapv2/users/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2UserDto{}]}
    ])
  end
end
