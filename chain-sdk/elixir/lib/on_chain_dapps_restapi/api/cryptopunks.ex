# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainDapps-RESTAPI.Api.CRYPTOPUNKS do
  @moduledoc """
  API calls for all endpoints tagged `CRYPTOPUNKS`.
  """

  alias OnChainDapps-RESTAPI.Connection
  import OnChainDapps-RESTAPI.RequestBuilder

  @doc """
  Bids (current)
  Gets bids.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CryptopunksBidDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_bids__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksBidDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_bids__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/bids/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksBidDto{}]}
    ])
  end

  @doc """
  CollectionDailySnapshots (current)
  Gets collectionDailySnapshots.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CryptopunksCollectionDailySnapshotDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_collection_daily_snapshots__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksCollectionDailySnapshotDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_collection_daily_snapshots__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/collectionDailySnapshots/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksCollectionDailySnapshotDto{}]}
    ])
  end

  @doc """
  Collections (current)
  Gets collections.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CryptopunksCollectionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_collections__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksCollectionDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_collections__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/collections/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksCollectionDto{}]}
    ])
  end

  @doc """
  DataSources (current)
  Gets dataSources.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CryptopunksDataSourcesDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_data_sources__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksDataSourcesDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_data_sources__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/dataSources/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksDataSourcesDto{}]}
    ])
  end

  @doc """
  Bids (historical)
  Gets bids.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CryptopunksBidDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_get_bids__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksBidDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_get_bids__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/bids/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksBidDto{}]}
    ])
  end

  @doc """
  CollectionDailySnapshots (historical)
  Gets collectionDailySnapshots.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.

  ### Returns

  - `{:ok, [%CryptopunksCollectionDailySnapshotDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_get_collection_daily_snapshots__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksCollectionDailySnapshotDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_get_collection_daily_snapshots__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/collectionDailySnapshots/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksCollectionDailySnapshotDto{}]}
    ])
  end

  @doc """
  Collections (historical)
  Gets collections.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CryptopunksCollectionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_get_collections__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksCollectionDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_get_collections__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/collections/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksCollectionDto{}]}
    ])
  end

  @doc """
  DataSources (historical)
  Gets dataSources.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CryptopunksDataSourcesDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_get_data_sources__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksDataSourcesDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_get_data_sources__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/dataSources/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksDataSourcesDto{}]}
    ])
  end

  @doc """
  Items (historical)
  Gets items.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.

  ### Returns

  - `{:ok, [%CryptopunksItemDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_get_items__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksItemDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_get_items__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/items/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksItemDto{}]}
    ])
  end

  @doc """
  MarketPlaces (historical)
  Gets marketPlaces.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CryptopunksMarketPlaceDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_get_market_places__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksMarketPlaceDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_get_market_places__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/marketPlaces/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksMarketPlaceDto{}]}
    ])
  end

  @doc """
  MarketplaceDailySnapshots (historical)
  Gets marketplaceDailySnapshots.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CryptopunksMarketplaceDailySnapshotDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_get_marketplace_daily_snapshots__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksMarketplaceDailySnapshotDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_get_marketplace_daily_snapshots__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/marketplaceDailySnapshots/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksMarketplaceDailySnapshotDto{}]}
    ])
  end

  @doc """
  Trades (historical)
  Gets trades.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CryptopunksTradeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_get_trades__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksTradeDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_get_trades__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/trades/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksTradeDto{}]}
    ])
  end

  @doc """
  Users (historical)
  Gets users.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:startBlock` (integer()): The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    - `:endBlock` (integer()): The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    - `:startDate` (DateTime.t): The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    - `:endDate` (DateTime.t): The end date of timeframe.
    - `:id` (String.t): 

  ### Returns

  - `{:ok, [%CryptopunksUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_get_users__historical(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksUserDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_get_users__historical(connection, opts \\ []) do
    optional_params = %{
      :startBlock => :query,
      :endBlock => :query,
      :startDate => :query,
      :endDate => :query,
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/users/historical")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksUserDto{}]}
    ])
  end

  @doc """
  Items (current)
  Gets items.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CryptopunksItemDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_items__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksItemDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_items__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/items/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksItemDto{}]}
    ])
  end

  @doc """
  MarketPlaces (current)
  Gets marketPlaces.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CryptopunksMarketPlaceDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_market_places__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksMarketPlaceDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_market_places__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/marketPlaces/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksMarketPlaceDto{}]}
    ])
  end

  @doc """
  MarketplaceDailySnapshots (current)
  Gets marketplaceDailySnapshots.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CryptopunksMarketplaceDailySnapshotDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_marketplace_daily_snapshots__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksMarketplaceDailySnapshotDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_marketplace_daily_snapshots__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/marketplaceDailySnapshots/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksMarketplaceDailySnapshotDto{}]}
    ])
  end

  @doc """
  Trades (current)
  Gets trades.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CryptopunksTradeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_trades__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksTradeDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_trades__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/trades/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksTradeDto{}]}
    ])
  end

  @doc """
  Users (current)
  Gets users.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CryptopunksUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec c_ryptopunks_users__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CryptopunksUserDto.t)} | {:error, Tesla.Env.t}
  def c_ryptopunks_users__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cryptopunks/users/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CryptopunksUserDto{}]}
    ])
  end
end
