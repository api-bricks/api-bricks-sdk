/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Trade for a single user, as part of a ring trade. It\&#39;s part of the solution submitted by a solver for a given batch.
 */
public class OASDexTradeDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return id
     */
    public String id { get; set; }

    /**
     * 
     * @return order
     */
    public String order { get; set; }

    /**
     * 
     * @return owner
     */
    public String owner { get; set; }

    /**
     * 
     * @return sellVolume
     */
    public String sellVolume { get; set; }

    /**
     * 
     * @return buyVolume
     */
    public String buyVolume { get; set; }

    /**
     * 
     * @return tradeBatchId
     */
    public String tradeBatchId { get; set; }

    /**
     * The date of the end of the batch.
     * @return tradeEpoch
     */
    public String tradeEpoch { get; set; }

    /**
     * 
     * @return buyToken
     */
    public String buyToken { get; set; }

    /**
     * 
     * @return sellToken
     */
    public String sellToken { get; set; }

    /**
     * The date where the transaction was mined.
     * @return createEpoch
     */
    public String createEpoch { get; set; }

    /**
     * 
     * @return revertEpoch
     */
    public String revertEpoch { get; set; }

    /**
     * 
     * @return txHash
     */
    public String txHash { get; set; }

    /**
     * 
     * @return txLogIndex
     */
    public String txLogIndex { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * Get poolId
     * @return poolId
     */
    public String poolId { get; private set; }

    /**
     * Get transactionId
     * @return transactionId
     */
    public String transactionId { get; private set; }

    /**
     * Get evaluatedPrice
     * @return evaluatedPrice
     */
    public Double evaluatedPrice { get; private set; }

    /**
     * Get evaluatedAmount
     * @return evaluatedAmount
     */
    public Double evaluatedAmount { get; private set; }

    /**
     * Get evaluatedAggressor
     * @return evaluatedAggressor
     */
    public OASTransactionsETradeAggressiveSide evaluatedAggressor { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'sell_volume' => 'sellVolume',
        'buy_volume' => 'buyVolume',
        'trade_batch_id' => 'tradeBatchId',
        'trade_epoch' => 'tradeEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'create_epoch' => 'createEpoch',
        'revert_epoch' => 'revertEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASDexTradeDTO getExample() {
        OASDexTradeDTO dexTradeDTO = new OASDexTradeDTO();
          dexTradeDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          dexTradeDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          dexTradeDTO.blockNumber = 123456789L;
          dexTradeDTO.id = '';
          dexTradeDTO.order = '';
          dexTradeDTO.owner = '';
          dexTradeDTO.sellVolume = '';
          dexTradeDTO.buyVolume = '';
          dexTradeDTO.tradeBatchId = '';
          dexTradeDTO.tradeEpoch = '';
          dexTradeDTO.buyToken = '';
          dexTradeDTO.sellToken = '';
          dexTradeDTO.createEpoch = '';
          dexTradeDTO.revertEpoch = '';
          dexTradeDTO.txHash = '';
          dexTradeDTO.txLogIndex = '';
          dexTradeDTO.vid = 123456789L;
          dexTradeDTO.poolId = '';
          dexTradeDTO.transactionId = '';
          dexTradeDTO.evaluatedPrice = 1.3579;
          dexTradeDTO.evaluatedAmount = 1.3579;
          dexTradeDTO.evaluatedAggressor = OASTransactionsETradeAggressiveSide.getExample();
        return dexTradeDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASDexTradeDTO) {           
            OASDexTradeDTO dexTradeDTO = (OASDexTradeDTO) obj;
            return this.entryTime == dexTradeDTO.entryTime
                && this.recvTime == dexTradeDTO.recvTime
                && this.blockNumber == dexTradeDTO.blockNumber
                && this.id == dexTradeDTO.id
                && this.order == dexTradeDTO.order
                && this.owner == dexTradeDTO.owner
                && this.sellVolume == dexTradeDTO.sellVolume
                && this.buyVolume == dexTradeDTO.buyVolume
                && this.tradeBatchId == dexTradeDTO.tradeBatchId
                && this.tradeEpoch == dexTradeDTO.tradeEpoch
                && this.buyToken == dexTradeDTO.buyToken
                && this.sellToken == dexTradeDTO.sellToken
                && this.createEpoch == dexTradeDTO.createEpoch
                && this.revertEpoch == dexTradeDTO.revertEpoch
                && this.txHash == dexTradeDTO.txHash
                && this.txLogIndex == dexTradeDTO.txLogIndex
                && this.vid == dexTradeDTO.vid
                && this.poolId == dexTradeDTO.poolId
                && this.transactionId == dexTradeDTO.transactionId
                && this.evaluatedPrice == dexTradeDTO.evaluatedPrice
                && this.evaluatedAmount == dexTradeDTO.evaluatedAmount
                && this.evaluatedAggressor == dexTradeDTO.evaluatedAggressor;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (order == null ? 0 : System.hashCode(order));
        hashCode = (17 * hashCode) + (owner == null ? 0 : System.hashCode(owner));
        hashCode = (17 * hashCode) + (sellVolume == null ? 0 : System.hashCode(sellVolume));
        hashCode = (17 * hashCode) + (buyVolume == null ? 0 : System.hashCode(buyVolume));
        hashCode = (17 * hashCode) + (tradeBatchId == null ? 0 : System.hashCode(tradeBatchId));
        hashCode = (17 * hashCode) + (tradeEpoch == null ? 0 : System.hashCode(tradeEpoch));
        hashCode = (17 * hashCode) + (buyToken == null ? 0 : System.hashCode(buyToken));
        hashCode = (17 * hashCode) + (sellToken == null ? 0 : System.hashCode(sellToken));
        hashCode = (17 * hashCode) + (createEpoch == null ? 0 : System.hashCode(createEpoch));
        hashCode = (17 * hashCode) + (revertEpoch == null ? 0 : System.hashCode(revertEpoch));
        hashCode = (17 * hashCode) + (txHash == null ? 0 : System.hashCode(txHash));
        hashCode = (17 * hashCode) + (txLogIndex == null ? 0 : System.hashCode(txLogIndex));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (poolId == null ? 0 : System.hashCode(poolId));
        hashCode = (17 * hashCode) + (transactionId == null ? 0 : System.hashCode(transactionId));
        hashCode = (17 * hashCode) + (evaluatedPrice == null ? 0 : System.hashCode(evaluatedPrice));
        hashCode = (17 * hashCode) + (evaluatedAmount == null ? 0 : System.hashCode(evaluatedAmount));
        hashCode = (17 * hashCode) + (evaluatedAggressor == null ? 0 : System.hashCode(evaluatedAggressor));
        return hashCode;
    }
}

