/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASCurvePoolDTO
 */
public class OASCurvePoolDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Pool address.
     * @return id
     */
    public String id { get; set; }

    /**
     * Pool\'s human-readable name.
     * @return name
     */
    public String name { get; set; }

    /**
     * Identify whether pool is a metapool.
     * @return isMeta
     */
    public Boolean isMeta { get; set; }

    /**
     * Registry contract address from where this pool was registered.
     * @return registryAddress
     */
    public String registryAddress { get; set; }

    /**
     * Swap contract address.
     * @return swapAddress
     */
    public String swapAddress { get; set; }

    /**
     * Address of the token representing LP share.
     * @return lpToken
     */
    public String lpToken { get; set; }

    /**
     * Number of coins composing the pool.
     * @return coinCount
     */
    public String coinCount { get; set; }

    /**
     * Number of underlying coins composing the pool.
     * @return underlyingCount
     */
    public String underlyingCount { get; set; }

    /**
     * Amplification coefficient multiplied by n * (n - 1).
     * @return a
     */
    public String a { get; set; }

    /**
     * Fee to charge for exchanges.
     * @return fee
     */
    public String fee { get; set; }

    /**
     * Admin fee is represented as a percentage of the total fee collected on a swap.
     * @return adminFee
     */
    public String adminFee { get; set; }

    /**
     * Admin address.
     * @return owner
     */
    public String owner { get; set; }

    /**
     * Average dollar value of pool token.
     * @return virtualPrice
     */
    public String virtualPrice { get; set; }

    /**
     * 
     * @return locked
     */
    public String locked { get; set; }

    /**
     * 
     * @return addedAt
     */
    public Datetime addedAt { get; set; }

    /**
     * 
     * @return addedAtBlock
     */
    public String addedAtBlock { get; set; }

    /**
     * 
     * @return addedAtTransaction
     */
    public String addedAtTransaction { get; set; }

    /**
     * 
     * @return removedAt
     */
    public String removedAt { get; set; }

    /**
     * 
     * @return removedAtBlock
     */
    public String removedAtBlock { get; set; }

    /**
     * 
     * @return removedAtTransaction
     */
    public String removedAtTransaction { get; set; }

    /**
     * 
     * @return exchangeCount
     */
    public String exchangeCount { get; set; }

    /**
     * 
     * @return gaugeCount
     */
    public String gaugeCount { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * Get evaluatedAsk
     * @return evaluatedAsk
     */
    public Double evaluatedAsk { get; private set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'is_meta' => 'isMeta',
        'registry_address' => 'registryAddress',
        'swap_address' => 'swapAddress',
        'lp_token' => 'lpToken',
        'coin_count' => 'coinCount',
        'underlying_count' => 'underlyingCount',
        'admin_fee' => 'adminFee',
        'virtual_price' => 'virtualPrice',
        'added_at' => 'addedAt',
        'added_at_block' => 'addedAtBlock',
        'added_at_transaction' => 'addedAtTransaction',
        'removed_at' => 'removedAt',
        'removed_at_block' => 'removedAtBlock',
        'removed_at_transaction' => 'removedAtTransaction',
        'exchange_count' => 'exchangeCount',
        'gauge_count' => 'gaugeCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASCurvePoolDTO getExample() {
        OASCurvePoolDTO curvePoolDTO = new OASCurvePoolDTO();
          curvePoolDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          curvePoolDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          curvePoolDTO.blockNumber = 123456789L;
          curvePoolDTO.id = '';
          curvePoolDTO.name = '';
          curvePoolDTO.isMeta = true;
          curvePoolDTO.registryAddress = '';
          curvePoolDTO.swapAddress = '';
          curvePoolDTO.lpToken = '';
          curvePoolDTO.coinCount = '';
          curvePoolDTO.underlyingCount = '';
          curvePoolDTO.a = '';
          curvePoolDTO.fee = '';
          curvePoolDTO.adminFee = '';
          curvePoolDTO.owner = '';
          curvePoolDTO.virtualPrice = '';
          curvePoolDTO.locked = '';
          curvePoolDTO.addedAt = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          curvePoolDTO.addedAtBlock = '';
          curvePoolDTO.addedAtTransaction = '';
          curvePoolDTO.removedAt = '';
          curvePoolDTO.removedAtBlock = '';
          curvePoolDTO.removedAtTransaction = '';
          curvePoolDTO.exchangeCount = '';
          curvePoolDTO.gaugeCount = '';
          curvePoolDTO.vid = 123456789L;
          curvePoolDTO.evaluatedAsk = 1.3579;
        return curvePoolDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCurvePoolDTO) {           
            OASCurvePoolDTO curvePoolDTO = (OASCurvePoolDTO) obj;
            return this.entryTime == curvePoolDTO.entryTime
                && this.recvTime == curvePoolDTO.recvTime
                && this.blockNumber == curvePoolDTO.blockNumber
                && this.id == curvePoolDTO.id
                && this.name == curvePoolDTO.name
                && this.isMeta == curvePoolDTO.isMeta
                && this.registryAddress == curvePoolDTO.registryAddress
                && this.swapAddress == curvePoolDTO.swapAddress
                && this.lpToken == curvePoolDTO.lpToken
                && this.coinCount == curvePoolDTO.coinCount
                && this.underlyingCount == curvePoolDTO.underlyingCount
                && this.a == curvePoolDTO.a
                && this.fee == curvePoolDTO.fee
                && this.adminFee == curvePoolDTO.adminFee
                && this.owner == curvePoolDTO.owner
                && this.virtualPrice == curvePoolDTO.virtualPrice
                && this.locked == curvePoolDTO.locked
                && this.addedAt == curvePoolDTO.addedAt
                && this.addedAtBlock == curvePoolDTO.addedAtBlock
                && this.addedAtTransaction == curvePoolDTO.addedAtTransaction
                && this.removedAt == curvePoolDTO.removedAt
                && this.removedAtBlock == curvePoolDTO.removedAtBlock
                && this.removedAtTransaction == curvePoolDTO.removedAtTransaction
                && this.exchangeCount == curvePoolDTO.exchangeCount
                && this.gaugeCount == curvePoolDTO.gaugeCount
                && this.vid == curvePoolDTO.vid
                && this.evaluatedAsk == curvePoolDTO.evaluatedAsk;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (isMeta == null ? 0 : System.hashCode(isMeta));
        hashCode = (17 * hashCode) + (registryAddress == null ? 0 : System.hashCode(registryAddress));
        hashCode = (17 * hashCode) + (swapAddress == null ? 0 : System.hashCode(swapAddress));
        hashCode = (17 * hashCode) + (lpToken == null ? 0 : System.hashCode(lpToken));
        hashCode = (17 * hashCode) + (coinCount == null ? 0 : System.hashCode(coinCount));
        hashCode = (17 * hashCode) + (underlyingCount == null ? 0 : System.hashCode(underlyingCount));
        hashCode = (17 * hashCode) + (a == null ? 0 : System.hashCode(a));
        hashCode = (17 * hashCode) + (fee == null ? 0 : System.hashCode(fee));
        hashCode = (17 * hashCode) + (adminFee == null ? 0 : System.hashCode(adminFee));
        hashCode = (17 * hashCode) + (owner == null ? 0 : System.hashCode(owner));
        hashCode = (17 * hashCode) + (virtualPrice == null ? 0 : System.hashCode(virtualPrice));
        hashCode = (17 * hashCode) + (locked == null ? 0 : System.hashCode(locked));
        hashCode = (17 * hashCode) + (addedAt == null ? 0 : System.hashCode(addedAt));
        hashCode = (17 * hashCode) + (addedAtBlock == null ? 0 : System.hashCode(addedAtBlock));
        hashCode = (17 * hashCode) + (addedAtTransaction == null ? 0 : System.hashCode(addedAtTransaction));
        hashCode = (17 * hashCode) + (removedAt == null ? 0 : System.hashCode(removedAt));
        hashCode = (17 * hashCode) + (removedAtBlock == null ? 0 : System.hashCode(removedAtBlock));
        hashCode = (17 * hashCode) + (removedAtTransaction == null ? 0 : System.hashCode(removedAtTransaction));
        hashCode = (17 * hashCode) + (exchangeCount == null ? 0 : System.hashCode(exchangeCount));
        hashCode = (17 * hashCode) + (gaugeCount == null ? 0 : System.hashCode(gaugeCount));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (evaluatedAsk == null ? 0 : System.hashCode(evaluatedAsk));
        return hashCode;
    }
}

