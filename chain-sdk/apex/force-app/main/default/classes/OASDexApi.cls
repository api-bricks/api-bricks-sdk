/*
 * OnChain API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASDexApi {
    OASClient client;

    public OASDexApi(OASClient client) {
        this.client = client;
    }

    public OASDexApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Batchs (historical) ðŸ”¥
     * Gets batchs.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id Identifier. (optional)
     * @return List<OASDexBatchDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexBatchDTO> dexGetBatchsHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexBatchDTO>) client.invoke(
            'GET', '/dapps/dex/batchs/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexBatchDTO>.class
        );
    }
    /**
     * Deposits (historical) ðŸ”¥
     * Gets deposits.
     * @param startBlock  (optional)
     * @param endBlock  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param id  (optional)
     * @param user  (optional)
     * @return List<OASDexDepositDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexDepositDTO> dexGetDepositsHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('user', (String) params.get('user')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexDepositDTO>) client.invoke(
            'GET', '/dapps/dex/deposits/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexDepositDTO>.class
        );
    }
    /**
     * Orders (historical) ðŸ”¥
     * Gets orders.
     * @param startBlock  (optional)
     * @param endBlock  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param id  (optional)
     * @param buyToken  (optional)
     * @param sellToken  (optional)
     * @return List<OASDexOrderDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexOrderDTO> dexGetOrdersHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('buy_token', (String) params.get('buyToken')));
        query.addAll(client.makeParam('sell_token', (String) params.get('sellToken')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexOrderDTO>) client.invoke(
            'GET', '/dapps/dex/orders/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexOrderDTO>.class
        );
    }
    /**
     * Prices (historical) ðŸ”¥
     * Gets prices.
     * @param startBlock  (optional)
     * @param endBlock  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param id  (optional)
     * @return List<OASDexPriceDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexPriceDTO> dexGetPricesHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexPriceDTO>) client.invoke(
            'GET', '/dapps/dex/prices/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexPriceDTO>.class
        );
    }
    /**
     * Solutions (historical) ðŸ”¥
     * Gets solutions.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id  (optional)
     * @return List<OASDexSolutionDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexSolutionDTO> dexGetSolutionsHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexSolutionDTO>) client.invoke(
            'GET', '/dapps/dex/solutions/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexSolutionDTO>.class
        );
    }
    /**
     * Statss (historical) ðŸ”¥
     * Gets statss.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id  (optional)
     * @return List<OASDexStatsDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexStatsDTO> dexGetStatssHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexStatsDTO>) client.invoke(
            'GET', '/dapps/dex/statss/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexStatsDTO>.class
        );
    }
    /**
     * Tokens (historical) ðŸ”¥
     * Gets tokens.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id  (optional)
     * @param address  (optional)
     * @param symbol  (optional)
     * @param name  (optional)
     * @return List<OASDexTokenDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexTokenDTO> dexGetTokensHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('address', (String) params.get('address')));
        query.addAll(client.makeParam('symbol', (String) params.get('symbol')));
        query.addAll(client.makeParam('name', (String) params.get('name')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexTokenDTO>) client.invoke(
            'GET', '/dapps/dex/tokens/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexTokenDTO>.class
        );
    }
    /**
     * Trades (historical) ðŸ”¥
     * Gets trades.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id  (optional)
     * @param buyToken  (optional)
     * @param sellToken  (optional)
     * @return List<OASDexTradeDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexTradeDTO> dexGetTradesHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('buy_token', (String) params.get('buyToken')));
        query.addAll(client.makeParam('sell_token', (String) params.get('sellToken')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexTradeDTO>) client.invoke(
            'GET', '/dapps/dex/trades/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexTradeDTO>.class
        );
    }
    /**
     * Users (historical) ðŸ”¥
     * Gets users.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id  (optional)
     * @return List<OASDexUserDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexUserDTO> dexGetUsersHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexUserDTO>) client.invoke(
            'GET', '/dapps/dex/users/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexUserDTO>.class
        );
    }
    /**
     * WithdrawRequests (historical) ðŸ”¥
     * Gets withdrawrequests.
     * @param startBlock  (optional)
     * @param endBlock  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param id  (optional)
     * @param user  (optional)
     * @return List<OASDexWithdrawRequestDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexWithdrawRequestDTO> dexGetWithdrawRequestsHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('user', (String) params.get('user')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexWithdrawRequestDTO>) client.invoke(
            'GET', '/dapps/dex/withdrawrequests/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexWithdrawRequestDTO>.class
        );
    }
    /**
     * Withdraws (historical) ðŸ”¥
     * Gets withdraws.
     * @param startBlock  (optional)
     * @param endBlock  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param id  (optional)
     * @param user  (optional)
     * @return List<OASDexWithdrawDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASDexWithdrawDTO> dexGetWithdrawsHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('user', (String) params.get('user')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASDexWithdrawDTO>) client.invoke(
            'GET', '/dapps/dex/withdraws/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASDexWithdrawDTO>.class
        );
    }
}
