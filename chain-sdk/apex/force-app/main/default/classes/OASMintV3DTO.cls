/*
 * OnChain API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Mint entities are created for every emitted Mint event on the Uniswap core contracts. The Mint entity stores key data about the event like token amounts, who sent the transaction, and more.
 */
public class OASMintV3DTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Transaction hash + \'#\' + index in mints Transaction array.
     * @return id
     */
    public String id { get; set; }

    /**
     * Which txn the mint was included in.
     * @return r_transaction
     */
    public String r_transaction { get; set; }

    /**
     * Time of transaction.
     * @return timestamp
     */
    public String timestamp { get; set; }

    /**
     * Pool address.
     * @return pool
     */
    public String pool { get; set; }

    /**
     * Reference to token0 as stored in pool contract.
     * @return token0
     */
    public String token0 { get; set; }

    /**
     * Reference to token1 as stored in pool contract.
     * @return token1
     */
    public String token1 { get; set; }

    /**
     * Owner of position where liquidity minted to.
     * @return owner
     */
    public String owner { get; set; }

    /**
     * The address that minted the liquidity.
     * @return sender
     */
    public String sender { get; set; }

    /**
     * Transaction origin: the EOA (Externally Owned Account) that initiated the transaction.
     * @return origin
     */
    public String origin { get; set; }

    /**
     * Amount of liquidity minted.
     * @return amount
     */
    public String amount { get; set; }

    /**
     * Amount of token 0 minted.
     * @return amount0
     */
    public String amount0 { get; set; }

    /**
     * Amount of token 1 minted.
     * @return amount1
     */
    public String amount1 { get; set; }

    /**
     * Derived amount based on available prices of tokens.
     * @return amountUsd
     */
    public String amountUsd { get; set; }

    /**
     * Lower tick of the position.
     * @return tickLower
     */
    public String tickLower { get; set; }

    /**
     * Upper tick of the position.
     * @return tickUpper
     */
    public String tickUpper { get; set; }

    /**
     * Order within the transaction.
     * @return logIndex
     */
    public String logIndex { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'log_index' => 'logIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASMintV3DTO getExample() {
        OASMintV3DTO mintV3DTO = new OASMintV3DTO();
          mintV3DTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          mintV3DTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          mintV3DTO.blockNumber = 123456789L;
          mintV3DTO.id = '';
          mintV3DTO.r_transaction = '';
          mintV3DTO.timestamp = '';
          mintV3DTO.pool = '';
          mintV3DTO.token0 = '';
          mintV3DTO.token1 = '';
          mintV3DTO.owner = '';
          mintV3DTO.sender = '';
          mintV3DTO.origin = '';
          mintV3DTO.amount = '';
          mintV3DTO.amount0 = '';
          mintV3DTO.amount1 = '';
          mintV3DTO.amountUsd = '';
          mintV3DTO.tickLower = '';
          mintV3DTO.tickUpper = '';
          mintV3DTO.logIndex = '';
          mintV3DTO.vid = 123456789L;
        return mintV3DTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASMintV3DTO) {           
            OASMintV3DTO mintV3DTO = (OASMintV3DTO) obj;
            return this.entryTime == mintV3DTO.entryTime
                && this.recvTime == mintV3DTO.recvTime
                && this.blockNumber == mintV3DTO.blockNumber
                && this.id == mintV3DTO.id
                && this.r_transaction == mintV3DTO.r_transaction
                && this.timestamp == mintV3DTO.timestamp
                && this.pool == mintV3DTO.pool
                && this.token0 == mintV3DTO.token0
                && this.token1 == mintV3DTO.token1
                && this.owner == mintV3DTO.owner
                && this.sender == mintV3DTO.sender
                && this.origin == mintV3DTO.origin
                && this.amount == mintV3DTO.amount
                && this.amount0 == mintV3DTO.amount0
                && this.amount1 == mintV3DTO.amount1
                && this.amountUsd == mintV3DTO.amountUsd
                && this.tickLower == mintV3DTO.tickLower
                && this.tickUpper == mintV3DTO.tickUpper
                && this.logIndex == mintV3DTO.logIndex
                && this.vid == mintV3DTO.vid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (r_transaction == null ? 0 : System.hashCode(r_transaction));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (pool == null ? 0 : System.hashCode(pool));
        hashCode = (17 * hashCode) + (token0 == null ? 0 : System.hashCode(token0));
        hashCode = (17 * hashCode) + (token1 == null ? 0 : System.hashCode(token1));
        hashCode = (17 * hashCode) + (owner == null ? 0 : System.hashCode(owner));
        hashCode = (17 * hashCode) + (sender == null ? 0 : System.hashCode(sender));
        hashCode = (17 * hashCode) + (origin == null ? 0 : System.hashCode(origin));
        hashCode = (17 * hashCode) + (amount == null ? 0 : System.hashCode(amount));
        hashCode = (17 * hashCode) + (amount0 == null ? 0 : System.hashCode(amount0));
        hashCode = (17 * hashCode) + (amount1 == null ? 0 : System.hashCode(amount1));
        hashCode = (17 * hashCode) + (amountUsd == null ? 0 : System.hashCode(amountUsd));
        hashCode = (17 * hashCode) + (tickLower == null ? 0 : System.hashCode(tickLower));
        hashCode = (17 * hashCode) + (tickUpper == null ? 0 : System.hashCode(tickUpper));
        hashCode = (17 * hashCode) + (logIndex == null ? 0 : System.hashCode(logIndex));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        return hashCode;
    }
}

