/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASCRYPTOPUNKSTradeDTO
 */
public class OASCRYPTOPUNKSTradeDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * 
     * @return blockNumber
     */
    public String blockNumber { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * 
     * @return blockRange
     */
    public String blockRange { get; set; }

    /**
     * 
     * @return id
     */
    public String id { get; set; }

    /**
     * 
     * @return transactionHash
     */
    public String transactionHash { get; set; }

    /**
     * 
     * @return logIndex
     */
    public Integer logIndex { get; set; }

    /**
     * 
     * @return timestamp
     */
    public String timestamp { get; set; }

    /**
     * 
     * @return isBundle
     */
    public Boolean isBundle { get; set; }

    /**
     * 
     * @return collection
     */
    public String collection { get; set; }

    /**
     * 
     * @return tokenId
     */
    public String tokenId { get; set; }

    /**
     * 
     * @return amount
     */
    public String amount { get; set; }

    /**
     * 
     * @return priceEth
     */
    public String priceEth { get; set; }

    /**
     * 
     * @return buyer
     */
    public String buyer { get; set; }

    /**
     * 
     * @return seller
     */
    public String seller { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'transaction_hash' => 'transactionHash',
        'log_index' => 'logIndex',
        'is_bundle' => 'isBundle',
        'token_id' => 'tokenId',
        'price_eth' => 'priceEth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'transaction_hash' => 'transactionHash',
        'log_index' => 'logIndex',
        'is_bundle' => 'isBundle',
        'token_id' => 'tokenId',
        'price_eth' => 'priceEth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'transaction_hash' => 'transactionHash',
        'log_index' => 'logIndex',
        'is_bundle' => 'isBundle',
        'token_id' => 'tokenId',
        'price_eth' => 'priceEth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'transaction_hash' => 'transactionHash',
        'log_index' => 'logIndex',
        'is_bundle' => 'isBundle',
        'token_id' => 'tokenId',
        'price_eth' => 'priceEth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'transaction_hash' => 'transactionHash',
        'log_index' => 'logIndex',
        'is_bundle' => 'isBundle',
        'token_id' => 'tokenId',
        'price_eth' => 'priceEth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'transaction_hash' => 'transactionHash',
        'log_index' => 'logIndex',
        'is_bundle' => 'isBundle',
        'token_id' => 'tokenId',
        'price_eth' => 'priceEth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'transaction_hash' => 'transactionHash',
        'log_index' => 'logIndex',
        'is_bundle' => 'isBundle',
        'token_id' => 'tokenId',
        'price_eth' => 'priceEth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'transaction_hash' => 'transactionHash',
        'log_index' => 'logIndex',
        'is_bundle' => 'isBundle',
        'token_id' => 'tokenId',
        'price_eth' => 'priceEth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'transaction_hash' => 'transactionHash',
        'log_index' => 'logIndex',
        'is_bundle' => 'isBundle',
        'token_id' => 'tokenId',
        'price_eth' => 'priceEth'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASCRYPTOPUNKSTradeDTO getExample() {
        OASCRYPTOPUNKSTradeDTO crYPTOPUNKSTradeDTO = new OASCRYPTOPUNKSTradeDTO();
          crYPTOPUNKSTradeDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          crYPTOPUNKSTradeDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          crYPTOPUNKSTradeDTO.blockNumber = '';
          crYPTOPUNKSTradeDTO.vid = 123456789L;
          crYPTOPUNKSTradeDTO.blockRange = '';
          crYPTOPUNKSTradeDTO.id = '';
          crYPTOPUNKSTradeDTO.transactionHash = '';
          crYPTOPUNKSTradeDTO.logIndex = 0;
          crYPTOPUNKSTradeDTO.timestamp = '';
          crYPTOPUNKSTradeDTO.isBundle = true;
          crYPTOPUNKSTradeDTO.collection = '';
          crYPTOPUNKSTradeDTO.tokenId = '';
          crYPTOPUNKSTradeDTO.amount = '';
          crYPTOPUNKSTradeDTO.priceEth = '';
          crYPTOPUNKSTradeDTO.buyer = '';
          crYPTOPUNKSTradeDTO.seller = '';
        return crYPTOPUNKSTradeDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCRYPTOPUNKSTradeDTO) {           
            OASCRYPTOPUNKSTradeDTO crYPTOPUNKSTradeDTO = (OASCRYPTOPUNKSTradeDTO) obj;
            return this.entryTime == crYPTOPUNKSTradeDTO.entryTime
                && this.recvTime == crYPTOPUNKSTradeDTO.recvTime
                && this.blockNumber == crYPTOPUNKSTradeDTO.blockNumber
                && this.vid == crYPTOPUNKSTradeDTO.vid
                && this.blockRange == crYPTOPUNKSTradeDTO.blockRange
                && this.id == crYPTOPUNKSTradeDTO.id
                && this.transactionHash == crYPTOPUNKSTradeDTO.transactionHash
                && this.logIndex == crYPTOPUNKSTradeDTO.logIndex
                && this.timestamp == crYPTOPUNKSTradeDTO.timestamp
                && this.isBundle == crYPTOPUNKSTradeDTO.isBundle
                && this.collection == crYPTOPUNKSTradeDTO.collection
                && this.tokenId == crYPTOPUNKSTradeDTO.tokenId
                && this.amount == crYPTOPUNKSTradeDTO.amount
                && this.priceEth == crYPTOPUNKSTradeDTO.priceEth
                && this.buyer == crYPTOPUNKSTradeDTO.buyer
                && this.seller == crYPTOPUNKSTradeDTO.seller;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (blockRange == null ? 0 : System.hashCode(blockRange));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (transactionHash == null ? 0 : System.hashCode(transactionHash));
        hashCode = (17 * hashCode) + (logIndex == null ? 0 : System.hashCode(logIndex));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (isBundle == null ? 0 : System.hashCode(isBundle));
        hashCode = (17 * hashCode) + (collection == null ? 0 : System.hashCode(collection));
        hashCode = (17 * hashCode) + (tokenId == null ? 0 : System.hashCode(tokenId));
        hashCode = (17 * hashCode) + (amount == null ? 0 : System.hashCode(amount));
        hashCode = (17 * hashCode) + (priceEth == null ? 0 : System.hashCode(priceEth));
        hashCode = (17 * hashCode) + (buyer == null ? 0 : System.hashCode(buyer));
        hashCode = (17 * hashCode) + (seller == null ? 0 : System.hashCode(seller));
        return hashCode;
    }
}

