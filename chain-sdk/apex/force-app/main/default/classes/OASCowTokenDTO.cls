/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Stores information for a specific token across all pairs that token is included in.
 */
public class OASCowTokenDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Token\'s address.
     * @return id
     */
    public String id { get; set; }

    /**
     * Token\'s address.
     * @return address
     */
    public String address { get; set; }

    /**
     * First token trade block timestamp.
     * @return firstTradeTimestamp
     */
    public String firstTradeTimestamp { get; set; }

    /**
     * Token name fetched by ERC20 contract call.
     * @return name
     */
    public String name { get; set; }

    /**
     * Token symbol fetched by contract call.
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * Token decimals fetched by contract call.
     * @return decimals
     */
    public Integer decimals { get; set; }

    /**
     * Sum of total amount traded for this token.
     * @return totalVolume
     */
    public String totalVolume { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * Get tokenSymbol
     * @return tokenSymbol
     */
    public String tokenSymbol { get; private set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'first_trade_timestamp' => 'firstTradeTimestamp',
        'total_volume' => 'totalVolume',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'first_trade_timestamp' => 'firstTradeTimestamp',
        'total_volume' => 'totalVolume',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'first_trade_timestamp' => 'firstTradeTimestamp',
        'total_volume' => 'totalVolume',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'first_trade_timestamp' => 'firstTradeTimestamp',
        'total_volume' => 'totalVolume',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'first_trade_timestamp' => 'firstTradeTimestamp',
        'total_volume' => 'totalVolume',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'first_trade_timestamp' => 'firstTradeTimestamp',
        'total_volume' => 'totalVolume',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASCowTokenDTO getExample() {
        OASCowTokenDTO cowTokenDTO = new OASCowTokenDTO();
          cowTokenDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          cowTokenDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          cowTokenDTO.blockNumber = 123456789L;
          cowTokenDTO.id = '';
          cowTokenDTO.address = '';
          cowTokenDTO.firstTradeTimestamp = '';
          cowTokenDTO.name = '';
          cowTokenDTO.symbol = '';
          cowTokenDTO.decimals = 0;
          cowTokenDTO.totalVolume = '';
          cowTokenDTO.vid = 123456789L;
          cowTokenDTO.tokenSymbol = '';
        return cowTokenDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCowTokenDTO) {           
            OASCowTokenDTO cowTokenDTO = (OASCowTokenDTO) obj;
            return this.entryTime == cowTokenDTO.entryTime
                && this.recvTime == cowTokenDTO.recvTime
                && this.blockNumber == cowTokenDTO.blockNumber
                && this.id == cowTokenDTO.id
                && this.address == cowTokenDTO.address
                && this.firstTradeTimestamp == cowTokenDTO.firstTradeTimestamp
                && this.name == cowTokenDTO.name
                && this.symbol == cowTokenDTO.symbol
                && this.decimals == cowTokenDTO.decimals
                && this.totalVolume == cowTokenDTO.totalVolume
                && this.vid == cowTokenDTO.vid
                && this.tokenSymbol == cowTokenDTO.tokenSymbol;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (address == null ? 0 : System.hashCode(address));
        hashCode = (17 * hashCode) + (firstTradeTimestamp == null ? 0 : System.hashCode(firstTradeTimestamp));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (decimals == null ? 0 : System.hashCode(decimals));
        hashCode = (17 * hashCode) + (totalVolume == null ? 0 : System.hashCode(totalVolume));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (tokenSymbol == null ? 0 : System.hashCode(tokenSymbol));
        return hashCode;
    }
}

