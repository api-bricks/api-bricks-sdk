/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Tracks pair data across each hour.
 */
public class OASSushiswapPairHourDataDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Identifier, format: (pair id)-(hour start timestamp).
     * @return id
     */
    public String id { get; set; }

    /**
     * Hour start timestamp.
     * @return r_date
     */
    public Integer r_date { get; set; }

    /**
     * Reference to pair.
     * @return pair
     */
    public String pair { get; set; }

    /**
     * Reserve of token0 (updated during each transaction on pair).
     * @return reserve0
     */
    public String reserve0 { get; set; }

    /**
     * Reserve of token1 (updated during each transaction on pair).
     * @return reserve1
     */
    public String reserve1 { get; set; }

    /**
     * Reserve of token0 plus token1 stored as a derived USD amount.
     * @return reserveUsd
     */
    public String reserveUsd { get; set; }

    /**
     * Total amount of token0 swapped throughout hour.
     * @return volumeToken0
     */
    public String volumeToken0 { get; set; }

    /**
     * Total amount of token1 swapped throughout hour.
     * @return volumeToken1
     */
    public String volumeToken1 { get; set; }

    /**
     * Total volume within pair throughout hour.
     * @return volumeUsd
     */
    public String volumeUsd { get; set; }

    /**
     * Amount of transactions on pair throughout hour.
     * @return txCount
     */
    public String txCount { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'reserve_usd' => 'reserveUsd',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASSushiswapPairHourDataDTO getExample() {
        OASSushiswapPairHourDataDTO sushiswapPairHourDataDTO = new OASSushiswapPairHourDataDTO();
          sushiswapPairHourDataDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          sushiswapPairHourDataDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          sushiswapPairHourDataDTO.blockNumber = 123456789L;
          sushiswapPairHourDataDTO.id = '';
          sushiswapPairHourDataDTO.r_date = 0;
          sushiswapPairHourDataDTO.pair = '';
          sushiswapPairHourDataDTO.reserve0 = '';
          sushiswapPairHourDataDTO.reserve1 = '';
          sushiswapPairHourDataDTO.reserveUsd = '';
          sushiswapPairHourDataDTO.volumeToken0 = '';
          sushiswapPairHourDataDTO.volumeToken1 = '';
          sushiswapPairHourDataDTO.volumeUsd = '';
          sushiswapPairHourDataDTO.txCount = '';
          sushiswapPairHourDataDTO.vid = 123456789L;
        return sushiswapPairHourDataDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASSushiswapPairHourDataDTO) {           
            OASSushiswapPairHourDataDTO sushiswapPairHourDataDTO = (OASSushiswapPairHourDataDTO) obj;
            return this.entryTime == sushiswapPairHourDataDTO.entryTime
                && this.recvTime == sushiswapPairHourDataDTO.recvTime
                && this.blockNumber == sushiswapPairHourDataDTO.blockNumber
                && this.id == sushiswapPairHourDataDTO.id
                && this.r_date == sushiswapPairHourDataDTO.r_date
                && this.pair == sushiswapPairHourDataDTO.pair
                && this.reserve0 == sushiswapPairHourDataDTO.reserve0
                && this.reserve1 == sushiswapPairHourDataDTO.reserve1
                && this.reserveUsd == sushiswapPairHourDataDTO.reserveUsd
                && this.volumeToken0 == sushiswapPairHourDataDTO.volumeToken0
                && this.volumeToken1 == sushiswapPairHourDataDTO.volumeToken1
                && this.volumeUsd == sushiswapPairHourDataDTO.volumeUsd
                && this.txCount == sushiswapPairHourDataDTO.txCount
                && this.vid == sushiswapPairHourDataDTO.vid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (r_date == null ? 0 : System.hashCode(r_date));
        hashCode = (17 * hashCode) + (pair == null ? 0 : System.hashCode(pair));
        hashCode = (17 * hashCode) + (reserve0 == null ? 0 : System.hashCode(reserve0));
        hashCode = (17 * hashCode) + (reserve1 == null ? 0 : System.hashCode(reserve1));
        hashCode = (17 * hashCode) + (reserveUsd == null ? 0 : System.hashCode(reserveUsd));
        hashCode = (17 * hashCode) + (volumeToken0 == null ? 0 : System.hashCode(volumeToken0));
        hashCode = (17 * hashCode) + (volumeToken1 == null ? 0 : System.hashCode(volumeToken1));
        hashCode = (17 * hashCode) + (volumeUsd == null ? 0 : System.hashCode(volumeUsd));
        hashCode = (17 * hashCode) + (txCount == null ? 0 : System.hashCode(txCount));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        return hashCode;
    }
}

