/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Swap are created for each token swap within a pair.
 */
public class OASUniswapV3SwapDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * Identifier, format: (transaction hash) + # + (index in swaps Transaction array).
     * @return id
     */
    public String id { get; set; }

    /**
     * Pointer to transaction.
     * @return r_transaction
     */
    public String r_transaction { get; set; }

    /**
     * Timestamp of transaction.
     * @return timestamp
     */
    public Datetime timestamp { get; set; }

    /**
     * Pool swap occured within.
     * @return pool
     */
    public String pool { get; set; }

    /**
     * Reference to token0 as stored in pair contract.
     * @return token0
     */
    public String token0 { get; set; }

    /**
     * Reference to token1 as stored in pair contract.
     * @return token1
     */
    public String token1 { get; set; }

    /**
     * Sender of the swap.
     * @return sender
     */
    public String sender { get; set; }

    /**
     * Recipient of the swap.
     * @return recipient
     */
    public String recipient { get; set; }

    /**
     * Transaction origin: the EOA (Externally Owned Account) that initiated the transaction
     * @return origin
     */
    public String origin { get; set; }

    /**
     * Delta of token0 swapped.
     * @return amount0
     */
    public String amount0 { get; set; }

    /**
     * Delta of token1 swapped.
     * @return amount1
     */
    public String amount1 { get; set; }

    /**
     * Derived amount of tokens sold in USD.
     * @return amountUsd
     */
    public String amountUsd { get; set; }

    /**
     * Get sqrtPriceX96
     * @return sqrtPriceX96
     */
    public OASNumericsBigInteger sqrtPriceX96 { get; set; }

    /**
     * Get tick
     * @return tick
     */
    public OASNumericsBigInteger tick { get; set; }

    /**
     * Get logIndex
     * @return logIndex
     */
    public OASNumericsBigInteger logIndex { get; set; }

    /**
     * Get evaluatedPrice
     * @return evaluatedPrice
     */
    public Double evaluatedPrice { get; private set; }

    /**
     * Get evaluatedAmount
     * @return evaluatedAmount
     */
    public Double evaluatedAmount { get; private set; }

    /**
     * Get evaluatedAggressor
     * @return evaluatedAggressor
     */
    public OASTransactionsETradeAggressiveSide evaluatedAggressor { get; set; }

    /**
     * Get poolId
     * @return poolId
     */
    public String poolId { get; private set; }

    /**
     * Get transactionId
     * @return transactionId
     */
    public String transactionId { get; private set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'amount_usd' => 'amountUsd',
        'sqrt_price_x96' => 'sqrtPriceX96',
        'log_index' => 'logIndex',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASUniswapV3SwapDTO getExample() {
        OASUniswapV3SwapDTO uniswapV3SwapDTO = new OASUniswapV3SwapDTO();
          uniswapV3SwapDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV3SwapDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV3SwapDTO.blockNumber = 123456789L;
          uniswapV3SwapDTO.vid = 123456789L;
          uniswapV3SwapDTO.id = '';
          uniswapV3SwapDTO.r_transaction = '';
          uniswapV3SwapDTO.timestamp = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV3SwapDTO.pool = '';
          uniswapV3SwapDTO.token0 = '';
          uniswapV3SwapDTO.token1 = '';
          uniswapV3SwapDTO.sender = '';
          uniswapV3SwapDTO.recipient = '';
          uniswapV3SwapDTO.origin = '';
          uniswapV3SwapDTO.amount0 = '';
          uniswapV3SwapDTO.amount1 = '';
          uniswapV3SwapDTO.amountUsd = '';
          uniswapV3SwapDTO.sqrtPriceX96 = OASNumericsBigInteger.getExample();
          uniswapV3SwapDTO.tick = OASNumericsBigInteger.getExample();
          uniswapV3SwapDTO.logIndex = OASNumericsBigInteger.getExample();
          uniswapV3SwapDTO.evaluatedPrice = 1.3579;
          uniswapV3SwapDTO.evaluatedAmount = 1.3579;
          uniswapV3SwapDTO.evaluatedAggressor = OASTransactionsETradeAggressiveSide.getExample();
          uniswapV3SwapDTO.poolId = '';
          uniswapV3SwapDTO.transactionId = '';
        return uniswapV3SwapDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUniswapV3SwapDTO) {           
            OASUniswapV3SwapDTO uniswapV3SwapDTO = (OASUniswapV3SwapDTO) obj;
            return this.entryTime == uniswapV3SwapDTO.entryTime
                && this.recvTime == uniswapV3SwapDTO.recvTime
                && this.blockNumber == uniswapV3SwapDTO.blockNumber
                && this.vid == uniswapV3SwapDTO.vid
                && this.id == uniswapV3SwapDTO.id
                && this.r_transaction == uniswapV3SwapDTO.r_transaction
                && this.timestamp == uniswapV3SwapDTO.timestamp
                && this.pool == uniswapV3SwapDTO.pool
                && this.token0 == uniswapV3SwapDTO.token0
                && this.token1 == uniswapV3SwapDTO.token1
                && this.sender == uniswapV3SwapDTO.sender
                && this.recipient == uniswapV3SwapDTO.recipient
                && this.origin == uniswapV3SwapDTO.origin
                && this.amount0 == uniswapV3SwapDTO.amount0
                && this.amount1 == uniswapV3SwapDTO.amount1
                && this.amountUsd == uniswapV3SwapDTO.amountUsd
                && this.sqrtPriceX96 == uniswapV3SwapDTO.sqrtPriceX96
                && this.tick == uniswapV3SwapDTO.tick
                && this.logIndex == uniswapV3SwapDTO.logIndex
                && this.evaluatedPrice == uniswapV3SwapDTO.evaluatedPrice
                && this.evaluatedAmount == uniswapV3SwapDTO.evaluatedAmount
                && this.evaluatedAggressor == uniswapV3SwapDTO.evaluatedAggressor
                && this.poolId == uniswapV3SwapDTO.poolId
                && this.transactionId == uniswapV3SwapDTO.transactionId;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (r_transaction == null ? 0 : System.hashCode(r_transaction));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (pool == null ? 0 : System.hashCode(pool));
        hashCode = (17 * hashCode) + (token0 == null ? 0 : System.hashCode(token0));
        hashCode = (17 * hashCode) + (token1 == null ? 0 : System.hashCode(token1));
        hashCode = (17 * hashCode) + (sender == null ? 0 : System.hashCode(sender));
        hashCode = (17 * hashCode) + (recipient == null ? 0 : System.hashCode(recipient));
        hashCode = (17 * hashCode) + (origin == null ? 0 : System.hashCode(origin));
        hashCode = (17 * hashCode) + (amount0 == null ? 0 : System.hashCode(amount0));
        hashCode = (17 * hashCode) + (amount1 == null ? 0 : System.hashCode(amount1));
        hashCode = (17 * hashCode) + (amountUsd == null ? 0 : System.hashCode(amountUsd));
        hashCode = (17 * hashCode) + (sqrtPriceX96 == null ? 0 : System.hashCode(sqrtPriceX96));
        hashCode = (17 * hashCode) + (tick == null ? 0 : System.hashCode(tick));
        hashCode = (17 * hashCode) + (logIndex == null ? 0 : System.hashCode(logIndex));
        hashCode = (17 * hashCode) + (evaluatedPrice == null ? 0 : System.hashCode(evaluatedPrice));
        hashCode = (17 * hashCode) + (evaluatedAmount == null ? 0 : System.hashCode(evaluatedAmount));
        hashCode = (17 * hashCode) + (evaluatedAggressor == null ? 0 : System.hashCode(evaluatedAggressor));
        hashCode = (17 * hashCode) + (poolId == null ? 0 : System.hashCode(poolId));
        hashCode = (17 * hashCode) + (transactionId == null ? 0 : System.hashCode(transactionId));
        return hashCode;
    }
}

