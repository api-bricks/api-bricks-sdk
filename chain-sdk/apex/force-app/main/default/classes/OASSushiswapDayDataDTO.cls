/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Tracks data across all pairs aggregated into a daily bucket.
 */
public class OASSushiswapDayDataDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Unix timestamp for start of day / 86400 giving a unique day index.
     * @return id
     */
    public String id { get; set; }

    /**
     * Unix timestamp for start of day.
     * @return r_date
     */
    public Integer r_date { get; set; }

    /**
     * Factory address.
     * @return factory
     */
    public String factory { get; set; }

    /**
     * Total volume across all pairs on this day, stored as a derived amount of ETH.
     * @return volumeEth
     */
    public String volumeEth { get; set; }

    /**
     * Total volume across all pairs on this day, stored as a derived amount of USD.
     * @return volumeUsd
     */
    public String volumeUsd { get; set; }

    /**
     * Total volume across all pairs on this day, untracked
     * @return untrackedVolume
     */
    public String untrackedVolume { get; set; }

    /**
     * Total liquidity across all pairs in ETH up to and including this day.
     * @return liquidityEth
     */
    public String liquidityEth { get; set; }

    /**
     * Total liquidity across all pairs in USD up to and including this day.
     * @return liquidityUsd
     */
    public String liquidityUsd { get; set; }

    /**
     * Number of transactions throughout this day.
     * @return txCount
     */
    public String txCount { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'volume_eth' => 'volumeEth',
        'volume_usd' => 'volumeUsd',
        'untracked_volume' => 'untrackedVolume',
        'liquidity_eth' => 'liquidityEth',
        'liquidity_usd' => 'liquidityUsd',
        'tx_count' => 'txCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASSushiswapDayDataDTO getExample() {
        OASSushiswapDayDataDTO sushiswapDayDataDTO = new OASSushiswapDayDataDTO();
          sushiswapDayDataDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          sushiswapDayDataDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          sushiswapDayDataDTO.blockNumber = 123456789L;
          sushiswapDayDataDTO.id = '';
          sushiswapDayDataDTO.r_date = 0;
          sushiswapDayDataDTO.factory = '';
          sushiswapDayDataDTO.volumeEth = '';
          sushiswapDayDataDTO.volumeUsd = '';
          sushiswapDayDataDTO.untrackedVolume = '';
          sushiswapDayDataDTO.liquidityEth = '';
          sushiswapDayDataDTO.liquidityUsd = '';
          sushiswapDayDataDTO.txCount = '';
          sushiswapDayDataDTO.vid = 123456789L;
        return sushiswapDayDataDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASSushiswapDayDataDTO) {           
            OASSushiswapDayDataDTO sushiswapDayDataDTO = (OASSushiswapDayDataDTO) obj;
            return this.entryTime == sushiswapDayDataDTO.entryTime
                && this.recvTime == sushiswapDayDataDTO.recvTime
                && this.blockNumber == sushiswapDayDataDTO.blockNumber
                && this.id == sushiswapDayDataDTO.id
                && this.r_date == sushiswapDayDataDTO.r_date
                && this.factory == sushiswapDayDataDTO.factory
                && this.volumeEth == sushiswapDayDataDTO.volumeEth
                && this.volumeUsd == sushiswapDayDataDTO.volumeUsd
                && this.untrackedVolume == sushiswapDayDataDTO.untrackedVolume
                && this.liquidityEth == sushiswapDayDataDTO.liquidityEth
                && this.liquidityUsd == sushiswapDayDataDTO.liquidityUsd
                && this.txCount == sushiswapDayDataDTO.txCount
                && this.vid == sushiswapDayDataDTO.vid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (r_date == null ? 0 : System.hashCode(r_date));
        hashCode = (17 * hashCode) + (factory == null ? 0 : System.hashCode(factory));
        hashCode = (17 * hashCode) + (volumeEth == null ? 0 : System.hashCode(volumeEth));
        hashCode = (17 * hashCode) + (volumeUsd == null ? 0 : System.hashCode(volumeUsd));
        hashCode = (17 * hashCode) + (untrackedVolume == null ? 0 : System.hashCode(untrackedVolume));
        hashCode = (17 * hashCode) + (liquidityEth == null ? 0 : System.hashCode(liquidityEth));
        hashCode = (17 * hashCode) + (liquidityUsd == null ? 0 : System.hashCode(liquidityUsd));
        hashCode = (17 * hashCode) + (txCount == null ? 0 : System.hashCode(txCount));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        return hashCode;
    }
}

