/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASCowApi {
    OASClient client;

    public OASCowApi(OASClient client) {
        this.client = client;
    }

    public OASCowApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Orders (historical)
     * Gets orders.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id User\&#39;s address. (optional)
     * @return List<OASCowOrderDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowOrderDTO> cowGetOrdersHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowOrderDTO>) client.invoke(
            'GET', '/dapps/cow/orders/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowOrderDTO>.class
        );
    }
    /**
     * Settlements (historical)
     * Gets settlements.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id Transaction hash. (optional)
     * @return List<OASCowSettlementDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowSettlementDTO> cowGetSettlementsHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowSettlementDTO>) client.invoke(
            'GET', '/dapps/cow/settlements/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowSettlementDTO>.class
        );
    }
    /**
     * Tokens (historical)
     * Gets tokens.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id Token\&#39;s address. (optional)
     * @param address Token\&#39;s address. (optional)
     * @param name Token name fetched by ERC20 contract call. (optional)
     * @param symbol Token symbol fetched by contract call. (optional)
     * @return List<OASCowTokenDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowTokenDTO> cowGetTokensHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('address', (String) params.get('address')));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('symbol', (String) params.get('symbol')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowTokenDTO>) client.invoke(
            'GET', '/dapps/cow/tokens/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowTokenDTO>.class
        );
    }
    /**
     * Trades (historical)
     * Gets trades.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id Identifier, format: (order id)|(transaction hash)|(event index). (optional)
     * @param sellToken Address of token that is sold. (optional)
     * @param buyToken Address of token that is bought. (optional)
     * @return List<OASCowTradeDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowTradeDTO> cowGetTradesHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('sell_token', (String) params.get('sellToken')));
        query.addAll(client.makeParam('buy_token', (String) params.get('buyToken')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowTradeDTO>) client.invoke(
            'GET', '/dapps/cow/trades/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowTradeDTO>.class
        );
    }
    /**
     * Users (historical)
     * Gets users.
     * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
     * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
     * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
     * @param endDate The end date of timeframe. (optional)
     * @param id User\&#39;s address. (optional)
     * @param address User\&#39;s address. (optional)
     * @return List<OASCowUserDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowUserDTO> cowGetUsersHistorical(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('startBlock', (Long) params.get('startBlock')));
        query.addAll(client.makeParam('endBlock', (Long) params.get('endBlock')));
        query.addAll(client.makeParam('startDate', (Datetime) params.get('startDate')));
        query.addAll(client.makeParam('endDate', (Datetime) params.get('endDate')));
        query.addAll(client.makeParam('id', (String) params.get('id')));
        query.addAll(client.makeParam('address', (String) params.get('address')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowUserDTO>) client.invoke(
            'GET', '/dapps/cow/users/historical', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowUserDTO>.class
        );
    }
    /**
     * Orders (current)
     * Gets orders.
     * @return List<OASCowOrderDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowOrderDTO> cowOrdersCurrent() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowOrderDTO>) client.invoke(
            'GET', '/dapps/cow/orders/current', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowOrderDTO>.class
        );
    }
    /**
     * Settlements (current)
     * Gets settlements.
     * @return List<OASCowSettlementDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowSettlementDTO> cowSettlementsCurrent() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowSettlementDTO>) client.invoke(
            'GET', '/dapps/cow/settlements/current', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowSettlementDTO>.class
        );
    }
    /**
     * Tokens (current)
     * Gets tokens.
     * @return List<OASCowTokenDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowTokenDTO> cowTokensCurrent() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowTokenDTO>) client.invoke(
            'GET', '/dapps/cow/tokens/current', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowTokenDTO>.class
        );
    }
    /**
     * Trades (current)
     * Gets trades.
     * @return List<OASCowTradeDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowTradeDTO> cowTradesCurrent() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowTradeDTO>) client.invoke(
            'GET', '/dapps/cow/trades/current', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowTradeDTO>.class
        );
    }
    /**
     * Users (current)
     * Gets users.
     * @return List<OASCowUserDTO>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASCowUserDTO> cowUsersCurrent() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASCowUserDTO>) client.invoke(
            'GET', '/dapps/cow/users/current', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'text/plain', 'application/json', 'text/json' },
            new List<String>(),
            new List<String>(),
            List<OASCowUserDTO>.class
        );
    }
}
