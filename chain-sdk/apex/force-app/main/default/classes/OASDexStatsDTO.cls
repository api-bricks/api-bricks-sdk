/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * A type collecting global stats about this instance of Gnosis Protocol.
 */
public class OASDexStatsDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return id
     */
    public String id { get; set; }

    /**
     * The total volume denominated in OWL (all sell amounts combined).
     * @return volumeInOwl
     */
    public String volumeInOwl { get; set; }

    /**
     * The total trader surplus in OWL.
     * @return utilityInOwl
     */
    public String utilityInOwl { get; set; }

    /**
     * The total amount of OWL burnt (equivalent to fees rewarded to solvers).
     * @return owlBurnt
     */
    public String owlBurnt { get; set; }

    /**
     * The total number of settled batches.
     * @return settledBatchCount
     */
    public Integer settledBatchCount { get; set; }

    /**
     * The total number of settled trades.
     * @return settledTradeCount
     */
    public Integer settledTradeCount { get; set; }

    /**
     * The number of listed tokens.
     * @return listedTokens
     */
    public Integer listedTokens { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'volume_in_owl' => 'volumeInOwl',
        'utility_in_owl' => 'utilityInOwl',
        'owl_burnt' => 'owlBurnt',
        'settled_batch_count' => 'settledBatchCount',
        'settled_trade_count' => 'settledTradeCount',
        'listed_tokens' => 'listedTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'volume_in_owl' => 'volumeInOwl',
        'utility_in_owl' => 'utilityInOwl',
        'owl_burnt' => 'owlBurnt',
        'settled_batch_count' => 'settledBatchCount',
        'settled_trade_count' => 'settledTradeCount',
        'listed_tokens' => 'listedTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'volume_in_owl' => 'volumeInOwl',
        'utility_in_owl' => 'utilityInOwl',
        'owl_burnt' => 'owlBurnt',
        'settled_batch_count' => 'settledBatchCount',
        'settled_trade_count' => 'settledTradeCount',
        'listed_tokens' => 'listedTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'volume_in_owl' => 'volumeInOwl',
        'utility_in_owl' => 'utilityInOwl',
        'owl_burnt' => 'owlBurnt',
        'settled_batch_count' => 'settledBatchCount',
        'settled_trade_count' => 'settledTradeCount',
        'listed_tokens' => 'listedTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'volume_in_owl' => 'volumeInOwl',
        'utility_in_owl' => 'utilityInOwl',
        'owl_burnt' => 'owlBurnt',
        'settled_batch_count' => 'settledBatchCount',
        'settled_trade_count' => 'settledTradeCount',
        'listed_tokens' => 'listedTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'volume_in_owl' => 'volumeInOwl',
        'utility_in_owl' => 'utilityInOwl',
        'owl_burnt' => 'owlBurnt',
        'settled_batch_count' => 'settledBatchCount',
        'settled_trade_count' => 'settledTradeCount',
        'listed_tokens' => 'listedTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'volume_in_owl' => 'volumeInOwl',
        'utility_in_owl' => 'utilityInOwl',
        'owl_burnt' => 'owlBurnt',
        'settled_batch_count' => 'settledBatchCount',
        'settled_trade_count' => 'settledTradeCount',
        'listed_tokens' => 'listedTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'volume_in_owl' => 'volumeInOwl',
        'utility_in_owl' => 'utilityInOwl',
        'owl_burnt' => 'owlBurnt',
        'settled_batch_count' => 'settledBatchCount',
        'settled_trade_count' => 'settledTradeCount',
        'listed_tokens' => 'listedTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'volume_in_owl' => 'volumeInOwl',
        'utility_in_owl' => 'utilityInOwl',
        'owl_burnt' => 'owlBurnt',
        'settled_batch_count' => 'settledBatchCount',
        'settled_trade_count' => 'settledTradeCount',
        'listed_tokens' => 'listedTokens'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASDexStatsDTO getExample() {
        OASDexStatsDTO dexStatsDTO = new OASDexStatsDTO();
          dexStatsDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          dexStatsDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          dexStatsDTO.blockNumber = 123456789L;
          dexStatsDTO.id = '';
          dexStatsDTO.volumeInOwl = '';
          dexStatsDTO.utilityInOwl = '';
          dexStatsDTO.owlBurnt = '';
          dexStatsDTO.settledBatchCount = 0;
          dexStatsDTO.settledTradeCount = 0;
          dexStatsDTO.listedTokens = 0;
          dexStatsDTO.vid = 123456789L;
        return dexStatsDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASDexStatsDTO) {           
            OASDexStatsDTO dexStatsDTO = (OASDexStatsDTO) obj;
            return this.entryTime == dexStatsDTO.entryTime
                && this.recvTime == dexStatsDTO.recvTime
                && this.blockNumber == dexStatsDTO.blockNumber
                && this.id == dexStatsDTO.id
                && this.volumeInOwl == dexStatsDTO.volumeInOwl
                && this.utilityInOwl == dexStatsDTO.utilityInOwl
                && this.owlBurnt == dexStatsDTO.owlBurnt
                && this.settledBatchCount == dexStatsDTO.settledBatchCount
                && this.settledTradeCount == dexStatsDTO.settledTradeCount
                && this.listedTokens == dexStatsDTO.listedTokens
                && this.vid == dexStatsDTO.vid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (volumeInOwl == null ? 0 : System.hashCode(volumeInOwl));
        hashCode = (17 * hashCode) + (utilityInOwl == null ? 0 : System.hashCode(utilityInOwl));
        hashCode = (17 * hashCode) + (owlBurnt == null ? 0 : System.hashCode(owlBurnt));
        hashCode = (17 * hashCode) + (settledBatchCount == null ? 0 : System.hashCode(settledBatchCount));
        hashCode = (17 * hashCode) + (settledTradeCount == null ? 0 : System.hashCode(settledTradeCount));
        hashCode = (17 * hashCode) + (listedTokens == null ? 0 : System.hashCode(listedTokens));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        return hashCode;
    }
}

