/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Transaction entities are created for each Ethereum transaction that contains an interaction within Uniswap contracts. Each transaction contains 3 arrays, and at least one of these arrays has a length of 1.
 */
public class OASUniswapV2TransactionDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Ethereum transaction hash.
     * @return id
     */
    public String id { get; set; }

    /**
     * Timestamp.
     * @return timestamp
     */
    public String timestamp { get; set; }

    /**
     * Array of Mint events within the transaction, 0 or greater.
     * @return mints
     */
    public List<String> mints { get; set; }

    /**
     * Array of Burn events within transaction, 0 or greater.
     * @return burns
     */
    public List<String> burns { get; set; }

    /**
     * Array of Swap events within transaction, 0 or greater.
     * @return swaps
     */
    public List<String> swaps { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASUniswapV2TransactionDTO() {
        mints = new List<String>();
        burns = new List<String>();
        swaps = new List<String>();
    }

    public static OASUniswapV2TransactionDTO getExample() {
        OASUniswapV2TransactionDTO uniswapV2TransactionDTO = new OASUniswapV2TransactionDTO();
          uniswapV2TransactionDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV2TransactionDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV2TransactionDTO.blockNumber = 123456789L;
          uniswapV2TransactionDTO.id = '';
          uniswapV2TransactionDTO.timestamp = '';
          uniswapV2TransactionDTO.mints = new List<String>{''};
          uniswapV2TransactionDTO.burns = new List<String>{''};
          uniswapV2TransactionDTO.swaps = new List<String>{''};
          uniswapV2TransactionDTO.vid = 123456789L;
        return uniswapV2TransactionDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUniswapV2TransactionDTO) {           
            OASUniswapV2TransactionDTO uniswapV2TransactionDTO = (OASUniswapV2TransactionDTO) obj;
            return this.entryTime == uniswapV2TransactionDTO.entryTime
                && this.recvTime == uniswapV2TransactionDTO.recvTime
                && this.blockNumber == uniswapV2TransactionDTO.blockNumber
                && this.id == uniswapV2TransactionDTO.id
                && this.timestamp == uniswapV2TransactionDTO.timestamp
                && this.mints == uniswapV2TransactionDTO.mints
                && this.burns == uniswapV2TransactionDTO.burns
                && this.swaps == uniswapV2TransactionDTO.swaps
                && this.vid == uniswapV2TransactionDTO.vid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (mints == null ? 0 : System.hashCode(mints));
        hashCode = (17 * hashCode) + (burns == null ? 0 : System.hashCode(burns));
        hashCode = (17 * hashCode) + (swaps == null ? 0 : System.hashCode(swaps));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        return hashCode;
    }
}

