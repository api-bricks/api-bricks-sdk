/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Order submitted by an user. It has a validity (dates) so they can only be executed from/until some given batches. Partial executions of this trades must respect the limit price.
 */
public class OASDexOrderDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Identifier, format: (owner address)-(order id)
     * @return id
     */
    public String id { get; set; }

    /**
     * Reference to owner.
     * @return owner
     */
    public String owner { get; set; }

    /**
     * Order id.
     * @return orderId
     */
    public Integer orderId { get; set; }

    /**
     * Batch id from which order became valid.
     * @return fromBatchId
     */
    public String fromBatchId { get; set; }

    /**
     * Start of epoch in which order was placed and became valid.
     * @return fromEpoch
     */
    public String fromEpoch { get; set; }

    /**
     * Batch id until which trade was still valid.
     * @return untilBatchId
     */
    public String untilBatchId { get; set; }

    /**
     * End of epoch in which order was placed.
     * @return untilEpoch
     */
    public String untilEpoch { get; set; }

    /**
     * Identifier of token that was bought.
     * @return buyToken
     */
    public String buyToken { get; set; }

    /**
     * Identifier of token that was sold.
     * @return sellToken
     */
    public String sellToken { get; set; }

    /**
     * Price enumerator.
     * @return priceNumerator
     */
    public String priceNumerator { get; set; }

    /**
     * Price denominator.
     * @return priceDenominator
     */
    public String priceDenominator { get; set; }

    /**
     * Maximum sell amount.
     * @return maxSellAmount
     */
    public String maxSellAmount { get; set; }

    /**
     * Minimum receive amount.
     * @return minReceiveAmount
     */
    public String minReceiveAmount { get; set; }

    /**
     * Sold volume.
     * @return soldVolume
     */
    public String soldVolume { get; set; }

    /**
     * Bought volume.
     * @return boughtVolume
     */
    public String boughtVolume { get; set; }

    /**
     * Epoch in which order was created.
     * @return createEpoch
     */
    public String createEpoch { get; set; }

    /**
     * Epoch in which order was cancelled.
     * @return cancelEpoch
     */
    public String cancelEpoch { get; set; }

    /**
     * Epoch in which order was deleted.
     * @return deleteEpoch
     */
    public String deleteEpoch { get; set; }

    /**
     * Transaction hash.
     * @return txHash
     */
    public String txHash { get; set; }

    /**
     * Event index within transaction.
     * @return txLogIndex
     */
    public String txLogIndex { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'order_id' => 'orderId',
        'from_batch_id' => 'fromBatchId',
        'from_epoch' => 'fromEpoch',
        'until_batch_id' => 'untilBatchId',
        'until_epoch' => 'untilEpoch',
        'buy_token' => 'buyToken',
        'sell_token' => 'sellToken',
        'price_numerator' => 'priceNumerator',
        'price_denominator' => 'priceDenominator',
        'max_sell_amount' => 'maxSellAmount',
        'min_receive_amount' => 'minReceiveAmount',
        'sold_volume' => 'soldVolume',
        'bought_volume' => 'boughtVolume',
        'create_epoch' => 'createEpoch',
        'cancel_epoch' => 'cancelEpoch',
        'delete_epoch' => 'deleteEpoch',
        'tx_hash' => 'txHash',
        'tx_log_index' => 'txLogIndex'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASDexOrderDTO getExample() {
        OASDexOrderDTO dexOrderDTO = new OASDexOrderDTO();
          dexOrderDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          dexOrderDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          dexOrderDTO.blockNumber = 123456789L;
          dexOrderDTO.id = '';
          dexOrderDTO.owner = '';
          dexOrderDTO.orderId = 0;
          dexOrderDTO.fromBatchId = '';
          dexOrderDTO.fromEpoch = '';
          dexOrderDTO.untilBatchId = '';
          dexOrderDTO.untilEpoch = '';
          dexOrderDTO.buyToken = '';
          dexOrderDTO.sellToken = '';
          dexOrderDTO.priceNumerator = '';
          dexOrderDTO.priceDenominator = '';
          dexOrderDTO.maxSellAmount = '';
          dexOrderDTO.minReceiveAmount = '';
          dexOrderDTO.soldVolume = '';
          dexOrderDTO.boughtVolume = '';
          dexOrderDTO.createEpoch = '';
          dexOrderDTO.cancelEpoch = '';
          dexOrderDTO.deleteEpoch = '';
          dexOrderDTO.txHash = '';
          dexOrderDTO.txLogIndex = '';
          dexOrderDTO.vid = 123456789L;
        return dexOrderDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASDexOrderDTO) {           
            OASDexOrderDTO dexOrderDTO = (OASDexOrderDTO) obj;
            return this.entryTime == dexOrderDTO.entryTime
                && this.recvTime == dexOrderDTO.recvTime
                && this.blockNumber == dexOrderDTO.blockNumber
                && this.id == dexOrderDTO.id
                && this.owner == dexOrderDTO.owner
                && this.orderId == dexOrderDTO.orderId
                && this.fromBatchId == dexOrderDTO.fromBatchId
                && this.fromEpoch == dexOrderDTO.fromEpoch
                && this.untilBatchId == dexOrderDTO.untilBatchId
                && this.untilEpoch == dexOrderDTO.untilEpoch
                && this.buyToken == dexOrderDTO.buyToken
                && this.sellToken == dexOrderDTO.sellToken
                && this.priceNumerator == dexOrderDTO.priceNumerator
                && this.priceDenominator == dexOrderDTO.priceDenominator
                && this.maxSellAmount == dexOrderDTO.maxSellAmount
                && this.minReceiveAmount == dexOrderDTO.minReceiveAmount
                && this.soldVolume == dexOrderDTO.soldVolume
                && this.boughtVolume == dexOrderDTO.boughtVolume
                && this.createEpoch == dexOrderDTO.createEpoch
                && this.cancelEpoch == dexOrderDTO.cancelEpoch
                && this.deleteEpoch == dexOrderDTO.deleteEpoch
                && this.txHash == dexOrderDTO.txHash
                && this.txLogIndex == dexOrderDTO.txLogIndex
                && this.vid == dexOrderDTO.vid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (owner == null ? 0 : System.hashCode(owner));
        hashCode = (17 * hashCode) + (orderId == null ? 0 : System.hashCode(orderId));
        hashCode = (17 * hashCode) + (fromBatchId == null ? 0 : System.hashCode(fromBatchId));
        hashCode = (17 * hashCode) + (fromEpoch == null ? 0 : System.hashCode(fromEpoch));
        hashCode = (17 * hashCode) + (untilBatchId == null ? 0 : System.hashCode(untilBatchId));
        hashCode = (17 * hashCode) + (untilEpoch == null ? 0 : System.hashCode(untilEpoch));
        hashCode = (17 * hashCode) + (buyToken == null ? 0 : System.hashCode(buyToken));
        hashCode = (17 * hashCode) + (sellToken == null ? 0 : System.hashCode(sellToken));
        hashCode = (17 * hashCode) + (priceNumerator == null ? 0 : System.hashCode(priceNumerator));
        hashCode = (17 * hashCode) + (priceDenominator == null ? 0 : System.hashCode(priceDenominator));
        hashCode = (17 * hashCode) + (maxSellAmount == null ? 0 : System.hashCode(maxSellAmount));
        hashCode = (17 * hashCode) + (minReceiveAmount == null ? 0 : System.hashCode(minReceiveAmount));
        hashCode = (17 * hashCode) + (soldVolume == null ? 0 : System.hashCode(soldVolume));
        hashCode = (17 * hashCode) + (boughtVolume == null ? 0 : System.hashCode(boughtVolume));
        hashCode = (17 * hashCode) + (createEpoch == null ? 0 : System.hashCode(createEpoch));
        hashCode = (17 * hashCode) + (cancelEpoch == null ? 0 : System.hashCode(cancelEpoch));
        hashCode = (17 * hashCode) + (deleteEpoch == null ? 0 : System.hashCode(deleteEpoch));
        hashCode = (17 * hashCode) + (txHash == null ? 0 : System.hashCode(txHash));
        hashCode = (17 * hashCode) + (txLogIndex == null ? 0 : System.hashCode(txLogIndex));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        return hashCode;
    }
}

