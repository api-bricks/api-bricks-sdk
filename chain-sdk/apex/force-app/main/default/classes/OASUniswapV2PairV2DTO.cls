/*
 * OnChain API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Information about a pair. Includes references to each token within the pair, volume information, liquidity information, and more. The pair entity mirrors the pair smart contract, and also contains aggregated information about use.
 */
public class OASUniswapV2PairV2DTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * Pair contract address.
     * @return id
     */
    public String id { get; set; }

    /**
     * Reference to token0 as stored in pair contract.
     * @return token0
     */
    public String token0 { get; set; }

    /**
     * Reference to token1 as stored in pair contract.
     * @return token1
     */
    public String token1 { get; set; }

    /**
     * Reserve of token0.
     * @return reserve0
     */
    public String reserve0 { get; set; }

    /**
     * Reserve of token1.
     * @return reserve1
     */
    public String reserve1 { get; set; }

    /**
     * Total supply of liquidity token distributed to LPs.
     * @return totalSupply
     */
    public String totalSupply { get; set; }

    /**
     * Total liquidity in pair stored as an amount of ETH.
     * @return reserveEth
     */
    public String reserveEth { get; set; }

    /**
     * Total liquidity amount in pair stored as an amount of USD.
     * @return reserveUsd
     */
    public String reserveUsd { get; set; }

    /**
     * Total liquidity with only tracked amount.
     * @return trackedReserveEth
     */
    public String trackedReserveEth { get; set; }

    /**
     * Token0 per token1.
     * @return token0Price
     */
    public String token0Price { get; set; }

    /**
     * Token1 per token0.
     * @return token1Price
     */
    public String token1Price { get; set; }

    /**
     * Amount of token0 swapped on this pair.
     * @return volumeToken0
     */
    public String volumeToken0 { get; set; }

    /**
     * Amount of token1 swapped on this pair.
     * @return volumeToken1
     */
    public String volumeToken1 { get; set; }

    /**
     * Total amount swapped all time in this pair stored in USD (only tracked if USD liquidity is above minimum threshold).
     * @return volumeUsd
     */
    public String volumeUsd { get; set; }

    /**
     * Total amount swapped all time in this pair stored in USD, no minimum liquidity threshold.
     * @return untrackedVolumeUsd
     */
    public String untrackedVolumeUsd { get; set; }

    /**
     * Get txCount
     * @return txCount
     */
    public OASNumericsBigInteger txCount { get; set; }

    /**
     * Timestamp contract was created.
     * @return createdAtTimestamp
     */
    public Datetime createdAtTimestamp { get; set; }

    /**
     * Total number of LPs.
     * @return liquidityProviderCount
     */
    public String liquidityProviderCount { get; set; }

    /**
     * Get evaluatedAsk
     * @return evaluatedAsk
     */
    public Double evaluatedAsk { get; private set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'token_0' => 'token0',
        'token_1' => 'token1',
        'reserve_0' => 'reserve0',
        'reserve_1' => 'reserve1',
        'total_supply' => 'totalSupply',
        'reserve_eth' => 'reserveEth',
        'reserve_usd' => 'reserveUsd',
        'tracked_reserve_eth' => 'trackedReserveEth',
        'token_0_price' => 'token0Price',
        'token_1_price' => 'token1Price',
        'volume_token_0' => 'volumeToken0',
        'volume_token_1' => 'volumeToken1',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'created_at_timestamp' => 'createdAtTimestamp',
        'liquidity_provider_count' => 'liquidityProviderCount',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASUniswapV2PairV2DTO getExample() {
        OASUniswapV2PairV2DTO uniswapV2PairV2DTO = new OASUniswapV2PairV2DTO();
          uniswapV2PairV2DTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV2PairV2DTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV2PairV2DTO.blockNumber = 123456789L;
          uniswapV2PairV2DTO.vid = 123456789L;
          uniswapV2PairV2DTO.id = '';
          uniswapV2PairV2DTO.token0 = '';
          uniswapV2PairV2DTO.token1 = '';
          uniswapV2PairV2DTO.reserve0 = '';
          uniswapV2PairV2DTO.reserve1 = '';
          uniswapV2PairV2DTO.totalSupply = '';
          uniswapV2PairV2DTO.reserveEth = '';
          uniswapV2PairV2DTO.reserveUsd = '';
          uniswapV2PairV2DTO.trackedReserveEth = '';
          uniswapV2PairV2DTO.token0Price = '';
          uniswapV2PairV2DTO.token1Price = '';
          uniswapV2PairV2DTO.volumeToken0 = '';
          uniswapV2PairV2DTO.volumeToken1 = '';
          uniswapV2PairV2DTO.volumeUsd = '';
          uniswapV2PairV2DTO.untrackedVolumeUsd = '';
          uniswapV2PairV2DTO.txCount = OASNumericsBigInteger.getExample();
          uniswapV2PairV2DTO.createdAtTimestamp = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV2PairV2DTO.liquidityProviderCount = '';
          uniswapV2PairV2DTO.evaluatedAsk = 1.3579;
        return uniswapV2PairV2DTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUniswapV2PairV2DTO) {           
            OASUniswapV2PairV2DTO uniswapV2PairV2DTO = (OASUniswapV2PairV2DTO) obj;
            return this.entryTime == uniswapV2PairV2DTO.entryTime
                && this.recvTime == uniswapV2PairV2DTO.recvTime
                && this.blockNumber == uniswapV2PairV2DTO.blockNumber
                && this.vid == uniswapV2PairV2DTO.vid
                && this.id == uniswapV2PairV2DTO.id
                && this.token0 == uniswapV2PairV2DTO.token0
                && this.token1 == uniswapV2PairV2DTO.token1
                && this.reserve0 == uniswapV2PairV2DTO.reserve0
                && this.reserve1 == uniswapV2PairV2DTO.reserve1
                && this.totalSupply == uniswapV2PairV2DTO.totalSupply
                && this.reserveEth == uniswapV2PairV2DTO.reserveEth
                && this.reserveUsd == uniswapV2PairV2DTO.reserveUsd
                && this.trackedReserveEth == uniswapV2PairV2DTO.trackedReserveEth
                && this.token0Price == uniswapV2PairV2DTO.token0Price
                && this.token1Price == uniswapV2PairV2DTO.token1Price
                && this.volumeToken0 == uniswapV2PairV2DTO.volumeToken0
                && this.volumeToken1 == uniswapV2PairV2DTO.volumeToken1
                && this.volumeUsd == uniswapV2PairV2DTO.volumeUsd
                && this.untrackedVolumeUsd == uniswapV2PairV2DTO.untrackedVolumeUsd
                && this.txCount == uniswapV2PairV2DTO.txCount
                && this.createdAtTimestamp == uniswapV2PairV2DTO.createdAtTimestamp
                && this.liquidityProviderCount == uniswapV2PairV2DTO.liquidityProviderCount
                && this.evaluatedAsk == uniswapV2PairV2DTO.evaluatedAsk;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (token0 == null ? 0 : System.hashCode(token0));
        hashCode = (17 * hashCode) + (token1 == null ? 0 : System.hashCode(token1));
        hashCode = (17 * hashCode) + (reserve0 == null ? 0 : System.hashCode(reserve0));
        hashCode = (17 * hashCode) + (reserve1 == null ? 0 : System.hashCode(reserve1));
        hashCode = (17 * hashCode) + (totalSupply == null ? 0 : System.hashCode(totalSupply));
        hashCode = (17 * hashCode) + (reserveEth == null ? 0 : System.hashCode(reserveEth));
        hashCode = (17 * hashCode) + (reserveUsd == null ? 0 : System.hashCode(reserveUsd));
        hashCode = (17 * hashCode) + (trackedReserveEth == null ? 0 : System.hashCode(trackedReserveEth));
        hashCode = (17 * hashCode) + (token0Price == null ? 0 : System.hashCode(token0Price));
        hashCode = (17 * hashCode) + (token1Price == null ? 0 : System.hashCode(token1Price));
        hashCode = (17 * hashCode) + (volumeToken0 == null ? 0 : System.hashCode(volumeToken0));
        hashCode = (17 * hashCode) + (volumeToken1 == null ? 0 : System.hashCode(volumeToken1));
        hashCode = (17 * hashCode) + (volumeUsd == null ? 0 : System.hashCode(volumeUsd));
        hashCode = (17 * hashCode) + (untrackedVolumeUsd == null ? 0 : System.hashCode(untrackedVolumeUsd));
        hashCode = (17 * hashCode) + (txCount == null ? 0 : System.hashCode(txCount));
        hashCode = (17 * hashCode) + (createdAtTimestamp == null ? 0 : System.hashCode(createdAtTimestamp));
        hashCode = (17 * hashCode) + (liquidityProviderCount == null ? 0 : System.hashCode(liquidityProviderCount));
        hashCode = (17 * hashCode) + (evaluatedAsk == null ? 0 : System.hashCode(evaluatedAsk));
        return hashCode;
    }
}

