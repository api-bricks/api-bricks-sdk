/*
 * OnChain API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 */
public class OASTokenV2DTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * Token address.
     * @return id
     */
    public String id { get; set; }

    /**
     * Token symbol.
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * Token name.
     * @return name
     */
    public String name { get; set; }

    /**
     * Token decimals.
     * @return decimals
     */
    public Integer decimals { get; set; }

    /**
     * Get totalSupply
     * @return totalSupply
     */
    public OASBigInteger totalSupply { get; set; }

    /**
     * Amount of token traded all time across all pairs.
     * @return tradeVolume
     */
    public String tradeVolume { get; set; }

    /**
     * Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold).
     * @return tradeVolumeUsd
     */
    public String tradeVolumeUsd { get; set; }

    /**
     * Amount of token in USD traded all time across pairs (no minimum liquidity threshold).
     * @return untrackedVolumeUsd
     */
    public String untrackedVolumeUsd { get; set; }

    /**
     * Get txCount
     * @return txCount
     */
    public OASBigInteger txCount { get; set; }

    /**
     * Total amount of token provided as liquidity across all pairs.
     * @return totalLiquidity
     */
    public String totalLiquidity { get; set; }

    /**
     * ETH per token.
     * @return derivedEth
     */
    public String derivedEth { get; set; }

    /**
     * Get tokenSymbol
     * @return tokenSymbol
     */
    public String tokenSymbol { get; private set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'trade_volume' => 'tradeVolume',
        'trade_volume_usd' => 'tradeVolumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'total_liquidity' => 'totalLiquidity',
        'derived_eth' => 'derivedEth',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASTokenV2DTO getExample() {
        OASTokenV2DTO tokenV2DTO = new OASTokenV2DTO();
          tokenV2DTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          tokenV2DTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          tokenV2DTO.blockNumber = 123456789L;
          tokenV2DTO.vid = 123456789L;
          tokenV2DTO.id = '';
          tokenV2DTO.symbol = '';
          tokenV2DTO.name = '';
          tokenV2DTO.decimals = 0;
          tokenV2DTO.totalSupply = OASBigInteger.getExample();
          tokenV2DTO.tradeVolume = '';
          tokenV2DTO.tradeVolumeUsd = '';
          tokenV2DTO.untrackedVolumeUsd = '';
          tokenV2DTO.txCount = OASBigInteger.getExample();
          tokenV2DTO.totalLiquidity = '';
          tokenV2DTO.derivedEth = '';
          tokenV2DTO.tokenSymbol = '';
        return tokenV2DTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASTokenV2DTO) {           
            OASTokenV2DTO tokenV2DTO = (OASTokenV2DTO) obj;
            return this.entryTime == tokenV2DTO.entryTime
                && this.recvTime == tokenV2DTO.recvTime
                && this.blockNumber == tokenV2DTO.blockNumber
                && this.vid == tokenV2DTO.vid
                && this.id == tokenV2DTO.id
                && this.symbol == tokenV2DTO.symbol
                && this.name == tokenV2DTO.name
                && this.decimals == tokenV2DTO.decimals
                && this.totalSupply == tokenV2DTO.totalSupply
                && this.tradeVolume == tokenV2DTO.tradeVolume
                && this.tradeVolumeUsd == tokenV2DTO.tradeVolumeUsd
                && this.untrackedVolumeUsd == tokenV2DTO.untrackedVolumeUsd
                && this.txCount == tokenV2DTO.txCount
                && this.totalLiquidity == tokenV2DTO.totalLiquidity
                && this.derivedEth == tokenV2DTO.derivedEth
                && this.tokenSymbol == tokenV2DTO.tokenSymbol;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (decimals == null ? 0 : System.hashCode(decimals));
        hashCode = (17 * hashCode) + (totalSupply == null ? 0 : System.hashCode(totalSupply));
        hashCode = (17 * hashCode) + (tradeVolume == null ? 0 : System.hashCode(tradeVolume));
        hashCode = (17 * hashCode) + (tradeVolumeUsd == null ? 0 : System.hashCode(tradeVolumeUsd));
        hashCode = (17 * hashCode) + (untrackedVolumeUsd == null ? 0 : System.hashCode(untrackedVolumeUsd));
        hashCode = (17 * hashCode) + (txCount == null ? 0 : System.hashCode(txCount));
        hashCode = (17 * hashCode) + (totalLiquidity == null ? 0 : System.hashCode(totalLiquidity));
        hashCode = (17 * hashCode) + (derivedEth == null ? 0 : System.hashCode(derivedEth));
        hashCode = (17 * hashCode) + (tokenSymbol == null ? 0 : System.hashCode(tokenSymbol));
        return hashCode;
    }
}

