/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASCurveProposalDTO
 */
public class OASCurveProposalDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return id
     */
    public String id { get; set; }

    /**
     * Sequential number in related to the realted voting app.
     * @return r_number
     */
    public String r_number { get; set; }

    /**
     * Voting app instance.
     * @return app
     */
    public String app { get; set; }

    /**
     * Proposal creator\'s account.
     * @return creator
     */
    public String creator { get; set; }

    /**
     * 
     * @return executionScript
     */
    public String executionScript { get; set; }

    /**
     * 
     * @return expireDate
     */
    public String expireDate { get; set; }

    /**
     * Percentage of positive votes in total possible votes for this proposal to be accepted.
     * @return minimumQuorum
     */
    public String minimumQuorum { get; set; }

    /**
     * Percentage of positive votes needed for this proposal to be accepted.
     * @return requiredSupport
     */
    public String requiredSupport { get; set; }

    /**
     * 
     * @return snapshotBlock
     */
    public String snapshotBlock { get; set; }

    /**
     * 
     * @return votingPower
     */
    public String votingPower { get; set; }

    /**
     * Link to metadata file.
     * @return metadata
     */
    public String metadata { get; set; }

    /**
     * Proposal description text.
     * @return text
     */
    public String text { get; set; }

    /**
     * Number of votes received by the proposal.
     * @return voteCount
     */
    public String voteCount { get; set; }

    /**
     * Number of positive votes (yes) received by the proposal.
     * @return positiveVoteCount
     */
    public String positiveVoteCount { get; set; }

    /**
     * Number of negative votes (no) received by the proposal.
     * @return negativeVoteCount
     */
    public String negativeVoteCount { get; set; }

    /**
     * 
     * @return currentQuorum
     */
    public String currentQuorum { get; set; }

    /**
     * 
     * @return currentSupport
     */
    public String currentSupport { get; set; }

    /**
     * 
     * @return stakedSupport
     */
    public String stakedSupport { get; set; }

    /**
     * 
     * @return totalStaked
     */
    public String totalStaked { get; set; }

    /**
     * 
     * @return created
     */
    public String created { get; set; }

    /**
     * 
     * @return createdAtBlock
     */
    public String createdAtBlock { get; set; }

    /**
     * 
     * @return createdAtTransaction
     */
    public String createdAtTransaction { get; set; }

    /**
     * 
     * @return updated
     */
    public String updated { get; set; }

    /**
     * 
     * @return updatedAtBlock
     */
    public String updatedAtBlock { get; set; }

    /**
     * 
     * @return updatedAtTransaction
     */
    public String updatedAtTransaction { get; set; }

    /**
     * 
     * @return executed
     */
    public String executed { get; set; }

    /**
     * 
     * @return executedAtBlock
     */
    public String executedAtBlock { get; set; }

    /**
     * 
     * @return executedAtTransaction
     */
    public String executedAtTransaction { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'number' => 'r_number',
        'execution_script' => 'executionScript',
        'expire_date' => 'expireDate',
        'minimum_quorum' => 'minimumQuorum',
        'required_support' => 'requiredSupport',
        'snapshot_block' => 'snapshotBlock',
        'voting_power' => 'votingPower',
        'vote_count' => 'voteCount',
        'positive_vote_count' => 'positiveVoteCount',
        'negative_vote_count' => 'negativeVoteCount',
        'current_quorum' => 'currentQuorum',
        'current_support' => 'currentSupport',
        'staked_support' => 'stakedSupport',
        'total_staked' => 'totalStaked',
        'created_at_block' => 'createdAtBlock',
        'created_at_transaction' => 'createdAtTransaction',
        'updated_at_block' => 'updatedAtBlock',
        'updated_at_transaction' => 'updatedAtTransaction',
        'executed_at_block' => 'executedAtBlock',
        'executed_at_transaction' => 'executedAtTransaction'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASCurveProposalDTO getExample() {
        OASCurveProposalDTO curveProposalDTO = new OASCurveProposalDTO();
          curveProposalDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          curveProposalDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          curveProposalDTO.blockNumber = 123456789L;
          curveProposalDTO.id = '';
          curveProposalDTO.r_number = '';
          curveProposalDTO.app = '';
          curveProposalDTO.creator = '';
          curveProposalDTO.executionScript = '';
          curveProposalDTO.expireDate = '';
          curveProposalDTO.minimumQuorum = '';
          curveProposalDTO.requiredSupport = '';
          curveProposalDTO.snapshotBlock = '';
          curveProposalDTO.votingPower = '';
          curveProposalDTO.metadata = '';
          curveProposalDTO.text = '';
          curveProposalDTO.voteCount = '';
          curveProposalDTO.positiveVoteCount = '';
          curveProposalDTO.negativeVoteCount = '';
          curveProposalDTO.currentQuorum = '';
          curveProposalDTO.currentSupport = '';
          curveProposalDTO.stakedSupport = '';
          curveProposalDTO.totalStaked = '';
          curveProposalDTO.created = '';
          curveProposalDTO.createdAtBlock = '';
          curveProposalDTO.createdAtTransaction = '';
          curveProposalDTO.updated = '';
          curveProposalDTO.updatedAtBlock = '';
          curveProposalDTO.updatedAtTransaction = '';
          curveProposalDTO.executed = '';
          curveProposalDTO.executedAtBlock = '';
          curveProposalDTO.executedAtTransaction = '';
          curveProposalDTO.vid = 123456789L;
        return curveProposalDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCurveProposalDTO) {           
            OASCurveProposalDTO curveProposalDTO = (OASCurveProposalDTO) obj;
            return this.entryTime == curveProposalDTO.entryTime
                && this.recvTime == curveProposalDTO.recvTime
                && this.blockNumber == curveProposalDTO.blockNumber
                && this.id == curveProposalDTO.id
                && this.r_number == curveProposalDTO.r_number
                && this.app == curveProposalDTO.app
                && this.creator == curveProposalDTO.creator
                && this.executionScript == curveProposalDTO.executionScript
                && this.expireDate == curveProposalDTO.expireDate
                && this.minimumQuorum == curveProposalDTO.minimumQuorum
                && this.requiredSupport == curveProposalDTO.requiredSupport
                && this.snapshotBlock == curveProposalDTO.snapshotBlock
                && this.votingPower == curveProposalDTO.votingPower
                && this.metadata == curveProposalDTO.metadata
                && this.text == curveProposalDTO.text
                && this.voteCount == curveProposalDTO.voteCount
                && this.positiveVoteCount == curveProposalDTO.positiveVoteCount
                && this.negativeVoteCount == curveProposalDTO.negativeVoteCount
                && this.currentQuorum == curveProposalDTO.currentQuorum
                && this.currentSupport == curveProposalDTO.currentSupport
                && this.stakedSupport == curveProposalDTO.stakedSupport
                && this.totalStaked == curveProposalDTO.totalStaked
                && this.created == curveProposalDTO.created
                && this.createdAtBlock == curveProposalDTO.createdAtBlock
                && this.createdAtTransaction == curveProposalDTO.createdAtTransaction
                && this.updated == curveProposalDTO.updated
                && this.updatedAtBlock == curveProposalDTO.updatedAtBlock
                && this.updatedAtTransaction == curveProposalDTO.updatedAtTransaction
                && this.executed == curveProposalDTO.executed
                && this.executedAtBlock == curveProposalDTO.executedAtBlock
                && this.executedAtTransaction == curveProposalDTO.executedAtTransaction
                && this.vid == curveProposalDTO.vid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (r_number == null ? 0 : System.hashCode(r_number));
        hashCode = (17 * hashCode) + (app == null ? 0 : System.hashCode(app));
        hashCode = (17 * hashCode) + (creator == null ? 0 : System.hashCode(creator));
        hashCode = (17 * hashCode) + (executionScript == null ? 0 : System.hashCode(executionScript));
        hashCode = (17 * hashCode) + (expireDate == null ? 0 : System.hashCode(expireDate));
        hashCode = (17 * hashCode) + (minimumQuorum == null ? 0 : System.hashCode(minimumQuorum));
        hashCode = (17 * hashCode) + (requiredSupport == null ? 0 : System.hashCode(requiredSupport));
        hashCode = (17 * hashCode) + (snapshotBlock == null ? 0 : System.hashCode(snapshotBlock));
        hashCode = (17 * hashCode) + (votingPower == null ? 0 : System.hashCode(votingPower));
        hashCode = (17 * hashCode) + (metadata == null ? 0 : System.hashCode(metadata));
        hashCode = (17 * hashCode) + (text == null ? 0 : System.hashCode(text));
        hashCode = (17 * hashCode) + (voteCount == null ? 0 : System.hashCode(voteCount));
        hashCode = (17 * hashCode) + (positiveVoteCount == null ? 0 : System.hashCode(positiveVoteCount));
        hashCode = (17 * hashCode) + (negativeVoteCount == null ? 0 : System.hashCode(negativeVoteCount));
        hashCode = (17 * hashCode) + (currentQuorum == null ? 0 : System.hashCode(currentQuorum));
        hashCode = (17 * hashCode) + (currentSupport == null ? 0 : System.hashCode(currentSupport));
        hashCode = (17 * hashCode) + (stakedSupport == null ? 0 : System.hashCode(stakedSupport));
        hashCode = (17 * hashCode) + (totalStaked == null ? 0 : System.hashCode(totalStaked));
        hashCode = (17 * hashCode) + (created == null ? 0 : System.hashCode(created));
        hashCode = (17 * hashCode) + (createdAtBlock == null ? 0 : System.hashCode(createdAtBlock));
        hashCode = (17 * hashCode) + (createdAtTransaction == null ? 0 : System.hashCode(createdAtTransaction));
        hashCode = (17 * hashCode) + (updated == null ? 0 : System.hashCode(updated));
        hashCode = (17 * hashCode) + (updatedAtBlock == null ? 0 : System.hashCode(updatedAtBlock));
        hashCode = (17 * hashCode) + (updatedAtTransaction == null ? 0 : System.hashCode(updatedAtTransaction));
        hashCode = (17 * hashCode) + (executed == null ? 0 : System.hashCode(executed));
        hashCode = (17 * hashCode) + (executedAtBlock == null ? 0 : System.hashCode(executedAtBlock));
        hashCode = (17 * hashCode) + (executedAtTransaction == null ? 0 : System.hashCode(executedAtTransaction));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        return hashCode;
    }
}

