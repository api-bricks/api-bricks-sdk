/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Token data aggregated across all pairs that include token.
 */
public class OASUniswapV2TokenDayDataDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Token address and day id (day start timestamp in unix / 86400) concatenated with a dash.
     * @return id
     */
    public String id { get; set; }

    /**
     * Unix timestamp for start of day.
     * @return r_date
     */
    public Integer r_date { get; set; }

    /**
     * Reference to token entity.
     * @return token
     */
    public String token { get; set; }

    /**
     * Amount of token swapped across all pairs throughout day.
     * @return dailyVolumeToken
     */
    public String dailyVolumeToken { get; set; }

    /**
     * Amount of token swapped across all pairs throughout day stored as a derived amount of ETH.
     * @return dailyVolumeEth
     */
    public String dailyVolumeEth { get; set; }

    /**
     * Amount of token swapped across all pairs throughout day stored as a derived amount of USD.
     * @return dailyVolumeUsd
     */
    public String dailyVolumeUsd { get; set; }

    /**
     * Amount of transactions with this token across all pairs.
     * @return dailyTxns
     */
    public String dailyTxns { get; set; }

    /**
     * Token amount of token deposited across all pairs.
     * @return totalLiquidityToken
     */
    public String totalLiquidityToken { get; set; }

    /**
     * Token amount of token deposited across all pairs stored as amount of ETH.
     * @return totalLiquidityEth
     */
    public String totalLiquidityEth { get; set; }

    /**
     * Token amount of token deposited across all pairs stored as amount of USD.
     * @return totalLiquidityUsd
     */
    public String totalLiquidityUsd { get; set; }

    /**
     * Price of token in derived USD.
     * @return priceUsd
     */
    public String priceUsd { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'date' => 'r_date',
        'daily_volume_token' => 'dailyVolumeToken',
        'daily_volume_eth' => 'dailyVolumeEth',
        'daily_volume_usd' => 'dailyVolumeUsd',
        'daily_txns' => 'dailyTxns',
        'total_liquidity_token' => 'totalLiquidityToken',
        'total_liquidity_eth' => 'totalLiquidityEth',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'price_usd' => 'priceUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASUniswapV2TokenDayDataDTO getExample() {
        OASUniswapV2TokenDayDataDTO uniswapV2TokenDayDataDTO = new OASUniswapV2TokenDayDataDTO();
          uniswapV2TokenDayDataDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV2TokenDayDataDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV2TokenDayDataDTO.blockNumber = 123456789L;
          uniswapV2TokenDayDataDTO.id = '';
          uniswapV2TokenDayDataDTO.r_date = 0;
          uniswapV2TokenDayDataDTO.token = '';
          uniswapV2TokenDayDataDTO.dailyVolumeToken = '';
          uniswapV2TokenDayDataDTO.dailyVolumeEth = '';
          uniswapV2TokenDayDataDTO.dailyVolumeUsd = '';
          uniswapV2TokenDayDataDTO.dailyTxns = '';
          uniswapV2TokenDayDataDTO.totalLiquidityToken = '';
          uniswapV2TokenDayDataDTO.totalLiquidityEth = '';
          uniswapV2TokenDayDataDTO.totalLiquidityUsd = '';
          uniswapV2TokenDayDataDTO.priceUsd = '';
          uniswapV2TokenDayDataDTO.vid = 123456789L;
        return uniswapV2TokenDayDataDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUniswapV2TokenDayDataDTO) {           
            OASUniswapV2TokenDayDataDTO uniswapV2TokenDayDataDTO = (OASUniswapV2TokenDayDataDTO) obj;
            return this.entryTime == uniswapV2TokenDayDataDTO.entryTime
                && this.recvTime == uniswapV2TokenDayDataDTO.recvTime
                && this.blockNumber == uniswapV2TokenDayDataDTO.blockNumber
                && this.id == uniswapV2TokenDayDataDTO.id
                && this.r_date == uniswapV2TokenDayDataDTO.r_date
                && this.token == uniswapV2TokenDayDataDTO.token
                && this.dailyVolumeToken == uniswapV2TokenDayDataDTO.dailyVolumeToken
                && this.dailyVolumeEth == uniswapV2TokenDayDataDTO.dailyVolumeEth
                && this.dailyVolumeUsd == uniswapV2TokenDayDataDTO.dailyVolumeUsd
                && this.dailyTxns == uniswapV2TokenDayDataDTO.dailyTxns
                && this.totalLiquidityToken == uniswapV2TokenDayDataDTO.totalLiquidityToken
                && this.totalLiquidityEth == uniswapV2TokenDayDataDTO.totalLiquidityEth
                && this.totalLiquidityUsd == uniswapV2TokenDayDataDTO.totalLiquidityUsd
                && this.priceUsd == uniswapV2TokenDayDataDTO.priceUsd
                && this.vid == uniswapV2TokenDayDataDTO.vid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (r_date == null ? 0 : System.hashCode(r_date));
        hashCode = (17 * hashCode) + (token == null ? 0 : System.hashCode(token));
        hashCode = (17 * hashCode) + (dailyVolumeToken == null ? 0 : System.hashCode(dailyVolumeToken));
        hashCode = (17 * hashCode) + (dailyVolumeEth == null ? 0 : System.hashCode(dailyVolumeEth));
        hashCode = (17 * hashCode) + (dailyVolumeUsd == null ? 0 : System.hashCode(dailyVolumeUsd));
        hashCode = (17 * hashCode) + (dailyTxns == null ? 0 : System.hashCode(dailyTxns));
        hashCode = (17 * hashCode) + (totalLiquidityToken == null ? 0 : System.hashCode(totalLiquidityToken));
        hashCode = (17 * hashCode) + (totalLiquidityEth == null ? 0 : System.hashCode(totalLiquidityEth));
        hashCode = (17 * hashCode) + (totalLiquidityUsd == null ? 0 : System.hashCode(totalLiquidityUsd));
        hashCode = (17 * hashCode) + (priceUsd == null ? 0 : System.hashCode(priceUsd));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        return hashCode;
    }
}

