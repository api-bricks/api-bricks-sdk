/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Burn entities are created for every emitted Burn event on the Uniswap core contracts. The Burn entity stores key data about the event like token amounts, who burned LP tokens, who received tokens, and more. This entity can be used to track liquidity removals on pairs.
 */
public class OASUniswapV2BurnDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Transaction hash plus index in the transaction burn array
     * @return id
     */
    public String id { get; set; }

    /**
     * Reference to the transaction Burn was included in.
     * @return r_transaction
     */
    public String r_transaction { get; set; }

    /**
     * Timestamp of Burn, used to sort recent liquidity removals.
     * @return timestamp
     */
    public String timestamp { get; set; }

    /**
     * Reference to pair.
     * @return pair
     */
    public String pair { get; set; }

    /**
     * Amount of liquidity tokens burned.
     * @return liquidity
     */
    public String liquidity { get; set; }

    /**
     * Address that initiated the liquidity removal.
     * @return sender
     */
    public String sender { get; set; }

    /**
     * Amount of token0 removed.
     * @return amount0
     */
    public String amount0 { get; set; }

    /**
     * Amount of token1 removed.
     * @return amount1
     */
    public String amount1 { get; set; }

    /**
     * Recipient of tokens.
     * @return to
     */
    public String to { get; set; }

    /**
     * Index in the transaction event was emitted.
     * @return logIndex
     */
    public String logIndex { get; set; }

    /**
     * Derived USD value of token0 amount plus token1 amount.
     * @return amountUsd
     */
    public String amountUsd { get; set; }

    /**
     * 
     * @return needsComplete
     */
    public Boolean needsComplete { get; set; }

    /**
     * Address of fee recipient (if fee is on).
     * @return feeTo
     */
    public String feeTo { get; set; }

    /**
     * Amount of tokens sent to fee recipient (if fee is on).
     * @return feeLiquidity
     */
    public String feeLiquidity { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'transaction' => 'r_transaction',
        'amount_0' => 'amount0',
        'amount_1' => 'amount1',
        'log_index' => 'logIndex',
        'amount_usd' => 'amountUsd',
        'needs_complete' => 'needsComplete',
        'fee_to' => 'feeTo',
        'fee_liquidity' => 'feeLiquidity'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASUniswapV2BurnDTO getExample() {
        OASUniswapV2BurnDTO uniswapV2BurnDTO = new OASUniswapV2BurnDTO();
          uniswapV2BurnDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV2BurnDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          uniswapV2BurnDTO.blockNumber = 123456789L;
          uniswapV2BurnDTO.id = '';
          uniswapV2BurnDTO.r_transaction = '';
          uniswapV2BurnDTO.timestamp = '';
          uniswapV2BurnDTO.pair = '';
          uniswapV2BurnDTO.liquidity = '';
          uniswapV2BurnDTO.sender = '';
          uniswapV2BurnDTO.amount0 = '';
          uniswapV2BurnDTO.amount1 = '';
          uniswapV2BurnDTO.to = '';
          uniswapV2BurnDTO.logIndex = '';
          uniswapV2BurnDTO.amountUsd = '';
          uniswapV2BurnDTO.needsComplete = true;
          uniswapV2BurnDTO.feeTo = '';
          uniswapV2BurnDTO.feeLiquidity = '';
          uniswapV2BurnDTO.vid = 123456789L;
        return uniswapV2BurnDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUniswapV2BurnDTO) {           
            OASUniswapV2BurnDTO uniswapV2BurnDTO = (OASUniswapV2BurnDTO) obj;
            return this.entryTime == uniswapV2BurnDTO.entryTime
                && this.recvTime == uniswapV2BurnDTO.recvTime
                && this.blockNumber == uniswapV2BurnDTO.blockNumber
                && this.id == uniswapV2BurnDTO.id
                && this.r_transaction == uniswapV2BurnDTO.r_transaction
                && this.timestamp == uniswapV2BurnDTO.timestamp
                && this.pair == uniswapV2BurnDTO.pair
                && this.liquidity == uniswapV2BurnDTO.liquidity
                && this.sender == uniswapV2BurnDTO.sender
                && this.amount0 == uniswapV2BurnDTO.amount0
                && this.amount1 == uniswapV2BurnDTO.amount1
                && this.to == uniswapV2BurnDTO.to
                && this.logIndex == uniswapV2BurnDTO.logIndex
                && this.amountUsd == uniswapV2BurnDTO.amountUsd
                && this.needsComplete == uniswapV2BurnDTO.needsComplete
                && this.feeTo == uniswapV2BurnDTO.feeTo
                && this.feeLiquidity == uniswapV2BurnDTO.feeLiquidity
                && this.vid == uniswapV2BurnDTO.vid;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (r_transaction == null ? 0 : System.hashCode(r_transaction));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (pair == null ? 0 : System.hashCode(pair));
        hashCode = (17 * hashCode) + (liquidity == null ? 0 : System.hashCode(liquidity));
        hashCode = (17 * hashCode) + (sender == null ? 0 : System.hashCode(sender));
        hashCode = (17 * hashCode) + (amount0 == null ? 0 : System.hashCode(amount0));
        hashCode = (17 * hashCode) + (amount1 == null ? 0 : System.hashCode(amount1));
        hashCode = (17 * hashCode) + (to == null ? 0 : System.hashCode(to));
        hashCode = (17 * hashCode) + (logIndex == null ? 0 : System.hashCode(logIndex));
        hashCode = (17 * hashCode) + (amountUsd == null ? 0 : System.hashCode(amountUsd));
        hashCode = (17 * hashCode) + (needsComplete == null ? 0 : System.hashCode(needsComplete));
        hashCode = (17 * hashCode) + (feeTo == null ? 0 : System.hashCode(feeTo));
        hashCode = (17 * hashCode) + (feeLiquidity == null ? 0 : System.hashCode(feeLiquidity));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        return hashCode;
    }
}

