/*
 * OnChain API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASTokenDTO
 */
public class OASTokenDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Get blockNumber
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Get id
     * @return id
     */
    public String id { get; set; }

    /**
     * Get factory
     * @return factory
     */
    public String factory { get; set; }

    /**
     * Get symbol
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * Get name
     * @return name
     */
    public String name { get; set; }

    /**
     * Get decimals
     * @return decimals
     */
    public String decimals { get; set; }

    /**
     * Get totalSupply
     * @return totalSupply
     */
    public String totalSupply { get; set; }

    /**
     * Get volume
     * @return volume
     */
    public String volume { get; set; }

    /**
     * Get volumeUsd
     * @return volumeUsd
     */
    public String volumeUsd { get; set; }

    /**
     * Get untrackedVolumeUsd
     * @return untrackedVolumeUsd
     */
    public String untrackedVolumeUsd { get; set; }

    /**
     * Get txCount
     * @return txCount
     */
    public String txCount { get; set; }

    /**
     * Get liquidity
     * @return liquidity
     */
    public String liquidity { get; set; }

    /**
     * Get derivedEth
     * @return derivedEth
     */
    public String derivedEth { get; set; }

    /**
     * Get whitelistPairs
     * @return whitelistPairs
     */
    public List<String> whitelistPairs { get; set; }

    /**
     * Get vid
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * Get tokenSymbol
     * @return tokenSymbol
     */
    public String tokenSymbol { get; private set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_supply' => 'totalSupply',
        'volume_usd' => 'volumeUsd',
        'untracked_volume_usd' => 'untrackedVolumeUsd',
        'tx_count' => 'txCount',
        'derived_eth' => 'derivedEth',
        'whitelist_pairs' => 'whitelistPairs',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASTokenDTO() {
        whitelistPairs = new List<String>();
    }

    public static OASTokenDTO getExample() {
        OASTokenDTO tokenDTO = new OASTokenDTO();
          tokenDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          tokenDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          tokenDTO.blockNumber = 123456789L;
          tokenDTO.id = '';
          tokenDTO.factory = '';
          tokenDTO.symbol = '';
          tokenDTO.name = '';
          tokenDTO.decimals = '';
          tokenDTO.totalSupply = '';
          tokenDTO.volume = '';
          tokenDTO.volumeUsd = '';
          tokenDTO.untrackedVolumeUsd = '';
          tokenDTO.txCount = '';
          tokenDTO.liquidity = '';
          tokenDTO.derivedEth = '';
          tokenDTO.whitelistPairs = new List<String>{''};
          tokenDTO.vid = 123456789L;
          tokenDTO.tokenSymbol = '';
        return tokenDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASTokenDTO) {           
            OASTokenDTO tokenDTO = (OASTokenDTO) obj;
            return this.entryTime == tokenDTO.entryTime
                && this.recvTime == tokenDTO.recvTime
                && this.blockNumber == tokenDTO.blockNumber
                && this.id == tokenDTO.id
                && this.factory == tokenDTO.factory
                && this.symbol == tokenDTO.symbol
                && this.name == tokenDTO.name
                && this.decimals == tokenDTO.decimals
                && this.totalSupply == tokenDTO.totalSupply
                && this.volume == tokenDTO.volume
                && this.volumeUsd == tokenDTO.volumeUsd
                && this.untrackedVolumeUsd == tokenDTO.untrackedVolumeUsd
                && this.txCount == tokenDTO.txCount
                && this.liquidity == tokenDTO.liquidity
                && this.derivedEth == tokenDTO.derivedEth
                && this.whitelistPairs == tokenDTO.whitelistPairs
                && this.vid == tokenDTO.vid
                && this.tokenSymbol == tokenDTO.tokenSymbol;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (factory == null ? 0 : System.hashCode(factory));
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (decimals == null ? 0 : System.hashCode(decimals));
        hashCode = (17 * hashCode) + (totalSupply == null ? 0 : System.hashCode(totalSupply));
        hashCode = (17 * hashCode) + (volume == null ? 0 : System.hashCode(volume));
        hashCode = (17 * hashCode) + (volumeUsd == null ? 0 : System.hashCode(volumeUsd));
        hashCode = (17 * hashCode) + (untrackedVolumeUsd == null ? 0 : System.hashCode(untrackedVolumeUsd));
        hashCode = (17 * hashCode) + (txCount == null ? 0 : System.hashCode(txCount));
        hashCode = (17 * hashCode) + (liquidity == null ? 0 : System.hashCode(liquidity));
        hashCode = (17 * hashCode) + (derivedEth == null ? 0 : System.hashCode(derivedEth));
        hashCode = (17 * hashCode) + (whitelistPairs == null ? 0 : System.hashCode(whitelistPairs));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (tokenSymbol == null ? 0 : System.hashCode(tokenSymbol));
        return hashCode;
    }
}

