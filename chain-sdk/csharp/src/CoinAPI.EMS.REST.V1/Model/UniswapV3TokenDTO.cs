/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// Stores aggregated information for a specific token across all pairs that token is included in.
    /// </summary>
    [DataContract]
    public partial class UniswapV3TokenDTO :  IEquatable<UniswapV3TokenDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV3TokenDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="vid">vid.</param>
        /// <param name="id">Token address..</param>
        /// <param name="symbol">Token symbol..</param>
        /// <param name="name">Token name..</param>
        /// <param name="decimals">Token decimals..</param>
        /// <param name="totalSupply">totalSupply.</param>
        /// <param name="volume">Volume in token units..</param>
        /// <param name="volumeUsd">Volume in derived USD..</param>
        /// <param name="untrackedVolumeUsd">Volume in USD even on pools with less reliable USD values..</param>
        /// <param name="feesUsd">Fees in USD..</param>
        /// <param name="txCount">txCount.</param>
        /// <param name="poolCount">poolCount.</param>
        /// <param name="totalValueLocked">Liquidity across all pools in token units..</param>
        /// <param name="totalValueLockedUsd">Liquidity across all pools in derived USD..</param>
        /// <param name="totalValueLockedUsdUntracked">TVL derived in USD untracked..</param>
        /// <param name="derivedEth">Derived price in ETH..</param>
        /// <param name="whitelistPools">Pools token is in that are white listed for USD pricing..</param>
        public UniswapV3TokenDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), long vid = default(long), string id = default(string), string symbol = default(string), string name = default(string), int decimals = default(int), NumericsBigInteger totalSupply = default(NumericsBigInteger), string volume = default(string), string volumeUsd = default(string), string untrackedVolumeUsd = default(string), string feesUsd = default(string), NumericsBigInteger txCount = default(NumericsBigInteger), NumericsBigInteger poolCount = default(NumericsBigInteger), string totalValueLocked = default(string), string totalValueLockedUsd = default(string), string totalValueLockedUsdUntracked = default(string), string derivedEth = default(string), List<string> whitelistPools = default(List<string>))
        {
            this.Id = id;
            this.Symbol = symbol;
            this.Name = name;
            this.Volume = volume;
            this.VolumeUsd = volumeUsd;
            this.UntrackedVolumeUsd = untrackedVolumeUsd;
            this.FeesUsd = feesUsd;
            this.TotalValueLocked = totalValueLocked;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.TotalValueLockedUsdUntracked = totalValueLockedUsdUntracked;
            this.DerivedEth = derivedEth;
            this.WhitelistPools = whitelistPools;
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Vid = vid;
            this.Id = id;
            this.Symbol = symbol;
            this.Name = name;
            this.Decimals = decimals;
            this.TotalSupply = totalSupply;
            this.Volume = volume;
            this.VolumeUsd = volumeUsd;
            this.UntrackedVolumeUsd = untrackedVolumeUsd;
            this.FeesUsd = feesUsd;
            this.TxCount = txCount;
            this.PoolCount = poolCount;
            this.TotalValueLocked = totalValueLocked;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.TotalValueLockedUsdUntracked = totalValueLockedUsdUntracked;
            this.DerivedEth = derivedEth;
            this.WhitelistPools = whitelistPools;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name="entry_time", EmitDefaultValue=false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name="recv_time", EmitDefaultValue=false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name="block_number", EmitDefaultValue=false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name="vid", EmitDefaultValue=false)]
        public long Vid { get; set; }

        /// <summary>
        /// Token address.
        /// </summary>
        /// <value>Token address.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Token symbol.
        /// </summary>
        /// <value>Token symbol.</value>
        [DataMember(Name="symbol", EmitDefaultValue=true)]
        public string Symbol { get; set; }

        /// <summary>
        /// Token name.
        /// </summary>
        /// <value>Token name.</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Token decimals.
        /// </summary>
        /// <value>Token decimals.</value>
        [DataMember(Name="decimals", EmitDefaultValue=false)]
        public int Decimals { get; set; }

        /// <summary>
        /// Gets or Sets TotalSupply
        /// </summary>
        [DataMember(Name="total_supply", EmitDefaultValue=false)]
        public NumericsBigInteger TotalSupply { get; set; }

        /// <summary>
        /// Volume in token units.
        /// </summary>
        /// <value>Volume in token units.</value>
        [DataMember(Name="volume", EmitDefaultValue=true)]
        public string Volume { get; set; }

        /// <summary>
        /// Volume in derived USD.
        /// </summary>
        /// <value>Volume in derived USD.</value>
        [DataMember(Name="volume_usd", EmitDefaultValue=true)]
        public string VolumeUsd { get; set; }

        /// <summary>
        /// Volume in USD even on pools with less reliable USD values.
        /// </summary>
        /// <value>Volume in USD even on pools with less reliable USD values.</value>
        [DataMember(Name="untracked_volume_usd", EmitDefaultValue=true)]
        public string UntrackedVolumeUsd { get; set; }

        /// <summary>
        /// Fees in USD.
        /// </summary>
        /// <value>Fees in USD.</value>
        [DataMember(Name="fees_usd", EmitDefaultValue=true)]
        public string FeesUsd { get; set; }

        /// <summary>
        /// Gets or Sets TxCount
        /// </summary>
        [DataMember(Name="tx_count", EmitDefaultValue=false)]
        public NumericsBigInteger TxCount { get; set; }

        /// <summary>
        /// Gets or Sets PoolCount
        /// </summary>
        [DataMember(Name="pool_count", EmitDefaultValue=false)]
        public NumericsBigInteger PoolCount { get; set; }

        /// <summary>
        /// Liquidity across all pools in token units.
        /// </summary>
        /// <value>Liquidity across all pools in token units.</value>
        [DataMember(Name="total_value_locked", EmitDefaultValue=true)]
        public string TotalValueLocked { get; set; }

        /// <summary>
        /// Liquidity across all pools in derived USD.
        /// </summary>
        /// <value>Liquidity across all pools in derived USD.</value>
        [DataMember(Name="total_value_locked_usd", EmitDefaultValue=true)]
        public string TotalValueLockedUsd { get; set; }

        /// <summary>
        /// TVL derived in USD untracked.
        /// </summary>
        /// <value>TVL derived in USD untracked.</value>
        [DataMember(Name="total_value_locked_usd_untracked", EmitDefaultValue=true)]
        public string TotalValueLockedUsdUntracked { get; set; }

        /// <summary>
        /// Derived price in ETH.
        /// </summary>
        /// <value>Derived price in ETH.</value>
        [DataMember(Name="derived_eth", EmitDefaultValue=true)]
        public string DerivedEth { get; set; }

        /// <summary>
        /// Pools token is in that are white listed for USD pricing.
        /// </summary>
        /// <value>Pools token is in that are white listed for USD pricing.</value>
        [DataMember(Name="whitelist_pools", EmitDefaultValue=true)]
        public List<string> WhitelistPools { get; set; }

        /// <summary>
        /// Gets or Sets TokenSymbol
        /// </summary>
        [DataMember(Name="token_symbol", EmitDefaultValue=true)]
        public string TokenSymbol { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UniswapV3TokenDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  TotalSupply: ").Append(TotalSupply).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  VolumeUsd: ").Append(VolumeUsd).Append("\n");
            sb.Append("  UntrackedVolumeUsd: ").Append(UntrackedVolumeUsd).Append("\n");
            sb.Append("  FeesUsd: ").Append(FeesUsd).Append("\n");
            sb.Append("  TxCount: ").Append(TxCount).Append("\n");
            sb.Append("  PoolCount: ").Append(PoolCount).Append("\n");
            sb.Append("  TotalValueLocked: ").Append(TotalValueLocked).Append("\n");
            sb.Append("  TotalValueLockedUsd: ").Append(TotalValueLockedUsd).Append("\n");
            sb.Append("  TotalValueLockedUsdUntracked: ").Append(TotalValueLockedUsdUntracked).Append("\n");
            sb.Append("  DerivedEth: ").Append(DerivedEth).Append("\n");
            sb.Append("  WhitelistPools: ").Append(WhitelistPools).Append("\n");
            sb.Append("  TokenSymbol: ").Append(TokenSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UniswapV3TokenDTO);
        }

        /// <summary>
        /// Returns true if UniswapV3TokenDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UniswapV3TokenDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UniswapV3TokenDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Vid == input.Vid ||
                    (this.Vid != null &&
                    this.Vid.Equals(input.Vid))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Decimals == input.Decimals ||
                    (this.Decimals != null &&
                    this.Decimals.Equals(input.Decimals))
                ) && 
                (
                    this.TotalSupply == input.TotalSupply ||
                    (this.TotalSupply != null &&
                    this.TotalSupply.Equals(input.TotalSupply))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.VolumeUsd == input.VolumeUsd ||
                    (this.VolumeUsd != null &&
                    this.VolumeUsd.Equals(input.VolumeUsd))
                ) && 
                (
                    this.UntrackedVolumeUsd == input.UntrackedVolumeUsd ||
                    (this.UntrackedVolumeUsd != null &&
                    this.UntrackedVolumeUsd.Equals(input.UntrackedVolumeUsd))
                ) && 
                (
                    this.FeesUsd == input.FeesUsd ||
                    (this.FeesUsd != null &&
                    this.FeesUsd.Equals(input.FeesUsd))
                ) && 
                (
                    this.TxCount == input.TxCount ||
                    (this.TxCount != null &&
                    this.TxCount.Equals(input.TxCount))
                ) && 
                (
                    this.PoolCount == input.PoolCount ||
                    (this.PoolCount != null &&
                    this.PoolCount.Equals(input.PoolCount))
                ) && 
                (
                    this.TotalValueLocked == input.TotalValueLocked ||
                    (this.TotalValueLocked != null &&
                    this.TotalValueLocked.Equals(input.TotalValueLocked))
                ) && 
                (
                    this.TotalValueLockedUsd == input.TotalValueLockedUsd ||
                    (this.TotalValueLockedUsd != null &&
                    this.TotalValueLockedUsd.Equals(input.TotalValueLockedUsd))
                ) && 
                (
                    this.TotalValueLockedUsdUntracked == input.TotalValueLockedUsdUntracked ||
                    (this.TotalValueLockedUsdUntracked != null &&
                    this.TotalValueLockedUsdUntracked.Equals(input.TotalValueLockedUsdUntracked))
                ) && 
                (
                    this.DerivedEth == input.DerivedEth ||
                    (this.DerivedEth != null &&
                    this.DerivedEth.Equals(input.DerivedEth))
                ) && 
                (
                    this.WhitelistPools == input.WhitelistPools ||
                    this.WhitelistPools != null &&
                    input.WhitelistPools != null &&
                    this.WhitelistPools.SequenceEqual(input.WhitelistPools)
                ) && 
                (
                    this.TokenSymbol == input.TokenSymbol ||
                    (this.TokenSymbol != null &&
                    this.TokenSymbol.Equals(input.TokenSymbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                    hashCode = hashCode * 59 + this.EntryTime.GetHashCode();
                if (this.RecvTime != null)
                    hashCode = hashCode * 59 + this.RecvTime.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.Vid != null)
                    hashCode = hashCode * 59 + this.Vid.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Decimals != null)
                    hashCode = hashCode * 59 + this.Decimals.GetHashCode();
                if (this.TotalSupply != null)
                    hashCode = hashCode * 59 + this.TotalSupply.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.VolumeUsd != null)
                    hashCode = hashCode * 59 + this.VolumeUsd.GetHashCode();
                if (this.UntrackedVolumeUsd != null)
                    hashCode = hashCode * 59 + this.UntrackedVolumeUsd.GetHashCode();
                if (this.FeesUsd != null)
                    hashCode = hashCode * 59 + this.FeesUsd.GetHashCode();
                if (this.TxCount != null)
                    hashCode = hashCode * 59 + this.TxCount.GetHashCode();
                if (this.PoolCount != null)
                    hashCode = hashCode * 59 + this.PoolCount.GetHashCode();
                if (this.TotalValueLocked != null)
                    hashCode = hashCode * 59 + this.TotalValueLocked.GetHashCode();
                if (this.TotalValueLockedUsd != null)
                    hashCode = hashCode * 59 + this.TotalValueLockedUsd.GetHashCode();
                if (this.TotalValueLockedUsdUntracked != null)
                    hashCode = hashCode * 59 + this.TotalValueLockedUsdUntracked.GetHashCode();
                if (this.DerivedEth != null)
                    hashCode = hashCode * 59 + this.DerivedEth.GetHashCode();
                if (this.WhitelistPools != null)
                    hashCode = hashCode * 59 + this.WhitelistPools.GetHashCode();
                if (this.TokenSymbol != null)
                    hashCode = hashCode * 59 + this.TokenSymbol.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
