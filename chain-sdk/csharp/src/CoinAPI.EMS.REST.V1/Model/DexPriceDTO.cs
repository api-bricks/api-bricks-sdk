/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// Token price in conjuction with batch id.
    /// </summary>
    [DataContract]
    public partial class DexPriceDTO :  IEquatable<DexPriceDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DexPriceDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id">Identifier, format: (token id)-(batch id)..</param>
        /// <param name="token">Token identifier..</param>
        /// <param name="batchId">Batch identifier..</param>
        /// <param name="priceInOwlNumerator">Price enumerator in OWL (derivative of the GNO token)..</param>
        /// <param name="priceInOwlDenominator">Price denominator in OWL (derivative of the GNO token)..</param>
        /// <param name="volume">Volume..</param>
        /// <param name="createEpoch">Create epoch..</param>
        /// <param name="txHash">Transaction hash..</param>
        /// <param name="vid">vid.</param>
        public DexPriceDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), string token = default(string), string batchId = default(string), string priceInOwlNumerator = default(string), string priceInOwlDenominator = default(string), string volume = default(string), string createEpoch = default(string), string txHash = default(string), long vid = default(long))
        {
            this.Id = id;
            this.Token = token;
            this.BatchId = batchId;
            this.PriceInOwlNumerator = priceInOwlNumerator;
            this.PriceInOwlDenominator = priceInOwlDenominator;
            this.Volume = volume;
            this.CreateEpoch = createEpoch;
            this.TxHash = txHash;
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.Token = token;
            this.BatchId = batchId;
            this.PriceInOwlNumerator = priceInOwlNumerator;
            this.PriceInOwlDenominator = priceInOwlDenominator;
            this.Volume = volume;
            this.CreateEpoch = createEpoch;
            this.TxHash = txHash;
            this.Vid = vid;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name="entry_time", EmitDefaultValue=false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name="recv_time", EmitDefaultValue=false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name="block_number", EmitDefaultValue=false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Identifier, format: (token id)-(batch id).
        /// </summary>
        /// <value>Identifier, format: (token id)-(batch id).</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Token identifier.
        /// </summary>
        /// <value>Token identifier.</value>
        [DataMember(Name="token", EmitDefaultValue=true)]
        public string Token { get; set; }

        /// <summary>
        /// Batch identifier.
        /// </summary>
        /// <value>Batch identifier.</value>
        [DataMember(Name="batch_id", EmitDefaultValue=true)]
        public string BatchId { get; set; }

        /// <summary>
        /// Price enumerator in OWL (derivative of the GNO token).
        /// </summary>
        /// <value>Price enumerator in OWL (derivative of the GNO token).</value>
        [DataMember(Name="price_in_owl_numerator", EmitDefaultValue=true)]
        public string PriceInOwlNumerator { get; set; }

        /// <summary>
        /// Price denominator in OWL (derivative of the GNO token).
        /// </summary>
        /// <value>Price denominator in OWL (derivative of the GNO token).</value>
        [DataMember(Name="price_in_owl_denominator", EmitDefaultValue=true)]
        public string PriceInOwlDenominator { get; set; }

        /// <summary>
        /// Volume.
        /// </summary>
        /// <value>Volume.</value>
        [DataMember(Name="volume", EmitDefaultValue=true)]
        public string Volume { get; set; }

        /// <summary>
        /// Create epoch.
        /// </summary>
        /// <value>Create epoch.</value>
        [DataMember(Name="create_epoch", EmitDefaultValue=true)]
        public string CreateEpoch { get; set; }

        /// <summary>
        /// Transaction hash.
        /// </summary>
        /// <value>Transaction hash.</value>
        [DataMember(Name="tx_hash", EmitDefaultValue=true)]
        public string TxHash { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name="vid", EmitDefaultValue=false)]
        public long Vid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DexPriceDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  BatchId: ").Append(BatchId).Append("\n");
            sb.Append("  PriceInOwlNumerator: ").Append(PriceInOwlNumerator).Append("\n");
            sb.Append("  PriceInOwlDenominator: ").Append(PriceInOwlDenominator).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  CreateEpoch: ").Append(CreateEpoch).Append("\n");
            sb.Append("  TxHash: ").Append(TxHash).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DexPriceDTO);
        }

        /// <summary>
        /// Returns true if DexPriceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DexPriceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DexPriceDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.BatchId == input.BatchId ||
                    (this.BatchId != null &&
                    this.BatchId.Equals(input.BatchId))
                ) && 
                (
                    this.PriceInOwlNumerator == input.PriceInOwlNumerator ||
                    (this.PriceInOwlNumerator != null &&
                    this.PriceInOwlNumerator.Equals(input.PriceInOwlNumerator))
                ) && 
                (
                    this.PriceInOwlDenominator == input.PriceInOwlDenominator ||
                    (this.PriceInOwlDenominator != null &&
                    this.PriceInOwlDenominator.Equals(input.PriceInOwlDenominator))
                ) && 
                (
                    this.Volume == input.Volume ||
                    (this.Volume != null &&
                    this.Volume.Equals(input.Volume))
                ) && 
                (
                    this.CreateEpoch == input.CreateEpoch ||
                    (this.CreateEpoch != null &&
                    this.CreateEpoch.Equals(input.CreateEpoch))
                ) && 
                (
                    this.TxHash == input.TxHash ||
                    (this.TxHash != null &&
                    this.TxHash.Equals(input.TxHash))
                ) && 
                (
                    this.Vid == input.Vid ||
                    (this.Vid != null &&
                    this.Vid.Equals(input.Vid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                    hashCode = hashCode * 59 + this.EntryTime.GetHashCode();
                if (this.RecvTime != null)
                    hashCode = hashCode * 59 + this.RecvTime.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.BatchId != null)
                    hashCode = hashCode * 59 + this.BatchId.GetHashCode();
                if (this.PriceInOwlNumerator != null)
                    hashCode = hashCode * 59 + this.PriceInOwlNumerator.GetHashCode();
                if (this.PriceInOwlDenominator != null)
                    hashCode = hashCode * 59 + this.PriceInOwlDenominator.GetHashCode();
                if (this.Volume != null)
                    hashCode = hashCode * 59 + this.Volume.GetHashCode();
                if (this.CreateEpoch != null)
                    hashCode = hashCode * 59 + this.CreateEpoch.GetHashCode();
                if (this.TxHash != null)
                    hashCode = hashCode * 59 + this.TxHash.GetHashCode();
                if (this.Vid != null)
                    hashCode = hashCode * 59 + this.Vid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
