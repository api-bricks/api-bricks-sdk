/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// Trade for a single user, as part of a ring trade. It&#39;s part of the solution submitted by a solver for a given batch.
    /// </summary>
    [DataContract]
    public partial class DexTradeDTO :  IEquatable<DexTradeDTO>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EvaluatedAggressor
        /// </summary>
        [DataMember(Name="evaluated_aggressor", EmitDefaultValue=false)]
        public TransactionsETradeAggressiveSide? EvaluatedAggressor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DexTradeDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id">id.</param>
        /// <param name="order">order.</param>
        /// <param name="owner">owner.</param>
        /// <param name="sellVolume">sellVolume.</param>
        /// <param name="buyVolume">buyVolume.</param>
        /// <param name="tradeBatchId">tradeBatchId.</param>
        /// <param name="tradeEpoch">The date of the end of the batch..</param>
        /// <param name="buyToken">buyToken.</param>
        /// <param name="sellToken">sellToken.</param>
        /// <param name="createEpoch">The date where the transaction was mined..</param>
        /// <param name="revertEpoch">revertEpoch.</param>
        /// <param name="txHash">txHash.</param>
        /// <param name="txLogIndex">txLogIndex.</param>
        /// <param name="vid">vid.</param>
        /// <param name="evaluatedAggressor">evaluatedAggressor.</param>
        public DexTradeDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), string order = default(string), string owner = default(string), string sellVolume = default(string), string buyVolume = default(string), string tradeBatchId = default(string), string tradeEpoch = default(string), string buyToken = default(string), string sellToken = default(string), string createEpoch = default(string), string revertEpoch = default(string), string txHash = default(string), string txLogIndex = default(string), long vid = default(long), TransactionsETradeAggressiveSide? evaluatedAggressor = default(TransactionsETradeAggressiveSide?))
        {
            this.Id = id;
            this.Order = order;
            this.Owner = owner;
            this.SellVolume = sellVolume;
            this.BuyVolume = buyVolume;
            this.TradeBatchId = tradeBatchId;
            this.TradeEpoch = tradeEpoch;
            this.BuyToken = buyToken;
            this.SellToken = sellToken;
            this.CreateEpoch = createEpoch;
            this.RevertEpoch = revertEpoch;
            this.TxHash = txHash;
            this.TxLogIndex = txLogIndex;
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.Order = order;
            this.Owner = owner;
            this.SellVolume = sellVolume;
            this.BuyVolume = buyVolume;
            this.TradeBatchId = tradeBatchId;
            this.TradeEpoch = tradeEpoch;
            this.BuyToken = buyToken;
            this.SellToken = sellToken;
            this.CreateEpoch = createEpoch;
            this.RevertEpoch = revertEpoch;
            this.TxHash = txHash;
            this.TxLogIndex = txLogIndex;
            this.Vid = vid;
            this.EvaluatedAggressor = evaluatedAggressor;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name="entry_time", EmitDefaultValue=false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name="recv_time", EmitDefaultValue=false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name="block_number", EmitDefaultValue=false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=true)]
        public string Order { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=true)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets SellVolume
        /// </summary>
        [DataMember(Name="sell_volume", EmitDefaultValue=true)]
        public string SellVolume { get; set; }

        /// <summary>
        /// Gets or Sets BuyVolume
        /// </summary>
        [DataMember(Name="buy_volume", EmitDefaultValue=true)]
        public string BuyVolume { get; set; }

        /// <summary>
        /// Gets or Sets TradeBatchId
        /// </summary>
        [DataMember(Name="trade_batch_id", EmitDefaultValue=true)]
        public string TradeBatchId { get; set; }

        /// <summary>
        /// The date of the end of the batch.
        /// </summary>
        /// <value>The date of the end of the batch.</value>
        [DataMember(Name="trade_epoch", EmitDefaultValue=true)]
        public string TradeEpoch { get; set; }

        /// <summary>
        /// Gets or Sets BuyToken
        /// </summary>
        [DataMember(Name="buy_token", EmitDefaultValue=true)]
        public string BuyToken { get; set; }

        /// <summary>
        /// Gets or Sets SellToken
        /// </summary>
        [DataMember(Name="sell_token", EmitDefaultValue=true)]
        public string SellToken { get; set; }

        /// <summary>
        /// The date where the transaction was mined.
        /// </summary>
        /// <value>The date where the transaction was mined.</value>
        [DataMember(Name="create_epoch", EmitDefaultValue=true)]
        public string CreateEpoch { get; set; }

        /// <summary>
        /// Gets or Sets RevertEpoch
        /// </summary>
        [DataMember(Name="revert_epoch", EmitDefaultValue=true)]
        public string RevertEpoch { get; set; }

        /// <summary>
        /// Gets or Sets TxHash
        /// </summary>
        [DataMember(Name="tx_hash", EmitDefaultValue=true)]
        public string TxHash { get; set; }

        /// <summary>
        /// Gets or Sets TxLogIndex
        /// </summary>
        [DataMember(Name="tx_log_index", EmitDefaultValue=true)]
        public string TxLogIndex { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name="vid", EmitDefaultValue=false)]
        public long Vid { get; set; }

        /// <summary>
        /// Gets or Sets PoolId
        /// </summary>
        [DataMember(Name="pool_id", EmitDefaultValue=true)]
        public string PoolId { get; private set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="transaction_id", EmitDefaultValue=true)]
        public string TransactionId { get; private set; }

        /// <summary>
        /// Gets or Sets EvaluatedPrice
        /// </summary>
        [DataMember(Name="evaluated_price", EmitDefaultValue=false)]
        public double EvaluatedPrice { get; private set; }

        /// <summary>
        /// Gets or Sets EvaluatedAmount
        /// </summary>
        [DataMember(Name="evaluated_amount", EmitDefaultValue=false)]
        public double EvaluatedAmount { get; private set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DexTradeDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  SellVolume: ").Append(SellVolume).Append("\n");
            sb.Append("  BuyVolume: ").Append(BuyVolume).Append("\n");
            sb.Append("  TradeBatchId: ").Append(TradeBatchId).Append("\n");
            sb.Append("  TradeEpoch: ").Append(TradeEpoch).Append("\n");
            sb.Append("  BuyToken: ").Append(BuyToken).Append("\n");
            sb.Append("  SellToken: ").Append(SellToken).Append("\n");
            sb.Append("  CreateEpoch: ").Append(CreateEpoch).Append("\n");
            sb.Append("  RevertEpoch: ").Append(RevertEpoch).Append("\n");
            sb.Append("  TxHash: ").Append(TxHash).Append("\n");
            sb.Append("  TxLogIndex: ").Append(TxLogIndex).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("  PoolId: ").Append(PoolId).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  EvaluatedPrice: ").Append(EvaluatedPrice).Append("\n");
            sb.Append("  EvaluatedAmount: ").Append(EvaluatedAmount).Append("\n");
            sb.Append("  EvaluatedAggressor: ").Append(EvaluatedAggressor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DexTradeDTO);
        }

        /// <summary>
        /// Returns true if DexTradeDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DexTradeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DexTradeDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.SellVolume == input.SellVolume ||
                    (this.SellVolume != null &&
                    this.SellVolume.Equals(input.SellVolume))
                ) && 
                (
                    this.BuyVolume == input.BuyVolume ||
                    (this.BuyVolume != null &&
                    this.BuyVolume.Equals(input.BuyVolume))
                ) && 
                (
                    this.TradeBatchId == input.TradeBatchId ||
                    (this.TradeBatchId != null &&
                    this.TradeBatchId.Equals(input.TradeBatchId))
                ) && 
                (
                    this.TradeEpoch == input.TradeEpoch ||
                    (this.TradeEpoch != null &&
                    this.TradeEpoch.Equals(input.TradeEpoch))
                ) && 
                (
                    this.BuyToken == input.BuyToken ||
                    (this.BuyToken != null &&
                    this.BuyToken.Equals(input.BuyToken))
                ) && 
                (
                    this.SellToken == input.SellToken ||
                    (this.SellToken != null &&
                    this.SellToken.Equals(input.SellToken))
                ) && 
                (
                    this.CreateEpoch == input.CreateEpoch ||
                    (this.CreateEpoch != null &&
                    this.CreateEpoch.Equals(input.CreateEpoch))
                ) && 
                (
                    this.RevertEpoch == input.RevertEpoch ||
                    (this.RevertEpoch != null &&
                    this.RevertEpoch.Equals(input.RevertEpoch))
                ) && 
                (
                    this.TxHash == input.TxHash ||
                    (this.TxHash != null &&
                    this.TxHash.Equals(input.TxHash))
                ) && 
                (
                    this.TxLogIndex == input.TxLogIndex ||
                    (this.TxLogIndex != null &&
                    this.TxLogIndex.Equals(input.TxLogIndex))
                ) && 
                (
                    this.Vid == input.Vid ||
                    (this.Vid != null &&
                    this.Vid.Equals(input.Vid))
                ) && 
                (
                    this.PoolId == input.PoolId ||
                    (this.PoolId != null &&
                    this.PoolId.Equals(input.PoolId))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.EvaluatedPrice == input.EvaluatedPrice ||
                    (this.EvaluatedPrice != null &&
                    this.EvaluatedPrice.Equals(input.EvaluatedPrice))
                ) && 
                (
                    this.EvaluatedAmount == input.EvaluatedAmount ||
                    (this.EvaluatedAmount != null &&
                    this.EvaluatedAmount.Equals(input.EvaluatedAmount))
                ) && 
                (
                    this.EvaluatedAggressor == input.EvaluatedAggressor ||
                    (this.EvaluatedAggressor != null &&
                    this.EvaluatedAggressor.Equals(input.EvaluatedAggressor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                    hashCode = hashCode * 59 + this.EntryTime.GetHashCode();
                if (this.RecvTime != null)
                    hashCode = hashCode * 59 + this.RecvTime.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.SellVolume != null)
                    hashCode = hashCode * 59 + this.SellVolume.GetHashCode();
                if (this.BuyVolume != null)
                    hashCode = hashCode * 59 + this.BuyVolume.GetHashCode();
                if (this.TradeBatchId != null)
                    hashCode = hashCode * 59 + this.TradeBatchId.GetHashCode();
                if (this.TradeEpoch != null)
                    hashCode = hashCode * 59 + this.TradeEpoch.GetHashCode();
                if (this.BuyToken != null)
                    hashCode = hashCode * 59 + this.BuyToken.GetHashCode();
                if (this.SellToken != null)
                    hashCode = hashCode * 59 + this.SellToken.GetHashCode();
                if (this.CreateEpoch != null)
                    hashCode = hashCode * 59 + this.CreateEpoch.GetHashCode();
                if (this.RevertEpoch != null)
                    hashCode = hashCode * 59 + this.RevertEpoch.GetHashCode();
                if (this.TxHash != null)
                    hashCode = hashCode * 59 + this.TxHash.GetHashCode();
                if (this.TxLogIndex != null)
                    hashCode = hashCode * 59 + this.TxLogIndex.GetHashCode();
                if (this.Vid != null)
                    hashCode = hashCode * 59 + this.Vid.GetHashCode();
                if (this.PoolId != null)
                    hashCode = hashCode * 59 + this.PoolId.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.EvaluatedPrice != null)
                    hashCode = hashCode * 59 + this.EvaluatedPrice.GetHashCode();
                if (this.EvaluatedAmount != null)
                    hashCode = hashCode * 59 + this.EvaluatedAmount.GetHashCode();
                if (this.EvaluatedAggressor != null)
                    hashCode = hashCode * 59 + this.EvaluatedAggressor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
