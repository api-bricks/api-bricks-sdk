/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// CurveProposalDTO
    /// </summary>
    [DataContract]
    public partial class CurveProposalDTO :  IEquatable<CurveProposalDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurveProposalDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id">id.</param>
        /// <param name="number">Sequential number in related to the realted voting app..</param>
        /// <param name="app">Voting app instance..</param>
        /// <param name="creator">Proposal creator&#39;s account..</param>
        /// <param name="executionScript">executionScript.</param>
        /// <param name="expireDate">expireDate.</param>
        /// <param name="minimumQuorum">Percentage of positive votes in total possible votes for this proposal to be accepted..</param>
        /// <param name="requiredSupport">Percentage of positive votes needed for this proposal to be accepted..</param>
        /// <param name="snapshotBlock">snapshotBlock.</param>
        /// <param name="votingPower">votingPower.</param>
        /// <param name="metadata">Link to metadata file..</param>
        /// <param name="text">Proposal description text..</param>
        /// <param name="voteCount">Number of votes received by the proposal..</param>
        /// <param name="positiveVoteCount">Number of positive votes (yes) received by the proposal..</param>
        /// <param name="negativeVoteCount">Number of negative votes (no) received by the proposal..</param>
        /// <param name="currentQuorum">currentQuorum.</param>
        /// <param name="currentSupport">currentSupport.</param>
        /// <param name="stakedSupport">stakedSupport.</param>
        /// <param name="totalStaked">totalStaked.</param>
        /// <param name="created">created.</param>
        /// <param name="createdAtBlock">createdAtBlock.</param>
        /// <param name="createdAtTransaction">createdAtTransaction.</param>
        /// <param name="updated">updated.</param>
        /// <param name="updatedAtBlock">updatedAtBlock.</param>
        /// <param name="updatedAtTransaction">updatedAtTransaction.</param>
        /// <param name="executed">executed.</param>
        /// <param name="executedAtBlock">executedAtBlock.</param>
        /// <param name="executedAtTransaction">executedAtTransaction.</param>
        /// <param name="vid">vid.</param>
        public CurveProposalDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), string number = default(string), string app = default(string), string creator = default(string), string executionScript = default(string), string expireDate = default(string), string minimumQuorum = default(string), string requiredSupport = default(string), string snapshotBlock = default(string), string votingPower = default(string), string metadata = default(string), string text = default(string), string voteCount = default(string), string positiveVoteCount = default(string), string negativeVoteCount = default(string), string currentQuorum = default(string), string currentSupport = default(string), string stakedSupport = default(string), string totalStaked = default(string), string created = default(string), string createdAtBlock = default(string), string createdAtTransaction = default(string), string updated = default(string), string updatedAtBlock = default(string), string updatedAtTransaction = default(string), string executed = default(string), string executedAtBlock = default(string), string executedAtTransaction = default(string), long vid = default(long))
        {
            this.Id = id;
            this.Number = number;
            this.App = app;
            this.Creator = creator;
            this.ExecutionScript = executionScript;
            this.ExpireDate = expireDate;
            this.MinimumQuorum = minimumQuorum;
            this.RequiredSupport = requiredSupport;
            this.SnapshotBlock = snapshotBlock;
            this.VotingPower = votingPower;
            this.Metadata = metadata;
            this.Text = text;
            this.VoteCount = voteCount;
            this.PositiveVoteCount = positiveVoteCount;
            this.NegativeVoteCount = negativeVoteCount;
            this.CurrentQuorum = currentQuorum;
            this.CurrentSupport = currentSupport;
            this.StakedSupport = stakedSupport;
            this.TotalStaked = totalStaked;
            this.Created = created;
            this.CreatedAtBlock = createdAtBlock;
            this.CreatedAtTransaction = createdAtTransaction;
            this.Updated = updated;
            this.UpdatedAtBlock = updatedAtBlock;
            this.UpdatedAtTransaction = updatedAtTransaction;
            this.Executed = executed;
            this.ExecutedAtBlock = executedAtBlock;
            this.ExecutedAtTransaction = executedAtTransaction;
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.Number = number;
            this.App = app;
            this.Creator = creator;
            this.ExecutionScript = executionScript;
            this.ExpireDate = expireDate;
            this.MinimumQuorum = minimumQuorum;
            this.RequiredSupport = requiredSupport;
            this.SnapshotBlock = snapshotBlock;
            this.VotingPower = votingPower;
            this.Metadata = metadata;
            this.Text = text;
            this.VoteCount = voteCount;
            this.PositiveVoteCount = positiveVoteCount;
            this.NegativeVoteCount = negativeVoteCount;
            this.CurrentQuorum = currentQuorum;
            this.CurrentSupport = currentSupport;
            this.StakedSupport = stakedSupport;
            this.TotalStaked = totalStaked;
            this.Created = created;
            this.CreatedAtBlock = createdAtBlock;
            this.CreatedAtTransaction = createdAtTransaction;
            this.Updated = updated;
            this.UpdatedAtBlock = updatedAtBlock;
            this.UpdatedAtTransaction = updatedAtTransaction;
            this.Executed = executed;
            this.ExecutedAtBlock = executedAtBlock;
            this.ExecutedAtTransaction = executedAtTransaction;
            this.Vid = vid;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name="entry_time", EmitDefaultValue=false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name="recv_time", EmitDefaultValue=false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name="block_number", EmitDefaultValue=false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Sequential number in related to the realted voting app.
        /// </summary>
        /// <value>Sequential number in related to the realted voting app.</value>
        [DataMember(Name="number", EmitDefaultValue=true)]
        public string Number { get; set; }

        /// <summary>
        /// Voting app instance.
        /// </summary>
        /// <value>Voting app instance.</value>
        [DataMember(Name="app", EmitDefaultValue=true)]
        public string App { get; set; }

        /// <summary>
        /// Proposal creator&#39;s account.
        /// </summary>
        /// <value>Proposal creator&#39;s account.</value>
        [DataMember(Name="creator", EmitDefaultValue=true)]
        public string Creator { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionScript
        /// </summary>
        [DataMember(Name="execution_script", EmitDefaultValue=true)]
        public string ExecutionScript { get; set; }

        /// <summary>
        /// Gets or Sets ExpireDate
        /// </summary>
        [DataMember(Name="expire_date", EmitDefaultValue=true)]
        public string ExpireDate { get; set; }

        /// <summary>
        /// Percentage of positive votes in total possible votes for this proposal to be accepted.
        /// </summary>
        /// <value>Percentage of positive votes in total possible votes for this proposal to be accepted.</value>
        [DataMember(Name="minimum_quorum", EmitDefaultValue=true)]
        public string MinimumQuorum { get; set; }

        /// <summary>
        /// Percentage of positive votes needed for this proposal to be accepted.
        /// </summary>
        /// <value>Percentage of positive votes needed for this proposal to be accepted.</value>
        [DataMember(Name="required_support", EmitDefaultValue=true)]
        public string RequiredSupport { get; set; }

        /// <summary>
        /// Gets or Sets SnapshotBlock
        /// </summary>
        [DataMember(Name="snapshot_block", EmitDefaultValue=true)]
        public string SnapshotBlock { get; set; }

        /// <summary>
        /// Gets or Sets VotingPower
        /// </summary>
        [DataMember(Name="voting_power", EmitDefaultValue=true)]
        public string VotingPower { get; set; }

        /// <summary>
        /// Link to metadata file.
        /// </summary>
        /// <value>Link to metadata file.</value>
        [DataMember(Name="metadata", EmitDefaultValue=true)]
        public string Metadata { get; set; }

        /// <summary>
        /// Proposal description text.
        /// </summary>
        /// <value>Proposal description text.</value>
        [DataMember(Name="text", EmitDefaultValue=true)]
        public string Text { get; set; }

        /// <summary>
        /// Number of votes received by the proposal.
        /// </summary>
        /// <value>Number of votes received by the proposal.</value>
        [DataMember(Name="vote_count", EmitDefaultValue=true)]
        public string VoteCount { get; set; }

        /// <summary>
        /// Number of positive votes (yes) received by the proposal.
        /// </summary>
        /// <value>Number of positive votes (yes) received by the proposal.</value>
        [DataMember(Name="positive_vote_count", EmitDefaultValue=true)]
        public string PositiveVoteCount { get; set; }

        /// <summary>
        /// Number of negative votes (no) received by the proposal.
        /// </summary>
        /// <value>Number of negative votes (no) received by the proposal.</value>
        [DataMember(Name="negative_vote_count", EmitDefaultValue=true)]
        public string NegativeVoteCount { get; set; }

        /// <summary>
        /// Gets or Sets CurrentQuorum
        /// </summary>
        [DataMember(Name="current_quorum", EmitDefaultValue=true)]
        public string CurrentQuorum { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSupport
        /// </summary>
        [DataMember(Name="current_support", EmitDefaultValue=true)]
        public string CurrentSupport { get; set; }

        /// <summary>
        /// Gets or Sets StakedSupport
        /// </summary>
        [DataMember(Name="staked_support", EmitDefaultValue=true)]
        public string StakedSupport { get; set; }

        /// <summary>
        /// Gets or Sets TotalStaked
        /// </summary>
        [DataMember(Name="total_staked", EmitDefaultValue=true)]
        public string TotalStaked { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=true)]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAtBlock
        /// </summary>
        [DataMember(Name="created_at_block", EmitDefaultValue=true)]
        public string CreatedAtBlock { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAtTransaction
        /// </summary>
        [DataMember(Name="created_at_transaction", EmitDefaultValue=true)]
        public string CreatedAtTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=true)]
        public string Updated { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAtBlock
        /// </summary>
        [DataMember(Name="updated_at_block", EmitDefaultValue=true)]
        public string UpdatedAtBlock { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAtTransaction
        /// </summary>
        [DataMember(Name="updated_at_transaction", EmitDefaultValue=true)]
        public string UpdatedAtTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Executed
        /// </summary>
        [DataMember(Name="executed", EmitDefaultValue=true)]
        public string Executed { get; set; }

        /// <summary>
        /// Gets or Sets ExecutedAtBlock
        /// </summary>
        [DataMember(Name="executed_at_block", EmitDefaultValue=true)]
        public string ExecutedAtBlock { get; set; }

        /// <summary>
        /// Gets or Sets ExecutedAtTransaction
        /// </summary>
        [DataMember(Name="executed_at_transaction", EmitDefaultValue=true)]
        public string ExecutedAtTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name="vid", EmitDefaultValue=false)]
        public long Vid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurveProposalDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  ExecutionScript: ").Append(ExecutionScript).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  MinimumQuorum: ").Append(MinimumQuorum).Append("\n");
            sb.Append("  RequiredSupport: ").Append(RequiredSupport).Append("\n");
            sb.Append("  SnapshotBlock: ").Append(SnapshotBlock).Append("\n");
            sb.Append("  VotingPower: ").Append(VotingPower).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  VoteCount: ").Append(VoteCount).Append("\n");
            sb.Append("  PositiveVoteCount: ").Append(PositiveVoteCount).Append("\n");
            sb.Append("  NegativeVoteCount: ").Append(NegativeVoteCount).Append("\n");
            sb.Append("  CurrentQuorum: ").Append(CurrentQuorum).Append("\n");
            sb.Append("  CurrentSupport: ").Append(CurrentSupport).Append("\n");
            sb.Append("  StakedSupport: ").Append(StakedSupport).Append("\n");
            sb.Append("  TotalStaked: ").Append(TotalStaked).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedAtBlock: ").Append(CreatedAtBlock).Append("\n");
            sb.Append("  CreatedAtTransaction: ").Append(CreatedAtTransaction).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  UpdatedAtBlock: ").Append(UpdatedAtBlock).Append("\n");
            sb.Append("  UpdatedAtTransaction: ").Append(UpdatedAtTransaction).Append("\n");
            sb.Append("  Executed: ").Append(Executed).Append("\n");
            sb.Append("  ExecutedAtBlock: ").Append(ExecutedAtBlock).Append("\n");
            sb.Append("  ExecutedAtTransaction: ").Append(ExecutedAtTransaction).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurveProposalDTO);
        }

        /// <summary>
        /// Returns true if CurveProposalDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CurveProposalDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurveProposalDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.App == input.App ||
                    (this.App != null &&
                    this.App.Equals(input.App))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.ExecutionScript == input.ExecutionScript ||
                    (this.ExecutionScript != null &&
                    this.ExecutionScript.Equals(input.ExecutionScript))
                ) && 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.MinimumQuorum == input.MinimumQuorum ||
                    (this.MinimumQuorum != null &&
                    this.MinimumQuorum.Equals(input.MinimumQuorum))
                ) && 
                (
                    this.RequiredSupport == input.RequiredSupport ||
                    (this.RequiredSupport != null &&
                    this.RequiredSupport.Equals(input.RequiredSupport))
                ) && 
                (
                    this.SnapshotBlock == input.SnapshotBlock ||
                    (this.SnapshotBlock != null &&
                    this.SnapshotBlock.Equals(input.SnapshotBlock))
                ) && 
                (
                    this.VotingPower == input.VotingPower ||
                    (this.VotingPower != null &&
                    this.VotingPower.Equals(input.VotingPower))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.VoteCount == input.VoteCount ||
                    (this.VoteCount != null &&
                    this.VoteCount.Equals(input.VoteCount))
                ) && 
                (
                    this.PositiveVoteCount == input.PositiveVoteCount ||
                    (this.PositiveVoteCount != null &&
                    this.PositiveVoteCount.Equals(input.PositiveVoteCount))
                ) && 
                (
                    this.NegativeVoteCount == input.NegativeVoteCount ||
                    (this.NegativeVoteCount != null &&
                    this.NegativeVoteCount.Equals(input.NegativeVoteCount))
                ) && 
                (
                    this.CurrentQuorum == input.CurrentQuorum ||
                    (this.CurrentQuorum != null &&
                    this.CurrentQuorum.Equals(input.CurrentQuorum))
                ) && 
                (
                    this.CurrentSupport == input.CurrentSupport ||
                    (this.CurrentSupport != null &&
                    this.CurrentSupport.Equals(input.CurrentSupport))
                ) && 
                (
                    this.StakedSupport == input.StakedSupport ||
                    (this.StakedSupport != null &&
                    this.StakedSupport.Equals(input.StakedSupport))
                ) && 
                (
                    this.TotalStaked == input.TotalStaked ||
                    (this.TotalStaked != null &&
                    this.TotalStaked.Equals(input.TotalStaked))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CreatedAtBlock == input.CreatedAtBlock ||
                    (this.CreatedAtBlock != null &&
                    this.CreatedAtBlock.Equals(input.CreatedAtBlock))
                ) && 
                (
                    this.CreatedAtTransaction == input.CreatedAtTransaction ||
                    (this.CreatedAtTransaction != null &&
                    this.CreatedAtTransaction.Equals(input.CreatedAtTransaction))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.UpdatedAtBlock == input.UpdatedAtBlock ||
                    (this.UpdatedAtBlock != null &&
                    this.UpdatedAtBlock.Equals(input.UpdatedAtBlock))
                ) && 
                (
                    this.UpdatedAtTransaction == input.UpdatedAtTransaction ||
                    (this.UpdatedAtTransaction != null &&
                    this.UpdatedAtTransaction.Equals(input.UpdatedAtTransaction))
                ) && 
                (
                    this.Executed == input.Executed ||
                    (this.Executed != null &&
                    this.Executed.Equals(input.Executed))
                ) && 
                (
                    this.ExecutedAtBlock == input.ExecutedAtBlock ||
                    (this.ExecutedAtBlock != null &&
                    this.ExecutedAtBlock.Equals(input.ExecutedAtBlock))
                ) && 
                (
                    this.ExecutedAtTransaction == input.ExecutedAtTransaction ||
                    (this.ExecutedAtTransaction != null &&
                    this.ExecutedAtTransaction.Equals(input.ExecutedAtTransaction))
                ) && 
                (
                    this.Vid == input.Vid ||
                    (this.Vid != null &&
                    this.Vid.Equals(input.Vid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                    hashCode = hashCode * 59 + this.EntryTime.GetHashCode();
                if (this.RecvTime != null)
                    hashCode = hashCode * 59 + this.RecvTime.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.App != null)
                    hashCode = hashCode * 59 + this.App.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.ExecutionScript != null)
                    hashCode = hashCode * 59 + this.ExecutionScript.GetHashCode();
                if (this.ExpireDate != null)
                    hashCode = hashCode * 59 + this.ExpireDate.GetHashCode();
                if (this.MinimumQuorum != null)
                    hashCode = hashCode * 59 + this.MinimumQuorum.GetHashCode();
                if (this.RequiredSupport != null)
                    hashCode = hashCode * 59 + this.RequiredSupport.GetHashCode();
                if (this.SnapshotBlock != null)
                    hashCode = hashCode * 59 + this.SnapshotBlock.GetHashCode();
                if (this.VotingPower != null)
                    hashCode = hashCode * 59 + this.VotingPower.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.VoteCount != null)
                    hashCode = hashCode * 59 + this.VoteCount.GetHashCode();
                if (this.PositiveVoteCount != null)
                    hashCode = hashCode * 59 + this.PositiveVoteCount.GetHashCode();
                if (this.NegativeVoteCount != null)
                    hashCode = hashCode * 59 + this.NegativeVoteCount.GetHashCode();
                if (this.CurrentQuorum != null)
                    hashCode = hashCode * 59 + this.CurrentQuorum.GetHashCode();
                if (this.CurrentSupport != null)
                    hashCode = hashCode * 59 + this.CurrentSupport.GetHashCode();
                if (this.StakedSupport != null)
                    hashCode = hashCode * 59 + this.StakedSupport.GetHashCode();
                if (this.TotalStaked != null)
                    hashCode = hashCode * 59 + this.TotalStaked.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CreatedAtBlock != null)
                    hashCode = hashCode * 59 + this.CreatedAtBlock.GetHashCode();
                if (this.CreatedAtTransaction != null)
                    hashCode = hashCode * 59 + this.CreatedAtTransaction.GetHashCode();
                if (this.Updated != null)
                    hashCode = hashCode * 59 + this.Updated.GetHashCode();
                if (this.UpdatedAtBlock != null)
                    hashCode = hashCode * 59 + this.UpdatedAtBlock.GetHashCode();
                if (this.UpdatedAtTransaction != null)
                    hashCode = hashCode * 59 + this.UpdatedAtTransaction.GetHashCode();
                if (this.Executed != null)
                    hashCode = hashCode * 59 + this.Executed.GetHashCode();
                if (this.ExecutedAtBlock != null)
                    hashCode = hashCode * 59 + this.ExecutedAtBlock.GetHashCode();
                if (this.ExecutedAtTransaction != null)
                    hashCode = hashCode * 59 + this.ExecutedAtTransaction.GetHashCode();
                if (this.Vid != null)
                    hashCode = hashCode * 59 + this.Vid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
