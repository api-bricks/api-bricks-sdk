/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// NumericsBigInteger
    /// </summary>
    [DataContract]
    public partial class NumericsBigInteger :  IEquatable<NumericsBigInteger>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NumericsBigInteger" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public NumericsBigInteger()
        {
        }

        /// <summary>
        /// Gets or Sets IsPowerOfTwo
        /// </summary>
        [DataMember(Name="is_power_of_two", EmitDefaultValue=false)]
        public bool IsPowerOfTwo { get; private set; }

        /// <summary>
        /// Gets or Sets IsZero
        /// </summary>
        [DataMember(Name="is_zero", EmitDefaultValue=false)]
        public bool IsZero { get; private set; }

        /// <summary>
        /// Gets or Sets IsOne
        /// </summary>
        [DataMember(Name="is_one", EmitDefaultValue=false)]
        public bool IsOne { get; private set; }

        /// <summary>
        /// Gets or Sets IsEven
        /// </summary>
        [DataMember(Name="is_even", EmitDefaultValue=false)]
        public bool IsEven { get; private set; }

        /// <summary>
        /// Gets or Sets Sign
        /// </summary>
        [DataMember(Name="sign", EmitDefaultValue=false)]
        public int Sign { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NumericsBigInteger {\n");
            sb.Append("  IsPowerOfTwo: ").Append(IsPowerOfTwo).Append("\n");
            sb.Append("  IsZero: ").Append(IsZero).Append("\n");
            sb.Append("  IsOne: ").Append(IsOne).Append("\n");
            sb.Append("  IsEven: ").Append(IsEven).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NumericsBigInteger);
        }

        /// <summary>
        /// Returns true if NumericsBigInteger instances are equal
        /// </summary>
        /// <param name="input">Instance of NumericsBigInteger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NumericsBigInteger input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsPowerOfTwo == input.IsPowerOfTwo ||
                    (this.IsPowerOfTwo != null &&
                    this.IsPowerOfTwo.Equals(input.IsPowerOfTwo))
                ) && 
                (
                    this.IsZero == input.IsZero ||
                    (this.IsZero != null &&
                    this.IsZero.Equals(input.IsZero))
                ) && 
                (
                    this.IsOne == input.IsOne ||
                    (this.IsOne != null &&
                    this.IsOne.Equals(input.IsOne))
                ) && 
                (
                    this.IsEven == input.IsEven ||
                    (this.IsEven != null &&
                    this.IsEven.Equals(input.IsEven))
                ) && 
                (
                    this.Sign == input.Sign ||
                    (this.Sign != null &&
                    this.Sign.Equals(input.Sign))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsPowerOfTwo != null)
                    hashCode = hashCode * 59 + this.IsPowerOfTwo.GetHashCode();
                if (this.IsZero != null)
                    hashCode = hashCode * 59 + this.IsZero.GetHashCode();
                if (this.IsOne != null)
                    hashCode = hashCode * 59 + this.IsOne.GetHashCode();
                if (this.IsEven != null)
                    hashCode = hashCode * 59 + this.IsEven.GetHashCode();
                if (this.Sign != null)
                    hashCode = hashCode * 59 + this.Sign.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
