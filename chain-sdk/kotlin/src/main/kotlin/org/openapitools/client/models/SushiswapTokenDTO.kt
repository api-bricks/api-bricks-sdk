/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param id Token address.
 * @param factory Factory address.
 * @param symbol Token symbol.
 * @param name Token name.
 * @param decimals Token decimals.
 * @param totalSupply Total supply of liquidity token.
 * @param volume Amount of token traded all time across all pairs.
 * @param volumeUsd Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold).
 * @param untrackedVolumeUsd Amount of token in USD traded all time across pairs (no minimum liquidity threshold).
 * @param txCount Amount of transactions all time in pairs including token.
 * @param liquidity Total amount of token provided as liquidity across all pairs.
 * @param derivedEth ETH per token.
 * @param whitelistPairs Array of whitelisted pairs.
 * @param vid 
 * @param tokenSymbol 
 */


data class SushiswapTokenDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /* Token address. */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Factory address. */
    @Json(name = "factory")
    val factory: kotlin.String? = null,

    /* Token symbol. */
    @Json(name = "symbol")
    val symbol: kotlin.String? = null,

    /* Token name. */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Token decimals. */
    @Json(name = "decimals")
    val decimals: kotlin.String? = null,

    /* Total supply of liquidity token. */
    @Json(name = "total_supply")
    val totalSupply: kotlin.String? = null,

    /* Amount of token traded all time across all pairs. */
    @Json(name = "volume")
    val volume: kotlin.String? = null,

    /* Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold). */
    @Json(name = "volume_usd")
    val volumeUsd: kotlin.String? = null,

    /* Amount of token in USD traded all time across pairs (no minimum liquidity threshold). */
    @Json(name = "untracked_volume_usd")
    val untrackedVolumeUsd: kotlin.String? = null,

    /* Amount of transactions all time in pairs including token. */
    @Json(name = "tx_count")
    val txCount: kotlin.String? = null,

    /* Total amount of token provided as liquidity across all pairs. */
    @Json(name = "liquidity")
    val liquidity: kotlin.String? = null,

    /* ETH per token. */
    @Json(name = "derived_eth")
    val derivedEth: kotlin.String? = null,

    /* Array of whitelisted pairs. */
    @Json(name = "whitelist_pairs")
    val whitelistPairs: kotlin.collections.List<kotlin.String>? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null,

    @Json(name = "token_symbol")
    val tokenSymbol: kotlin.String? = null

)

