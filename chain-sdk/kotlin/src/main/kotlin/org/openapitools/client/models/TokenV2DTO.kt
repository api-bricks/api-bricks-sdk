/**
 * OnChain API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.BigInteger

import com.squareup.moshi.Json

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber 
 * @param vid 
 * @param id token address
 * @param symbol token symbol
 * @param name token name
 * @param decimals token decimals
 * @param totalSupply 
 * @param tradeVolume amount of token traded all time across all pairs
 * @param tradeVolumeUsd amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold)
 * @param untrackedVolumeUsd amount of token in USD traded all time across pairs (no minimum liquidity threshold)
 * @param txCount 
 * @param totalLiquidity total amount of token provided as liquidity across all pairs
 * @param derivedEth ETH per token
 * @param tokenSymbol 
 */

data class TokenV2DTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /*  */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null,

    /* token address */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* token symbol */
    @Json(name = "symbol")
    val symbol: kotlin.String? = null,

    /* token name */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* token decimals */
    @Json(name = "decimals")
    val decimals: kotlin.Int? = null,

    @Json(name = "total_supply")
    val totalSupply: BigInteger? = null,

    /* amount of token traded all time across all pairs */
    @Json(name = "trade_volume")
    val tradeVolume: kotlin.String? = null,

    /* amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold) */
    @Json(name = "trade_volume_usd")
    val tradeVolumeUsd: kotlin.String? = null,

    /* amount of token in USD traded all time across pairs (no minimum liquidity threshold) */
    @Json(name = "untracked_volume_usd")
    val untrackedVolumeUsd: kotlin.String? = null,

    @Json(name = "tx_count")
    val txCount: BigInteger? = null,

    /* total amount of token provided as liquidity across all pairs */
    @Json(name = "total_liquidity")
    val totalLiquidity: kotlin.String? = null,

    /* ETH per token */
    @Json(name = "derived_eth")
    val derivedEth: kotlin.String? = null,

    @Json(name = "token_symbol")
    val tokenSymbol: kotlin.String? = null

)

