/**
 * OnChain API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * Token data aggregated across all pairs that include token.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber 
 * @param id token address concatendated with date
 * @param periodStartUnix unix timestamp for start of hour
 * @param token pointer to token
 * @param volume volume in token units
 * @param volumeUsd volume in derived USD
 * @param untrackedVolumeUsd volume in USD even on pools with less reliable USD values
 * @param totalValueLocked liquidity across all pools in token units
 * @param totalValueLockedUsd liquidity across all pools in derived USD
 * @param priceUsd price at end of period in USD
 * @param feesUsd fees in USD
 * @param `open` opening price USD
 * @param high high price USD
 * @param low low price USD
 * @param close close price USD
 * @param vid 
 */

data class TokenHourDataV3DTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /*  */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /* token address concatendated with date */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* unix timestamp for start of hour */
    @Json(name = "period_start_unix")
    val periodStartUnix: kotlin.Int? = null,

    /* pointer to token */
    @Json(name = "token")
    val token: kotlin.String? = null,

    /* volume in token units */
    @Json(name = "volume")
    val volume: kotlin.String? = null,

    /* volume in derived USD */
    @Json(name = "volume_usd")
    val volumeUsd: kotlin.String? = null,

    /* volume in USD even on pools with less reliable USD values */
    @Json(name = "untracked_volume_usd")
    val untrackedVolumeUsd: kotlin.String? = null,

    /* liquidity across all pools in token units */
    @Json(name = "total_value_locked")
    val totalValueLocked: kotlin.String? = null,

    /* liquidity across all pools in derived USD */
    @Json(name = "total_value_locked_usd")
    val totalValueLockedUsd: kotlin.String? = null,

    /* price at end of period in USD */
    @Json(name = "price_usd")
    val priceUsd: kotlin.String? = null,

    /* fees in USD */
    @Json(name = "fees_usd")
    val feesUsd: kotlin.String? = null,

    /* opening price USD */
    @Json(name = "open")
    val `open`: kotlin.String? = null,

    /* high price USD */
    @Json(name = "high")
    val high: kotlin.String? = null,

    /* low price USD */
    @Json(name = "low")
    val low: kotlin.String? = null,

    /* close price USD */
    @Json(name = "close")
    val close: kotlin.String? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null

)

