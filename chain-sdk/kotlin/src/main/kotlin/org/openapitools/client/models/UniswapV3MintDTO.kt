/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Mint entities are created for every emitted Mint event on the Uniswap core contracts. The Mint entity stores key data about the event like token amounts, who sent the transaction, and more.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param id Transaction hash + '#' + index in mints Transaction array.
 * @param transaction Which txn the mint was included in.
 * @param timestamp Time of transaction.
 * @param pool Pool address.
 * @param token0 Reference to token0 as stored in pool contract.
 * @param token1 Reference to token1 as stored in pool contract.
 * @param owner Owner of position where liquidity minted to.
 * @param sender The address that minted the liquidity.
 * @param origin Transaction origin: the EOA (Externally Owned Account) that initiated the transaction.
 * @param amount Amount of liquidity minted.
 * @param amount0 Amount of token 0 minted.
 * @param amount1 Amount of token 1 minted.
 * @param amountUsd Derived amount based on available prices of tokens.
 * @param tickLower Lower tick of the position.
 * @param tickUpper Upper tick of the position.
 * @param logIndex Order within the transaction.
 * @param vid 
 */


data class UniswapV3MintDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /* Transaction hash + '#' + index in mints Transaction array. */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Which txn the mint was included in. */
    @Json(name = "transaction")
    val transaction: kotlin.String? = null,

    /* Time of transaction. */
    @Json(name = "timestamp")
    val timestamp: kotlin.String? = null,

    /* Pool address. */
    @Json(name = "pool")
    val pool: kotlin.String? = null,

    /* Reference to token0 as stored in pool contract. */
    @Json(name = "token_0")
    val token0: kotlin.String? = null,

    /* Reference to token1 as stored in pool contract. */
    @Json(name = "token_1")
    val token1: kotlin.String? = null,

    /* Owner of position where liquidity minted to. */
    @Json(name = "owner")
    val owner: kotlin.String? = null,

    /* The address that minted the liquidity. */
    @Json(name = "sender")
    val sender: kotlin.String? = null,

    /* Transaction origin: the EOA (Externally Owned Account) that initiated the transaction. */
    @Json(name = "origin")
    val origin: kotlin.String? = null,

    /* Amount of liquidity minted. */
    @Json(name = "amount")
    val amount: kotlin.String? = null,

    /* Amount of token 0 minted. */
    @Json(name = "amount_0")
    val amount0: kotlin.String? = null,

    /* Amount of token 1 minted. */
    @Json(name = "amount_1")
    val amount1: kotlin.String? = null,

    /* Derived amount based on available prices of tokens. */
    @Json(name = "amount_usd")
    val amountUsd: kotlin.String? = null,

    /* Lower tick of the position. */
    @Json(name = "tick_lower")
    val tickLower: kotlin.String? = null,

    /* Upper tick of the position. */
    @Json(name = "tick_upper")
    val tickUpper: kotlin.String? = null,

    /* Order within the transaction. */
    @Json(name = "log_index")
    val logIndex: kotlin.String? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null

)

