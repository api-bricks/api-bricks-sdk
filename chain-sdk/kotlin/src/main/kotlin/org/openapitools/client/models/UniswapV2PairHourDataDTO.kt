/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Tracks pair data across each hour.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param id 
 * @param hourStartUnix Unix timestamp for start of hour.
 * @param pair Address for pair contract.
 * @param reserve0 Reserve of token0 (updated during each transaction on pair).
 * @param reserve1 Reserve of token1 (updated during each transaction on pair).
 * @param totalSupply Total supply of liquidity token distributed to LPs.
 * @param reserveUsd Reserve of token0 plus token1 stored as a derived USD amount.
 * @param hourlyVolumeToken0 Total amount of token0 swapped throughout hour.
 * @param hourlyVolumeToken1 Total amount of token1 swapped throughout hour.
 * @param hourlyVolumeUsd Total volume within pair throughout hour.
 * @param hourlyTxns Amount of transactions on pair throughout hour.
 * @param vid 
 */


data class UniswapV2PairHourDataDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Unix timestamp for start of hour. */
    @Json(name = "hour_start_unix")
    val hourStartUnix: kotlin.Int? = null,

    /* Address for pair contract. */
    @Json(name = "pair")
    val pair: kotlin.String? = null,

    /* Reserve of token0 (updated during each transaction on pair). */
    @Json(name = "reserve_0")
    val reserve0: kotlin.String? = null,

    /* Reserve of token1 (updated during each transaction on pair). */
    @Json(name = "reserve_1")
    val reserve1: kotlin.String? = null,

    /* Total supply of liquidity token distributed to LPs. */
    @Json(name = "total_supply")
    val totalSupply: kotlin.String? = null,

    /* Reserve of token0 plus token1 stored as a derived USD amount. */
    @Json(name = "reserve_usd")
    val reserveUsd: kotlin.String? = null,

    /* Total amount of token0 swapped throughout hour. */
    @Json(name = "hourly_volume_token_0")
    val hourlyVolumeToken0: kotlin.String? = null,

    /* Total amount of token1 swapped throughout hour. */
    @Json(name = "hourly_volume_token_1")
    val hourlyVolumeToken1: kotlin.String? = null,

    /* Total volume within pair throughout hour. */
    @Json(name = "hourly_volume_usd")
    val hourlyVolumeUsd: kotlin.String? = null,

    /* Amount of transactions on pair throughout hour. */
    @Json(name = "hourly_txns")
    val hourlyTxns: kotlin.String? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null

)

