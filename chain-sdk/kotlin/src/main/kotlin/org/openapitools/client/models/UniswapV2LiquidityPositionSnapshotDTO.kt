/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * This entity is used to store data about a user's liquidity position over time. This information, along with information from the pair itself can be used to provide position sizes, token deposits, and more. It gets created and never updated.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param id Identifier, format: (pair address)-(user address)
 * @param liquidityPosition Reference to LP identifier.
 * @param timestamp Creation time.
 * @param block Number of block in which LP snapshot was recorded.
 * @param user Reference to user.
 * @param pair Reference to the pair liquidity is being provided on.
 * @param token0PriceUsd Snapshot of token0 price.
 * @param token1PriceUsd Snapshot of token0 price.
 * @param reserve0 Snapshot of pair token0 reserves.
 * @param reserve1 Snapshot of pair token1 reserves.
 * @param reserveUsd Snapshot of pair reserves in USD.
 * @param liquidityTokenTotalSupply Snapshot of pool token supply.
 * @param liquidityTokenBalance Snapshot of users pool token balance.
 * @param vid 
 * @param blockRange 
 */


data class UniswapV2LiquidityPositionSnapshotDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /* Identifier, format: (pair address)-(user address) */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Reference to LP identifier. */
    @Json(name = "liquidity_position")
    val liquidityPosition: kotlin.String? = null,

    /* Creation time. */
    @Json(name = "timestamp")
    val timestamp: kotlin.Int? = null,

    /* Number of block in which LP snapshot was recorded. */
    @Json(name = "block")
    val block: kotlin.Int? = null,

    /* Reference to user. */
    @Json(name = "user")
    val user: kotlin.String? = null,

    /* Reference to the pair liquidity is being provided on. */
    @Json(name = "pair")
    val pair: kotlin.String? = null,

    /* Snapshot of token0 price. */
    @Json(name = "token_0_price_usd")
    val token0PriceUsd: kotlin.String? = null,

    /* Snapshot of token0 price. */
    @Json(name = "token_1_price_usd")
    val token1PriceUsd: kotlin.String? = null,

    /* Snapshot of pair token0 reserves. */
    @Json(name = "reserve_0")
    val reserve0: kotlin.String? = null,

    /* Snapshot of pair token1 reserves. */
    @Json(name = "reserve_1")
    val reserve1: kotlin.String? = null,

    /* Snapshot of pair reserves in USD. */
    @Json(name = "reserve_usd")
    val reserveUsd: kotlin.String? = null,

    /* Snapshot of pool token supply. */
    @Json(name = "liquidity_token_total_supply")
    val liquidityTokenTotalSupply: kotlin.String? = null,

    /* Snapshot of users pool token balance. */
    @Json(name = "liquidity_token_balance")
    val liquidityTokenBalance: kotlin.String? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null,

    /*  */
    @Json(name = "block_range")
    val blockRange: kotlin.String? = null

)

