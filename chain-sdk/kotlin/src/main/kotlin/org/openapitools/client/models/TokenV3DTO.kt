/**
 * OnChain API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.BigInteger

import com.squareup.moshi.Json

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber 
 * @param vid 
 * @param id token address
 * @param symbol token symbol
 * @param name token name
 * @param decimals token decimals
 * @param totalSupply 
 * @param volume volume in token units
 * @param volumeUsd volume in derived USD
 * @param untrackedVolumeUsd volume in USD even on pools with less reliable USD values
 * @param feesUsd fees in USD
 * @param txCount 
 * @param poolCount 
 * @param totalValueLocked liquidity across all pools in token units
 * @param totalValueLockedUsd liquidity across all pools in derived USD
 * @param totalValueLockedUsdUntracked TVL derived in USD untracked
 * @param derivedEth derived price in ETH
 * @param whitelistPools pools token is in that are white listed for USD pricing
 * @param tokenSymbol 
 */

data class TokenV3DTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /*  */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null,

    /* token address */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* token symbol */
    @Json(name = "symbol")
    val symbol: kotlin.String? = null,

    /* token name */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* token decimals */
    @Json(name = "decimals")
    val decimals: kotlin.Int? = null,

    @Json(name = "total_supply")
    val totalSupply: BigInteger? = null,

    /* volume in token units */
    @Json(name = "volume")
    val volume: kotlin.String? = null,

    /* volume in derived USD */
    @Json(name = "volume_usd")
    val volumeUsd: kotlin.String? = null,

    /* volume in USD even on pools with less reliable USD values */
    @Json(name = "untracked_volume_usd")
    val untrackedVolumeUsd: kotlin.String? = null,

    /* fees in USD */
    @Json(name = "fees_usd")
    val feesUsd: kotlin.String? = null,

    @Json(name = "tx_count")
    val txCount: BigInteger? = null,

    @Json(name = "pool_count")
    val poolCount: BigInteger? = null,

    /* liquidity across all pools in token units */
    @Json(name = "total_value_locked")
    val totalValueLocked: kotlin.String? = null,

    /* liquidity across all pools in derived USD */
    @Json(name = "total_value_locked_usd")
    val totalValueLockedUsd: kotlin.String? = null,

    /* TVL derived in USD untracked */
    @Json(name = "total_value_locked_usd_untracked")
    val totalValueLockedUsdUntracked: kotlin.String? = null,

    /* derived price in ETH */
    @Json(name = "derived_eth")
    val derivedEth: kotlin.String? = null,

    /* pools token is in that are white listed for USD pricing */
    @Json(name = "whitelist_pools")
    val whitelistPools: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "token_symbol")
    val tokenSymbol: kotlin.String? = null

)

