/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.NumericsBigInteger

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Information about a pool. Includes references to each token within the pool, volume information, liquidity information, and more. The pool entity mirrors the pool smart contract, and also contains aggregated information about use.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param vid 
 * @param id Pool address.
 * @param createdAtTimestamp Creation time.
 * @param token0 Reference to token0 as stored in pool contract.
 * @param token1 Reference to token1 as stored in pool contract.
 * @param feeTier 
 * @param liquidity 
 * @param sqrtPrice 
 * @param feeGrowthGlobal0x128 
 * @param feeGrowthGlobal1x128 
 * @param token0Price Token0 per token1.
 * @param token1Price Token1 per token0.
 * @param tick 
 * @param observationIndex 
 * @param volumeToken0 All time token0 swapped.
 * @param volumeToken1 All time token1 swapped.
 * @param volumeUsd All time USD swapped.
 * @param untrackedVolumeUsd All time USD swapped, unfiltered for unreliable USD pools.
 * @param feesUsd Fees in USD.
 * @param txCount 
 * @param collectedFeesToken0 All time fees collected token0.
 * @param collectedFeesToken1 All time fees collected token1.
 * @param collectedFeesUsd All time fees collected derived USD.
 * @param totalValueLockedToken0 Total token 0 across all ticks.
 * @param totalValueLockedToken1 
 * @param totalValueLockedEth Total token 1 across all ticks.
 * @param totalValueLockedUsd Total value locked USD.
 * @param totalValueLockedUsdUntracked Total value locked derived ETH.
 * @param liquidityProviderCount Liquidity providers count, used to detect new exchanges.
 * @param evaluatedAsk 
 */


data class UniswapV3PoolDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null,

    /* Pool address. */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Creation time. */
    @Json(name = "created_at_timestamp")
    val createdAtTimestamp: java.time.OffsetDateTime? = null,

    /* Reference to token0 as stored in pool contract. */
    @Json(name = "token_0")
    val token0: kotlin.String? = null,

    /* Reference to token1 as stored in pool contract. */
    @Json(name = "token_1")
    val token1: kotlin.String? = null,

    @Json(name = "fee_tier")
    val feeTier: NumericsBigInteger? = null,

    @Json(name = "liquidity")
    val liquidity: NumericsBigInteger? = null,

    @Json(name = "sqrt_price")
    val sqrtPrice: NumericsBigInteger? = null,

    @Json(name = "fee_growth_global_0x128")
    val feeGrowthGlobal0x128: NumericsBigInteger? = null,

    @Json(name = "fee_growth_global_1x128")
    val feeGrowthGlobal1x128: NumericsBigInteger? = null,

    /* Token0 per token1. */
    @Json(name = "token_0_price")
    val token0Price: kotlin.String? = null,

    /* Token1 per token0. */
    @Json(name = "token_1_price")
    val token1Price: kotlin.String? = null,

    @Json(name = "tick")
    val tick: NumericsBigInteger? = null,

    @Json(name = "observation_index")
    val observationIndex: NumericsBigInteger? = null,

    /* All time token0 swapped. */
    @Json(name = "volume_token_0")
    val volumeToken0: kotlin.String? = null,

    /* All time token1 swapped. */
    @Json(name = "volume_token_1")
    val volumeToken1: kotlin.String? = null,

    /* All time USD swapped. */
    @Json(name = "volume_usd")
    val volumeUsd: kotlin.String? = null,

    /* All time USD swapped, unfiltered for unreliable USD pools. */
    @Json(name = "untracked_volume_usd")
    val untrackedVolumeUsd: kotlin.String? = null,

    /* Fees in USD. */
    @Json(name = "fees_usd")
    val feesUsd: kotlin.String? = null,

    @Json(name = "tx_count")
    val txCount: NumericsBigInteger? = null,

    /* All time fees collected token0. */
    @Json(name = "collected_fees_token_0")
    val collectedFeesToken0: kotlin.String? = null,

    /* All time fees collected token1. */
    @Json(name = "collected_fees_token_1")
    val collectedFeesToken1: kotlin.String? = null,

    /* All time fees collected derived USD. */
    @Json(name = "collected_fees_usd")
    val collectedFeesUsd: kotlin.String? = null,

    /* Total token 0 across all ticks. */
    @Json(name = "total_value_locked_token_0")
    val totalValueLockedToken0: kotlin.String? = null,

    /*  */
    @Json(name = "total_value_locked_token_1")
    val totalValueLockedToken1: kotlin.String? = null,

    /* Total token 1 across all ticks. */
    @Json(name = "total_value_locked_eth")
    val totalValueLockedEth: kotlin.String? = null,

    /* Total value locked USD. */
    @Json(name = "total_value_locked_usd")
    val totalValueLockedUsd: kotlin.String? = null,

    /* Total value locked derived ETH. */
    @Json(name = "total_value_locked_usd_untracked")
    val totalValueLockedUsdUntracked: kotlin.String? = null,

    /* Liquidity providers count, used to detect new exchanges. */
    @Json(name = "liquidity_provider_count")
    val liquidityProviderCount: kotlin.String? = null,

    @Json(name = "evaluated_ask")
    val evaluatedAsk: kotlin.Double? = null

)

