/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Token data aggregated across all pairs that include token.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param vid 
 * @param id Token address concatendated with date.
 * @param date Timestamp rounded to current day by dividing by 86400.
 * @param token Pointer to token.
 * @param volume Volume in token units.
 * @param volumeUsd Volume in derived USD.
 * @param untrackedVolumeUsd Volume in USD even on pools with less reliable USD values.
 * @param totalValueLocked Liquidity across all pools in token units.
 * @param totalValueLockedUsd Liquidity across all pools in derived USD.
 * @param priceUsd Price at end of period in USD.
 * @param feesUsd Fees in USD.
 * @param `open` Opening price USD.
 * @param high High price USD.
 * @param low Low price USD.
 * @param close Close price USD.
 */


data class UniswapV3TokenV3DayDataDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null,

    /* Token address concatendated with date. */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Timestamp rounded to current day by dividing by 86400. */
    @Json(name = "date")
    val date: kotlin.Int? = null,

    /* Pointer to token. */
    @Json(name = "token")
    val token: kotlin.String? = null,

    /* Volume in token units. */
    @Json(name = "volume")
    val volume: kotlin.String? = null,

    /* Volume in derived USD. */
    @Json(name = "volume_usd")
    val volumeUsd: kotlin.String? = null,

    /* Volume in USD even on pools with less reliable USD values. */
    @Json(name = "untracked_volume_usd")
    val untrackedVolumeUsd: kotlin.String? = null,

    /* Liquidity across all pools in token units. */
    @Json(name = "total_value_locked")
    val totalValueLocked: kotlin.String? = null,

    /* Liquidity across all pools in derived USD. */
    @Json(name = "total_value_locked_usd")
    val totalValueLockedUsd: kotlin.String? = null,

    /* Price at end of period in USD. */
    @Json(name = "price_usd")
    val priceUsd: kotlin.String? = null,

    /* Fees in USD. */
    @Json(name = "fees_usd")
    val feesUsd: kotlin.String? = null,

    /* Opening price USD. */
    @Json(name = "open")
    val `open`: kotlin.String? = null,

    /* High price USD. */
    @Json(name = "high")
    val high: kotlin.String? = null,

    /* Low price USD. */
    @Json(name = "low")
    val low: kotlin.String? = null,

    /* Close price USD. */
    @Json(name = "close")
    val close: kotlin.String? = null

)

