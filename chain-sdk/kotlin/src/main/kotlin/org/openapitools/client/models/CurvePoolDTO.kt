/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param id Pool address.
 * @param name Pool's human-readable name.
 * @param isMeta Identify whether pool is a metapool.
 * @param registryAddress Registry contract address from where this pool was registered.
 * @param swapAddress Swap contract address.
 * @param lpToken Address of the token representing LP share.
 * @param coinCount Number of coins composing the pool.
 * @param underlyingCount Number of underlying coins composing the pool.
 * @param a Amplification coefficient multiplied by n * (n - 1).
 * @param fee Fee to charge for exchanges.
 * @param adminFee Admin fee is represented as a percentage of the total fee collected on a swap.
 * @param owner Admin address.
 * @param virtualPrice Average dollar value of pool token.
 * @param locked 
 * @param addedAt 
 * @param addedAtBlock 
 * @param addedAtTransaction 
 * @param removedAt 
 * @param removedAtBlock 
 * @param removedAtTransaction 
 * @param exchangeCount 
 * @param gaugeCount 
 * @param vid 
 * @param evaluatedAsk 
 */


data class CurvePoolDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /* Pool address. */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Pool's human-readable name. */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Identify whether pool is a metapool. */
    @Json(name = "is_meta")
    val isMeta: kotlin.Boolean? = null,

    /* Registry contract address from where this pool was registered. */
    @Json(name = "registry_address")
    val registryAddress: kotlin.String? = null,

    /* Swap contract address. */
    @Json(name = "swap_address")
    val swapAddress: kotlin.String? = null,

    /* Address of the token representing LP share. */
    @Json(name = "lp_token")
    val lpToken: kotlin.String? = null,

    /* Number of coins composing the pool. */
    @Json(name = "coin_count")
    val coinCount: kotlin.String? = null,

    /* Number of underlying coins composing the pool. */
    @Json(name = "underlying_count")
    val underlyingCount: kotlin.String? = null,

    /* Amplification coefficient multiplied by n * (n - 1). */
    @Json(name = "a")
    val a: kotlin.String? = null,

    /* Fee to charge for exchanges. */
    @Json(name = "fee")
    val fee: kotlin.String? = null,

    /* Admin fee is represented as a percentage of the total fee collected on a swap. */
    @Json(name = "admin_fee")
    val adminFee: kotlin.String? = null,

    /* Admin address. */
    @Json(name = "owner")
    val owner: kotlin.String? = null,

    /* Average dollar value of pool token. */
    @Json(name = "virtual_price")
    val virtualPrice: kotlin.String? = null,

    /*  */
    @Json(name = "locked")
    val locked: kotlin.String? = null,

    /*  */
    @Json(name = "added_at")
    val addedAt: java.time.OffsetDateTime? = null,

    /*  */
    @Json(name = "added_at_block")
    val addedAtBlock: kotlin.String? = null,

    /*  */
    @Json(name = "added_at_transaction")
    val addedAtTransaction: kotlin.String? = null,

    /*  */
    @Json(name = "removed_at")
    val removedAt: kotlin.String? = null,

    /*  */
    @Json(name = "removed_at_block")
    val removedAtBlock: kotlin.String? = null,

    /*  */
    @Json(name = "removed_at_transaction")
    val removedAtTransaction: kotlin.String? = null,

    /*  */
    @Json(name = "exchange_count")
    val exchangeCount: kotlin.String? = null,

    /*  */
    @Json(name = "gauge_count")
    val gaugeCount: kotlin.String? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null,

    @Json(name = "evaluated_ask")
    val evaluatedAsk: kotlin.Double? = null

)

