/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param id App address.
 * @param address 
 * @param codename 
 * @param minimumBalance Minimum balance needed to create a proposal.
 * @param minimumQuorum Percentage of positive votes in total possible votes for a proposal to be accepted.
 * @param minimumTime Minimum time needed to pass between user's previous proposal and a user creating a new proposal.
 * @param requiredSupport Percentage of positive votes needed for a proposal to be accepted.
 * @param voteTime Seconds that a proposal will be open for vote (unless enough votes have been cast to make an early decision).
 * @param proposalCount Number of proposals created with this app.
 * @param voteCount Number of votes received by all the proposals created with this app.
 * @param token Address of the token used for voting.
 * @param vid 
 */


data class CurveVotingAppDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /* App address. */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /*  */
    @Json(name = "address")
    val address: kotlin.String? = null,

    /*  */
    @Json(name = "codename")
    val codename: kotlin.String? = null,

    /* Minimum balance needed to create a proposal. */
    @Json(name = "minimum_balance")
    val minimumBalance: kotlin.String? = null,

    /* Percentage of positive votes in total possible votes for a proposal to be accepted. */
    @Json(name = "minimum_quorum")
    val minimumQuorum: kotlin.String? = null,

    /* Minimum time needed to pass between user's previous proposal and a user creating a new proposal. */
    @Json(name = "minimum_time")
    val minimumTime: kotlin.String? = null,

    /* Percentage of positive votes needed for a proposal to be accepted. */
    @Json(name = "required_support")
    val requiredSupport: kotlin.String? = null,

    /* Seconds that a proposal will be open for vote (unless enough votes have been cast to make an early decision). */
    @Json(name = "vote_time")
    val voteTime: kotlin.String? = null,

    /* Number of proposals created with this app. */
    @Json(name = "proposal_count")
    val proposalCount: kotlin.String? = null,

    /* Number of votes received by all the proposals created with this app. */
    @Json(name = "vote_count")
    val voteCount: kotlin.String? = null,

    /* Address of the token used for voting. */
    @Json(name = "token")
    val token: kotlin.String? = null,

    /*  */
    @Json(name = "vid")
    val vid: kotlin.Long? = null

)

