/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// Token data aggregated across all pairs that include token.
    /// </summary>
    [DataContract(Name = "UniswapV2.TokenDayDataDTO")]
    public partial class UniswapV2TokenDayDataDTO : IEquatable<UniswapV2TokenDayDataDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV2TokenDayDataDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id">Token address and day id (day start timestamp in unix / 86400) concatenated with a dash..</param>
        /// <param name="date">Unix timestamp for start of day..</param>
        /// <param name="token">Reference to token entity..</param>
        /// <param name="dailyVolumeToken">Amount of token swapped across all pairs throughout day..</param>
        /// <param name="dailyVolumeEth">Amount of token swapped across all pairs throughout day stored as a derived amount of ETH..</param>
        /// <param name="dailyVolumeUsd">Amount of token swapped across all pairs throughout day stored as a derived amount of USD..</param>
        /// <param name="dailyTxns">Amount of transactions with this token across all pairs..</param>
        /// <param name="totalLiquidityToken">Token amount of token deposited across all pairs..</param>
        /// <param name="totalLiquidityEth">Token amount of token deposited across all pairs stored as amount of ETH..</param>
        /// <param name="totalLiquidityUsd">Token amount of token deposited across all pairs stored as amount of USD..</param>
        /// <param name="priceUsd">Price of token in derived USD..</param>
        /// <param name="vid">vid.</param>
        public UniswapV2TokenDayDataDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), int date = default(int), string token = default(string), string dailyVolumeToken = default(string), string dailyVolumeEth = default(string), string dailyVolumeUsd = default(string), string dailyTxns = default(string), string totalLiquidityToken = default(string), string totalLiquidityEth = default(string), string totalLiquidityUsd = default(string), string priceUsd = default(string), long vid = default(long))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.Date = date;
            this.Token = token;
            this.DailyVolumeToken = dailyVolumeToken;
            this.DailyVolumeEth = dailyVolumeEth;
            this.DailyVolumeUsd = dailyVolumeUsd;
            this.DailyTxns = dailyTxns;
            this.TotalLiquidityToken = totalLiquidityToken;
            this.TotalLiquidityEth = totalLiquidityEth;
            this.TotalLiquidityUsd = totalLiquidityUsd;
            this.PriceUsd = priceUsd;
            this.Vid = vid;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Token address and day id (day start timestamp in unix / 86400) concatenated with a dash.
        /// </summary>
        /// <value>Token address and day id (day start timestamp in unix / 86400) concatenated with a dash.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Unix timestamp for start of day.
        /// </summary>
        /// <value>Unix timestamp for start of day.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public int Date { get; set; }

        /// <summary>
        /// Reference to token entity.
        /// </summary>
        /// <value>Reference to token entity.</value>
        [DataMember(Name = "token", EmitDefaultValue = true)]
        public string Token { get; set; }

        /// <summary>
        /// Amount of token swapped across all pairs throughout day.
        /// </summary>
        /// <value>Amount of token swapped across all pairs throughout day.</value>
        [DataMember(Name = "daily_volume_token", EmitDefaultValue = true)]
        public string DailyVolumeToken { get; set; }

        /// <summary>
        /// Amount of token swapped across all pairs throughout day stored as a derived amount of ETH.
        /// </summary>
        /// <value>Amount of token swapped across all pairs throughout day stored as a derived amount of ETH.</value>
        [DataMember(Name = "daily_volume_eth", EmitDefaultValue = true)]
        public string DailyVolumeEth { get; set; }

        /// <summary>
        /// Amount of token swapped across all pairs throughout day stored as a derived amount of USD.
        /// </summary>
        /// <value>Amount of token swapped across all pairs throughout day stored as a derived amount of USD.</value>
        [DataMember(Name = "daily_volume_usd", EmitDefaultValue = true)]
        public string DailyVolumeUsd { get; set; }

        /// <summary>
        /// Amount of transactions with this token across all pairs.
        /// </summary>
        /// <value>Amount of transactions with this token across all pairs.</value>
        [DataMember(Name = "daily_txns", EmitDefaultValue = true)]
        public string DailyTxns { get; set; }

        /// <summary>
        /// Token amount of token deposited across all pairs.
        /// </summary>
        /// <value>Token amount of token deposited across all pairs.</value>
        [DataMember(Name = "total_liquidity_token", EmitDefaultValue = true)]
        public string TotalLiquidityToken { get; set; }

        /// <summary>
        /// Token amount of token deposited across all pairs stored as amount of ETH.
        /// </summary>
        /// <value>Token amount of token deposited across all pairs stored as amount of ETH.</value>
        [DataMember(Name = "total_liquidity_eth", EmitDefaultValue = true)]
        public string TotalLiquidityEth { get; set; }

        /// <summary>
        /// Token amount of token deposited across all pairs stored as amount of USD.
        /// </summary>
        /// <value>Token amount of token deposited across all pairs stored as amount of USD.</value>
        [DataMember(Name = "total_liquidity_usd", EmitDefaultValue = true)]
        public string TotalLiquidityUsd { get; set; }

        /// <summary>
        /// Price of token in derived USD.
        /// </summary>
        /// <value>Price of token in derived USD.</value>
        [DataMember(Name = "price_usd", EmitDefaultValue = true)]
        public string PriceUsd { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name = "vid", EmitDefaultValue = false)]
        public long Vid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UniswapV2TokenDayDataDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  DailyVolumeToken: ").Append(DailyVolumeToken).Append("\n");
            sb.Append("  DailyVolumeEth: ").Append(DailyVolumeEth).Append("\n");
            sb.Append("  DailyVolumeUsd: ").Append(DailyVolumeUsd).Append("\n");
            sb.Append("  DailyTxns: ").Append(DailyTxns).Append("\n");
            sb.Append("  TotalLiquidityToken: ").Append(TotalLiquidityToken).Append("\n");
            sb.Append("  TotalLiquidityEth: ").Append(TotalLiquidityEth).Append("\n");
            sb.Append("  TotalLiquidityUsd: ").Append(TotalLiquidityUsd).Append("\n");
            sb.Append("  PriceUsd: ").Append(PriceUsd).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UniswapV2TokenDayDataDTO);
        }

        /// <summary>
        /// Returns true if UniswapV2TokenDayDataDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UniswapV2TokenDayDataDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UniswapV2TokenDayDataDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Date == input.Date ||
                    this.Date.Equals(input.Date)
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.DailyVolumeToken == input.DailyVolumeToken ||
                    (this.DailyVolumeToken != null &&
                    this.DailyVolumeToken.Equals(input.DailyVolumeToken))
                ) && 
                (
                    this.DailyVolumeEth == input.DailyVolumeEth ||
                    (this.DailyVolumeEth != null &&
                    this.DailyVolumeEth.Equals(input.DailyVolumeEth))
                ) && 
                (
                    this.DailyVolumeUsd == input.DailyVolumeUsd ||
                    (this.DailyVolumeUsd != null &&
                    this.DailyVolumeUsd.Equals(input.DailyVolumeUsd))
                ) && 
                (
                    this.DailyTxns == input.DailyTxns ||
                    (this.DailyTxns != null &&
                    this.DailyTxns.Equals(input.DailyTxns))
                ) && 
                (
                    this.TotalLiquidityToken == input.TotalLiquidityToken ||
                    (this.TotalLiquidityToken != null &&
                    this.TotalLiquidityToken.Equals(input.TotalLiquidityToken))
                ) && 
                (
                    this.TotalLiquidityEth == input.TotalLiquidityEth ||
                    (this.TotalLiquidityEth != null &&
                    this.TotalLiquidityEth.Equals(input.TotalLiquidityEth))
                ) && 
                (
                    this.TotalLiquidityUsd == input.TotalLiquidityUsd ||
                    (this.TotalLiquidityUsd != null &&
                    this.TotalLiquidityUsd.Equals(input.TotalLiquidityUsd))
                ) && 
                (
                    this.PriceUsd == input.PriceUsd ||
                    (this.PriceUsd != null &&
                    this.PriceUsd.Equals(input.PriceUsd))
                ) && 
                (
                    this.Vid == input.Vid ||
                    this.Vid.Equals(input.Vid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Date.GetHashCode();
                if (this.Token != null)
                {
                    hashCode = (hashCode * 59) + this.Token.GetHashCode();
                }
                if (this.DailyVolumeToken != null)
                {
                    hashCode = (hashCode * 59) + this.DailyVolumeToken.GetHashCode();
                }
                if (this.DailyVolumeEth != null)
                {
                    hashCode = (hashCode * 59) + this.DailyVolumeEth.GetHashCode();
                }
                if (this.DailyVolumeUsd != null)
                {
                    hashCode = (hashCode * 59) + this.DailyVolumeUsd.GetHashCode();
                }
                if (this.DailyTxns != null)
                {
                    hashCode = (hashCode * 59) + this.DailyTxns.GetHashCode();
                }
                if (this.TotalLiquidityToken != null)
                {
                    hashCode = (hashCode * 59) + this.TotalLiquidityToken.GetHashCode();
                }
                if (this.TotalLiquidityEth != null)
                {
                    hashCode = (hashCode * 59) + this.TotalLiquidityEth.GetHashCode();
                }
                if (this.TotalLiquidityUsd != null)
                {
                    hashCode = (hashCode * 59) + this.TotalLiquidityUsd.GetHashCode();
                }
                if (this.PriceUsd != null)
                {
                    hashCode = (hashCode * 59) + this.PriceUsd.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Vid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
