/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// CurveSystemStateDTO
    /// </summary>
    [DataContract(Name = "Curve.SystemStateDTO")]
    public partial class CurveSystemStateDTO : IEquatable<CurveSystemStateDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurveSystemStateDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id">Singleton ID, equals to &#39;current&#39;..</param>
        /// <param name="registryContract">Current pool registry address..</param>
        /// <param name="contractCount">Number of contracts in the AddressProvider registry..</param>
        /// <param name="gaugeCount">Number of gauges registered..</param>
        /// <param name="gaugeTypeCount">Number of gauge types registered..</param>
        /// <param name="poolCount">Number of active pools..</param>
        /// <param name="tokenCount">Number of tokens registered..</param>
        /// <param name="totalPoolCount">Total number of pools (including removed ones)..</param>
        /// <param name="updated">updated.</param>
        /// <param name="updatedAtBlock">updatedAtBlock.</param>
        /// <param name="updatedAtTransaction">updatedAtTransaction.</param>
        /// <param name="vid">vid.</param>
        public CurveSystemStateDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), string registryContract = default(string), string contractCount = default(string), string gaugeCount = default(string), string gaugeTypeCount = default(string), string poolCount = default(string), string tokenCount = default(string), string totalPoolCount = default(string), string updated = default(string), string updatedAtBlock = default(string), string updatedAtTransaction = default(string), long vid = default(long))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.RegistryContract = registryContract;
            this.ContractCount = contractCount;
            this.GaugeCount = gaugeCount;
            this.GaugeTypeCount = gaugeTypeCount;
            this.PoolCount = poolCount;
            this.TokenCount = tokenCount;
            this.TotalPoolCount = totalPoolCount;
            this.Updated = updated;
            this.UpdatedAtBlock = updatedAtBlock;
            this.UpdatedAtTransaction = updatedAtTransaction;
            this.Vid = vid;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Singleton ID, equals to &#39;current&#39;.
        /// </summary>
        /// <value>Singleton ID, equals to &#39;current&#39;.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Current pool registry address.
        /// </summary>
        /// <value>Current pool registry address.</value>
        [DataMember(Name = "registry_contract", EmitDefaultValue = true)]
        public string RegistryContract { get; set; }

        /// <summary>
        /// Number of contracts in the AddressProvider registry.
        /// </summary>
        /// <value>Number of contracts in the AddressProvider registry.</value>
        [DataMember(Name = "contract_count", EmitDefaultValue = true)]
        public string ContractCount { get; set; }

        /// <summary>
        /// Number of gauges registered.
        /// </summary>
        /// <value>Number of gauges registered.</value>
        [DataMember(Name = "gauge_count", EmitDefaultValue = true)]
        public string GaugeCount { get; set; }

        /// <summary>
        /// Number of gauge types registered.
        /// </summary>
        /// <value>Number of gauge types registered.</value>
        [DataMember(Name = "gauge_type_count", EmitDefaultValue = true)]
        public string GaugeTypeCount { get; set; }

        /// <summary>
        /// Number of active pools.
        /// </summary>
        /// <value>Number of active pools.</value>
        [DataMember(Name = "pool_count", EmitDefaultValue = true)]
        public string PoolCount { get; set; }

        /// <summary>
        /// Number of tokens registered.
        /// </summary>
        /// <value>Number of tokens registered.</value>
        [DataMember(Name = "token_count", EmitDefaultValue = true)]
        public string TokenCount { get; set; }

        /// <summary>
        /// Total number of pools (including removed ones).
        /// </summary>
        /// <value>Total number of pools (including removed ones).</value>
        [DataMember(Name = "total_pool_count", EmitDefaultValue = true)]
        public string TotalPoolCount { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name = "updated", EmitDefaultValue = true)]
        public string Updated { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAtBlock
        /// </summary>
        [DataMember(Name = "updated_at_block", EmitDefaultValue = true)]
        public string UpdatedAtBlock { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAtTransaction
        /// </summary>
        [DataMember(Name = "updated_at_transaction", EmitDefaultValue = true)]
        public string UpdatedAtTransaction { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name = "vid", EmitDefaultValue = false)]
        public long Vid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurveSystemStateDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RegistryContract: ").Append(RegistryContract).Append("\n");
            sb.Append("  ContractCount: ").Append(ContractCount).Append("\n");
            sb.Append("  GaugeCount: ").Append(GaugeCount).Append("\n");
            sb.Append("  GaugeTypeCount: ").Append(GaugeTypeCount).Append("\n");
            sb.Append("  PoolCount: ").Append(PoolCount).Append("\n");
            sb.Append("  TokenCount: ").Append(TokenCount).Append("\n");
            sb.Append("  TotalPoolCount: ").Append(TotalPoolCount).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  UpdatedAtBlock: ").Append(UpdatedAtBlock).Append("\n");
            sb.Append("  UpdatedAtTransaction: ").Append(UpdatedAtTransaction).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurveSystemStateDTO);
        }

        /// <summary>
        /// Returns true if CurveSystemStateDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CurveSystemStateDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurveSystemStateDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RegistryContract == input.RegistryContract ||
                    (this.RegistryContract != null &&
                    this.RegistryContract.Equals(input.RegistryContract))
                ) && 
                (
                    this.ContractCount == input.ContractCount ||
                    (this.ContractCount != null &&
                    this.ContractCount.Equals(input.ContractCount))
                ) && 
                (
                    this.GaugeCount == input.GaugeCount ||
                    (this.GaugeCount != null &&
                    this.GaugeCount.Equals(input.GaugeCount))
                ) && 
                (
                    this.GaugeTypeCount == input.GaugeTypeCount ||
                    (this.GaugeTypeCount != null &&
                    this.GaugeTypeCount.Equals(input.GaugeTypeCount))
                ) && 
                (
                    this.PoolCount == input.PoolCount ||
                    (this.PoolCount != null &&
                    this.PoolCount.Equals(input.PoolCount))
                ) && 
                (
                    this.TokenCount == input.TokenCount ||
                    (this.TokenCount != null &&
                    this.TokenCount.Equals(input.TokenCount))
                ) && 
                (
                    this.TotalPoolCount == input.TotalPoolCount ||
                    (this.TotalPoolCount != null &&
                    this.TotalPoolCount.Equals(input.TotalPoolCount))
                ) && 
                (
                    this.Updated == input.Updated ||
                    (this.Updated != null &&
                    this.Updated.Equals(input.Updated))
                ) && 
                (
                    this.UpdatedAtBlock == input.UpdatedAtBlock ||
                    (this.UpdatedAtBlock != null &&
                    this.UpdatedAtBlock.Equals(input.UpdatedAtBlock))
                ) && 
                (
                    this.UpdatedAtTransaction == input.UpdatedAtTransaction ||
                    (this.UpdatedAtTransaction != null &&
                    this.UpdatedAtTransaction.Equals(input.UpdatedAtTransaction))
                ) && 
                (
                    this.Vid == input.Vid ||
                    this.Vid.Equals(input.Vid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.RegistryContract != null)
                {
                    hashCode = (hashCode * 59) + this.RegistryContract.GetHashCode();
                }
                if (this.ContractCount != null)
                {
                    hashCode = (hashCode * 59) + this.ContractCount.GetHashCode();
                }
                if (this.GaugeCount != null)
                {
                    hashCode = (hashCode * 59) + this.GaugeCount.GetHashCode();
                }
                if (this.GaugeTypeCount != null)
                {
                    hashCode = (hashCode * 59) + this.GaugeTypeCount.GetHashCode();
                }
                if (this.PoolCount != null)
                {
                    hashCode = (hashCode * 59) + this.PoolCount.GetHashCode();
                }
                if (this.TokenCount != null)
                {
                    hashCode = (hashCode * 59) + this.TokenCount.GetHashCode();
                }
                if (this.TotalPoolCount != null)
                {
                    hashCode = (hashCode * 59) + this.TotalPoolCount.GetHashCode();
                }
                if (this.Updated != null)
                {
                    hashCode = (hashCode * 59) + this.Updated.GetHashCode();
                }
                if (this.UpdatedAtBlock != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAtBlock.GetHashCode();
                }
                if (this.UpdatedAtTransaction != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAtTransaction.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Vid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
