/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// CRYPTOPUNKSCollectionDailySnapshotDTO
    /// </summary>
    [DataContract(Name = "CRYPTOPUNKS.CollectionDailySnapshotDTO")]
    public partial class CRYPTOPUNKSCollectionDailySnapshotDTO : IEquatable<CRYPTOPUNKSCollectionDailySnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CRYPTOPUNKSCollectionDailySnapshotDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">blockNumber.</param>
        /// <param name="vid">vid.</param>
        /// <param name="blockRange">blockRange.</param>
        /// <param name="id">id.</param>
        /// <param name="collection">collection.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="royaltyFee">royaltyFee.</param>
        /// <param name="dailyMinSalePrice">dailyMinSalePrice.</param>
        /// <param name="dailyMaxSalePrice">dailyMaxSalePrice.</param>
        /// <param name="cumulativeTradeVolumeEth">cumulativeTradeVolumeEth.</param>
        /// <param name="dailyTradeVolumeEth">dailyTradeVolumeEth.</param>
        /// <param name="marketplaceRevenueEth">marketplaceRevenueEth.</param>
        /// <param name="creatorRevenueEth">creatorRevenueEth.</param>
        /// <param name="totalRevenueEth">totalRevenueEth.</param>
        /// <param name="tradeCount">tradeCount.</param>
        /// <param name="dailyTradedItemCount">dailyTradedItemCount.</param>
        public CRYPTOPUNKSCollectionDailySnapshotDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), string blockNumber = default(string), long vid = default(long), string blockRange = default(string), string id = default(string), string collection = default(string), string timestamp = default(string), string royaltyFee = default(string), string dailyMinSalePrice = default(string), string dailyMaxSalePrice = default(string), string cumulativeTradeVolumeEth = default(string), string dailyTradeVolumeEth = default(string), string marketplaceRevenueEth = default(string), string creatorRevenueEth = default(string), string totalRevenueEth = default(string), int tradeCount = default(int), int dailyTradedItemCount = default(int))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Vid = vid;
            this.BlockRange = blockRange;
            this.Id = id;
            this.Collection = collection;
            this.Timestamp = timestamp;
            this.RoyaltyFee = royaltyFee;
            this.DailyMinSalePrice = dailyMinSalePrice;
            this.DailyMaxSalePrice = dailyMaxSalePrice;
            this.CumulativeTradeVolumeEth = cumulativeTradeVolumeEth;
            this.DailyTradeVolumeEth = dailyTradeVolumeEth;
            this.MarketplaceRevenueEth = marketplaceRevenueEth;
            this.CreatorRevenueEth = creatorRevenueEth;
            this.TotalRevenueEth = totalRevenueEth;
            this.TradeCount = tradeCount;
            this.DailyTradedItemCount = dailyTradedItemCount;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Gets or Sets BlockNumber
        /// </summary>
        [DataMember(Name = "block_number", EmitDefaultValue = true)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name = "vid", EmitDefaultValue = false)]
        public long Vid { get; set; }

        /// <summary>
        /// Gets or Sets BlockRange
        /// </summary>
        [DataMember(Name = "block_range", EmitDefaultValue = true)]
        public string BlockRange { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Collection
        /// </summary>
        [DataMember(Name = "collection", EmitDefaultValue = true)]
        public string Collection { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets RoyaltyFee
        /// </summary>
        [DataMember(Name = "royalty_fee", EmitDefaultValue = true)]
        public string RoyaltyFee { get; set; }

        /// <summary>
        /// Gets or Sets DailyMinSalePrice
        /// </summary>
        [DataMember(Name = "daily_min_sale_price", EmitDefaultValue = true)]
        public string DailyMinSalePrice { get; set; }

        /// <summary>
        /// Gets or Sets DailyMaxSalePrice
        /// </summary>
        [DataMember(Name = "daily_max_sale_price", EmitDefaultValue = true)]
        public string DailyMaxSalePrice { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeTradeVolumeEth
        /// </summary>
        [DataMember(Name = "cumulative_trade_volume_eth", EmitDefaultValue = true)]
        public string CumulativeTradeVolumeEth { get; set; }

        /// <summary>
        /// Gets or Sets DailyTradeVolumeEth
        /// </summary>
        [DataMember(Name = "daily_trade_volume_eth", EmitDefaultValue = true)]
        public string DailyTradeVolumeEth { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceRevenueEth
        /// </summary>
        [DataMember(Name = "marketplace_revenue_eth", EmitDefaultValue = true)]
        public string MarketplaceRevenueEth { get; set; }

        /// <summary>
        /// Gets or Sets CreatorRevenueEth
        /// </summary>
        [DataMember(Name = "creator_revenue_eth", EmitDefaultValue = true)]
        public string CreatorRevenueEth { get; set; }

        /// <summary>
        /// Gets or Sets TotalRevenueEth
        /// </summary>
        [DataMember(Name = "total_revenue_eth", EmitDefaultValue = true)]
        public string TotalRevenueEth { get; set; }

        /// <summary>
        /// Gets or Sets TradeCount
        /// </summary>
        [DataMember(Name = "trade_count", EmitDefaultValue = false)]
        public int TradeCount { get; set; }

        /// <summary>
        /// Gets or Sets DailyTradedItemCount
        /// </summary>
        [DataMember(Name = "daily_traded_item_count", EmitDefaultValue = false)]
        public int DailyTradedItemCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CRYPTOPUNKSCollectionDailySnapshotDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("  BlockRange: ").Append(BlockRange).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  RoyaltyFee: ").Append(RoyaltyFee).Append("\n");
            sb.Append("  DailyMinSalePrice: ").Append(DailyMinSalePrice).Append("\n");
            sb.Append("  DailyMaxSalePrice: ").Append(DailyMaxSalePrice).Append("\n");
            sb.Append("  CumulativeTradeVolumeEth: ").Append(CumulativeTradeVolumeEth).Append("\n");
            sb.Append("  DailyTradeVolumeEth: ").Append(DailyTradeVolumeEth).Append("\n");
            sb.Append("  MarketplaceRevenueEth: ").Append(MarketplaceRevenueEth).Append("\n");
            sb.Append("  CreatorRevenueEth: ").Append(CreatorRevenueEth).Append("\n");
            sb.Append("  TotalRevenueEth: ").Append(TotalRevenueEth).Append("\n");
            sb.Append("  TradeCount: ").Append(TradeCount).Append("\n");
            sb.Append("  DailyTradedItemCount: ").Append(DailyTradedItemCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CRYPTOPUNKSCollectionDailySnapshotDTO);
        }

        /// <summary>
        /// Returns true if CRYPTOPUNKSCollectionDailySnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CRYPTOPUNKSCollectionDailySnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CRYPTOPUNKSCollectionDailySnapshotDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Vid == input.Vid ||
                    this.Vid.Equals(input.Vid)
                ) && 
                (
                    this.BlockRange == input.BlockRange ||
                    (this.BlockRange != null &&
                    this.BlockRange.Equals(input.BlockRange))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.RoyaltyFee == input.RoyaltyFee ||
                    (this.RoyaltyFee != null &&
                    this.RoyaltyFee.Equals(input.RoyaltyFee))
                ) && 
                (
                    this.DailyMinSalePrice == input.DailyMinSalePrice ||
                    (this.DailyMinSalePrice != null &&
                    this.DailyMinSalePrice.Equals(input.DailyMinSalePrice))
                ) && 
                (
                    this.DailyMaxSalePrice == input.DailyMaxSalePrice ||
                    (this.DailyMaxSalePrice != null &&
                    this.DailyMaxSalePrice.Equals(input.DailyMaxSalePrice))
                ) && 
                (
                    this.CumulativeTradeVolumeEth == input.CumulativeTradeVolumeEth ||
                    (this.CumulativeTradeVolumeEth != null &&
                    this.CumulativeTradeVolumeEth.Equals(input.CumulativeTradeVolumeEth))
                ) && 
                (
                    this.DailyTradeVolumeEth == input.DailyTradeVolumeEth ||
                    (this.DailyTradeVolumeEth != null &&
                    this.DailyTradeVolumeEth.Equals(input.DailyTradeVolumeEth))
                ) && 
                (
                    this.MarketplaceRevenueEth == input.MarketplaceRevenueEth ||
                    (this.MarketplaceRevenueEth != null &&
                    this.MarketplaceRevenueEth.Equals(input.MarketplaceRevenueEth))
                ) && 
                (
                    this.CreatorRevenueEth == input.CreatorRevenueEth ||
                    (this.CreatorRevenueEth != null &&
                    this.CreatorRevenueEth.Equals(input.CreatorRevenueEth))
                ) && 
                (
                    this.TotalRevenueEth == input.TotalRevenueEth ||
                    (this.TotalRevenueEth != null &&
                    this.TotalRevenueEth.Equals(input.TotalRevenueEth))
                ) && 
                (
                    this.TradeCount == input.TradeCount ||
                    this.TradeCount.Equals(input.TradeCount)
                ) && 
                (
                    this.DailyTradedItemCount == input.DailyTradedItemCount ||
                    this.DailyTradedItemCount.Equals(input.DailyTradedItemCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                if (this.BlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Vid.GetHashCode();
                if (this.BlockRange != null)
                {
                    hashCode = (hashCode * 59) + this.BlockRange.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Collection != null)
                {
                    hashCode = (hashCode * 59) + this.Collection.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.RoyaltyFee != null)
                {
                    hashCode = (hashCode * 59) + this.RoyaltyFee.GetHashCode();
                }
                if (this.DailyMinSalePrice != null)
                {
                    hashCode = (hashCode * 59) + this.DailyMinSalePrice.GetHashCode();
                }
                if (this.DailyMaxSalePrice != null)
                {
                    hashCode = (hashCode * 59) + this.DailyMaxSalePrice.GetHashCode();
                }
                if (this.CumulativeTradeVolumeEth != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeTradeVolumeEth.GetHashCode();
                }
                if (this.DailyTradeVolumeEth != null)
                {
                    hashCode = (hashCode * 59) + this.DailyTradeVolumeEth.GetHashCode();
                }
                if (this.MarketplaceRevenueEth != null)
                {
                    hashCode = (hashCode * 59) + this.MarketplaceRevenueEth.GetHashCode();
                }
                if (this.CreatorRevenueEth != null)
                {
                    hashCode = (hashCode * 59) + this.CreatorRevenueEth.GetHashCode();
                }
                if (this.TotalRevenueEth != null)
                {
                    hashCode = (hashCode * 59) + this.TotalRevenueEth.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TradeCount.GetHashCode();
                hashCode = (hashCode * 59) + this.DailyTradedItemCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
