/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// CRYPTOPUNKSMarketPlaceDTO
    /// </summary>
    [DataContract(Name = "CRYPTOPUNKS.MarketPlaceDTO")]
    public partial class CRYPTOPUNKSMarketPlaceDTO : IEquatable<CRYPTOPUNKSMarketPlaceDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CRYPTOPUNKSMarketPlaceDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="vid">vid.</param>
        /// <param name="blockRange">blockRange.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="slug">slug.</param>
        /// <param name="schemaVersion">schemaVersion.</param>
        /// <param name="subgraphVersion">subgraphVersion.</param>
        /// <param name="methodologyVersion">methodologyVersion.</param>
        /// <param name="collectionCount">collectionCount.</param>
        /// <param name="tradeCount">tradeCount.</param>
        /// <param name="cumulativeTradeVolumeEth">cumulativeTradeVolumeEth.</param>
        /// <param name="marketplaceRevenueEth">marketplaceRevenueEth.</param>
        /// <param name="creatorRevenueEth">creatorRevenueEth.</param>
        /// <param name="totalRevenueEth">totalRevenueEth.</param>
        /// <param name="cumulativeUniqueTraders">cumulativeUniqueTraders.</param>
        public CRYPTOPUNKSMarketPlaceDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), long vid = default(long), string blockRange = default(string), string id = default(string), string name = default(string), string slug = default(string), string schemaVersion = default(string), string subgraphVersion = default(string), string methodologyVersion = default(string), int collectionCount = default(int), int tradeCount = default(int), string cumulativeTradeVolumeEth = default(string), string marketplaceRevenueEth = default(string), string creatorRevenueEth = default(string), string totalRevenueEth = default(string), int cumulativeUniqueTraders = default(int))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Vid = vid;
            this.BlockRange = blockRange;
            this.Id = id;
            this.Name = name;
            this.Slug = slug;
            this.SchemaVersion = schemaVersion;
            this.SubgraphVersion = subgraphVersion;
            this.MethodologyVersion = methodologyVersion;
            this.CollectionCount = collectionCount;
            this.TradeCount = tradeCount;
            this.CumulativeTradeVolumeEth = cumulativeTradeVolumeEth;
            this.MarketplaceRevenueEth = marketplaceRevenueEth;
            this.CreatorRevenueEth = creatorRevenueEth;
            this.TotalRevenueEth = totalRevenueEth;
            this.CumulativeUniqueTraders = cumulativeUniqueTraders;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name = "vid", EmitDefaultValue = false)]
        public long Vid { get; set; }

        /// <summary>
        /// Gets or Sets BlockRange
        /// </summary>
        [DataMember(Name = "block_range", EmitDefaultValue = true)]
        public string BlockRange { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name = "slug", EmitDefaultValue = true)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [DataMember(Name = "schema_version", EmitDefaultValue = true)]
        public string SchemaVersion { get; set; }

        /// <summary>
        /// Gets or Sets SubgraphVersion
        /// </summary>
        [DataMember(Name = "subgraph_version", EmitDefaultValue = true)]
        public string SubgraphVersion { get; set; }

        /// <summary>
        /// Gets or Sets MethodologyVersion
        /// </summary>
        [DataMember(Name = "methodology_version", EmitDefaultValue = true)]
        public string MethodologyVersion { get; set; }

        /// <summary>
        /// Gets or Sets CollectionCount
        /// </summary>
        [DataMember(Name = "collection_count", EmitDefaultValue = false)]
        public int CollectionCount { get; set; }

        /// <summary>
        /// Gets or Sets TradeCount
        /// </summary>
        [DataMember(Name = "trade_count", EmitDefaultValue = false)]
        public int TradeCount { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeTradeVolumeEth
        /// </summary>
        [DataMember(Name = "cumulative_trade_volume_eth", EmitDefaultValue = true)]
        public string CumulativeTradeVolumeEth { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceRevenueEth
        /// </summary>
        [DataMember(Name = "marketplace_revenue_eth", EmitDefaultValue = true)]
        public string MarketplaceRevenueEth { get; set; }

        /// <summary>
        /// Gets or Sets CreatorRevenueEth
        /// </summary>
        [DataMember(Name = "creator_revenue_eth", EmitDefaultValue = true)]
        public string CreatorRevenueEth { get; set; }

        /// <summary>
        /// Gets or Sets TotalRevenueEth
        /// </summary>
        [DataMember(Name = "total_revenue_eth", EmitDefaultValue = true)]
        public string TotalRevenueEth { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeUniqueTraders
        /// </summary>
        [DataMember(Name = "cumulative_unique_traders", EmitDefaultValue = false)]
        public int CumulativeUniqueTraders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CRYPTOPUNKSMarketPlaceDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("  BlockRange: ").Append(BlockRange).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  SubgraphVersion: ").Append(SubgraphVersion).Append("\n");
            sb.Append("  MethodologyVersion: ").Append(MethodologyVersion).Append("\n");
            sb.Append("  CollectionCount: ").Append(CollectionCount).Append("\n");
            sb.Append("  TradeCount: ").Append(TradeCount).Append("\n");
            sb.Append("  CumulativeTradeVolumeEth: ").Append(CumulativeTradeVolumeEth).Append("\n");
            sb.Append("  MarketplaceRevenueEth: ").Append(MarketplaceRevenueEth).Append("\n");
            sb.Append("  CreatorRevenueEth: ").Append(CreatorRevenueEth).Append("\n");
            sb.Append("  TotalRevenueEth: ").Append(TotalRevenueEth).Append("\n");
            sb.Append("  CumulativeUniqueTraders: ").Append(CumulativeUniqueTraders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CRYPTOPUNKSMarketPlaceDTO);
        }

        /// <summary>
        /// Returns true if CRYPTOPUNKSMarketPlaceDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CRYPTOPUNKSMarketPlaceDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CRYPTOPUNKSMarketPlaceDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.Vid == input.Vid ||
                    this.Vid.Equals(input.Vid)
                ) && 
                (
                    this.BlockRange == input.BlockRange ||
                    (this.BlockRange != null &&
                    this.BlockRange.Equals(input.BlockRange))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.SchemaVersion == input.SchemaVersion ||
                    (this.SchemaVersion != null &&
                    this.SchemaVersion.Equals(input.SchemaVersion))
                ) && 
                (
                    this.SubgraphVersion == input.SubgraphVersion ||
                    (this.SubgraphVersion != null &&
                    this.SubgraphVersion.Equals(input.SubgraphVersion))
                ) && 
                (
                    this.MethodologyVersion == input.MethodologyVersion ||
                    (this.MethodologyVersion != null &&
                    this.MethodologyVersion.Equals(input.MethodologyVersion))
                ) && 
                (
                    this.CollectionCount == input.CollectionCount ||
                    this.CollectionCount.Equals(input.CollectionCount)
                ) && 
                (
                    this.TradeCount == input.TradeCount ||
                    this.TradeCount.Equals(input.TradeCount)
                ) && 
                (
                    this.CumulativeTradeVolumeEth == input.CumulativeTradeVolumeEth ||
                    (this.CumulativeTradeVolumeEth != null &&
                    this.CumulativeTradeVolumeEth.Equals(input.CumulativeTradeVolumeEth))
                ) && 
                (
                    this.MarketplaceRevenueEth == input.MarketplaceRevenueEth ||
                    (this.MarketplaceRevenueEth != null &&
                    this.MarketplaceRevenueEth.Equals(input.MarketplaceRevenueEth))
                ) && 
                (
                    this.CreatorRevenueEth == input.CreatorRevenueEth ||
                    (this.CreatorRevenueEth != null &&
                    this.CreatorRevenueEth.Equals(input.CreatorRevenueEth))
                ) && 
                (
                    this.TotalRevenueEth == input.TotalRevenueEth ||
                    (this.TotalRevenueEth != null &&
                    this.TotalRevenueEth.Equals(input.TotalRevenueEth))
                ) && 
                (
                    this.CumulativeUniqueTraders == input.CumulativeUniqueTraders ||
                    this.CumulativeUniqueTraders.Equals(input.CumulativeUniqueTraders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Vid.GetHashCode();
                if (this.BlockRange != null)
                {
                    hashCode = (hashCode * 59) + this.BlockRange.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Slug != null)
                {
                    hashCode = (hashCode * 59) + this.Slug.GetHashCode();
                }
                if (this.SchemaVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SchemaVersion.GetHashCode();
                }
                if (this.SubgraphVersion != null)
                {
                    hashCode = (hashCode * 59) + this.SubgraphVersion.GetHashCode();
                }
                if (this.MethodologyVersion != null)
                {
                    hashCode = (hashCode * 59) + this.MethodologyVersion.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CollectionCount.GetHashCode();
                hashCode = (hashCode * 59) + this.TradeCount.GetHashCode();
                if (this.CumulativeTradeVolumeEth != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeTradeVolumeEth.GetHashCode();
                }
                if (this.MarketplaceRevenueEth != null)
                {
                    hashCode = (hashCode * 59) + this.MarketplaceRevenueEth.GetHashCode();
                }
                if (this.CreatorRevenueEth != null)
                {
                    hashCode = (hashCode * 59) + this.CreatorRevenueEth.GetHashCode();
                }
                if (this.TotalRevenueEth != null)
                {
                    hashCode = (hashCode * 59) + this.TotalRevenueEth.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CumulativeUniqueTraders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
