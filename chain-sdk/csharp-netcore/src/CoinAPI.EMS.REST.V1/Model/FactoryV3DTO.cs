/*
 * OnChain API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// FactoryV3DTO
    /// </summary>
    [DataContract(Name = "FactoryV3DTO")]
    public partial class FactoryV3DTO : IEquatable<FactoryV3DTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FactoryV3DTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">blockNumber.</param>
        /// <param name="id">id.</param>
        /// <param name="poolCount">poolCount.</param>
        /// <param name="txCount">txCount.</param>
        /// <param name="totalVolumeUsd">totalVolumeUsd.</param>
        /// <param name="totalVolumeEth">totalVolumeEth.</param>
        /// <param name="totalFeesUsd">totalFeesUsd.</param>
        /// <param name="totalFeesEth">totalFeesEth.</param>
        /// <param name="untrackedVolumeUsd">untrackedVolumeUsd.</param>
        /// <param name="totalValueLockedUsd">totalValueLockedUsd.</param>
        /// <param name="totalValueLockedEth">totalValueLockedEth.</param>
        /// <param name="totalValueLockedUsdUntracked">totalValueLockedUsdUntracked.</param>
        /// <param name="totalValueLockedEthUntracked">totalValueLockedEthUntracked.</param>
        /// <param name="owner">owner.</param>
        /// <param name="vid">vid.</param>
        public FactoryV3DTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), string poolCount = default(string), string txCount = default(string), string totalVolumeUsd = default(string), string totalVolumeEth = default(string), string totalFeesUsd = default(string), string totalFeesEth = default(string), string untrackedVolumeUsd = default(string), string totalValueLockedUsd = default(string), string totalValueLockedEth = default(string), string totalValueLockedUsdUntracked = default(string), string totalValueLockedEthUntracked = default(string), string owner = default(string), long vid = default(long))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.PoolCount = poolCount;
            this.TxCount = txCount;
            this.TotalVolumeUsd = totalVolumeUsd;
            this.TotalVolumeEth = totalVolumeEth;
            this.TotalFeesUsd = totalFeesUsd;
            this.TotalFeesEth = totalFeesEth;
            this.UntrackedVolumeUsd = untrackedVolumeUsd;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.TotalValueLockedEth = totalValueLockedEth;
            this.TotalValueLockedUsdUntracked = totalValueLockedUsdUntracked;
            this.TotalValueLockedEthUntracked = totalValueLockedEthUntracked;
            this.Owner = owner;
            this.Vid = vid;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Gets or Sets BlockNumber
        /// </summary>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PoolCount
        /// </summary>
        [DataMember(Name = "pool_count", EmitDefaultValue = true)]
        public string PoolCount { get; set; }

        /// <summary>
        /// Gets or Sets TxCount
        /// </summary>
        [DataMember(Name = "tx_count", EmitDefaultValue = true)]
        public string TxCount { get; set; }

        /// <summary>
        /// Gets or Sets TotalVolumeUsd
        /// </summary>
        [DataMember(Name = "total_volume_usd", EmitDefaultValue = true)]
        public string TotalVolumeUsd { get; set; }

        /// <summary>
        /// Gets or Sets TotalVolumeEth
        /// </summary>
        [DataMember(Name = "total_volume_eth", EmitDefaultValue = true)]
        public string TotalVolumeEth { get; set; }

        /// <summary>
        /// Gets or Sets TotalFeesUsd
        /// </summary>
        [DataMember(Name = "total_fees_usd", EmitDefaultValue = true)]
        public string TotalFeesUsd { get; set; }

        /// <summary>
        /// Gets or Sets TotalFeesEth
        /// </summary>
        [DataMember(Name = "total_fees_eth", EmitDefaultValue = true)]
        public string TotalFeesEth { get; set; }

        /// <summary>
        /// Gets or Sets UntrackedVolumeUsd
        /// </summary>
        [DataMember(Name = "untracked_volume_usd", EmitDefaultValue = true)]
        public string UntrackedVolumeUsd { get; set; }

        /// <summary>
        /// Gets or Sets TotalValueLockedUsd
        /// </summary>
        [DataMember(Name = "total_value_locked_usd", EmitDefaultValue = true)]
        public string TotalValueLockedUsd { get; set; }

        /// <summary>
        /// Gets or Sets TotalValueLockedEth
        /// </summary>
        [DataMember(Name = "total_value_locked_eth", EmitDefaultValue = true)]
        public string TotalValueLockedEth { get; set; }

        /// <summary>
        /// Gets or Sets TotalValueLockedUsdUntracked
        /// </summary>
        [DataMember(Name = "total_value_locked_usd_untracked", EmitDefaultValue = true)]
        public string TotalValueLockedUsdUntracked { get; set; }

        /// <summary>
        /// Gets or Sets TotalValueLockedEthUntracked
        /// </summary>
        [DataMember(Name = "total_value_locked_eth_untracked", EmitDefaultValue = true)]
        public string TotalValueLockedEthUntracked { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = true)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name = "vid", EmitDefaultValue = false)]
        public long Vid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FactoryV3DTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PoolCount: ").Append(PoolCount).Append("\n");
            sb.Append("  TxCount: ").Append(TxCount).Append("\n");
            sb.Append("  TotalVolumeUsd: ").Append(TotalVolumeUsd).Append("\n");
            sb.Append("  TotalVolumeEth: ").Append(TotalVolumeEth).Append("\n");
            sb.Append("  TotalFeesUsd: ").Append(TotalFeesUsd).Append("\n");
            sb.Append("  TotalFeesEth: ").Append(TotalFeesEth).Append("\n");
            sb.Append("  UntrackedVolumeUsd: ").Append(UntrackedVolumeUsd).Append("\n");
            sb.Append("  TotalValueLockedUsd: ").Append(TotalValueLockedUsd).Append("\n");
            sb.Append("  TotalValueLockedEth: ").Append(TotalValueLockedEth).Append("\n");
            sb.Append("  TotalValueLockedUsdUntracked: ").Append(TotalValueLockedUsdUntracked).Append("\n");
            sb.Append("  TotalValueLockedEthUntracked: ").Append(TotalValueLockedEthUntracked).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FactoryV3DTO);
        }

        /// <summary>
        /// Returns true if FactoryV3DTO instances are equal
        /// </summary>
        /// <param name="input">Instance of FactoryV3DTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FactoryV3DTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PoolCount == input.PoolCount ||
                    (this.PoolCount != null &&
                    this.PoolCount.Equals(input.PoolCount))
                ) && 
                (
                    this.TxCount == input.TxCount ||
                    (this.TxCount != null &&
                    this.TxCount.Equals(input.TxCount))
                ) && 
                (
                    this.TotalVolumeUsd == input.TotalVolumeUsd ||
                    (this.TotalVolumeUsd != null &&
                    this.TotalVolumeUsd.Equals(input.TotalVolumeUsd))
                ) && 
                (
                    this.TotalVolumeEth == input.TotalVolumeEth ||
                    (this.TotalVolumeEth != null &&
                    this.TotalVolumeEth.Equals(input.TotalVolumeEth))
                ) && 
                (
                    this.TotalFeesUsd == input.TotalFeesUsd ||
                    (this.TotalFeesUsd != null &&
                    this.TotalFeesUsd.Equals(input.TotalFeesUsd))
                ) && 
                (
                    this.TotalFeesEth == input.TotalFeesEth ||
                    (this.TotalFeesEth != null &&
                    this.TotalFeesEth.Equals(input.TotalFeesEth))
                ) && 
                (
                    this.UntrackedVolumeUsd == input.UntrackedVolumeUsd ||
                    (this.UntrackedVolumeUsd != null &&
                    this.UntrackedVolumeUsd.Equals(input.UntrackedVolumeUsd))
                ) && 
                (
                    this.TotalValueLockedUsd == input.TotalValueLockedUsd ||
                    (this.TotalValueLockedUsd != null &&
                    this.TotalValueLockedUsd.Equals(input.TotalValueLockedUsd))
                ) && 
                (
                    this.TotalValueLockedEth == input.TotalValueLockedEth ||
                    (this.TotalValueLockedEth != null &&
                    this.TotalValueLockedEth.Equals(input.TotalValueLockedEth))
                ) && 
                (
                    this.TotalValueLockedUsdUntracked == input.TotalValueLockedUsdUntracked ||
                    (this.TotalValueLockedUsdUntracked != null &&
                    this.TotalValueLockedUsdUntracked.Equals(input.TotalValueLockedUsdUntracked))
                ) && 
                (
                    this.TotalValueLockedEthUntracked == input.TotalValueLockedEthUntracked ||
                    (this.TotalValueLockedEthUntracked != null &&
                    this.TotalValueLockedEthUntracked.Equals(input.TotalValueLockedEthUntracked))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Vid == input.Vid ||
                    this.Vid.Equals(input.Vid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PoolCount != null)
                {
                    hashCode = (hashCode * 59) + this.PoolCount.GetHashCode();
                }
                if (this.TxCount != null)
                {
                    hashCode = (hashCode * 59) + this.TxCount.GetHashCode();
                }
                if (this.TotalVolumeUsd != null)
                {
                    hashCode = (hashCode * 59) + this.TotalVolumeUsd.GetHashCode();
                }
                if (this.TotalVolumeEth != null)
                {
                    hashCode = (hashCode * 59) + this.TotalVolumeEth.GetHashCode();
                }
                if (this.TotalFeesUsd != null)
                {
                    hashCode = (hashCode * 59) + this.TotalFeesUsd.GetHashCode();
                }
                if (this.TotalFeesEth != null)
                {
                    hashCode = (hashCode * 59) + this.TotalFeesEth.GetHashCode();
                }
                if (this.UntrackedVolumeUsd != null)
                {
                    hashCode = (hashCode * 59) + this.UntrackedVolumeUsd.GetHashCode();
                }
                if (this.TotalValueLockedUsd != null)
                {
                    hashCode = (hashCode * 59) + this.TotalValueLockedUsd.GetHashCode();
                }
                if (this.TotalValueLockedEth != null)
                {
                    hashCode = (hashCode * 59) + this.TotalValueLockedEth.GetHashCode();
                }
                if (this.TotalValueLockedUsdUntracked != null)
                {
                    hashCode = (hashCode * 59) + this.TotalValueLockedUsdUntracked.GetHashCode();
                }
                if (this.TotalValueLockedEthUntracked != null)
                {
                    hashCode = (hashCode * 59) + this.TotalValueLockedEthUntracked.GetHashCode();
                }
                if (this.Owner != null)
                {
                    hashCode = (hashCode * 59) + this.Owner.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Vid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
