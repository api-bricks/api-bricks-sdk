/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// A type collecting global stats about this instance of Gnosis Protocol.
    /// </summary>
    [DataContract(Name = "Dex.StatsDTO")]
    public partial class DexStatsDTO : IEquatable<DexStatsDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DexStatsDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id">id.</param>
        /// <param name="volumeInOwl">The total volume denominated in OWL (all sell amounts combined)..</param>
        /// <param name="utilityInOwl">The total trader surplus in OWL..</param>
        /// <param name="owlBurnt">The total amount of OWL burnt (equivalent to fees rewarded to solvers)..</param>
        /// <param name="settledBatchCount">The total number of settled batches..</param>
        /// <param name="settledTradeCount">The total number of settled trades..</param>
        /// <param name="listedTokens">The number of listed tokens..</param>
        /// <param name="vid">vid.</param>
        public DexStatsDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), string volumeInOwl = default(string), string utilityInOwl = default(string), string owlBurnt = default(string), int settledBatchCount = default(int), int settledTradeCount = default(int), int listedTokens = default(int), long vid = default(long))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.VolumeInOwl = volumeInOwl;
            this.UtilityInOwl = utilityInOwl;
            this.OwlBurnt = owlBurnt;
            this.SettledBatchCount = settledBatchCount;
            this.SettledTradeCount = settledTradeCount;
            this.ListedTokens = listedTokens;
            this.Vid = vid;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The total volume denominated in OWL (all sell amounts combined).
        /// </summary>
        /// <value>The total volume denominated in OWL (all sell amounts combined).</value>
        [DataMember(Name = "volume_in_owl", EmitDefaultValue = true)]
        public string VolumeInOwl { get; set; }

        /// <summary>
        /// The total trader surplus in OWL.
        /// </summary>
        /// <value>The total trader surplus in OWL.</value>
        [DataMember(Name = "utility_in_owl", EmitDefaultValue = true)]
        public string UtilityInOwl { get; set; }

        /// <summary>
        /// The total amount of OWL burnt (equivalent to fees rewarded to solvers).
        /// </summary>
        /// <value>The total amount of OWL burnt (equivalent to fees rewarded to solvers).</value>
        [DataMember(Name = "owl_burnt", EmitDefaultValue = true)]
        public string OwlBurnt { get; set; }

        /// <summary>
        /// The total number of settled batches.
        /// </summary>
        /// <value>The total number of settled batches.</value>
        [DataMember(Name = "settled_batch_count", EmitDefaultValue = false)]
        public int SettledBatchCount { get; set; }

        /// <summary>
        /// The total number of settled trades.
        /// </summary>
        /// <value>The total number of settled trades.</value>
        [DataMember(Name = "settled_trade_count", EmitDefaultValue = false)]
        public int SettledTradeCount { get; set; }

        /// <summary>
        /// The number of listed tokens.
        /// </summary>
        /// <value>The number of listed tokens.</value>
        [DataMember(Name = "listed_tokens", EmitDefaultValue = false)]
        public int ListedTokens { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name = "vid", EmitDefaultValue = false)]
        public long Vid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DexStatsDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VolumeInOwl: ").Append(VolumeInOwl).Append("\n");
            sb.Append("  UtilityInOwl: ").Append(UtilityInOwl).Append("\n");
            sb.Append("  OwlBurnt: ").Append(OwlBurnt).Append("\n");
            sb.Append("  SettledBatchCount: ").Append(SettledBatchCount).Append("\n");
            sb.Append("  SettledTradeCount: ").Append(SettledTradeCount).Append("\n");
            sb.Append("  ListedTokens: ").Append(ListedTokens).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DexStatsDTO);
        }

        /// <summary>
        /// Returns true if DexStatsDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DexStatsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DexStatsDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.VolumeInOwl == input.VolumeInOwl ||
                    (this.VolumeInOwl != null &&
                    this.VolumeInOwl.Equals(input.VolumeInOwl))
                ) && 
                (
                    this.UtilityInOwl == input.UtilityInOwl ||
                    (this.UtilityInOwl != null &&
                    this.UtilityInOwl.Equals(input.UtilityInOwl))
                ) && 
                (
                    this.OwlBurnt == input.OwlBurnt ||
                    (this.OwlBurnt != null &&
                    this.OwlBurnt.Equals(input.OwlBurnt))
                ) && 
                (
                    this.SettledBatchCount == input.SettledBatchCount ||
                    this.SettledBatchCount.Equals(input.SettledBatchCount)
                ) && 
                (
                    this.SettledTradeCount == input.SettledTradeCount ||
                    this.SettledTradeCount.Equals(input.SettledTradeCount)
                ) && 
                (
                    this.ListedTokens == input.ListedTokens ||
                    this.ListedTokens.Equals(input.ListedTokens)
                ) && 
                (
                    this.Vid == input.Vid ||
                    this.Vid.Equals(input.Vid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.VolumeInOwl != null)
                {
                    hashCode = (hashCode * 59) + this.VolumeInOwl.GetHashCode();
                }
                if (this.UtilityInOwl != null)
                {
                    hashCode = (hashCode * 59) + this.UtilityInOwl.GetHashCode();
                }
                if (this.OwlBurnt != null)
                {
                    hashCode = (hashCode * 59) + this.OwlBurnt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SettledBatchCount.GetHashCode();
                hashCode = (hashCode * 59) + this.SettledTradeCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ListedTokens.GetHashCode();
                hashCode = (hashCode * 59) + this.Vid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
