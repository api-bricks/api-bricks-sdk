/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// The Sushiswap Factory entity is responsible for storing aggregate information across all Sushiswap pairs. It can be used to view stats about total liquidity, volume, amount of pairs and more.
    /// </summary>
    [DataContract(Name = "Sushiswap.FactoryDTO")]
    public partial class SushiswapFactoryDTO : IEquatable<SushiswapFactoryDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SushiswapFactoryDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id">Factory address..</param>
        /// <param name="pairCount">Amount of pairs created by the Sushiswap factory..</param>
        /// <param name="volumeUsd">All time USD volume across all pairs (USD is derived)..</param>
        /// <param name="volumeEth">All time volume in ETH across all pairs (ETH is derived)..</param>
        /// <param name="untrackedVolumeUsd">Untracked volume USD..</param>
        /// <param name="liquidityUsd">Total liquidity across all pairs stored as a derived USD amount..</param>
        /// <param name="liquidityEth">Total liquidity across all pairs stored as a derived ETH amount..</param>
        /// <param name="txCount">All time amount of transactions across all pairs..</param>
        /// <param name="tokenCount">Total count of tokens..</param>
        /// <param name="userCount">Users count..</param>
        /// <param name="vid">vid.</param>
        public SushiswapFactoryDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), string pairCount = default(string), string volumeUsd = default(string), string volumeEth = default(string), string untrackedVolumeUsd = default(string), string liquidityUsd = default(string), string liquidityEth = default(string), string txCount = default(string), string tokenCount = default(string), string userCount = default(string), long vid = default(long))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.PairCount = pairCount;
            this.VolumeUsd = volumeUsd;
            this.VolumeEth = volumeEth;
            this.UntrackedVolumeUsd = untrackedVolumeUsd;
            this.LiquidityUsd = liquidityUsd;
            this.LiquidityEth = liquidityEth;
            this.TxCount = txCount;
            this.TokenCount = tokenCount;
            this.UserCount = userCount;
            this.Vid = vid;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Factory address.
        /// </summary>
        /// <value>Factory address.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Amount of pairs created by the Sushiswap factory.
        /// </summary>
        /// <value>Amount of pairs created by the Sushiswap factory.</value>
        [DataMember(Name = "pair_count", EmitDefaultValue = true)]
        public string PairCount { get; set; }

        /// <summary>
        /// All time USD volume across all pairs (USD is derived).
        /// </summary>
        /// <value>All time USD volume across all pairs (USD is derived).</value>
        [DataMember(Name = "volume_usd", EmitDefaultValue = true)]
        public string VolumeUsd { get; set; }

        /// <summary>
        /// All time volume in ETH across all pairs (ETH is derived).
        /// </summary>
        /// <value>All time volume in ETH across all pairs (ETH is derived).</value>
        [DataMember(Name = "volume_eth", EmitDefaultValue = true)]
        public string VolumeEth { get; set; }

        /// <summary>
        /// Untracked volume USD.
        /// </summary>
        /// <value>Untracked volume USD.</value>
        [DataMember(Name = "untracked_volume_usd", EmitDefaultValue = true)]
        public string UntrackedVolumeUsd { get; set; }

        /// <summary>
        /// Total liquidity across all pairs stored as a derived USD amount.
        /// </summary>
        /// <value>Total liquidity across all pairs stored as a derived USD amount.</value>
        [DataMember(Name = "liquidity_usd", EmitDefaultValue = true)]
        public string LiquidityUsd { get; set; }

        /// <summary>
        /// Total liquidity across all pairs stored as a derived ETH amount.
        /// </summary>
        /// <value>Total liquidity across all pairs stored as a derived ETH amount.</value>
        [DataMember(Name = "liquidity_eth", EmitDefaultValue = true)]
        public string LiquidityEth { get; set; }

        /// <summary>
        /// All time amount of transactions across all pairs.
        /// </summary>
        /// <value>All time amount of transactions across all pairs.</value>
        [DataMember(Name = "tx_count", EmitDefaultValue = true)]
        public string TxCount { get; set; }

        /// <summary>
        /// Total count of tokens.
        /// </summary>
        /// <value>Total count of tokens.</value>
        [DataMember(Name = "token_count", EmitDefaultValue = true)]
        public string TokenCount { get; set; }

        /// <summary>
        /// Users count.
        /// </summary>
        /// <value>Users count.</value>
        [DataMember(Name = "user_count", EmitDefaultValue = true)]
        public string UserCount { get; set; }

        /// <summary>
        /// Gets or Sets Vid
        /// </summary>
        [DataMember(Name = "vid", EmitDefaultValue = false)]
        public long Vid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SushiswapFactoryDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PairCount: ").Append(PairCount).Append("\n");
            sb.Append("  VolumeUsd: ").Append(VolumeUsd).Append("\n");
            sb.Append("  VolumeEth: ").Append(VolumeEth).Append("\n");
            sb.Append("  UntrackedVolumeUsd: ").Append(UntrackedVolumeUsd).Append("\n");
            sb.Append("  LiquidityUsd: ").Append(LiquidityUsd).Append("\n");
            sb.Append("  LiquidityEth: ").Append(LiquidityEth).Append("\n");
            sb.Append("  TxCount: ").Append(TxCount).Append("\n");
            sb.Append("  TokenCount: ").Append(TokenCount).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SushiswapFactoryDTO);
        }

        /// <summary>
        /// Returns true if SushiswapFactoryDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SushiswapFactoryDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SushiswapFactoryDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PairCount == input.PairCount ||
                    (this.PairCount != null &&
                    this.PairCount.Equals(input.PairCount))
                ) && 
                (
                    this.VolumeUsd == input.VolumeUsd ||
                    (this.VolumeUsd != null &&
                    this.VolumeUsd.Equals(input.VolumeUsd))
                ) && 
                (
                    this.VolumeEth == input.VolumeEth ||
                    (this.VolumeEth != null &&
                    this.VolumeEth.Equals(input.VolumeEth))
                ) && 
                (
                    this.UntrackedVolumeUsd == input.UntrackedVolumeUsd ||
                    (this.UntrackedVolumeUsd != null &&
                    this.UntrackedVolumeUsd.Equals(input.UntrackedVolumeUsd))
                ) && 
                (
                    this.LiquidityUsd == input.LiquidityUsd ||
                    (this.LiquidityUsd != null &&
                    this.LiquidityUsd.Equals(input.LiquidityUsd))
                ) && 
                (
                    this.LiquidityEth == input.LiquidityEth ||
                    (this.LiquidityEth != null &&
                    this.LiquidityEth.Equals(input.LiquidityEth))
                ) && 
                (
                    this.TxCount == input.TxCount ||
                    (this.TxCount != null &&
                    this.TxCount.Equals(input.TxCount))
                ) && 
                (
                    this.TokenCount == input.TokenCount ||
                    (this.TokenCount != null &&
                    this.TokenCount.Equals(input.TokenCount))
                ) && 
                (
                    this.UserCount == input.UserCount ||
                    (this.UserCount != null &&
                    this.UserCount.Equals(input.UserCount))
                ) && 
                (
                    this.Vid == input.Vid ||
                    this.Vid.Equals(input.Vid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.PairCount != null)
                {
                    hashCode = (hashCode * 59) + this.PairCount.GetHashCode();
                }
                if (this.VolumeUsd != null)
                {
                    hashCode = (hashCode * 59) + this.VolumeUsd.GetHashCode();
                }
                if (this.VolumeEth != null)
                {
                    hashCode = (hashCode * 59) + this.VolumeEth.GetHashCode();
                }
                if (this.UntrackedVolumeUsd != null)
                {
                    hashCode = (hashCode * 59) + this.UntrackedVolumeUsd.GetHashCode();
                }
                if (this.LiquidityUsd != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidityUsd.GetHashCode();
                }
                if (this.LiquidityEth != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidityEth.GetHashCode();
                }
                if (this.TxCount != null)
                {
                    hashCode = (hashCode * 59) + this.TxCount.GetHashCode();
                }
                if (this.TokenCount != null)
                {
                    hashCode = (hashCode * 59) + this.TokenCount.GetHashCode();
                }
                if (this.UserCount != null)
                {
                    hashCode = (hashCode * 59) + this.UserCount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Vid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
