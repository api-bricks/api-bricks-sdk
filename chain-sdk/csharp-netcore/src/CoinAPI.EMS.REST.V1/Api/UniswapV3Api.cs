/*
 * OnChain API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniswapV3ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GetBundles
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BundleV3DTO&gt;</returns>
        List<BundleV3DTO> ChainsChainIdDappsUniswapv3BundleCurrentGet(string chainId, int operationIndex = 0);

        /// <summary>
        /// GetBundles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BundleV3DTO&gt;</returns>
        ApiResponse<List<BundleV3DTO>> ChainsChainIdDappsUniswapv3BundleCurrentGetWithHttpInfo(string chainId, int operationIndex = 0);
        /// <summary>
        /// GetBurns
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BurnV3DTO&gt;</returns>
        List<BurnV3DTO> ChainsChainIdDappsUniswapv3BurnsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetBurns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BurnV3DTO&gt;</returns>
        ApiResponse<List<BurnV3DTO>> ChainsChainIdDappsUniswapv3BurnsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetFactory
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FactoryV3DTO&gt;</returns>
        List<FactoryV3DTO> ChainsChainIdDappsUniswapv3FactoryCurrentGet(string chainId, int operationIndex = 0);

        /// <summary>
        /// GetFactory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FactoryV3DTO&gt;</returns>
        ApiResponse<List<FactoryV3DTO>> ChainsChainIdDappsUniswapv3FactoryCurrentGetWithHttpInfo(string chainId, int operationIndex = 0);
        /// <summary>
        /// GetMints
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MintV3DTO&gt;</returns>
        List<MintV3DTO> ChainsChainIdDappsUniswapv3MintsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetMints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MintV3DTO&gt;</returns>
        ApiResponse<List<MintV3DTO>> ChainsChainIdDappsUniswapv3MintsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetPools
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PoolV3DTO&gt;</returns>
        List<PoolV3DTO> ChainsChainIdDappsUniswapv3PoolsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetPools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PoolV3DTO&gt;</returns>
        ApiResponse<List<PoolV3DTO>> ChainsChainIdDappsUniswapv3PoolsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetPoolsDayData
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PoolDayDataV3DTO&gt;</returns>
        List<PoolDayDataV3DTO> ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetPoolsDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PoolDayDataV3DTO&gt;</returns>
        ApiResponse<List<PoolDayDataV3DTO>> ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetPoolsHourData
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PoolHourDataV3DTO&gt;</returns>
        List<PoolHourDataV3DTO> ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetPoolsHourData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PoolHourDataV3DTO&gt;</returns>
        ApiResponse<List<PoolHourDataV3DTO>> ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetPositionSnapshot
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PositionSnapshotV3DTO&gt;</returns>
        List<PositionSnapshotV3DTO> ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetPositionSnapshot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PositionSnapshotV3DTO&gt;</returns>
        ApiResponse<List<PositionSnapshotV3DTO>> ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetPositions
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PositionV3DTO&gt;</returns>
        List<PositionV3DTO> ChainsChainIdDappsUniswapv3PositionsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetPositions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PositionV3DTO&gt;</returns>
        ApiResponse<List<PositionV3DTO>> ChainsChainIdDappsUniswapv3PositionsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetSwaps
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SwapV3DTO&gt;</returns>
        List<SwapV3DTO> ChainsChainIdDappsUniswapv3SwapsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetSwaps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SwapV3DTO&gt;</returns>
        ApiResponse<List<SwapV3DTO>> ChainsChainIdDappsUniswapv3SwapsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetTicks
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TickV3DTO&gt;</returns>
        List<TickV3DTO> ChainsChainIdDappsUniswapv3TicksCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetTicks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TickV3DTO&gt;</returns>
        ApiResponse<List<TickV3DTO>> ChainsChainIdDappsUniswapv3TicksCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetTicksDayData
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TickDayDataV3DTO&gt;</returns>
        List<TickDayDataV3DTO> ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetTicksDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TickDayDataV3DTO&gt;</returns>
        ApiResponse<List<TickDayDataV3DTO>> ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetTokens
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TokenV3DTO&gt;</returns>
        List<TokenV3DTO> ChainsChainIdDappsUniswapv3TokensCurrentGet(string chainId, string filterTokenId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetTokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TokenV3DTO&gt;</returns>
        ApiResponse<List<TokenV3DTO>> ChainsChainIdDappsUniswapv3TokensCurrentGetWithHttpInfo(string chainId, string filterTokenId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetTokensDayData
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TokenV3DayDataDTO&gt;</returns>
        List<TokenV3DayDataDTO> ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet(string chainId, string filterTokenId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetTokensDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TokenV3DayDataDTO&gt;</returns>
        ApiResponse<List<TokenV3DayDataDTO>> ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetWithHttpInfo(string chainId, string filterTokenId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetTokensHourData
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TokenHourDataV3DTO&gt;</returns>
        List<TokenHourDataV3DTO> ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet(string chainId, string filterTokenId = default(string), int operationIndex = 0);

        /// <summary>
        /// GetTokensHourData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TokenHourDataV3DTO&gt;</returns>
        ApiResponse<List<TokenHourDataV3DTO>> ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetWithHttpInfo(string chainId, string filterTokenId = default(string), int operationIndex = 0);
        /// <summary>
        /// GetUniswapDayData
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UniswapDayDataV3DTO&gt;</returns>
        List<UniswapDayDataV3DTO> ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet(string chainId, int operationIndex = 0);

        /// <summary>
        /// GetUniswapDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UniswapDayDataV3DTO&gt;</returns>
        ApiResponse<List<UniswapDayDataV3DTO>> ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetWithHttpInfo(string chainId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniswapV3ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GetBundles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BundleV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<BundleV3DTO>> ChainsChainIdDappsUniswapv3BundleCurrentGetAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetBundles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BundleV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BundleV3DTO>>> ChainsChainIdDappsUniswapv3BundleCurrentGetWithHttpInfoAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetBurns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BurnV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<BurnV3DTO>> ChainsChainIdDappsUniswapv3BurnsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetBurns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BurnV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BurnV3DTO>>> ChainsChainIdDappsUniswapv3BurnsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetFactory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FactoryV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<FactoryV3DTO>> ChainsChainIdDappsUniswapv3FactoryCurrentGetAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetFactory
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FactoryV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FactoryV3DTO>>> ChainsChainIdDappsUniswapv3FactoryCurrentGetWithHttpInfoAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetMints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MintV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<MintV3DTO>> ChainsChainIdDappsUniswapv3MintsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetMints
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MintV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MintV3DTO>>> ChainsChainIdDappsUniswapv3MintsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetPools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PoolV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<PoolV3DTO>> ChainsChainIdDappsUniswapv3PoolsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetPools
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PoolV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PoolV3DTO>>> ChainsChainIdDappsUniswapv3PoolsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetPoolsDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PoolDayDataV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<PoolDayDataV3DTO>> ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetPoolsDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PoolDayDataV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PoolDayDataV3DTO>>> ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetPoolsHourData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PoolHourDataV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<PoolHourDataV3DTO>> ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetPoolsHourData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PoolHourDataV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PoolHourDataV3DTO>>> ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetPositionSnapshot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PositionSnapshotV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<PositionSnapshotV3DTO>> ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetPositionSnapshot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PositionSnapshotV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PositionSnapshotV3DTO>>> ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetPositions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PositionV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<PositionV3DTO>> ChainsChainIdDappsUniswapv3PositionsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetPositions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PositionV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PositionV3DTO>>> ChainsChainIdDappsUniswapv3PositionsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetSwaps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SwapV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<SwapV3DTO>> ChainsChainIdDappsUniswapv3SwapsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetSwaps
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SwapV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SwapV3DTO>>> ChainsChainIdDappsUniswapv3SwapsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetTicks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TickV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<TickV3DTO>> ChainsChainIdDappsUniswapv3TicksCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetTicks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TickV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TickV3DTO>>> ChainsChainIdDappsUniswapv3TicksCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetTicksDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TickDayDataV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<TickDayDataV3DTO>> ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetTicksDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TickDayDataV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TickDayDataV3DTO>>> ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetTokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TokenV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<TokenV3DTO>> ChainsChainIdDappsUniswapv3TokensCurrentGetAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetTokens
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TokenV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TokenV3DTO>>> ChainsChainIdDappsUniswapv3TokensCurrentGetWithHttpInfoAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetTokensDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TokenV3DayDataDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TokenV3DayDataDTO>> ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetTokensDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TokenV3DayDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TokenV3DayDataDTO>>> ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetWithHttpInfoAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetTokensHourData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TokenHourDataV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<TokenHourDataV3DTO>> ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetTokensHourData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TokenHourDataV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TokenHourDataV3DTO>>> ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetWithHttpInfoAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GetUniswapDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UniswapDayDataV3DTO&gt;</returns>
        System.Threading.Tasks.Task<List<UniswapDayDataV3DTO>> ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GetUniswapDayData
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UniswapDayDataV3DTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapDayDataV3DTO>>> ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetWithHttpInfoAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniswapV3Api : IUniswapV3ApiSync, IUniswapV3ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UniswapV3Api : IUniswapV3Api
    {
        private CoinAPI.EMS.REST.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV3Api"/> class.
        /// </summary>
        /// <returns></returns>
        public UniswapV3Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV3Api"/> class.
        /// </summary>
        /// <returns></returns>
        public UniswapV3Api(string basePath)
        {
            this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.MergeConfigurations(
                CoinAPI.EMS.REST.V1.Client.GlobalConfiguration.Instance,
                new CoinAPI.EMS.REST.V1.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV3Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UniswapV3Api(CoinAPI.EMS.REST.V1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.MergeConfigurations(
                CoinAPI.EMS.REST.V1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV3Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UniswapV3Api(CoinAPI.EMS.REST.V1.Client.ISynchronousClient client, CoinAPI.EMS.REST.V1.Client.IAsynchronousClient asyncClient, CoinAPI.EMS.REST.V1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.EMS.REST.V1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GetBundles 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BundleV3DTO&gt;</returns>
        public List<BundleV3DTO> ChainsChainIdDappsUniswapv3BundleCurrentGet(string chainId, int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<BundleV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3BundleCurrentGetWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetBundles 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BundleV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<BundleV3DTO>> ChainsChainIdDappsUniswapv3BundleCurrentGetWithHttpInfo(string chainId, int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3BundleCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3BundleCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BundleV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/bundle/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3BundleCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetBundles 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BundleV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BundleV3DTO>> ChainsChainIdDappsUniswapv3BundleCurrentGetAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<BundleV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3BundleCurrentGetWithHttpInfoAsync(chainId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetBundles 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BundleV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<BundleV3DTO>>> ChainsChainIdDappsUniswapv3BundleCurrentGetWithHttpInfoAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3BundleCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3BundleCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BundleV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/bundle/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3BundleCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetBurns 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;BurnV3DTO&gt;</returns>
        public List<BurnV3DTO> ChainsChainIdDappsUniswapv3BurnsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<BurnV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3BurnsCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetBurns 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;BurnV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<BurnV3DTO>> ChainsChainIdDappsUniswapv3BurnsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3BurnsCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3BurnsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<BurnV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/burns/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3BurnsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetBurns 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;BurnV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BurnV3DTO>> ChainsChainIdDappsUniswapv3BurnsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<BurnV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3BurnsCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetBurns 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;BurnV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<BurnV3DTO>>> ChainsChainIdDappsUniswapv3BurnsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3BurnsCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3BurnsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<BurnV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/burns/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3BurnsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetFactory 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FactoryV3DTO&gt;</returns>
        public List<FactoryV3DTO> ChainsChainIdDappsUniswapv3FactoryCurrentGet(string chainId, int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<FactoryV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3FactoryCurrentGetWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetFactory 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FactoryV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<FactoryV3DTO>> ChainsChainIdDappsUniswapv3FactoryCurrentGetWithHttpInfo(string chainId, int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3FactoryCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3FactoryCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FactoryV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/factory/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3FactoryCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetFactory 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FactoryV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FactoryV3DTO>> ChainsChainIdDappsUniswapv3FactoryCurrentGetAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<FactoryV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3FactoryCurrentGetWithHttpInfoAsync(chainId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetFactory 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FactoryV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<FactoryV3DTO>>> ChainsChainIdDappsUniswapv3FactoryCurrentGetWithHttpInfoAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3FactoryCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3FactoryCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FactoryV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/factory/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3FactoryCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetMints 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;MintV3DTO&gt;</returns>
        public List<MintV3DTO> ChainsChainIdDappsUniswapv3MintsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<MintV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3MintsCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMints 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;MintV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<MintV3DTO>> ChainsChainIdDappsUniswapv3MintsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3MintsCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3MintsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MintV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/mints/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3MintsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetMints 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MintV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MintV3DTO>> ChainsChainIdDappsUniswapv3MintsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<MintV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3MintsCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetMints 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MintV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<MintV3DTO>>> ChainsChainIdDappsUniswapv3MintsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3MintsCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3MintsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MintV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/mints/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3MintsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPools 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PoolV3DTO&gt;</returns>
        public List<PoolV3DTO> ChainsChainIdDappsUniswapv3PoolsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3PoolsCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPools 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PoolV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolV3DTO>> ChainsChainIdDappsUniswapv3PoolsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PoolsCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PoolsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PoolV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/pools/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PoolsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPools 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PoolV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PoolV3DTO>> ChainsChainIdDappsUniswapv3PoolsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3PoolsCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPools 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PoolV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolV3DTO>>> ChainsChainIdDappsUniswapv3PoolsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PoolsCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PoolsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PoolV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/pools/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PoolsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPoolsDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PoolDayDataV3DTO&gt;</returns>
        public List<PoolDayDataV3DTO> ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolDayDataV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPoolsDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PoolDayDataV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolDayDataV3DTO>> ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PoolDayDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/poolsDayData/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPoolsDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PoolDayDataV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PoolDayDataV3DTO>> ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolDayDataV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPoolsDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PoolDayDataV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolDayDataV3DTO>>> ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PoolDayDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/poolsDayData/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPoolsHourData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PoolHourDataV3DTO&gt;</returns>
        public List<PoolHourDataV3DTO> ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolHourDataV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPoolsHourData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PoolHourDataV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolHourDataV3DTO>> ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PoolHourDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/poolsHourData/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPoolsHourData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PoolHourDataV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PoolHourDataV3DTO>> ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolHourDataV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPoolsHourData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PoolHourDataV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PoolHourDataV3DTO>>> ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PoolHourDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/poolsHourData/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPositionSnapshot 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PositionSnapshotV3DTO&gt;</returns>
        public List<PositionSnapshotV3DTO> ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PositionSnapshotV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPositionSnapshot 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PositionSnapshotV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PositionSnapshotV3DTO>> ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PositionSnapshotV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/positionSnapshots/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPositionSnapshot 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PositionSnapshotV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PositionSnapshotV3DTO>> ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PositionSnapshotV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPositionSnapshot 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PositionSnapshotV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PositionSnapshotV3DTO>>> ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PositionSnapshotV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/positionSnapshots/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPositions 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PositionV3DTO&gt;</returns>
        public List<PositionV3DTO> ChainsChainIdDappsUniswapv3PositionsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PositionV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3PositionsCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPositions 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PositionV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PositionV3DTO>> ChainsChainIdDappsUniswapv3PositionsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PositionsCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PositionsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PositionV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/positions/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PositionsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetPositions 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PositionV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PositionV3DTO>> ChainsChainIdDappsUniswapv3PositionsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PositionV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3PositionsCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetPositions 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PositionV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PositionV3DTO>>> ChainsChainIdDappsUniswapv3PositionsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3PositionsCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3PositionsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PositionV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/positions/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3PositionsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetSwaps 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;SwapV3DTO&gt;</returns>
        public List<SwapV3DTO> ChainsChainIdDappsUniswapv3SwapsCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<SwapV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3SwapsCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetSwaps 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;SwapV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<SwapV3DTO>> ChainsChainIdDappsUniswapv3SwapsCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3SwapsCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3SwapsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SwapV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/swaps/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3SwapsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetSwaps 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SwapV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<SwapV3DTO>> ChainsChainIdDappsUniswapv3SwapsCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<SwapV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3SwapsCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetSwaps 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SwapV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<SwapV3DTO>>> ChainsChainIdDappsUniswapv3SwapsCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3SwapsCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3SwapsCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SwapV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/swaps/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3SwapsCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTicks 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TickV3DTO&gt;</returns>
        public List<TickV3DTO> ChainsChainIdDappsUniswapv3TicksCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TickV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3TicksCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTicks 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TickV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TickV3DTO>> ChainsChainIdDappsUniswapv3TicksCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TicksCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TicksCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TickV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/ticks/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TicksCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTicks 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TickV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TickV3DTO>> ChainsChainIdDappsUniswapv3TicksCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TickV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3TicksCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTicks 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TickV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TickV3DTO>>> ChainsChainIdDappsUniswapv3TicksCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TicksCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TicksCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TickV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/ticks/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TicksCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTicksDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TickDayDataV3DTO&gt;</returns>
        public List<TickDayDataV3DTO> ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TickDayDataV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetWithHttpInfo(chainId, filterPoolId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTicksDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TickDayDataV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TickDayDataV3DTO>> ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetWithHttpInfo(string chainId, string filterPoolId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TickDayDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/ticksDayData/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTicksDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TickDayDataV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TickDayDataV3DTO>> ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TickDayDataV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetWithHttpInfoAsync(chainId, filterPoolId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTicksDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterPoolId">Filter pool id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TickDayDataV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TickDayDataV3DTO>>> ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetWithHttpInfoAsync(string chainId, string filterPoolId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterPoolId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_pool_id", filterPoolId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TickDayDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/ticksDayData/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTokens 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TokenV3DTO&gt;</returns>
        public List<TokenV3DTO> ChainsChainIdDappsUniswapv3TokensCurrentGet(string chainId, string filterTokenId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3TokensCurrentGetWithHttpInfo(chainId, filterTokenId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTokens 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TokenV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenV3DTO>> ChainsChainIdDappsUniswapv3TokensCurrentGetWithHttpInfo(string chainId, string filterTokenId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TokensCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_token_id", filterTokenId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TokensCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TokenV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/tokens/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TokensCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTokens 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TokenV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TokenV3DTO>> ChainsChainIdDappsUniswapv3TokensCurrentGetAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3TokensCurrentGetWithHttpInfoAsync(chainId, filterTokenId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTokens 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TokenV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenV3DTO>>> ChainsChainIdDappsUniswapv3TokensCurrentGetWithHttpInfoAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TokensCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_token_id", filterTokenId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TokensCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TokenV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/tokens/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TokensCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTokensDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TokenV3DayDataDTO&gt;</returns>
        public List<TokenV3DayDataDTO> ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet(string chainId, string filterTokenId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenV3DayDataDTO>> localVarResponse = ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetWithHttpInfo(chainId, filterTokenId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTokensDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TokenV3DayDataDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenV3DayDataDTO>> ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetWithHttpInfo(string chainId, string filterTokenId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_token_id", filterTokenId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TokenV3DayDataDTO>>("/chains/{chain_id}/dapps/uniswapv3/tokensDayData/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTokensDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TokenV3DayDataDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TokenV3DayDataDTO>> ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenV3DayDataDTO>> localVarResponse = await ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetWithHttpInfoAsync(chainId, filterTokenId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTokensDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TokenV3DayDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenV3DayDataDTO>>> ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetWithHttpInfoAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_token_id", filterTokenId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TokenV3DayDataDTO>>("/chains/{chain_id}/dapps/uniswapv3/tokensDayData/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTokensHourData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;TokenHourDataV3DTO&gt;</returns>
        public List<TokenHourDataV3DTO> ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet(string chainId, string filterTokenId = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenHourDataV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetWithHttpInfo(chainId, filterTokenId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTokensHourData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;TokenHourDataV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenHourDataV3DTO>> ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetWithHttpInfo(string chainId, string filterTokenId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_token_id", filterTokenId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<TokenHourDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/tokensHourData/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetTokensHourData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;TokenHourDataV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TokenHourDataV3DTO>> ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenHourDataV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetWithHttpInfoAsync(chainId, filterTokenId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetTokensHourData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="filterTokenId"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;TokenHourDataV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<TokenHourDataV3DTO>>> ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetWithHttpInfoAsync(string chainId, string filterTokenId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            if (filterTokenId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "filter_token_id", filterTokenId));
            }

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<TokenHourDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/tokensHourData/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetUniswapDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UniswapDayDataV3DTO&gt;</returns>
        public List<UniswapDayDataV3DTO> ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet(string chainId, int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<UniswapDayDataV3DTO>> localVarResponse = ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetUniswapDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UniswapDayDataV3DTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<UniswapDayDataV3DTO>> ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetWithHttpInfo(string chainId, int operationIndex = 0)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet");
            }

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UniswapDayDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/uniswapDayData/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GetUniswapDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UniswapDayDataV3DTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<UniswapDayDataV3DTO>> ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<UniswapDayDataV3DTO>> localVarResponse = await ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetWithHttpInfoAsync(chainId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GetUniswapDayData 
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UniswapDayDataV3DTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<UniswapDayDataV3DTO>>> ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetWithHttpInfoAsync(string chainId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
            {
                throw new CoinAPI.EMS.REST.V1.Client.ApiException(400, "Missing required parameter 'chainId' when calling UniswapV3Api->ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet");
            }


            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("chain_id", CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            localVarRequestOptions.Operation = "UniswapV3Api.ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UniswapDayDataV3DTO>>("/chains/{chain_id}/dapps/uniswapv3/uniswapDayData/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
