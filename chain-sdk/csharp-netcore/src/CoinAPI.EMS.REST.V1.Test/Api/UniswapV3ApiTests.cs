/*
 * OnChain API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Api;
// uncomment below to import models
//using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Test.Api
{
    /// <summary>
    ///  Class for testing UniswapV3Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UniswapV3ApiTests : IDisposable
    {
        private UniswapV3Api instance;

        public UniswapV3ApiTests()
        {
            instance = new UniswapV3Api();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UniswapV3Api
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UniswapV3Api
            //Assert.IsType<UniswapV3Api>(instance);
        }

        /// <summary>
        /// Test UniswapV3GetBundlesCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetBundlesCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UniswapV3GetBundlesCurrent();
            //Assert.IsType<List<UniswapV3BundleV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetBundlesHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetBundlesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.UniswapV3GetBundlesHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<UniswapV3BundleV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetBurnsCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetBurnsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetBurnsCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3BurnV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetBurnsHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetBurnsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetBurnsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3BurnV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetDayDataCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetDayDataCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UniswapV3GetDayDataCurrent();
            //Assert.IsType<List<UniswapV3UniswapDayDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetDayDataHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetDayDataHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.UniswapV3GetDayDataHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<UniswapV3UniswapDayDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetFactoryCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetFactoryCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UniswapV3GetFactoryCurrent();
            //Assert.IsType<List<UniswapV3FactoryV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetFactoryHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetFactoryHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.UniswapV3GetFactoryHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<UniswapV3FactoryV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetMintsCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetMintsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetMintsCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3MintV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetMintsHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetMintsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetMintsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3MintV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPoolsCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetPoolsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetPoolsCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3PoolV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPoolsDayDataCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetPoolsDayDataCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetPoolsDayDataCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3PoolDayDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPoolsDayDataHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetPoolsDayDataHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetPoolsDayDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3PoolDayDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPoolsHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetPoolsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetPoolsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3PoolV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPoolsHourDataCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetPoolsHourDataCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetPoolsHourDataCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3PoolHourDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPoolsHourDataHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetPoolsHourDataHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetPoolsHourDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3PoolHourDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPositionsCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetPositionsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetPositionsCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3PositionV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPositionsHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetPositionsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetPositionsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3PositionV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPositionsSnaphotsHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetPositionsSnaphotsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetPositionsSnaphotsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3PositionSnapshotV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetPositionsSnapshotsCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetPositionsSnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetPositionsSnapshotsCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3PositionSnapshotV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetSwapsCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetSwapsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetSwapsCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3SwapV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetSwapsHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetSwapsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetSwapsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3SwapV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTicksCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetTicksCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetTicksCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3TickV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTicksDayDataCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetTicksDayDataCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterPoolId = null;
            //var response = instance.UniswapV3GetTicksDayDataCurrent(filterPoolId);
            //Assert.IsType<List<UniswapV3TickDayDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTicksDayDataHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetTicksDayDataHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetTicksDayDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3TickDayDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTicksHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetTicksHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.UniswapV3GetTicksHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<UniswapV3TickV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTokensCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetTokensCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterTokenId = null;
            //var response = instance.UniswapV3GetTokensCurrent(filterTokenId);
            //Assert.IsType<List<UniswapV3TokenV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTokensDayDataCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetTokensDayDataCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterTokenId = null;
            //var response = instance.UniswapV3GetTokensDayDataCurrent(filterTokenId);
            //Assert.IsType<List<UniswapV3TokenV3DayDataDTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTokensDayDataHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetTokensDayDataHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.UniswapV3GetTokensDayDataHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<UniswapV3TokenV3DayDataDTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTokensHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetTokensHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.UniswapV3GetTokensHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<UniswapV3TokenV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTokensHourDataCurrent
        /// </summary>
        [Fact]
        public void UniswapV3GetTokensHourDataCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterTokenId = null;
            //var response = instance.UniswapV3GetTokensHourDataCurrent(filterTokenId);
            //Assert.IsType<List<UniswapV3TokenHourDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTokensHourDataHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetTokensHourDataHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.UniswapV3GetTokensHourDataHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<UniswapV3TokenHourDataV3DTO>>(response);
        }

        /// <summary>
        /// Test UniswapV3GetTransactionsHistorical
        /// </summary>
        [Fact]
        public void UniswapV3GetTransactionsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.UniswapV3GetTransactionsHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<UniswapV3TransactionV3DTO>>(response);
        }
    }
}
