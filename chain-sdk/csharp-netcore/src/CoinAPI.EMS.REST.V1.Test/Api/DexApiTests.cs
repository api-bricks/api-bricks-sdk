/*
 * OnChain API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Api;
// uncomment below to import models
//using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Test.Api
{
    /// <summary>
    ///  Class for testing DexApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DexApiTests : IDisposable
    {
        private DexApi instance;

        public DexApiTests()
        {
            instance = new DexApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DexApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DexApi
            //Assert.IsType<DexApi>(instance);
        }

        /// <summary>
        /// Test DexGetBatchDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetBatchDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetBatchDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexBatchDTO>>(response);
        }

        /// <summary>
        /// Test DexGetBatchesHistorical
        /// </summary>
        [Fact]
        public void DexGetBatchesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.DexGetBatchesHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<DexBatchDTO>>(response);
        }

        /// <summary>
        /// Test DexGetDepositDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetDepositDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetDepositDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexDepositDTO>>(response);
        }

        /// <summary>
        /// Test DexGetDepositsHistorical
        /// </summary>
        [Fact]
        public void DexGetDepositsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.DexGetDepositsHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<DexDepositDTO>>(response);
        }

        /// <summary>
        /// Test DexGetOrderDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetOrderDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetOrderDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexOrderDTO>>(response);
        }

        /// <summary>
        /// Test DexGetOrdersHistorical
        /// </summary>
        [Fact]
        public void DexGetOrdersHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.DexGetOrdersHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<DexOrderDTO>>(response);
        }

        /// <summary>
        /// Test DexGetPriceDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetPriceDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetPriceDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexPriceDTO>>(response);
        }

        /// <summary>
        /// Test DexGetPricesHistorical
        /// </summary>
        [Fact]
        public void DexGetPricesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.DexGetPricesHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<DexPriceDTO>>(response);
        }

        /// <summary>
        /// Test DexGetSolutionDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetSolutionDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetSolutionDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexSolutionDTO>>(response);
        }

        /// <summary>
        /// Test DexGetSolutionsHistorical
        /// </summary>
        [Fact]
        public void DexGetSolutionsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.DexGetSolutionsHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<DexSolutionDTO>>(response);
        }

        /// <summary>
        /// Test DexGetStatsDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetStatsDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetStatsDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexStatsDTO>>(response);
        }

        /// <summary>
        /// Test DexGetStatsHistorical
        /// </summary>
        [Fact]
        public void DexGetStatsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.DexGetStatsHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<DexStatsDTO>>(response);
        }

        /// <summary>
        /// Test DexGetTokenDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetTokenDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetTokenDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexTokenDTO>>(response);
        }

        /// <summary>
        /// Test DexGetTokensHistorical
        /// </summary>
        [Fact]
        public void DexGetTokensHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.DexGetTokensHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<DexTokenDTO>>(response);
        }

        /// <summary>
        /// Test DexGetTradeDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetTradeDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetTradeDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexTradeDTO>>(response);
        }

        /// <summary>
        /// Test DexGetTradesHistorical
        /// </summary>
        [Fact]
        public void DexGetTradesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.DexGetTradesHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<DexTradeDTO>>(response);
        }

        /// <summary>
        /// Test DexGetUserDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetUserDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetUserDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexUserDTO>>(response);
        }

        /// <summary>
        /// Test DexGetUsersHistorical
        /// </summary>
        [Fact]
        public void DexGetUsersHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.DexGetUsersHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<DexUserDTO>>(response);
        }

        /// <summary>
        /// Test DexGetWithdrawDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetWithdrawDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetWithdrawDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexWithdrawDTO>>(response);
        }

        /// <summary>
        /// Test DexGetWithdrawRequestDTOsHistorical
        /// </summary>
        [Fact]
        public void DexGetWithdrawRequestDTOsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.DexGetWithdrawRequestDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<DexWithdrawRequestDTO>>(response);
        }

        /// <summary>
        /// Test DexGetWithdrawsHistorical
        /// </summary>
        [Fact]
        public void DexGetWithdrawsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.DexGetWithdrawsHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<DexWithdrawDTO>>(response);
        }

        /// <summary>
        /// Test DexGetWithdrawsRequestsHistorical
        /// </summary>
        [Fact]
        public void DexGetWithdrawsRequestsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.DexGetWithdrawsRequestsHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<DexWithdrawRequestDTO>>(response);
        }
    }
}
