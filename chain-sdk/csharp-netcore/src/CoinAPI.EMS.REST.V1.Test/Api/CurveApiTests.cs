/*
 * OnChain API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Api;
// uncomment below to import models
//using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Test.Api
{
    /// <summary>
    ///  Class for testing CurveApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CurveApiTests : IDisposable
    {
        private CurveApi instance;

        public CurveApiTests()
        {
            instance = new CurveApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CurveApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CurveApi
            //Assert.IsType<CurveApi>(instance);
        }

        /// <summary>
        /// Test CurveGetAccountsHistorical
        /// </summary>
        [Fact]
        public void CurveGetAccountsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string address = null;
            //var response = instance.CurveGetAccountsHistorical(startBlock, endBlock, startDate, endDate, id, address);
            //Assert.IsType<List<CurveAccountDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetAddLiquidityEventsHistorical
        /// </summary>
        [Fact]
        public void CurveGetAddLiquidityEventsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetAddLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveAddLiquidityEventDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetAdminFeeChangeLogsHistorical
        /// </summary>
        [Fact]
        public void CurveGetAdminFeeChangeLogsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetAdminFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveAdminFeeChangeLogDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetAmplificationCoeffChangeLogsHistorical
        /// </summary>
        [Fact]
        public void CurveGetAmplificationCoeffChangeLogsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetAmplificationCoeffChangeLogsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveAmplificationCoeffChangeLogDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetCoinsHistorical
        /// </summary>
        [Fact]
        public void CurveGetCoinsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetCoinsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveCoinDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetContractVersionsHistorical
        /// </summary>
        [Fact]
        public void CurveGetContractVersionsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string address = null;
            //var response = instance.CurveGetContractVersionsHistorical(startBlock, endBlock, startDate, endDate, id, address);
            //Assert.IsType<List<CurveContractVersionDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetContractsHistorical
        /// </summary>
        [Fact]
        public void CurveGetContractsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //var response = instance.CurveGetContractsHistorical(startBlock, endBlock, startDate, endDate, id);
            //Assert.IsType<List<CurveContractDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetDailyVolumesHistorical
        /// </summary>
        [Fact]
        public void CurveGetDailyVolumesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetDailyVolumesHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveDailyVolumeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetExchangesHistorical
        /// </summary>
        [Fact]
        public void CurveGetExchangesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetExchangesHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveExchangeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetFeeChangeLogsHistorical
        /// </summary>
        [Fact]
        public void CurveGetFeeChangeLogsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveFeeChangeLogDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugeDepositsHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugeDepositsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //var response = instance.CurveGetGaugeDepositsHistorical(startBlock, endBlock, startDate, endDate, id);
            //Assert.IsType<List<CurveGaugeDepositDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugeLiquiditysHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugeLiquiditysHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string user = null;
            //var response = instance.CurveGetGaugeLiquiditysHistorical(startBlock, endBlock, startDate, endDate, id, user);
            //Assert.IsType<List<CurveGaugeLiquidityDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugeTotalWeightsHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugeTotalWeightsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //var response = instance.CurveGetGaugeTotalWeightsHistorical(startBlock, endBlock, startDate, endDate, id);
            //Assert.IsType<List<CurveGaugeTotalWeightDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugeTypeWeightsHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugeTypeWeightsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //var response = instance.CurveGetGaugeTypeWeightsHistorical(startBlock, endBlock, startDate, endDate, id);
            //Assert.IsType<List<CurveGaugeTypeWeightDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugeTypesHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugeTypesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string name = null;
            //var response = instance.CurveGetGaugeTypesHistorical(startBlock, endBlock, startDate, endDate, id, name);
            //Assert.IsType<List<CurveGaugeTypeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugeWeightVotesHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugeWeightVotesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string user = null;
            //var response = instance.CurveGetGaugeWeightVotesHistorical(startBlock, endBlock, startDate, endDate, id, user);
            //Assert.IsType<List<CurveGaugeWeightVoteDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugeWeightsHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugeWeightsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //var response = instance.CurveGetGaugeWeightsHistorical(startBlock, endBlock, startDate, endDate, id);
            //Assert.IsType<List<CurveGaugeWeightDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugeWithdrawsHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugeWithdrawsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //var response = instance.CurveGetGaugeWithdrawsHistorical(startBlock, endBlock, startDate, endDate, id);
            //Assert.IsType<List<CurveGaugeWithdrawDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string address = null;
            //string pool = null;
            //var response = instance.CurveGetGaugesHistorical(startBlock, endBlock, startDate, endDate, id, address, pool);
            //Assert.IsType<List<CurveGaugeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetHourlyVolumesHistorical
        /// </summary>
        [Fact]
        public void CurveGetHourlyVolumesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetHourlyVolumesHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveHourlyVolumeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetLpTokensHistorical
        /// </summary>
        [Fact]
        public void CurveGetLpTokensHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string address = null;
            //string name = null;
            //string symbol = null;
            //string pool = null;
            //var response = instance.CurveGetLpTokensHistorical(startBlock, endBlock, startDate, endDate, id, address, name, symbol, pool);
            //Assert.IsType<List<CurveLpTokenDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetPoolsHistorical
        /// </summary>
        [Fact]
        public void CurveGetPoolsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string name = null;
            //var response = instance.CurveGetPoolsHistorical(startBlock, endBlock, startDate, endDate, id, name);
            //Assert.IsType<List<CurvePoolDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetProposalVotesHistorical
        /// </summary>
        [Fact]
        public void CurveGetProposalVotesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //var response = instance.CurveGetProposalVotesHistorical(startBlock, endBlock, startDate, endDate, id);
            //Assert.IsType<List<CurveProposalVoteDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetProposalsHistorical
        /// </summary>
        [Fact]
        public void CurveGetProposalsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //var response = instance.CurveGetProposalsHistorical(startBlock, endBlock, startDate, endDate, id);
            //Assert.IsType<List<CurveProposalDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetRemoveLiquidityEventsHistorical
        /// </summary>
        [Fact]
        public void CurveGetRemoveLiquidityEventsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetRemoveLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveRemoveLiquidityEventDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetRemoveLiquidityOneEventsHistorical
        /// </summary>
        [Fact]
        public void CurveGetRemoveLiquidityOneEventsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetRemoveLiquidityOneEventsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveRemoveLiquidityOneEventDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetSystemStatesHistorical
        /// </summary>
        [Fact]
        public void CurveGetSystemStatesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //var response = instance.CurveGetSystemStatesHistorical(startBlock, endBlock, startDate, endDate, id);
            //Assert.IsType<List<CurveSystemStateDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetTokensHistorical
        /// </summary>
        [Fact]
        public void CurveGetTokensHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string address = null;
            //string name = null;
            //string symbol = null;
            //var response = instance.CurveGetTokensHistorical(startBlock, endBlock, startDate, endDate, id, address, name, symbol);
            //Assert.IsType<List<CurveTokenDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetTransferOwnershipEventsHistorical
        /// </summary>
        [Fact]
        public void CurveGetTransferOwnershipEventsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetTransferOwnershipEventsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveTransferOwnershipEventDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetUnderlyingCoinsHistorical
        /// </summary>
        [Fact]
        public void CurveGetUnderlyingCoinsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetUnderlyingCoinsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveUnderlyingCoinDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetVotingAppsHistorical
        /// </summary>
        [Fact]
        public void CurveGetVotingAppsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string address = null;
            //var response = instance.CurveGetVotingAppsHistorical(startBlock, endBlock, startDate, endDate, id, address);
            //Assert.IsType<List<CurveVotingAppDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetWeeklyVolumesHistorical
        /// </summary>
        [Fact]
        public void CurveGetWeeklyVolumesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string id = null;
            //string pool = null;
            //var response = instance.CurveGetWeeklyVolumesHistorical(startBlock, endBlock, startDate, endDate, id, pool);
            //Assert.IsType<List<CurveWeeklyVolumeDTO>>(response);
        }
    }
}
