/*
 * OnChain API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Api;
// uncomment below to import models
//using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Test.Api
{
    /// <summary>
    ///  Class for testing CurveApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CurveApiTests : IDisposable
    {
        private CurveApi instance;

        public CurveApiTests()
        {
            instance = new CurveApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CurveApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CurveApi
            //Assert.IsType<CurveApi>(instance);
        }

        /// <summary>
        /// Test CurveGetAccountsHistorical
        /// </summary>
        [Fact]
        public void CurveGetAccountsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetAccountsHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveAccountDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetAddLiquidityEventsHistorical
        /// </summary>
        [Fact]
        public void CurveGetAddLiquidityEventsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetAddLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveAddLiquidityEventDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetAdminFeeChangeLogsHistorical
        /// </summary>
        [Fact]
        public void CurveGetAdminFeeChangeLogsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetAdminFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveAdminFeeChangeLogDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetAmplificationCoeffChangeLogsHistorical
        /// </summary>
        [Fact]
        public void CurveGetAmplificationCoeffChangeLogsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetAmplificationCoeffChangeLogsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveAmplificationCoeffChangeLogDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetCoinsHistorical
        /// </summary>
        [Fact]
        public void CurveGetCoinsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetCoinsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveCoinDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetContractsHistorical
        /// </summary>
        [Fact]
        public void CurveGetContractsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetContractsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveContractDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetContractsVersionsHistorical
        /// </summary>
        [Fact]
        public void CurveGetContractsVersionsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetContractsVersionsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveContractVersionDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetDailyVolumesHistorical
        /// </summary>
        [Fact]
        public void CurveGetDailyVolumesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetDailyVolumesHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveDailyVolumeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetExchangesHistorical
        /// </summary>
        [Fact]
        public void CurveGetExchangesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetExchangesHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveExchangeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetFeeChangeLogsHistorical
        /// </summary>
        [Fact]
        public void CurveGetFeeChangeLogsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveFeeChangeLogDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesDepositsHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesDepositsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetGaugesDepositsHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveGaugeDepositDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetGaugesHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveGaugeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesLiquidityHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesLiquidityHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetGaugesLiquidityHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveGaugeLiquidityDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesTotalWeightsHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesTotalWeightsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetGaugesTotalWeightsHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveGaugeTotalWeightDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesTypesHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesTypesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetGaugesTypesHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveGaugeTypeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesTypesWeightsHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesTypesWeightsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetGaugesTypesWeightsHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveGaugeTypeWeightDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesWeightsHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesWeightsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetGaugesWeightsHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveGaugeWeightDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesWeightsVotesHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesWeightsVotesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetGaugesWeightsVotesHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveGaugeWeightVoteDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetGaugesWithdrawHistorical
        /// </summary>
        [Fact]
        public void CurveGetGaugesWithdrawHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetGaugesWithdrawHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveGaugeWithdrawDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetHourlyVolumesHistorical
        /// </summary>
        [Fact]
        public void CurveGetHourlyVolumesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetHourlyVolumesHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveHourlyVolumeDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetLpTokensHistorical
        /// </summary>
        [Fact]
        public void CurveGetLpTokensHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetLpTokensHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveLpTokenDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetPoolsHistorical
        /// </summary>
        [Fact]
        public void CurveGetPoolsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetPoolsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurvePoolDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetProposalsHistorical
        /// </summary>
        [Fact]
        public void CurveGetProposalsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetProposalsHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveProposalDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetProposalsVotesHistorical
        /// </summary>
        [Fact]
        public void CurveGetProposalsVotesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetProposalsVotesHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveProposalVoteDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetRemoveLiquidityEventsHistorical
        /// </summary>
        [Fact]
        public void CurveGetRemoveLiquidityEventsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetRemoveLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveRemoveLiquidityEventDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetRemoveLiquidityOneEventsHistorical
        /// </summary>
        [Fact]
        public void CurveGetRemoveLiquidityOneEventsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetRemoveLiquidityOneEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveRemoveLiquidityOneEventDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetSystemStatesHistorical
        /// </summary>
        [Fact]
        public void CurveGetSystemStatesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetSystemStatesHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveSystemStateDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetTokensHistorical
        /// </summary>
        [Fact]
        public void CurveGetTokensHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string tokenId = null;
            //var response = instance.CurveGetTokensHistorical(startBlock, endBlock, startDate, endDate, tokenId);
            //Assert.IsType<List<CurveTokenDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetTransferOwnershipEventsHistorical
        /// </summary>
        [Fact]
        public void CurveGetTransferOwnershipEventsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetTransferOwnershipEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveTransferOwnershipEventDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetUnderlyingCoinsHistorical
        /// </summary>
        [Fact]
        public void CurveGetUnderlyingCoinsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetUnderlyingCoinsHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveUnderlyingCoinDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetVotingAppsHistorical
        /// </summary>
        [Fact]
        public void CurveGetVotingAppsHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //var response = instance.CurveGetVotingAppsHistorical(startBlock, endBlock, startDate, endDate);
            //Assert.IsType<List<CurveVotingAppDTO>>(response);
        }

        /// <summary>
        /// Test CurveGetWeeklyVolumesHistorical
        /// </summary>
        [Fact]
        public void CurveGetWeeklyVolumesHistoricalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startBlock = null;
            //long? endBlock = null;
            //DateTime? startDate = null;
            //DateTime? endDate = null;
            //string poolId = null;
            //var response = instance.CurveGetWeeklyVolumesHistorical(startBlock, endBlock, startDate, endDate, poolId);
            //Assert.IsType<List<CurveWeeklyVolumeDTO>>(response);
        }
    }
}
