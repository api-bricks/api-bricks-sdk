# coding: utf-8

"""
    On Chain Dapps - REST API

     This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                               # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@coinapi.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DexOrderDTO(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Order submitted by an user. It has a validity (dates) so they can only be executed from/until some given batches. Partial executions of this trades must respect the limit price.
    """


    class MetaOapg:
        
        class properties:
            entry_time = schemas.DateTimeSchema
            recv_time = schemas.DateTimeSchema
            block_number = schemas.Int64Schema
            
            
            class id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class owner(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owner':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            order_id = schemas.Int32Schema
            
            
            class from_batch_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'from_batch_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class from_epoch(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'from_epoch':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class until_batch_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'until_batch_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class until_epoch(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'until_epoch':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class buy_token(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'buy_token':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sell_token(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sell_token':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class price_numerator(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price_numerator':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class price_denominator(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price_denominator':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class max_sell_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'max_sell_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class min_receive_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'min_receive_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sold_volume(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sold_volume':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class bought_volume(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bought_volume':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class create_epoch(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'create_epoch':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cancel_epoch(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cancel_epoch':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class delete_epoch(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'delete_epoch':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class tx_hash(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tx_hash':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class tx_log_index(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tx_log_index':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            vid = schemas.Int64Schema
            __annotations__ = {
                "entry_time": entry_time,
                "recv_time": recv_time,
                "block_number": block_number,
                "id": id,
                "owner": owner,
                "order_id": order_id,
                "from_batch_id": from_batch_id,
                "from_epoch": from_epoch,
                "until_batch_id": until_batch_id,
                "until_epoch": until_epoch,
                "buy_token": buy_token,
                "sell_token": sell_token,
                "price_numerator": price_numerator,
                "price_denominator": price_denominator,
                "max_sell_amount": max_sell_amount,
                "min_receive_amount": min_receive_amount,
                "sold_volume": sold_volume,
                "bought_volume": bought_volume,
                "create_epoch": create_epoch,
                "cancel_epoch": cancel_epoch,
                "delete_epoch": delete_epoch,
                "tx_hash": tx_hash,
                "tx_log_index": tx_log_index,
                "vid": vid,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entry_time"]) -> MetaOapg.properties.entry_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recv_time"]) -> MetaOapg.properties.recv_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block_number"]) -> MetaOapg.properties.block_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_id"]) -> MetaOapg.properties.order_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_batch_id"]) -> MetaOapg.properties.from_batch_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_epoch"]) -> MetaOapg.properties.from_epoch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["until_batch_id"]) -> MetaOapg.properties.until_batch_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["until_epoch"]) -> MetaOapg.properties.until_epoch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buy_token"]) -> MetaOapg.properties.buy_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sell_token"]) -> MetaOapg.properties.sell_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_numerator"]) -> MetaOapg.properties.price_numerator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_denominator"]) -> MetaOapg.properties.price_denominator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_sell_amount"]) -> MetaOapg.properties.max_sell_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_receive_amount"]) -> MetaOapg.properties.min_receive_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sold_volume"]) -> MetaOapg.properties.sold_volume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bought_volume"]) -> MetaOapg.properties.bought_volume: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_epoch"]) -> MetaOapg.properties.create_epoch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancel_epoch"]) -> MetaOapg.properties.cancel_epoch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delete_epoch"]) -> MetaOapg.properties.delete_epoch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tx_hash"]) -> MetaOapg.properties.tx_hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tx_log_index"]) -> MetaOapg.properties.tx_log_index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vid"]) -> MetaOapg.properties.vid: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entry_time"], typing_extensions.Literal["recv_time"], typing_extensions.Literal["block_number"], typing_extensions.Literal["id"], typing_extensions.Literal["owner"], typing_extensions.Literal["order_id"], typing_extensions.Literal["from_batch_id"], typing_extensions.Literal["from_epoch"], typing_extensions.Literal["until_batch_id"], typing_extensions.Literal["until_epoch"], typing_extensions.Literal["buy_token"], typing_extensions.Literal["sell_token"], typing_extensions.Literal["price_numerator"], typing_extensions.Literal["price_denominator"], typing_extensions.Literal["max_sell_amount"], typing_extensions.Literal["min_receive_amount"], typing_extensions.Literal["sold_volume"], typing_extensions.Literal["bought_volume"], typing_extensions.Literal["create_epoch"], typing_extensions.Literal["cancel_epoch"], typing_extensions.Literal["delete_epoch"], typing_extensions.Literal["tx_hash"], typing_extensions.Literal["tx_log_index"], typing_extensions.Literal["vid"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entry_time"]) -> typing.Union[MetaOapg.properties.entry_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recv_time"]) -> typing.Union[MetaOapg.properties.recv_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block_number"]) -> typing.Union[MetaOapg.properties.block_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_id"]) -> typing.Union[MetaOapg.properties.order_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_batch_id"]) -> typing.Union[MetaOapg.properties.from_batch_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_epoch"]) -> typing.Union[MetaOapg.properties.from_epoch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["until_batch_id"]) -> typing.Union[MetaOapg.properties.until_batch_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["until_epoch"]) -> typing.Union[MetaOapg.properties.until_epoch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buy_token"]) -> typing.Union[MetaOapg.properties.buy_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sell_token"]) -> typing.Union[MetaOapg.properties.sell_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_numerator"]) -> typing.Union[MetaOapg.properties.price_numerator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_denominator"]) -> typing.Union[MetaOapg.properties.price_denominator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_sell_amount"]) -> typing.Union[MetaOapg.properties.max_sell_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_receive_amount"]) -> typing.Union[MetaOapg.properties.min_receive_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sold_volume"]) -> typing.Union[MetaOapg.properties.sold_volume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bought_volume"]) -> typing.Union[MetaOapg.properties.bought_volume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_epoch"]) -> typing.Union[MetaOapg.properties.create_epoch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancel_epoch"]) -> typing.Union[MetaOapg.properties.cancel_epoch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delete_epoch"]) -> typing.Union[MetaOapg.properties.delete_epoch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tx_hash"]) -> typing.Union[MetaOapg.properties.tx_hash, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tx_log_index"]) -> typing.Union[MetaOapg.properties.tx_log_index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vid"]) -> typing.Union[MetaOapg.properties.vid, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entry_time"], typing_extensions.Literal["recv_time"], typing_extensions.Literal["block_number"], typing_extensions.Literal["id"], typing_extensions.Literal["owner"], typing_extensions.Literal["order_id"], typing_extensions.Literal["from_batch_id"], typing_extensions.Literal["from_epoch"], typing_extensions.Literal["until_batch_id"], typing_extensions.Literal["until_epoch"], typing_extensions.Literal["buy_token"], typing_extensions.Literal["sell_token"], typing_extensions.Literal["price_numerator"], typing_extensions.Literal["price_denominator"], typing_extensions.Literal["max_sell_amount"], typing_extensions.Literal["min_receive_amount"], typing_extensions.Literal["sold_volume"], typing_extensions.Literal["bought_volume"], typing_extensions.Literal["create_epoch"], typing_extensions.Literal["cancel_epoch"], typing_extensions.Literal["delete_epoch"], typing_extensions.Literal["tx_hash"], typing_extensions.Literal["tx_log_index"], typing_extensions.Literal["vid"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        entry_time: typing.Union[MetaOapg.properties.entry_time, str, datetime, schemas.Unset] = schemas.unset,
        recv_time: typing.Union[MetaOapg.properties.recv_time, str, datetime, schemas.Unset] = schemas.unset,
        block_number: typing.Union[MetaOapg.properties.block_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, None, str, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, None, str, schemas.Unset] = schemas.unset,
        order_id: typing.Union[MetaOapg.properties.order_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        from_batch_id: typing.Union[MetaOapg.properties.from_batch_id, None, str, schemas.Unset] = schemas.unset,
        from_epoch: typing.Union[MetaOapg.properties.from_epoch, None, str, schemas.Unset] = schemas.unset,
        until_batch_id: typing.Union[MetaOapg.properties.until_batch_id, None, str, schemas.Unset] = schemas.unset,
        until_epoch: typing.Union[MetaOapg.properties.until_epoch, None, str, schemas.Unset] = schemas.unset,
        buy_token: typing.Union[MetaOapg.properties.buy_token, None, str, schemas.Unset] = schemas.unset,
        sell_token: typing.Union[MetaOapg.properties.sell_token, None, str, schemas.Unset] = schemas.unset,
        price_numerator: typing.Union[MetaOapg.properties.price_numerator, None, str, schemas.Unset] = schemas.unset,
        price_denominator: typing.Union[MetaOapg.properties.price_denominator, None, str, schemas.Unset] = schemas.unset,
        max_sell_amount: typing.Union[MetaOapg.properties.max_sell_amount, None, str, schemas.Unset] = schemas.unset,
        min_receive_amount: typing.Union[MetaOapg.properties.min_receive_amount, None, str, schemas.Unset] = schemas.unset,
        sold_volume: typing.Union[MetaOapg.properties.sold_volume, None, str, schemas.Unset] = schemas.unset,
        bought_volume: typing.Union[MetaOapg.properties.bought_volume, None, str, schemas.Unset] = schemas.unset,
        create_epoch: typing.Union[MetaOapg.properties.create_epoch, None, str, schemas.Unset] = schemas.unset,
        cancel_epoch: typing.Union[MetaOapg.properties.cancel_epoch, None, str, schemas.Unset] = schemas.unset,
        delete_epoch: typing.Union[MetaOapg.properties.delete_epoch, None, str, schemas.Unset] = schemas.unset,
        tx_hash: typing.Union[MetaOapg.properties.tx_hash, None, str, schemas.Unset] = schemas.unset,
        tx_log_index: typing.Union[MetaOapg.properties.tx_log_index, None, str, schemas.Unset] = schemas.unset,
        vid: typing.Union[MetaOapg.properties.vid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DexOrderDTO':
        return super().__new__(
            cls,
            *_args,
            entry_time=entry_time,
            recv_time=recv_time,
            block_number=block_number,
            id=id,
            owner=owner,
            order_id=order_id,
            from_batch_id=from_batch_id,
            from_epoch=from_epoch,
            until_batch_id=until_batch_id,
            until_epoch=until_epoch,
            buy_token=buy_token,
            sell_token=sell_token,
            price_numerator=price_numerator,
            price_denominator=price_denominator,
            max_sell_amount=max_sell_amount,
            min_receive_amount=min_receive_amount,
            sold_volume=sold_volume,
            bought_volume=bought_volume,
            create_epoch=create_epoch,
            cancel_epoch=cancel_epoch,
            delete_epoch=delete_epoch,
            tx_hash=tx_hash,
            tx_log_index=tx_log_index,
            vid=vid,
            _configuration=_configuration,
        )
