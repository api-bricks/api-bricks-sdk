{-
   OnChain API

    This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

   OpenAPI Version: 3.0.1
   OnChain API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OnChain.Model
-}

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OnChain.Model where

import OnChain.Core
import OnChain.MimeTypes

import Data.Aeson ((.:),(.:!),(.:?),(.=))

import qualified Control.Arrow as P (left)
import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.HashMap.Lazy as HM
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Set as Set
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Time as TI
import qualified Lens.Micro as L
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Control.Applicative ((<|>))
import Control.Applicative (Alternative)
import Data.Function ((&))
import Data.Monoid ((<>))
import Data.Text (Text)
import Prelude (($),(/=),(.),(<$>),(<*>),(>>=),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)

import qualified Prelude as P



-- * Parameter newtypes


-- ** ChainId
newtype ChainId = ChainId { unChainId :: Text } deriving (P.Eq, P.Show)

-- ** EndBlock
newtype EndBlock = EndBlock { unEndBlock :: Integer } deriving (P.Eq, P.Show)

-- ** EndDate
newtype EndDate = EndDate { unEndDate :: DateTime } deriving (P.Eq, P.Show)

-- ** FilterPoolId
newtype FilterPoolId = FilterPoolId { unFilterPoolId :: Text } deriving (P.Eq, P.Show)

-- ** FilterTokenId
newtype FilterTokenId = FilterTokenId { unFilterTokenId :: Text } deriving (P.Eq, P.Show)

-- ** PoolId
newtype PoolId = PoolId { unPoolId :: Text } deriving (P.Eq, P.Show)

-- ** StartBlock
newtype StartBlock = StartBlock { unStartBlock :: Integer } deriving (P.Eq, P.Show)

-- ** StartDate
newtype StartDate = StartDate { unStartDate :: DateTime } deriving (P.Eq, P.Show)

-- ** TokenId
newtype TokenId = TokenId { unTokenId :: Text } deriving (P.Eq, P.Show)

-- * Models


-- ** NumericsBigInteger
-- | NumericsBigInteger
data NumericsBigInteger = NumericsBigInteger
  { numericsBigIntegerIsPowerOfTwo :: !(Maybe Bool) -- ^ /ReadOnly/ "is_power_of_two"
  , numericsBigIntegerIsZero :: !(Maybe Bool) -- ^ /ReadOnly/ "is_zero"
  , numericsBigIntegerIsOne :: !(Maybe Bool) -- ^ /ReadOnly/ "is_one"
  , numericsBigIntegerIsEven :: !(Maybe Bool) -- ^ /ReadOnly/ "is_even"
  , numericsBigIntegerSign :: !(Maybe Int) -- ^ /ReadOnly/ "sign"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON NumericsBigInteger
instance A.FromJSON NumericsBigInteger where
  parseJSON = A.withObject "NumericsBigInteger" $ \o ->
    NumericsBigInteger
      <$> (o .:? "is_power_of_two")
      <*> (o .:? "is_zero")
      <*> (o .:? "is_one")
      <*> (o .:? "is_even")
      <*> (o .:? "sign")

-- | ToJSON NumericsBigInteger
instance A.ToJSON NumericsBigInteger where
  toJSON NumericsBigInteger {..} =
   _omitNulls
      [ "is_power_of_two" .= numericsBigIntegerIsPowerOfTwo
      , "is_zero" .= numericsBigIntegerIsZero
      , "is_one" .= numericsBigIntegerIsOne
      , "is_even" .= numericsBigIntegerIsEven
      , "sign" .= numericsBigIntegerSign
      ]


-- | Construct a value of type 'NumericsBigInteger' (by applying it's required fields, if any)
mkNumericsBigInteger
  :: NumericsBigInteger
mkNumericsBigInteger =
  NumericsBigInteger
  { numericsBigIntegerIsPowerOfTwo = Nothing
  , numericsBigIntegerIsZero = Nothing
  , numericsBigIntegerIsOne = Nothing
  , numericsBigIntegerIsEven = Nothing
  , numericsBigIntegerSign = Nothing
  }

-- ** SushiswapPairDTO
-- | SushiswapPairDTO
-- Information about a pair. Includes references to each token within the pair, volume information, liquidity information, and more. The pair entity mirrors the pair smart contract, and also contains aggregated information about use.
data SushiswapPairDTO = SushiswapPairDTO
  { sushiswapPairDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sushiswapPairDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sushiswapPairDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sushiswapPairDTOId :: !(Maybe Text) -- ^ "id" - Pair contract address.
  , sushiswapPairDTOFactory :: !(Maybe Text) -- ^ "factory" - Factory contract address.
  , sushiswapPairDTOName :: !(Maybe Text) -- ^ "name" - Friendly name, format: &lt;token0 name&gt;-&lt;token1 name&gt;
  , sushiswapPairDTOToken0 :: !(Maybe Text) -- ^ "token_0" - Reference to token0 as stored in pair contract.
  , sushiswapPairDTOToken1 :: !(Maybe Text) -- ^ "token_1" - Reference to token0 as stored in pair contract.
  , sushiswapPairDTOReserve0 :: !(Maybe Text) -- ^ "reserve_0" - Reserve of token0.
  , sushiswapPairDTOReserve1 :: !(Maybe Text) -- ^ "reserve_1" - Reserve of token1.
  , sushiswapPairDTOTotalSupply :: !(Maybe Text) -- ^ "total_supply" - Total supply of liquidity token distributed to LPs.
  , sushiswapPairDTOReserveEth :: !(Maybe Text) -- ^ "reserve_eth" - Total liquidity in pair stored as an amount of ETH.
  , sushiswapPairDTOReserveUsd :: !(Maybe Text) -- ^ "reserve_usd" - Total liquidity amount in pair stored as an amount of USD.
  , sushiswapPairDTOTrackedReserveEth :: !(Maybe Text) -- ^ "tracked_reserve_eth" - Total liquidity with only tracked amount.
  , sushiswapPairDTOToken0Price :: !(Maybe Text) -- ^ "token_0_price" - Token0 per token1.
  , sushiswapPairDTOToken1Price :: !(Maybe Text) -- ^ "token_1_price" - Token1 per token0.
  , sushiswapPairDTOVolumeToken0 :: !(Maybe Text) -- ^ "volume_token_0" - Amount of token0 swapped on this pair.
  , sushiswapPairDTOVolumeToken1 :: !(Maybe Text) -- ^ "volume_token_1" - Amount of token1 swapped on this pair.
  , sushiswapPairDTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Total amount swapped all time in this pair stored in USD (only tracked if USD liquidity is above minimum threshold).
  , sushiswapPairDTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - Total amount swapped all time in this pair stored in USD, no minimum liquidity threshold.
  , sushiswapPairDTOTxCount :: !(Maybe Text) -- ^ "tx_count" - All time amount of transactions on this pair.
  , sushiswapPairDTOLiquidityProviderCount :: !(Maybe Text) -- ^ "liquidity_provider_count" - Total number of LPs.
  , sushiswapPairDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp.
  , sushiswapPairDTOBlock :: !(Maybe Text) -- ^ "block" - Block number in which pair information was created in.
  , sushiswapPairDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , sushiswapPairDTOEvaluatedAsk :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_ask"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SushiswapPairDTO
instance A.FromJSON SushiswapPairDTO where
  parseJSON = A.withObject "SushiswapPairDTO" $ \o ->
    SushiswapPairDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "factory")
      <*> (o .:? "name")
      <*> (o .:? "token_0")
      <*> (o .:? "token_1")
      <*> (o .:? "reserve_0")
      <*> (o .:? "reserve_1")
      <*> (o .:? "total_supply")
      <*> (o .:? "reserve_eth")
      <*> (o .:? "reserve_usd")
      <*> (o .:? "tracked_reserve_eth")
      <*> (o .:? "token_0_price")
      <*> (o .:? "token_1_price")
      <*> (o .:? "volume_token_0")
      <*> (o .:? "volume_token_1")
      <*> (o .:? "volume_usd")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "tx_count")
      <*> (o .:? "liquidity_provider_count")
      <*> (o .:? "timestamp")
      <*> (o .:? "block")
      <*> (o .:? "vid")
      <*> (o .:? "evaluated_ask")

-- | ToJSON SushiswapPairDTO
instance A.ToJSON SushiswapPairDTO where
  toJSON SushiswapPairDTO {..} =
   _omitNulls
      [ "entry_time" .= sushiswapPairDTOEntryTime
      , "recv_time" .= sushiswapPairDTORecvTime
      , "block_number" .= sushiswapPairDTOBlockNumber
      , "id" .= sushiswapPairDTOId
      , "factory" .= sushiswapPairDTOFactory
      , "name" .= sushiswapPairDTOName
      , "token_0" .= sushiswapPairDTOToken0
      , "token_1" .= sushiswapPairDTOToken1
      , "reserve_0" .= sushiswapPairDTOReserve0
      , "reserve_1" .= sushiswapPairDTOReserve1
      , "total_supply" .= sushiswapPairDTOTotalSupply
      , "reserve_eth" .= sushiswapPairDTOReserveEth
      , "reserve_usd" .= sushiswapPairDTOReserveUsd
      , "tracked_reserve_eth" .= sushiswapPairDTOTrackedReserveEth
      , "token_0_price" .= sushiswapPairDTOToken0Price
      , "token_1_price" .= sushiswapPairDTOToken1Price
      , "volume_token_0" .= sushiswapPairDTOVolumeToken0
      , "volume_token_1" .= sushiswapPairDTOVolumeToken1
      , "volume_usd" .= sushiswapPairDTOVolumeUsd
      , "untracked_volume_usd" .= sushiswapPairDTOUntrackedVolumeUsd
      , "tx_count" .= sushiswapPairDTOTxCount
      , "liquidity_provider_count" .= sushiswapPairDTOLiquidityProviderCount
      , "timestamp" .= sushiswapPairDTOTimestamp
      , "block" .= sushiswapPairDTOBlock
      , "vid" .= sushiswapPairDTOVid
      , "evaluated_ask" .= sushiswapPairDTOEvaluatedAsk
      ]


-- | Construct a value of type 'SushiswapPairDTO' (by applying it's required fields, if any)
mkSushiswapPairDTO
  :: SushiswapPairDTO
mkSushiswapPairDTO =
  SushiswapPairDTO
  { sushiswapPairDTOEntryTime = Nothing
  , sushiswapPairDTORecvTime = Nothing
  , sushiswapPairDTOBlockNumber = Nothing
  , sushiswapPairDTOId = Nothing
  , sushiswapPairDTOFactory = Nothing
  , sushiswapPairDTOName = Nothing
  , sushiswapPairDTOToken0 = Nothing
  , sushiswapPairDTOToken1 = Nothing
  , sushiswapPairDTOReserve0 = Nothing
  , sushiswapPairDTOReserve1 = Nothing
  , sushiswapPairDTOTotalSupply = Nothing
  , sushiswapPairDTOReserveEth = Nothing
  , sushiswapPairDTOReserveUsd = Nothing
  , sushiswapPairDTOTrackedReserveEth = Nothing
  , sushiswapPairDTOToken0Price = Nothing
  , sushiswapPairDTOToken1Price = Nothing
  , sushiswapPairDTOVolumeToken0 = Nothing
  , sushiswapPairDTOVolumeToken1 = Nothing
  , sushiswapPairDTOVolumeUsd = Nothing
  , sushiswapPairDTOUntrackedVolumeUsd = Nothing
  , sushiswapPairDTOTxCount = Nothing
  , sushiswapPairDTOLiquidityProviderCount = Nothing
  , sushiswapPairDTOTimestamp = Nothing
  , sushiswapPairDTOBlock = Nothing
  , sushiswapPairDTOVid = Nothing
  , sushiswapPairDTOEvaluatedAsk = Nothing
  }

-- ** SushiswapSwapDTO
-- | SushiswapSwapDTO
-- Swap are created for each token swap within a pair.
data SushiswapSwapDTO = SushiswapSwapDTO
  { sushiswapSwapDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sushiswapSwapDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sushiswapSwapDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sushiswapSwapDTOId :: !(Maybe Text) -- ^ "id" - Transaction hash plus index in Transaction swap array.
  , sushiswapSwapDTOTransaction :: !(Maybe Text) -- ^ "transaction" - Reference to transaction swap was included in.
  , sushiswapSwapDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of swap, used for sorted lookups.
  , sushiswapSwapDTOPair :: !(Maybe Text) -- ^ "pair" - Reference to pair.
  , sushiswapSwapDTOSender :: !(Maybe Text) -- ^ "sender" - Address that initiated the swap.
  , sushiswapSwapDTOAmount0In :: !(Maybe Text) -- ^ "amount_0_in" - Amount of token0 sold.
  , sushiswapSwapDTOAmount1In :: !(Maybe Text) -- ^ "amount_1_in" - Amount of token1 sold.
  , sushiswapSwapDTOAmount0Out :: !(Maybe Text) -- ^ "amount_0_out" - Amount of token0 received.
  , sushiswapSwapDTOAmount1Out :: !(Maybe Text) -- ^ "amount_1_out" - Amount of token1 received.
  , sushiswapSwapDTOTo :: !(Maybe Text) -- ^ "to" - Recipient of output tokens.
  , sushiswapSwapDTOLogIndex :: !(Maybe Text) -- ^ "log_index" - Event index within transaction.
  , sushiswapSwapDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - Derived amount of tokens sold in USD.
  , sushiswapSwapDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , sushiswapSwapDTOPoolId :: !(Maybe Text) -- ^ /ReadOnly/ "pool_id"
  , sushiswapSwapDTOTransactionId :: !(Maybe Text) -- ^ /ReadOnly/ "transaction_id"
  , sushiswapSwapDTOEvaluatedPrice :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_price"
  , sushiswapSwapDTOEvaluatedAmount :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_amount"
  , sushiswapSwapDTOEvaluatedAggressor :: !(Maybe TransactionsETradeAggressiveSide) -- ^ "evaluated_aggressor"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SushiswapSwapDTO
instance A.FromJSON SushiswapSwapDTO where
  parseJSON = A.withObject "SushiswapSwapDTO" $ \o ->
    SushiswapSwapDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "transaction")
      <*> (o .:? "timestamp")
      <*> (o .:? "pair")
      <*> (o .:? "sender")
      <*> (o .:? "amount_0_in")
      <*> (o .:? "amount_1_in")
      <*> (o .:? "amount_0_out")
      <*> (o .:? "amount_1_out")
      <*> (o .:? "to")
      <*> (o .:? "log_index")
      <*> (o .:? "amount_usd")
      <*> (o .:? "vid")
      <*> (o .:? "pool_id")
      <*> (o .:? "transaction_id")
      <*> (o .:? "evaluated_price")
      <*> (o .:? "evaluated_amount")
      <*> (o .:? "evaluated_aggressor")

-- | ToJSON SushiswapSwapDTO
instance A.ToJSON SushiswapSwapDTO where
  toJSON SushiswapSwapDTO {..} =
   _omitNulls
      [ "entry_time" .= sushiswapSwapDTOEntryTime
      , "recv_time" .= sushiswapSwapDTORecvTime
      , "block_number" .= sushiswapSwapDTOBlockNumber
      , "id" .= sushiswapSwapDTOId
      , "transaction" .= sushiswapSwapDTOTransaction
      , "timestamp" .= sushiswapSwapDTOTimestamp
      , "pair" .= sushiswapSwapDTOPair
      , "sender" .= sushiswapSwapDTOSender
      , "amount_0_in" .= sushiswapSwapDTOAmount0In
      , "amount_1_in" .= sushiswapSwapDTOAmount1In
      , "amount_0_out" .= sushiswapSwapDTOAmount0Out
      , "amount_1_out" .= sushiswapSwapDTOAmount1Out
      , "to" .= sushiswapSwapDTOTo
      , "log_index" .= sushiswapSwapDTOLogIndex
      , "amount_usd" .= sushiswapSwapDTOAmountUsd
      , "vid" .= sushiswapSwapDTOVid
      , "pool_id" .= sushiswapSwapDTOPoolId
      , "transaction_id" .= sushiswapSwapDTOTransactionId
      , "evaluated_price" .= sushiswapSwapDTOEvaluatedPrice
      , "evaluated_amount" .= sushiswapSwapDTOEvaluatedAmount
      , "evaluated_aggressor" .= sushiswapSwapDTOEvaluatedAggressor
      ]


-- | Construct a value of type 'SushiswapSwapDTO' (by applying it's required fields, if any)
mkSushiswapSwapDTO
  :: SushiswapSwapDTO
mkSushiswapSwapDTO =
  SushiswapSwapDTO
  { sushiswapSwapDTOEntryTime = Nothing
  , sushiswapSwapDTORecvTime = Nothing
  , sushiswapSwapDTOBlockNumber = Nothing
  , sushiswapSwapDTOId = Nothing
  , sushiswapSwapDTOTransaction = Nothing
  , sushiswapSwapDTOTimestamp = Nothing
  , sushiswapSwapDTOPair = Nothing
  , sushiswapSwapDTOSender = Nothing
  , sushiswapSwapDTOAmount0In = Nothing
  , sushiswapSwapDTOAmount1In = Nothing
  , sushiswapSwapDTOAmount0Out = Nothing
  , sushiswapSwapDTOAmount1Out = Nothing
  , sushiswapSwapDTOTo = Nothing
  , sushiswapSwapDTOLogIndex = Nothing
  , sushiswapSwapDTOAmountUsd = Nothing
  , sushiswapSwapDTOVid = Nothing
  , sushiswapSwapDTOPoolId = Nothing
  , sushiswapSwapDTOTransactionId = Nothing
  , sushiswapSwapDTOEvaluatedPrice = Nothing
  , sushiswapSwapDTOEvaluatedAmount = Nothing
  , sushiswapSwapDTOEvaluatedAggressor = Nothing
  }

-- ** SushiswapTokenDTO
-- | SushiswapTokenDTO
-- Stores aggregated information for a specific token across all pairs that token is included in.
data SushiswapTokenDTO = SushiswapTokenDTO
  { sushiswapTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sushiswapTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sushiswapTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sushiswapTokenDTOId :: !(Maybe Text) -- ^ "id" - Token address.
  , sushiswapTokenDTOFactory :: !(Maybe Text) -- ^ "factory" - Factory address.
  , sushiswapTokenDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Token symbol.
  , sushiswapTokenDTOName :: !(Maybe Text) -- ^ "name" - Token name.
  , sushiswapTokenDTODecimals :: !(Maybe Text) -- ^ "decimals" - Token decimals.
  , sushiswapTokenDTOTotalSupply :: !(Maybe Text) -- ^ "total_supply" - Total supply of liquidity token.
  , sushiswapTokenDTOVolume :: !(Maybe Text) -- ^ "volume" - Amount of token traded all time across all pairs.
  , sushiswapTokenDTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold).
  , sushiswapTokenDTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - Amount of token in USD traded all time across pairs (no minimum liquidity threshold).
  , sushiswapTokenDTOTxCount :: !(Maybe Text) -- ^ "tx_count" - Amount of transactions all time in pairs including token.
  , sushiswapTokenDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - Total amount of token provided as liquidity across all pairs.
  , sushiswapTokenDTODerivedEth :: !(Maybe Text) -- ^ "derived_eth" - ETH per token.
  , sushiswapTokenDTOWhitelistPairs :: !(Maybe [Text]) -- ^ "whitelist_pairs" - Array of whitelisted pairs.
  , sushiswapTokenDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , sushiswapTokenDTOTokenSymbol :: !(Maybe Text) -- ^ /ReadOnly/ "token_symbol"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SushiswapTokenDTO
instance A.FromJSON SushiswapTokenDTO where
  parseJSON = A.withObject "SushiswapTokenDTO" $ \o ->
    SushiswapTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "factory")
      <*> (o .:? "symbol")
      <*> (o .:? "name")
      <*> (o .:? "decimals")
      <*> (o .:? "total_supply")
      <*> (o .:? "volume")
      <*> (o .:? "volume_usd")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "tx_count")
      <*> (o .:? "liquidity")
      <*> (o .:? "derived_eth")
      <*> (o .:? "whitelist_pairs")
      <*> (o .:? "vid")
      <*> (o .:? "token_symbol")

-- | ToJSON SushiswapTokenDTO
instance A.ToJSON SushiswapTokenDTO where
  toJSON SushiswapTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= sushiswapTokenDTOEntryTime
      , "recv_time" .= sushiswapTokenDTORecvTime
      , "block_number" .= sushiswapTokenDTOBlockNumber
      , "id" .= sushiswapTokenDTOId
      , "factory" .= sushiswapTokenDTOFactory
      , "symbol" .= sushiswapTokenDTOSymbol
      , "name" .= sushiswapTokenDTOName
      , "decimals" .= sushiswapTokenDTODecimals
      , "total_supply" .= sushiswapTokenDTOTotalSupply
      , "volume" .= sushiswapTokenDTOVolume
      , "volume_usd" .= sushiswapTokenDTOVolumeUsd
      , "untracked_volume_usd" .= sushiswapTokenDTOUntrackedVolumeUsd
      , "tx_count" .= sushiswapTokenDTOTxCount
      , "liquidity" .= sushiswapTokenDTOLiquidity
      , "derived_eth" .= sushiswapTokenDTODerivedEth
      , "whitelist_pairs" .= sushiswapTokenDTOWhitelistPairs
      , "vid" .= sushiswapTokenDTOVid
      , "token_symbol" .= sushiswapTokenDTOTokenSymbol
      ]


-- | Construct a value of type 'SushiswapTokenDTO' (by applying it's required fields, if any)
mkSushiswapTokenDTO
  :: SushiswapTokenDTO
mkSushiswapTokenDTO =
  SushiswapTokenDTO
  { sushiswapTokenDTOEntryTime = Nothing
  , sushiswapTokenDTORecvTime = Nothing
  , sushiswapTokenDTOBlockNumber = Nothing
  , sushiswapTokenDTOId = Nothing
  , sushiswapTokenDTOFactory = Nothing
  , sushiswapTokenDTOSymbol = Nothing
  , sushiswapTokenDTOName = Nothing
  , sushiswapTokenDTODecimals = Nothing
  , sushiswapTokenDTOTotalSupply = Nothing
  , sushiswapTokenDTOVolume = Nothing
  , sushiswapTokenDTOVolumeUsd = Nothing
  , sushiswapTokenDTOUntrackedVolumeUsd = Nothing
  , sushiswapTokenDTOTxCount = Nothing
  , sushiswapTokenDTOLiquidity = Nothing
  , sushiswapTokenDTODerivedEth = Nothing
  , sushiswapTokenDTOWhitelistPairs = Nothing
  , sushiswapTokenDTOVid = Nothing
  , sushiswapTokenDTOTokenSymbol = Nothing
  }

-- ** UniswapV2PairV2DTO
-- | UniswapV2PairV2DTO
-- Information about a pair. Includes references to each token within the pair, volume information, liquidity information, and more. The pair entity mirrors the pair smart contract, and also contains aggregated information about use.
data UniswapV2PairV2DTO = UniswapV2PairV2DTO
  { uniswapV2PairV2DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV2PairV2DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV2PairV2DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV2PairV2DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , uniswapV2PairV2DTOId :: !(Maybe Text) -- ^ "id" - Pair contract address.
  , uniswapV2PairV2DTOToken0 :: !(Maybe Text) -- ^ "token_0" - Reference to token0 as stored in pair contract.
  , uniswapV2PairV2DTOToken1 :: !(Maybe Text) -- ^ "token_1" - Reference to token1 as stored in pair contract.
  , uniswapV2PairV2DTOReserve0 :: !(Maybe Text) -- ^ "reserve_0" - Reserve of token0.
  , uniswapV2PairV2DTOReserve1 :: !(Maybe Text) -- ^ "reserve_1" - Reserve of token1.
  , uniswapV2PairV2DTOTotalSupply :: !(Maybe Text) -- ^ "total_supply" - Total supply of liquidity token distributed to LPs.
  , uniswapV2PairV2DTOReserveEth :: !(Maybe Text) -- ^ "reserve_eth" - Total liquidity in pair stored as an amount of ETH.
  , uniswapV2PairV2DTOReserveUsd :: !(Maybe Text) -- ^ "reserve_usd" - Total liquidity amount in pair stored as an amount of USD.
  , uniswapV2PairV2DTOTrackedReserveEth :: !(Maybe Text) -- ^ "tracked_reserve_eth" - Total liquidity with only tracked amount.
  , uniswapV2PairV2DTOToken0Price :: !(Maybe Text) -- ^ "token_0_price" - Token0 per token1.
  , uniswapV2PairV2DTOToken1Price :: !(Maybe Text) -- ^ "token_1_price" - Token1 per token0.
  , uniswapV2PairV2DTOVolumeToken0 :: !(Maybe Text) -- ^ "volume_token_0" - Amount of token0 swapped on this pair.
  , uniswapV2PairV2DTOVolumeToken1 :: !(Maybe Text) -- ^ "volume_token_1" - Amount of token1 swapped on this pair.
  , uniswapV2PairV2DTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Total amount swapped all time in this pair stored in USD (only tracked if USD liquidity is above minimum threshold).
  , uniswapV2PairV2DTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - Total amount swapped all time in this pair stored in USD, no minimum liquidity threshold.
  , uniswapV2PairV2DTOTxCount :: !(Maybe NumericsBigInteger) -- ^ "tx_count"
  , uniswapV2PairV2DTOCreatedAtTimestamp :: !(Maybe DateTime) -- ^ "created_at_timestamp" - Timestamp contract was created.
  , uniswapV2PairV2DTOLiquidityProviderCount :: !(Maybe Text) -- ^ "liquidity_provider_count" - Total number of LPs.
  , uniswapV2PairV2DTOEvaluatedAsk :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_ask"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV2PairV2DTO
instance A.FromJSON UniswapV2PairV2DTO where
  parseJSON = A.withObject "UniswapV2PairV2DTO" $ \o ->
    UniswapV2PairV2DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "token_0")
      <*> (o .:? "token_1")
      <*> (o .:? "reserve_0")
      <*> (o .:? "reserve_1")
      <*> (o .:? "total_supply")
      <*> (o .:? "reserve_eth")
      <*> (o .:? "reserve_usd")
      <*> (o .:? "tracked_reserve_eth")
      <*> (o .:? "token_0_price")
      <*> (o .:? "token_1_price")
      <*> (o .:? "volume_token_0")
      <*> (o .:? "volume_token_1")
      <*> (o .:? "volume_usd")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "tx_count")
      <*> (o .:? "created_at_timestamp")
      <*> (o .:? "liquidity_provider_count")
      <*> (o .:? "evaluated_ask")

-- | ToJSON UniswapV2PairV2DTO
instance A.ToJSON UniswapV2PairV2DTO where
  toJSON UniswapV2PairV2DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV2PairV2DTOEntryTime
      , "recv_time" .= uniswapV2PairV2DTORecvTime
      , "block_number" .= uniswapV2PairV2DTOBlockNumber
      , "vid" .= uniswapV2PairV2DTOVid
      , "id" .= uniswapV2PairV2DTOId
      , "token_0" .= uniswapV2PairV2DTOToken0
      , "token_1" .= uniswapV2PairV2DTOToken1
      , "reserve_0" .= uniswapV2PairV2DTOReserve0
      , "reserve_1" .= uniswapV2PairV2DTOReserve1
      , "total_supply" .= uniswapV2PairV2DTOTotalSupply
      , "reserve_eth" .= uniswapV2PairV2DTOReserveEth
      , "reserve_usd" .= uniswapV2PairV2DTOReserveUsd
      , "tracked_reserve_eth" .= uniswapV2PairV2DTOTrackedReserveEth
      , "token_0_price" .= uniswapV2PairV2DTOToken0Price
      , "token_1_price" .= uniswapV2PairV2DTOToken1Price
      , "volume_token_0" .= uniswapV2PairV2DTOVolumeToken0
      , "volume_token_1" .= uniswapV2PairV2DTOVolumeToken1
      , "volume_usd" .= uniswapV2PairV2DTOVolumeUsd
      , "untracked_volume_usd" .= uniswapV2PairV2DTOUntrackedVolumeUsd
      , "tx_count" .= uniswapV2PairV2DTOTxCount
      , "created_at_timestamp" .= uniswapV2PairV2DTOCreatedAtTimestamp
      , "liquidity_provider_count" .= uniswapV2PairV2DTOLiquidityProviderCount
      , "evaluated_ask" .= uniswapV2PairV2DTOEvaluatedAsk
      ]


-- | Construct a value of type 'UniswapV2PairV2DTO' (by applying it's required fields, if any)
mkUniswapV2PairV2DTO
  :: UniswapV2PairV2DTO
mkUniswapV2PairV2DTO =
  UniswapV2PairV2DTO
  { uniswapV2PairV2DTOEntryTime = Nothing
  , uniswapV2PairV2DTORecvTime = Nothing
  , uniswapV2PairV2DTOBlockNumber = Nothing
  , uniswapV2PairV2DTOVid = Nothing
  , uniswapV2PairV2DTOId = Nothing
  , uniswapV2PairV2DTOToken0 = Nothing
  , uniswapV2PairV2DTOToken1 = Nothing
  , uniswapV2PairV2DTOReserve0 = Nothing
  , uniswapV2PairV2DTOReserve1 = Nothing
  , uniswapV2PairV2DTOTotalSupply = Nothing
  , uniswapV2PairV2DTOReserveEth = Nothing
  , uniswapV2PairV2DTOReserveUsd = Nothing
  , uniswapV2PairV2DTOTrackedReserveEth = Nothing
  , uniswapV2PairV2DTOToken0Price = Nothing
  , uniswapV2PairV2DTOToken1Price = Nothing
  , uniswapV2PairV2DTOVolumeToken0 = Nothing
  , uniswapV2PairV2DTOVolumeToken1 = Nothing
  , uniswapV2PairV2DTOVolumeUsd = Nothing
  , uniswapV2PairV2DTOUntrackedVolumeUsd = Nothing
  , uniswapV2PairV2DTOTxCount = Nothing
  , uniswapV2PairV2DTOCreatedAtTimestamp = Nothing
  , uniswapV2PairV2DTOLiquidityProviderCount = Nothing
  , uniswapV2PairV2DTOEvaluatedAsk = Nothing
  }

-- ** UniswapV2SwapV2DTO
-- | UniswapV2SwapV2DTO
-- Swap are created for each token swap within a pair.
data UniswapV2SwapV2DTO = UniswapV2SwapV2DTO
  { uniswapV2SwapV2DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV2SwapV2DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV2SwapV2DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV2SwapV2DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , uniswapV2SwapV2DTOId :: !(Maybe Text) -- ^ "id" - Transaction hash plus index in Transaction swap array.
  , uniswapV2SwapV2DTOTransaction :: !(Maybe Text) -- ^ "transaction" - Reference to transaction swap was included in.
  , uniswapV2SwapV2DTOTimestamp :: !(Maybe DateTime) -- ^ "timestamp" - Timestamp of swap, used for sorted lookups.
  , uniswapV2SwapV2DTOPair :: !(Maybe Text) -- ^ "pair" - Reference to pair.
  , uniswapV2SwapV2DTOSender :: !(Maybe Text) -- ^ "sender" - Address that initiated the swap.
  , uniswapV2SwapV2DTOFrom :: !(Maybe Text) -- ^ "from" - The EOA (Externally Owned Account) that initiated the transaction.
  , uniswapV2SwapV2DTOAmount0In :: !(Maybe Text) -- ^ "amount_0_in" - Amount of token0 sold.
  , uniswapV2SwapV2DTOAmount1In :: !(Maybe Text) -- ^ "amount_1_in" - Amount of token1 sold.
  , uniswapV2SwapV2DTOAmount0Out :: !(Maybe Text) -- ^ "amount_0_out" - Amount of token0 received.
  , uniswapV2SwapV2DTOAmount1Out :: !(Maybe Text) -- ^ "amount_1_out" - Amount of token1 received.
  , uniswapV2SwapV2DTOTo :: !(Maybe Text) -- ^ "to" - Recipient of output tokens.
  , uniswapV2SwapV2DTOLogIndex :: !(Maybe NumericsBigInteger) -- ^ "log_index"
  , uniswapV2SwapV2DTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - Derived amount of tokens sold in USD.
  , uniswapV2SwapV2DTOEvaluatedPrice :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_price"
  , uniswapV2SwapV2DTOEvaluatedAmount :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_amount"
  , uniswapV2SwapV2DTOEvaluatedAggressor :: !(Maybe TransactionsETradeAggressiveSide) -- ^ "evaluated_aggressor"
  , uniswapV2SwapV2DTOPoolId :: !(Maybe Text) -- ^ /ReadOnly/ "pool_id"
  , uniswapV2SwapV2DTOTransactionId :: !(Maybe Text) -- ^ /ReadOnly/ "transaction_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV2SwapV2DTO
instance A.FromJSON UniswapV2SwapV2DTO where
  parseJSON = A.withObject "UniswapV2SwapV2DTO" $ \o ->
    UniswapV2SwapV2DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "transaction")
      <*> (o .:? "timestamp")
      <*> (o .:? "pair")
      <*> (o .:? "sender")
      <*> (o .:? "from")
      <*> (o .:? "amount_0_in")
      <*> (o .:? "amount_1_in")
      <*> (o .:? "amount_0_out")
      <*> (o .:? "amount_1_out")
      <*> (o .:? "to")
      <*> (o .:? "log_index")
      <*> (o .:? "amount_usd")
      <*> (o .:? "evaluated_price")
      <*> (o .:? "evaluated_amount")
      <*> (o .:? "evaluated_aggressor")
      <*> (o .:? "pool_id")
      <*> (o .:? "transaction_id")

-- | ToJSON UniswapV2SwapV2DTO
instance A.ToJSON UniswapV2SwapV2DTO where
  toJSON UniswapV2SwapV2DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV2SwapV2DTOEntryTime
      , "recv_time" .= uniswapV2SwapV2DTORecvTime
      , "block_number" .= uniswapV2SwapV2DTOBlockNumber
      , "vid" .= uniswapV2SwapV2DTOVid
      , "id" .= uniswapV2SwapV2DTOId
      , "transaction" .= uniswapV2SwapV2DTOTransaction
      , "timestamp" .= uniswapV2SwapV2DTOTimestamp
      , "pair" .= uniswapV2SwapV2DTOPair
      , "sender" .= uniswapV2SwapV2DTOSender
      , "from" .= uniswapV2SwapV2DTOFrom
      , "amount_0_in" .= uniswapV2SwapV2DTOAmount0In
      , "amount_1_in" .= uniswapV2SwapV2DTOAmount1In
      , "amount_0_out" .= uniswapV2SwapV2DTOAmount0Out
      , "amount_1_out" .= uniswapV2SwapV2DTOAmount1Out
      , "to" .= uniswapV2SwapV2DTOTo
      , "log_index" .= uniswapV2SwapV2DTOLogIndex
      , "amount_usd" .= uniswapV2SwapV2DTOAmountUsd
      , "evaluated_price" .= uniswapV2SwapV2DTOEvaluatedPrice
      , "evaluated_amount" .= uniswapV2SwapV2DTOEvaluatedAmount
      , "evaluated_aggressor" .= uniswapV2SwapV2DTOEvaluatedAggressor
      , "pool_id" .= uniswapV2SwapV2DTOPoolId
      , "transaction_id" .= uniswapV2SwapV2DTOTransactionId
      ]


-- | Construct a value of type 'UniswapV2SwapV2DTO' (by applying it's required fields, if any)
mkUniswapV2SwapV2DTO
  :: UniswapV2SwapV2DTO
mkUniswapV2SwapV2DTO =
  UniswapV2SwapV2DTO
  { uniswapV2SwapV2DTOEntryTime = Nothing
  , uniswapV2SwapV2DTORecvTime = Nothing
  , uniswapV2SwapV2DTOBlockNumber = Nothing
  , uniswapV2SwapV2DTOVid = Nothing
  , uniswapV2SwapV2DTOId = Nothing
  , uniswapV2SwapV2DTOTransaction = Nothing
  , uniswapV2SwapV2DTOTimestamp = Nothing
  , uniswapV2SwapV2DTOPair = Nothing
  , uniswapV2SwapV2DTOSender = Nothing
  , uniswapV2SwapV2DTOFrom = Nothing
  , uniswapV2SwapV2DTOAmount0In = Nothing
  , uniswapV2SwapV2DTOAmount1In = Nothing
  , uniswapV2SwapV2DTOAmount0Out = Nothing
  , uniswapV2SwapV2DTOAmount1Out = Nothing
  , uniswapV2SwapV2DTOTo = Nothing
  , uniswapV2SwapV2DTOLogIndex = Nothing
  , uniswapV2SwapV2DTOAmountUsd = Nothing
  , uniswapV2SwapV2DTOEvaluatedPrice = Nothing
  , uniswapV2SwapV2DTOEvaluatedAmount = Nothing
  , uniswapV2SwapV2DTOEvaluatedAggressor = Nothing
  , uniswapV2SwapV2DTOPoolId = Nothing
  , uniswapV2SwapV2DTOTransactionId = Nothing
  }

-- ** UniswapV2TokenV2DTO
-- | UniswapV2TokenV2DTO
-- Stores aggregated information for a specific token across all pairs that token is included in.
data UniswapV2TokenV2DTO = UniswapV2TokenV2DTO
  { uniswapV2TokenV2DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV2TokenV2DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV2TokenV2DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV2TokenV2DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , uniswapV2TokenV2DTOId :: !(Maybe Text) -- ^ "id" - Token address.
  , uniswapV2TokenV2DTOSymbol :: !(Maybe Text) -- ^ "symbol" - Token symbol.
  , uniswapV2TokenV2DTOName :: !(Maybe Text) -- ^ "name" - Token name.
  , uniswapV2TokenV2DTODecimals :: !(Maybe Int) -- ^ "decimals" - Token decimals.
  , uniswapV2TokenV2DTOTotalSupply :: !(Maybe NumericsBigInteger) -- ^ "total_supply"
  , uniswapV2TokenV2DTOTradeVolume :: !(Maybe Text) -- ^ "trade_volume" - Amount of token traded all time across all pairs.
  , uniswapV2TokenV2DTOTradeVolumeUsd :: !(Maybe Text) -- ^ "trade_volume_usd" - Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold).
  , uniswapV2TokenV2DTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - Amount of token in USD traded all time across pairs (no minimum liquidity threshold).
  , uniswapV2TokenV2DTOTxCount :: !(Maybe NumericsBigInteger) -- ^ "tx_count"
  , uniswapV2TokenV2DTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - Total amount of token provided as liquidity across all pairs.
  , uniswapV2TokenV2DTODerivedEth :: !(Maybe Text) -- ^ "derived_eth" - ETH per token.
  , uniswapV2TokenV2DTOTokenSymbol :: !(Maybe Text) -- ^ /ReadOnly/ "token_symbol"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV2TokenV2DTO
instance A.FromJSON UniswapV2TokenV2DTO where
  parseJSON = A.withObject "UniswapV2TokenV2DTO" $ \o ->
    UniswapV2TokenV2DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "symbol")
      <*> (o .:? "name")
      <*> (o .:? "decimals")
      <*> (o .:? "total_supply")
      <*> (o .:? "trade_volume")
      <*> (o .:? "trade_volume_usd")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "tx_count")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "derived_eth")
      <*> (o .:? "token_symbol")

-- | ToJSON UniswapV2TokenV2DTO
instance A.ToJSON UniswapV2TokenV2DTO where
  toJSON UniswapV2TokenV2DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV2TokenV2DTOEntryTime
      , "recv_time" .= uniswapV2TokenV2DTORecvTime
      , "block_number" .= uniswapV2TokenV2DTOBlockNumber
      , "vid" .= uniswapV2TokenV2DTOVid
      , "id" .= uniswapV2TokenV2DTOId
      , "symbol" .= uniswapV2TokenV2DTOSymbol
      , "name" .= uniswapV2TokenV2DTOName
      , "decimals" .= uniswapV2TokenV2DTODecimals
      , "total_supply" .= uniswapV2TokenV2DTOTotalSupply
      , "trade_volume" .= uniswapV2TokenV2DTOTradeVolume
      , "trade_volume_usd" .= uniswapV2TokenV2DTOTradeVolumeUsd
      , "untracked_volume_usd" .= uniswapV2TokenV2DTOUntrackedVolumeUsd
      , "tx_count" .= uniswapV2TokenV2DTOTxCount
      , "total_liquidity" .= uniswapV2TokenV2DTOTotalLiquidity
      , "derived_eth" .= uniswapV2TokenV2DTODerivedEth
      , "token_symbol" .= uniswapV2TokenV2DTOTokenSymbol
      ]


-- | Construct a value of type 'UniswapV2TokenV2DTO' (by applying it's required fields, if any)
mkUniswapV2TokenV2DTO
  :: UniswapV2TokenV2DTO
mkUniswapV2TokenV2DTO =
  UniswapV2TokenV2DTO
  { uniswapV2TokenV2DTOEntryTime = Nothing
  , uniswapV2TokenV2DTORecvTime = Nothing
  , uniswapV2TokenV2DTOBlockNumber = Nothing
  , uniswapV2TokenV2DTOVid = Nothing
  , uniswapV2TokenV2DTOId = Nothing
  , uniswapV2TokenV2DTOSymbol = Nothing
  , uniswapV2TokenV2DTOName = Nothing
  , uniswapV2TokenV2DTODecimals = Nothing
  , uniswapV2TokenV2DTOTotalSupply = Nothing
  , uniswapV2TokenV2DTOTradeVolume = Nothing
  , uniswapV2TokenV2DTOTradeVolumeUsd = Nothing
  , uniswapV2TokenV2DTOUntrackedVolumeUsd = Nothing
  , uniswapV2TokenV2DTOTxCount = Nothing
  , uniswapV2TokenV2DTOTotalLiquidity = Nothing
  , uniswapV2TokenV2DTODerivedEth = Nothing
  , uniswapV2TokenV2DTOTokenSymbol = Nothing
  }

-- ** UniswapV3BundleV3DTO
-- | UniswapV3BundleV3DTO
-- The Bundle is used as a global store of derived ETH price in USD. This provides a strong estimate for the USD price of ETH.
data UniswapV3BundleV3DTO = UniswapV3BundleV3DTO
  { uniswapV3BundleV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3BundleV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3BundleV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3BundleV3DTOId :: !(Maybe Text) -- ^ "id" - 
  , uniswapV3BundleV3DTOEthPriceUsd :: !(Maybe Text) -- ^ "eth_price_usd" - Price of ETH in usd.
  , uniswapV3BundleV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3BundleV3DTO
instance A.FromJSON UniswapV3BundleV3DTO where
  parseJSON = A.withObject "UniswapV3BundleV3DTO" $ \o ->
    UniswapV3BundleV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "eth_price_usd")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3BundleV3DTO
instance A.ToJSON UniswapV3BundleV3DTO where
  toJSON UniswapV3BundleV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3BundleV3DTOEntryTime
      , "recv_time" .= uniswapV3BundleV3DTORecvTime
      , "block_number" .= uniswapV3BundleV3DTOBlockNumber
      , "id" .= uniswapV3BundleV3DTOId
      , "eth_price_usd" .= uniswapV3BundleV3DTOEthPriceUsd
      , "vid" .= uniswapV3BundleV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3BundleV3DTO' (by applying it's required fields, if any)
mkUniswapV3BundleV3DTO
  :: UniswapV3BundleV3DTO
mkUniswapV3BundleV3DTO =
  UniswapV3BundleV3DTO
  { uniswapV3BundleV3DTOEntryTime = Nothing
  , uniswapV3BundleV3DTORecvTime = Nothing
  , uniswapV3BundleV3DTOBlockNumber = Nothing
  , uniswapV3BundleV3DTOId = Nothing
  , uniswapV3BundleV3DTOEthPriceUsd = Nothing
  , uniswapV3BundleV3DTOVid = Nothing
  }

-- ** UniswapV3BurnV3DTO
-- | UniswapV3BurnV3DTO
-- Burn entities are created for every emitted Burn event on the Uniswap core contracts. The Burn entity stores key data about the event like token amounts, who burned, who received tokens, and more. This entity can be used to track liquidity removals on pairs.
data UniswapV3BurnV3DTO = UniswapV3BurnV3DTO
  { uniswapV3BurnV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3BurnV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3BurnV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3BurnV3DTOId :: !(Maybe Text) -- ^ "id" - Transaction hash + &#39;#&#39; + index in mints Transaction array.
  , uniswapV3BurnV3DTOTransaction :: !(Maybe Text) -- ^ "transaction" - Transaction burn was included in.
  , uniswapV3BurnV3DTOPool :: !(Maybe Text) -- ^ "pool" - Pool position is within.
  , uniswapV3BurnV3DTOToken0 :: !(Maybe Text) -- ^ "token_0" - Reference to token0 as stored in pool contract.
  , uniswapV3BurnV3DTOToken1 :: !(Maybe Text) -- ^ "token_1" - Reference to token1 as stored in pool contract.
  , uniswapV3BurnV3DTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp.
  , uniswapV3BurnV3DTOOwner :: !(Maybe Text) -- ^ "owner" - Owner of position where liquidity was burned.
  , uniswapV3BurnV3DTOOrigin :: !(Maybe Text) -- ^ "origin" - Transaction origin: the EOA (Externally Owned Account) that initiated the transaction.
  , uniswapV3BurnV3DTOAmount :: !(Maybe Text) -- ^ "amount" - Amount of liquidity burned.
  , uniswapV3BurnV3DTOAmount0 :: !(Maybe Text) -- ^ "amount_0" - Amount of token 0 burned.
  , uniswapV3BurnV3DTOAmount1 :: !(Maybe Text) -- ^ "amount_1" - Amount of token 1 burned.
  , uniswapV3BurnV3DTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - Derived amount based on available prices of tokens.
  , uniswapV3BurnV3DTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - Lower tick of position.
  , uniswapV3BurnV3DTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - Upper tick of position.
  , uniswapV3BurnV3DTOLogIndex :: !(Maybe Text) -- ^ "log_index" - Position within the transactions.
  , uniswapV3BurnV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3BurnV3DTO
instance A.FromJSON UniswapV3BurnV3DTO where
  parseJSON = A.withObject "UniswapV3BurnV3DTO" $ \o ->
    UniswapV3BurnV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "transaction")
      <*> (o .:? "pool")
      <*> (o .:? "token_0")
      <*> (o .:? "token_1")
      <*> (o .:? "timestamp")
      <*> (o .:? "owner")
      <*> (o .:? "origin")
      <*> (o .:? "amount")
      <*> (o .:? "amount_0")
      <*> (o .:? "amount_1")
      <*> (o .:? "amount_usd")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "log_index")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3BurnV3DTO
instance A.ToJSON UniswapV3BurnV3DTO where
  toJSON UniswapV3BurnV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3BurnV3DTOEntryTime
      , "recv_time" .= uniswapV3BurnV3DTORecvTime
      , "block_number" .= uniswapV3BurnV3DTOBlockNumber
      , "id" .= uniswapV3BurnV3DTOId
      , "transaction" .= uniswapV3BurnV3DTOTransaction
      , "pool" .= uniswapV3BurnV3DTOPool
      , "token_0" .= uniswapV3BurnV3DTOToken0
      , "token_1" .= uniswapV3BurnV3DTOToken1
      , "timestamp" .= uniswapV3BurnV3DTOTimestamp
      , "owner" .= uniswapV3BurnV3DTOOwner
      , "origin" .= uniswapV3BurnV3DTOOrigin
      , "amount" .= uniswapV3BurnV3DTOAmount
      , "amount_0" .= uniswapV3BurnV3DTOAmount0
      , "amount_1" .= uniswapV3BurnV3DTOAmount1
      , "amount_usd" .= uniswapV3BurnV3DTOAmountUsd
      , "tick_lower" .= uniswapV3BurnV3DTOTickLower
      , "tick_upper" .= uniswapV3BurnV3DTOTickUpper
      , "log_index" .= uniswapV3BurnV3DTOLogIndex
      , "vid" .= uniswapV3BurnV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3BurnV3DTO' (by applying it's required fields, if any)
mkUniswapV3BurnV3DTO
  :: UniswapV3BurnV3DTO
mkUniswapV3BurnV3DTO =
  UniswapV3BurnV3DTO
  { uniswapV3BurnV3DTOEntryTime = Nothing
  , uniswapV3BurnV3DTORecvTime = Nothing
  , uniswapV3BurnV3DTOBlockNumber = Nothing
  , uniswapV3BurnV3DTOId = Nothing
  , uniswapV3BurnV3DTOTransaction = Nothing
  , uniswapV3BurnV3DTOPool = Nothing
  , uniswapV3BurnV3DTOToken0 = Nothing
  , uniswapV3BurnV3DTOToken1 = Nothing
  , uniswapV3BurnV3DTOTimestamp = Nothing
  , uniswapV3BurnV3DTOOwner = Nothing
  , uniswapV3BurnV3DTOOrigin = Nothing
  , uniswapV3BurnV3DTOAmount = Nothing
  , uniswapV3BurnV3DTOAmount0 = Nothing
  , uniswapV3BurnV3DTOAmount1 = Nothing
  , uniswapV3BurnV3DTOAmountUsd = Nothing
  , uniswapV3BurnV3DTOTickLower = Nothing
  , uniswapV3BurnV3DTOTickUpper = Nothing
  , uniswapV3BurnV3DTOLogIndex = Nothing
  , uniswapV3BurnV3DTOVid = Nothing
  }

-- ** UniswapV3FactoryV3DTO
-- | UniswapV3FactoryV3DTO
-- The Uniswap Factory entity is responsible for storing aggregate information across all Uniswap pairs. It can be used to view stats about total liquidity, volume, amount of pairs and more.
data UniswapV3FactoryV3DTO = UniswapV3FactoryV3DTO
  { uniswapV3FactoryV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3FactoryV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3FactoryV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3FactoryV3DTOId :: !(Maybe Text) -- ^ "id" - Factory address.
  , uniswapV3FactoryV3DTOPoolCount :: !(Maybe Text) -- ^ "pool_count" - Amount of pools created.
  , uniswapV3FactoryV3DTOTxCount :: !(Maybe Text) -- ^ "tx_count" - Amount of transactions all time.
  , uniswapV3FactoryV3DTOTotalVolumeUsd :: !(Maybe Text) -- ^ "total_volume_usd" - Total volume all time in derived USD.
  , uniswapV3FactoryV3DTOTotalVolumeEth :: !(Maybe Text) -- ^ "total_volume_eth" - Total volume all time in derived ETH.
  , uniswapV3FactoryV3DTOTotalFeesUsd :: !(Maybe Text) -- ^ "total_fees_usd" - Total swap fees all time in USD.
  , uniswapV3FactoryV3DTOTotalFeesEth :: !(Maybe Text) -- ^ "total_fees_eth" - All volume even through less reliable USD values.
  , uniswapV3FactoryV3DTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - All volume even through less reliable USD values.
  , uniswapV3FactoryV3DTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Total value locked derived in USD.
  , uniswapV3FactoryV3DTOTotalValueLockedEth :: !(Maybe Text) -- ^ "total_value_locked_eth" - Total value locked derived in ETH.
  , uniswapV3FactoryV3DTOTotalValueLockedUsdUntracked :: !(Maybe Text) -- ^ "total_value_locked_usd_untracked" - Total value locked derived in USD untracked.
  , uniswapV3FactoryV3DTOTotalValueLockedEthUntracked :: !(Maybe Text) -- ^ "total_value_locked_eth_untracked" - Total value locked derived in ETH untracked.
  , uniswapV3FactoryV3DTOOwner :: !(Maybe Text) -- ^ "owner" - Current owner of the factory.
  , uniswapV3FactoryV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3FactoryV3DTO
instance A.FromJSON UniswapV3FactoryV3DTO where
  parseJSON = A.withObject "UniswapV3FactoryV3DTO" $ \o ->
    UniswapV3FactoryV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "pool_count")
      <*> (o .:? "tx_count")
      <*> (o .:? "total_volume_usd")
      <*> (o .:? "total_volume_eth")
      <*> (o .:? "total_fees_usd")
      <*> (o .:? "total_fees_eth")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_value_locked_eth")
      <*> (o .:? "total_value_locked_usd_untracked")
      <*> (o .:? "total_value_locked_eth_untracked")
      <*> (o .:? "owner")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3FactoryV3DTO
instance A.ToJSON UniswapV3FactoryV3DTO where
  toJSON UniswapV3FactoryV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3FactoryV3DTOEntryTime
      , "recv_time" .= uniswapV3FactoryV3DTORecvTime
      , "block_number" .= uniswapV3FactoryV3DTOBlockNumber
      , "id" .= uniswapV3FactoryV3DTOId
      , "pool_count" .= uniswapV3FactoryV3DTOPoolCount
      , "tx_count" .= uniswapV3FactoryV3DTOTxCount
      , "total_volume_usd" .= uniswapV3FactoryV3DTOTotalVolumeUsd
      , "total_volume_eth" .= uniswapV3FactoryV3DTOTotalVolumeEth
      , "total_fees_usd" .= uniswapV3FactoryV3DTOTotalFeesUsd
      , "total_fees_eth" .= uniswapV3FactoryV3DTOTotalFeesEth
      , "untracked_volume_usd" .= uniswapV3FactoryV3DTOUntrackedVolumeUsd
      , "total_value_locked_usd" .= uniswapV3FactoryV3DTOTotalValueLockedUsd
      , "total_value_locked_eth" .= uniswapV3FactoryV3DTOTotalValueLockedEth
      , "total_value_locked_usd_untracked" .= uniswapV3FactoryV3DTOTotalValueLockedUsdUntracked
      , "total_value_locked_eth_untracked" .= uniswapV3FactoryV3DTOTotalValueLockedEthUntracked
      , "owner" .= uniswapV3FactoryV3DTOOwner
      , "vid" .= uniswapV3FactoryV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3FactoryV3DTO' (by applying it's required fields, if any)
mkUniswapV3FactoryV3DTO
  :: UniswapV3FactoryV3DTO
mkUniswapV3FactoryV3DTO =
  UniswapV3FactoryV3DTO
  { uniswapV3FactoryV3DTOEntryTime = Nothing
  , uniswapV3FactoryV3DTORecvTime = Nothing
  , uniswapV3FactoryV3DTOBlockNumber = Nothing
  , uniswapV3FactoryV3DTOId = Nothing
  , uniswapV3FactoryV3DTOPoolCount = Nothing
  , uniswapV3FactoryV3DTOTxCount = Nothing
  , uniswapV3FactoryV3DTOTotalVolumeUsd = Nothing
  , uniswapV3FactoryV3DTOTotalVolumeEth = Nothing
  , uniswapV3FactoryV3DTOTotalFeesUsd = Nothing
  , uniswapV3FactoryV3DTOTotalFeesEth = Nothing
  , uniswapV3FactoryV3DTOUntrackedVolumeUsd = Nothing
  , uniswapV3FactoryV3DTOTotalValueLockedUsd = Nothing
  , uniswapV3FactoryV3DTOTotalValueLockedEth = Nothing
  , uniswapV3FactoryV3DTOTotalValueLockedUsdUntracked = Nothing
  , uniswapV3FactoryV3DTOTotalValueLockedEthUntracked = Nothing
  , uniswapV3FactoryV3DTOOwner = Nothing
  , uniswapV3FactoryV3DTOVid = Nothing
  }

-- ** UniswapV3MintV3DTO
-- | UniswapV3MintV3DTO
-- Mint entities are created for every emitted Mint event on the Uniswap core contracts. The Mint entity stores key data about the event like token amounts, who sent the transaction, and more.
data UniswapV3MintV3DTO = UniswapV3MintV3DTO
  { uniswapV3MintV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3MintV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3MintV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3MintV3DTOId :: !(Maybe Text) -- ^ "id" - Transaction hash + &#39;#&#39; + index in mints Transaction array.
  , uniswapV3MintV3DTOTransaction :: !(Maybe Text) -- ^ "transaction" - Which txn the mint was included in.
  , uniswapV3MintV3DTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Time of transaction.
  , uniswapV3MintV3DTOPool :: !(Maybe Text) -- ^ "pool" - Pool address.
  , uniswapV3MintV3DTOToken0 :: !(Maybe Text) -- ^ "token_0" - Reference to token0 as stored in pool contract.
  , uniswapV3MintV3DTOToken1 :: !(Maybe Text) -- ^ "token_1" - Reference to token1 as stored in pool contract.
  , uniswapV3MintV3DTOOwner :: !(Maybe Text) -- ^ "owner" - Owner of position where liquidity minted to.
  , uniswapV3MintV3DTOSender :: !(Maybe Text) -- ^ "sender" - The address that minted the liquidity.
  , uniswapV3MintV3DTOOrigin :: !(Maybe Text) -- ^ "origin" - Transaction origin: the EOA (Externally Owned Account) that initiated the transaction.
  , uniswapV3MintV3DTOAmount :: !(Maybe Text) -- ^ "amount" - Amount of liquidity minted.
  , uniswapV3MintV3DTOAmount0 :: !(Maybe Text) -- ^ "amount_0" - Amount of token 0 minted.
  , uniswapV3MintV3DTOAmount1 :: !(Maybe Text) -- ^ "amount_1" - Amount of token 1 minted.
  , uniswapV3MintV3DTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - Derived amount based on available prices of tokens.
  , uniswapV3MintV3DTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - Lower tick of the position.
  , uniswapV3MintV3DTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - Upper tick of the position.
  , uniswapV3MintV3DTOLogIndex :: !(Maybe Text) -- ^ "log_index" - Order within the transaction.
  , uniswapV3MintV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3MintV3DTO
instance A.FromJSON UniswapV3MintV3DTO where
  parseJSON = A.withObject "UniswapV3MintV3DTO" $ \o ->
    UniswapV3MintV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "transaction")
      <*> (o .:? "timestamp")
      <*> (o .:? "pool")
      <*> (o .:? "token_0")
      <*> (o .:? "token_1")
      <*> (o .:? "owner")
      <*> (o .:? "sender")
      <*> (o .:? "origin")
      <*> (o .:? "amount")
      <*> (o .:? "amount_0")
      <*> (o .:? "amount_1")
      <*> (o .:? "amount_usd")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "log_index")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3MintV3DTO
instance A.ToJSON UniswapV3MintV3DTO where
  toJSON UniswapV3MintV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3MintV3DTOEntryTime
      , "recv_time" .= uniswapV3MintV3DTORecvTime
      , "block_number" .= uniswapV3MintV3DTOBlockNumber
      , "id" .= uniswapV3MintV3DTOId
      , "transaction" .= uniswapV3MintV3DTOTransaction
      , "timestamp" .= uniswapV3MintV3DTOTimestamp
      , "pool" .= uniswapV3MintV3DTOPool
      , "token_0" .= uniswapV3MintV3DTOToken0
      , "token_1" .= uniswapV3MintV3DTOToken1
      , "owner" .= uniswapV3MintV3DTOOwner
      , "sender" .= uniswapV3MintV3DTOSender
      , "origin" .= uniswapV3MintV3DTOOrigin
      , "amount" .= uniswapV3MintV3DTOAmount
      , "amount_0" .= uniswapV3MintV3DTOAmount0
      , "amount_1" .= uniswapV3MintV3DTOAmount1
      , "amount_usd" .= uniswapV3MintV3DTOAmountUsd
      , "tick_lower" .= uniswapV3MintV3DTOTickLower
      , "tick_upper" .= uniswapV3MintV3DTOTickUpper
      , "log_index" .= uniswapV3MintV3DTOLogIndex
      , "vid" .= uniswapV3MintV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3MintV3DTO' (by applying it's required fields, if any)
mkUniswapV3MintV3DTO
  :: UniswapV3MintV3DTO
mkUniswapV3MintV3DTO =
  UniswapV3MintV3DTO
  { uniswapV3MintV3DTOEntryTime = Nothing
  , uniswapV3MintV3DTORecvTime = Nothing
  , uniswapV3MintV3DTOBlockNumber = Nothing
  , uniswapV3MintV3DTOId = Nothing
  , uniswapV3MintV3DTOTransaction = Nothing
  , uniswapV3MintV3DTOTimestamp = Nothing
  , uniswapV3MintV3DTOPool = Nothing
  , uniswapV3MintV3DTOToken0 = Nothing
  , uniswapV3MintV3DTOToken1 = Nothing
  , uniswapV3MintV3DTOOwner = Nothing
  , uniswapV3MintV3DTOSender = Nothing
  , uniswapV3MintV3DTOOrigin = Nothing
  , uniswapV3MintV3DTOAmount = Nothing
  , uniswapV3MintV3DTOAmount0 = Nothing
  , uniswapV3MintV3DTOAmount1 = Nothing
  , uniswapV3MintV3DTOAmountUsd = Nothing
  , uniswapV3MintV3DTOTickLower = Nothing
  , uniswapV3MintV3DTOTickUpper = Nothing
  , uniswapV3MintV3DTOLogIndex = Nothing
  , uniswapV3MintV3DTOVid = Nothing
  }

-- ** UniswapV3PoolDayDataV3DTO
-- | UniswapV3PoolDayDataV3DTO
-- Data accumulated and condensed into day stats for each pool.
data UniswapV3PoolDayDataV3DTO = UniswapV3PoolDayDataV3DTO
  { uniswapV3PoolDayDataV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3PoolDayDataV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3PoolDayDataV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3PoolDayDataV3DTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: &lt;pool address&gt;-&lt;day id&gt;.
  , uniswapV3PoolDayDataV3DTODate :: !(Maybe Int) -- ^ "date" - Timestamp rounded to current day by dividing by 86400
  , uniswapV3PoolDayDataV3DTOPool :: !(Maybe Text) -- ^ "pool" - Pointer to pool.
  , uniswapV3PoolDayDataV3DTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - In range liquidity at end of period.
  , uniswapV3PoolDayDataV3DTOSqrtPrice :: !(Maybe Text) -- ^ "sqrt_price" - Current price tracker at end of period.
  , uniswapV3PoolDayDataV3DTOToken0Price :: !(Maybe Text) -- ^ "token_0_price" - Price of token0 - derived from sqrtPrice.
  , uniswapV3PoolDayDataV3DTOToken1Price :: !(Maybe Text) -- ^ "token_1_price" - Price of token1 - derived from sqrtPrice.
  , uniswapV3PoolDayDataV3DTOTick :: !(Maybe Text) -- ^ "tick" - Current tick at end of period.
  , uniswapV3PoolDayDataV3DTOFeeGrowthGlobal0x128 :: !(Maybe Text) -- ^ "fee_growth_global_0x128" - Tracker for global fee growth.
  , uniswapV3PoolDayDataV3DTOFeeGrowthGlobal1x128 :: !(Maybe Text) -- ^ "fee_growth_global_1x128" - Tracker for global fee growth.
  , uniswapV3PoolDayDataV3DTOTvlUsd :: !(Maybe Text) -- ^ "tvl_usd" - Total value locked derived in USD at end of period.
  , uniswapV3PoolDayDataV3DTOVolumeToken0 :: !(Maybe Text) -- ^ "volume_token_0" - Volume in token0.
  , uniswapV3PoolDayDataV3DTOVolumeToken1 :: !(Maybe Text) -- ^ "volume_token_1" - Volume in token1.
  , uniswapV3PoolDayDataV3DTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Volume in USD.
  , uniswapV3PoolDayDataV3DTOFeesUsd :: !(Maybe Text) -- ^ "fees_usd" - Fees in USD.
  , uniswapV3PoolDayDataV3DTOTxCount :: !(Maybe Text) -- ^ "tx_count" - Number of transactions during period.
  , uniswapV3PoolDayDataV3DTOOpen :: !(Maybe Text) -- ^ "open" - Opening price of token0.
  , uniswapV3PoolDayDataV3DTOHigh :: !(Maybe Text) -- ^ "high" - High price of token0.
  , uniswapV3PoolDayDataV3DTOLow :: !(Maybe Text) -- ^ "low" - Low price of token0.
  , uniswapV3PoolDayDataV3DTOClose :: !(Maybe Text) -- ^ "close" - Close price of token0.
  , uniswapV3PoolDayDataV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3PoolDayDataV3DTO
instance A.FromJSON UniswapV3PoolDayDataV3DTO where
  parseJSON = A.withObject "UniswapV3PoolDayDataV3DTO" $ \o ->
    UniswapV3PoolDayDataV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "date")
      <*> (o .:? "pool")
      <*> (o .:? "liquidity")
      <*> (o .:? "sqrt_price")
      <*> (o .:? "token_0_price")
      <*> (o .:? "token_1_price")
      <*> (o .:? "tick")
      <*> (o .:? "fee_growth_global_0x128")
      <*> (o .:? "fee_growth_global_1x128")
      <*> (o .:? "tvl_usd")
      <*> (o .:? "volume_token_0")
      <*> (o .:? "volume_token_1")
      <*> (o .:? "volume_usd")
      <*> (o .:? "fees_usd")
      <*> (o .:? "tx_count")
      <*> (o .:? "open")
      <*> (o .:? "high")
      <*> (o .:? "low")
      <*> (o .:? "close")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3PoolDayDataV3DTO
instance A.ToJSON UniswapV3PoolDayDataV3DTO where
  toJSON UniswapV3PoolDayDataV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3PoolDayDataV3DTOEntryTime
      , "recv_time" .= uniswapV3PoolDayDataV3DTORecvTime
      , "block_number" .= uniswapV3PoolDayDataV3DTOBlockNumber
      , "id" .= uniswapV3PoolDayDataV3DTOId
      , "date" .= uniswapV3PoolDayDataV3DTODate
      , "pool" .= uniswapV3PoolDayDataV3DTOPool
      , "liquidity" .= uniswapV3PoolDayDataV3DTOLiquidity
      , "sqrt_price" .= uniswapV3PoolDayDataV3DTOSqrtPrice
      , "token_0_price" .= uniswapV3PoolDayDataV3DTOToken0Price
      , "token_1_price" .= uniswapV3PoolDayDataV3DTOToken1Price
      , "tick" .= uniswapV3PoolDayDataV3DTOTick
      , "fee_growth_global_0x128" .= uniswapV3PoolDayDataV3DTOFeeGrowthGlobal0x128
      , "fee_growth_global_1x128" .= uniswapV3PoolDayDataV3DTOFeeGrowthGlobal1x128
      , "tvl_usd" .= uniswapV3PoolDayDataV3DTOTvlUsd
      , "volume_token_0" .= uniswapV3PoolDayDataV3DTOVolumeToken0
      , "volume_token_1" .= uniswapV3PoolDayDataV3DTOVolumeToken1
      , "volume_usd" .= uniswapV3PoolDayDataV3DTOVolumeUsd
      , "fees_usd" .= uniswapV3PoolDayDataV3DTOFeesUsd
      , "tx_count" .= uniswapV3PoolDayDataV3DTOTxCount
      , "open" .= uniswapV3PoolDayDataV3DTOOpen
      , "high" .= uniswapV3PoolDayDataV3DTOHigh
      , "low" .= uniswapV3PoolDayDataV3DTOLow
      , "close" .= uniswapV3PoolDayDataV3DTOClose
      , "vid" .= uniswapV3PoolDayDataV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3PoolDayDataV3DTO' (by applying it's required fields, if any)
mkUniswapV3PoolDayDataV3DTO
  :: UniswapV3PoolDayDataV3DTO
mkUniswapV3PoolDayDataV3DTO =
  UniswapV3PoolDayDataV3DTO
  { uniswapV3PoolDayDataV3DTOEntryTime = Nothing
  , uniswapV3PoolDayDataV3DTORecvTime = Nothing
  , uniswapV3PoolDayDataV3DTOBlockNumber = Nothing
  , uniswapV3PoolDayDataV3DTOId = Nothing
  , uniswapV3PoolDayDataV3DTODate = Nothing
  , uniswapV3PoolDayDataV3DTOPool = Nothing
  , uniswapV3PoolDayDataV3DTOLiquidity = Nothing
  , uniswapV3PoolDayDataV3DTOSqrtPrice = Nothing
  , uniswapV3PoolDayDataV3DTOToken0Price = Nothing
  , uniswapV3PoolDayDataV3DTOToken1Price = Nothing
  , uniswapV3PoolDayDataV3DTOTick = Nothing
  , uniswapV3PoolDayDataV3DTOFeeGrowthGlobal0x128 = Nothing
  , uniswapV3PoolDayDataV3DTOFeeGrowthGlobal1x128 = Nothing
  , uniswapV3PoolDayDataV3DTOTvlUsd = Nothing
  , uniswapV3PoolDayDataV3DTOVolumeToken0 = Nothing
  , uniswapV3PoolDayDataV3DTOVolumeToken1 = Nothing
  , uniswapV3PoolDayDataV3DTOVolumeUsd = Nothing
  , uniswapV3PoolDayDataV3DTOFeesUsd = Nothing
  , uniswapV3PoolDayDataV3DTOTxCount = Nothing
  , uniswapV3PoolDayDataV3DTOOpen = Nothing
  , uniswapV3PoolDayDataV3DTOHigh = Nothing
  , uniswapV3PoolDayDataV3DTOLow = Nothing
  , uniswapV3PoolDayDataV3DTOClose = Nothing
  , uniswapV3PoolDayDataV3DTOVid = Nothing
  }

-- ** UniswapV3PoolHourDataV3DTO
-- | UniswapV3PoolHourDataV3DTO
-- Hourly stats tracker for pool.
data UniswapV3PoolHourDataV3DTO = UniswapV3PoolHourDataV3DTO
  { uniswapV3PoolHourDataV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3PoolHourDataV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3PoolHourDataV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3PoolHourDataV3DTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: &lt;pool address&gt;-&lt;day id&gt;
  , uniswapV3PoolHourDataV3DTOPeriodStartUnix :: !(Maybe Int) -- ^ "period_start_unix" - Unix timestamp for start of hour.
  , uniswapV3PoolHourDataV3DTOPool :: !(Maybe Text) -- ^ "pool" - Pointer to pool.
  , uniswapV3PoolHourDataV3DTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - In range liquidity at end of period.
  , uniswapV3PoolHourDataV3DTOSqrtPrice :: !(Maybe Text) -- ^ "sqrt_price" - Current price tracker at end of period.
  , uniswapV3PoolHourDataV3DTOToken0Price :: !(Maybe Text) -- ^ "token_0_price" - Price of token0 - derived from sqrtPrice.
  , uniswapV3PoolHourDataV3DTOToken1Price :: !(Maybe Text) -- ^ "token_1_price" - Price of token1 - derived from sqrtPrice.
  , uniswapV3PoolHourDataV3DTOTick :: !(Maybe Text) -- ^ "tick" - Current tick at end of period.
  , uniswapV3PoolHourDataV3DTOFeeGrowthGlobal0x128 :: !(Maybe Text) -- ^ "fee_growth_global_0x128" - Tracker for global fee growth.
  , uniswapV3PoolHourDataV3DTOFeeGrowthGlobal1x128 :: !(Maybe Text) -- ^ "fee_growth_global_1x128" - Tracker for global fee growth.
  , uniswapV3PoolHourDataV3DTOTvlUsd :: !(Maybe Text) -- ^ "tvl_usd" - Total value locked derived in USD at end of period.
  , uniswapV3PoolHourDataV3DTOVolumeToken0 :: !(Maybe Text) -- ^ "volume_token_0" - Volume in token0.
  , uniswapV3PoolHourDataV3DTOVolumeToken1 :: !(Maybe Text) -- ^ "volume_token_1" - Volume in token1.
  , uniswapV3PoolHourDataV3DTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Volume in USD.
  , uniswapV3PoolHourDataV3DTOFeesUsd :: !(Maybe Text) -- ^ "fees_usd" - Fees in USD.
  , uniswapV3PoolHourDataV3DTOTxCount :: !(Maybe Text) -- ^ "tx_count" - Number of transactions during period.
  , uniswapV3PoolHourDataV3DTOOpen :: !(Maybe Text) -- ^ "open" - Opening price of token0.
  , uniswapV3PoolHourDataV3DTOHigh :: !(Maybe Text) -- ^ "high" - High price of token0.
  , uniswapV3PoolHourDataV3DTOLow :: !(Maybe Text) -- ^ "low" - Low price of token0.
  , uniswapV3PoolHourDataV3DTOClose :: !(Maybe Text) -- ^ "close" - Close price of token0.
  , uniswapV3PoolHourDataV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3PoolHourDataV3DTO
instance A.FromJSON UniswapV3PoolHourDataV3DTO where
  parseJSON = A.withObject "UniswapV3PoolHourDataV3DTO" $ \o ->
    UniswapV3PoolHourDataV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "period_start_unix")
      <*> (o .:? "pool")
      <*> (o .:? "liquidity")
      <*> (o .:? "sqrt_price")
      <*> (o .:? "token_0_price")
      <*> (o .:? "token_1_price")
      <*> (o .:? "tick")
      <*> (o .:? "fee_growth_global_0x128")
      <*> (o .:? "fee_growth_global_1x128")
      <*> (o .:? "tvl_usd")
      <*> (o .:? "volume_token_0")
      <*> (o .:? "volume_token_1")
      <*> (o .:? "volume_usd")
      <*> (o .:? "fees_usd")
      <*> (o .:? "tx_count")
      <*> (o .:? "open")
      <*> (o .:? "high")
      <*> (o .:? "low")
      <*> (o .:? "close")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3PoolHourDataV3DTO
instance A.ToJSON UniswapV3PoolHourDataV3DTO where
  toJSON UniswapV3PoolHourDataV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3PoolHourDataV3DTOEntryTime
      , "recv_time" .= uniswapV3PoolHourDataV3DTORecvTime
      , "block_number" .= uniswapV3PoolHourDataV3DTOBlockNumber
      , "id" .= uniswapV3PoolHourDataV3DTOId
      , "period_start_unix" .= uniswapV3PoolHourDataV3DTOPeriodStartUnix
      , "pool" .= uniswapV3PoolHourDataV3DTOPool
      , "liquidity" .= uniswapV3PoolHourDataV3DTOLiquidity
      , "sqrt_price" .= uniswapV3PoolHourDataV3DTOSqrtPrice
      , "token_0_price" .= uniswapV3PoolHourDataV3DTOToken0Price
      , "token_1_price" .= uniswapV3PoolHourDataV3DTOToken1Price
      , "tick" .= uniswapV3PoolHourDataV3DTOTick
      , "fee_growth_global_0x128" .= uniswapV3PoolHourDataV3DTOFeeGrowthGlobal0x128
      , "fee_growth_global_1x128" .= uniswapV3PoolHourDataV3DTOFeeGrowthGlobal1x128
      , "tvl_usd" .= uniswapV3PoolHourDataV3DTOTvlUsd
      , "volume_token_0" .= uniswapV3PoolHourDataV3DTOVolumeToken0
      , "volume_token_1" .= uniswapV3PoolHourDataV3DTOVolumeToken1
      , "volume_usd" .= uniswapV3PoolHourDataV3DTOVolumeUsd
      , "fees_usd" .= uniswapV3PoolHourDataV3DTOFeesUsd
      , "tx_count" .= uniswapV3PoolHourDataV3DTOTxCount
      , "open" .= uniswapV3PoolHourDataV3DTOOpen
      , "high" .= uniswapV3PoolHourDataV3DTOHigh
      , "low" .= uniswapV3PoolHourDataV3DTOLow
      , "close" .= uniswapV3PoolHourDataV3DTOClose
      , "vid" .= uniswapV3PoolHourDataV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3PoolHourDataV3DTO' (by applying it's required fields, if any)
mkUniswapV3PoolHourDataV3DTO
  :: UniswapV3PoolHourDataV3DTO
mkUniswapV3PoolHourDataV3DTO =
  UniswapV3PoolHourDataV3DTO
  { uniswapV3PoolHourDataV3DTOEntryTime = Nothing
  , uniswapV3PoolHourDataV3DTORecvTime = Nothing
  , uniswapV3PoolHourDataV3DTOBlockNumber = Nothing
  , uniswapV3PoolHourDataV3DTOId = Nothing
  , uniswapV3PoolHourDataV3DTOPeriodStartUnix = Nothing
  , uniswapV3PoolHourDataV3DTOPool = Nothing
  , uniswapV3PoolHourDataV3DTOLiquidity = Nothing
  , uniswapV3PoolHourDataV3DTOSqrtPrice = Nothing
  , uniswapV3PoolHourDataV3DTOToken0Price = Nothing
  , uniswapV3PoolHourDataV3DTOToken1Price = Nothing
  , uniswapV3PoolHourDataV3DTOTick = Nothing
  , uniswapV3PoolHourDataV3DTOFeeGrowthGlobal0x128 = Nothing
  , uniswapV3PoolHourDataV3DTOFeeGrowthGlobal1x128 = Nothing
  , uniswapV3PoolHourDataV3DTOTvlUsd = Nothing
  , uniswapV3PoolHourDataV3DTOVolumeToken0 = Nothing
  , uniswapV3PoolHourDataV3DTOVolumeToken1 = Nothing
  , uniswapV3PoolHourDataV3DTOVolumeUsd = Nothing
  , uniswapV3PoolHourDataV3DTOFeesUsd = Nothing
  , uniswapV3PoolHourDataV3DTOTxCount = Nothing
  , uniswapV3PoolHourDataV3DTOOpen = Nothing
  , uniswapV3PoolHourDataV3DTOHigh = Nothing
  , uniswapV3PoolHourDataV3DTOLow = Nothing
  , uniswapV3PoolHourDataV3DTOClose = Nothing
  , uniswapV3PoolHourDataV3DTOVid = Nothing
  }

-- ** UniswapV3PoolV3DTO
-- | UniswapV3PoolV3DTO
-- Information about a pool. Includes references to each token within the pool, volume information, liquidity information, and more. The pool entity mirrors the pool smart contract, and also contains aggregated information about use.
data UniswapV3PoolV3DTO = UniswapV3PoolV3DTO
  { uniswapV3PoolV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3PoolV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3PoolV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3PoolV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , uniswapV3PoolV3DTOId :: !(Maybe Text) -- ^ "id" - Pool address.
  , uniswapV3PoolV3DTOCreatedAtTimestamp :: !(Maybe DateTime) -- ^ "created_at_timestamp" - Creation time.
  , uniswapV3PoolV3DTOToken0 :: !(Maybe Text) -- ^ "token_0" - Reference to token0 as stored in pool contract.
  , uniswapV3PoolV3DTOToken1 :: !(Maybe Text) -- ^ "token_1" - Reference to token1 as stored in pool contract.
  , uniswapV3PoolV3DTOFeeTier :: !(Maybe NumericsBigInteger) -- ^ "fee_tier"
  , uniswapV3PoolV3DTOLiquidity :: !(Maybe NumericsBigInteger) -- ^ "liquidity"
  , uniswapV3PoolV3DTOSqrtPrice :: !(Maybe NumericsBigInteger) -- ^ "sqrt_price"
  , uniswapV3PoolV3DTOFeeGrowthGlobal0x128 :: !(Maybe NumericsBigInteger) -- ^ "fee_growth_global_0x128"
  , uniswapV3PoolV3DTOFeeGrowthGlobal1x128 :: !(Maybe NumericsBigInteger) -- ^ "fee_growth_global_1x128"
  , uniswapV3PoolV3DTOToken0Price :: !(Maybe Text) -- ^ "token_0_price" - Token0 per token1.
  , uniswapV3PoolV3DTOToken1Price :: !(Maybe Text) -- ^ "token_1_price" - Token1 per token0.
  , uniswapV3PoolV3DTOTick :: !(Maybe NumericsBigInteger) -- ^ "tick"
  , uniswapV3PoolV3DTOObservationIndex :: !(Maybe NumericsBigInteger) -- ^ "observation_index"
  , uniswapV3PoolV3DTOVolumeToken0 :: !(Maybe Text) -- ^ "volume_token_0" - All time token0 swapped.
  , uniswapV3PoolV3DTOVolumeToken1 :: !(Maybe Text) -- ^ "volume_token_1" - All time token1 swapped.
  , uniswapV3PoolV3DTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - All time USD swapped.
  , uniswapV3PoolV3DTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - All time USD swapped, unfiltered for unreliable USD pools.
  , uniswapV3PoolV3DTOFeesUsd :: !(Maybe Text) -- ^ "fees_usd" - Fees in USD.
  , uniswapV3PoolV3DTOTxCount :: !(Maybe NumericsBigInteger) -- ^ "tx_count"
  , uniswapV3PoolV3DTOCollectedFeesToken0 :: !(Maybe Text) -- ^ "collected_fees_token_0" - All time fees collected token0.
  , uniswapV3PoolV3DTOCollectedFeesToken1 :: !(Maybe Text) -- ^ "collected_fees_token_1" - All time fees collected token1.
  , uniswapV3PoolV3DTOCollectedFeesUsd :: !(Maybe Text) -- ^ "collected_fees_usd" - All time fees collected derived USD.
  , uniswapV3PoolV3DTOTotalValueLockedToken0 :: !(Maybe Text) -- ^ "total_value_locked_token_0" - Total token 0 across all ticks.
  , uniswapV3PoolV3DTOTotalValueLockedToken1 :: !(Maybe Text) -- ^ "total_value_locked_token_1" - 
  , uniswapV3PoolV3DTOTotalValueLockedEth :: !(Maybe Text) -- ^ "total_value_locked_eth" - Total token 1 across all ticks.
  , uniswapV3PoolV3DTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Total value locked USD.
  , uniswapV3PoolV3DTOTotalValueLockedUsdUntracked :: !(Maybe Text) -- ^ "total_value_locked_usd_untracked" - Total value locked derived ETH.
  , uniswapV3PoolV3DTOLiquidityProviderCount :: !(Maybe Text) -- ^ "liquidity_provider_count" - Liquidity providers count, used to detect new exchanges.
  , uniswapV3PoolV3DTOEvaluatedAsk :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_ask"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3PoolV3DTO
instance A.FromJSON UniswapV3PoolV3DTO where
  parseJSON = A.withObject "UniswapV3PoolV3DTO" $ \o ->
    UniswapV3PoolV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "created_at_timestamp")
      <*> (o .:? "token_0")
      <*> (o .:? "token_1")
      <*> (o .:? "fee_tier")
      <*> (o .:? "liquidity")
      <*> (o .:? "sqrt_price")
      <*> (o .:? "fee_growth_global_0x128")
      <*> (o .:? "fee_growth_global_1x128")
      <*> (o .:? "token_0_price")
      <*> (o .:? "token_1_price")
      <*> (o .:? "tick")
      <*> (o .:? "observation_index")
      <*> (o .:? "volume_token_0")
      <*> (o .:? "volume_token_1")
      <*> (o .:? "volume_usd")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "fees_usd")
      <*> (o .:? "tx_count")
      <*> (o .:? "collected_fees_token_0")
      <*> (o .:? "collected_fees_token_1")
      <*> (o .:? "collected_fees_usd")
      <*> (o .:? "total_value_locked_token_0")
      <*> (o .:? "total_value_locked_token_1")
      <*> (o .:? "total_value_locked_eth")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_value_locked_usd_untracked")
      <*> (o .:? "liquidity_provider_count")
      <*> (o .:? "evaluated_ask")

-- | ToJSON UniswapV3PoolV3DTO
instance A.ToJSON UniswapV3PoolV3DTO where
  toJSON UniswapV3PoolV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3PoolV3DTOEntryTime
      , "recv_time" .= uniswapV3PoolV3DTORecvTime
      , "block_number" .= uniswapV3PoolV3DTOBlockNumber
      , "vid" .= uniswapV3PoolV3DTOVid
      , "id" .= uniswapV3PoolV3DTOId
      , "created_at_timestamp" .= uniswapV3PoolV3DTOCreatedAtTimestamp
      , "token_0" .= uniswapV3PoolV3DTOToken0
      , "token_1" .= uniswapV3PoolV3DTOToken1
      , "fee_tier" .= uniswapV3PoolV3DTOFeeTier
      , "liquidity" .= uniswapV3PoolV3DTOLiquidity
      , "sqrt_price" .= uniswapV3PoolV3DTOSqrtPrice
      , "fee_growth_global_0x128" .= uniswapV3PoolV3DTOFeeGrowthGlobal0x128
      , "fee_growth_global_1x128" .= uniswapV3PoolV3DTOFeeGrowthGlobal1x128
      , "token_0_price" .= uniswapV3PoolV3DTOToken0Price
      , "token_1_price" .= uniswapV3PoolV3DTOToken1Price
      , "tick" .= uniswapV3PoolV3DTOTick
      , "observation_index" .= uniswapV3PoolV3DTOObservationIndex
      , "volume_token_0" .= uniswapV3PoolV3DTOVolumeToken0
      , "volume_token_1" .= uniswapV3PoolV3DTOVolumeToken1
      , "volume_usd" .= uniswapV3PoolV3DTOVolumeUsd
      , "untracked_volume_usd" .= uniswapV3PoolV3DTOUntrackedVolumeUsd
      , "fees_usd" .= uniswapV3PoolV3DTOFeesUsd
      , "tx_count" .= uniswapV3PoolV3DTOTxCount
      , "collected_fees_token_0" .= uniswapV3PoolV3DTOCollectedFeesToken0
      , "collected_fees_token_1" .= uniswapV3PoolV3DTOCollectedFeesToken1
      , "collected_fees_usd" .= uniswapV3PoolV3DTOCollectedFeesUsd
      , "total_value_locked_token_0" .= uniswapV3PoolV3DTOTotalValueLockedToken0
      , "total_value_locked_token_1" .= uniswapV3PoolV3DTOTotalValueLockedToken1
      , "total_value_locked_eth" .= uniswapV3PoolV3DTOTotalValueLockedEth
      , "total_value_locked_usd" .= uniswapV3PoolV3DTOTotalValueLockedUsd
      , "total_value_locked_usd_untracked" .= uniswapV3PoolV3DTOTotalValueLockedUsdUntracked
      , "liquidity_provider_count" .= uniswapV3PoolV3DTOLiquidityProviderCount
      , "evaluated_ask" .= uniswapV3PoolV3DTOEvaluatedAsk
      ]


-- | Construct a value of type 'UniswapV3PoolV3DTO' (by applying it's required fields, if any)
mkUniswapV3PoolV3DTO
  :: UniswapV3PoolV3DTO
mkUniswapV3PoolV3DTO =
  UniswapV3PoolV3DTO
  { uniswapV3PoolV3DTOEntryTime = Nothing
  , uniswapV3PoolV3DTORecvTime = Nothing
  , uniswapV3PoolV3DTOBlockNumber = Nothing
  , uniswapV3PoolV3DTOVid = Nothing
  , uniswapV3PoolV3DTOId = Nothing
  , uniswapV3PoolV3DTOCreatedAtTimestamp = Nothing
  , uniswapV3PoolV3DTOToken0 = Nothing
  , uniswapV3PoolV3DTOToken1 = Nothing
  , uniswapV3PoolV3DTOFeeTier = Nothing
  , uniswapV3PoolV3DTOLiquidity = Nothing
  , uniswapV3PoolV3DTOSqrtPrice = Nothing
  , uniswapV3PoolV3DTOFeeGrowthGlobal0x128 = Nothing
  , uniswapV3PoolV3DTOFeeGrowthGlobal1x128 = Nothing
  , uniswapV3PoolV3DTOToken0Price = Nothing
  , uniswapV3PoolV3DTOToken1Price = Nothing
  , uniswapV3PoolV3DTOTick = Nothing
  , uniswapV3PoolV3DTOObservationIndex = Nothing
  , uniswapV3PoolV3DTOVolumeToken0 = Nothing
  , uniswapV3PoolV3DTOVolumeToken1 = Nothing
  , uniswapV3PoolV3DTOVolumeUsd = Nothing
  , uniswapV3PoolV3DTOUntrackedVolumeUsd = Nothing
  , uniswapV3PoolV3DTOFeesUsd = Nothing
  , uniswapV3PoolV3DTOTxCount = Nothing
  , uniswapV3PoolV3DTOCollectedFeesToken0 = Nothing
  , uniswapV3PoolV3DTOCollectedFeesToken1 = Nothing
  , uniswapV3PoolV3DTOCollectedFeesUsd = Nothing
  , uniswapV3PoolV3DTOTotalValueLockedToken0 = Nothing
  , uniswapV3PoolV3DTOTotalValueLockedToken1 = Nothing
  , uniswapV3PoolV3DTOTotalValueLockedEth = Nothing
  , uniswapV3PoolV3DTOTotalValueLockedUsd = Nothing
  , uniswapV3PoolV3DTOTotalValueLockedUsdUntracked = Nothing
  , uniswapV3PoolV3DTOLiquidityProviderCount = Nothing
  , uniswapV3PoolV3DTOEvaluatedAsk = Nothing
  }

-- ** UniswapV3PositionSnapshotV3DTO
-- | UniswapV3PositionSnapshotV3DTO
data UniswapV3PositionSnapshotV3DTO = UniswapV3PositionSnapshotV3DTO
  { uniswapV3PositionSnapshotV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3PositionSnapshotV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3PositionSnapshotV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3PositionSnapshotV3DTOId :: !(Maybe Text) -- ^ "id" - NFT token identifier, format: &lt;NFT token id&gt;#&lt;block number&gt;
  , uniswapV3PositionSnapshotV3DTOOwner :: !(Maybe Text) -- ^ "owner" - Owner of the NFT.
  , uniswapV3PositionSnapshotV3DTOPool :: !(Maybe Text) -- ^ "pool" - Pool the position is within.
  , uniswapV3PositionSnapshotV3DTOPosition :: !(Maybe Text) -- ^ "position" - Position of which the snap was taken of.
  , uniswapV3PositionSnapshotV3DTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of block in which the snap was created.
  , uniswapV3PositionSnapshotV3DTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - Total position liquidity.
  , uniswapV3PositionSnapshotV3DTODepositedToken0 :: !(Maybe Text) -- ^ "deposited_token_0" - Amount of token 0 ever deposited to position.
  , uniswapV3PositionSnapshotV3DTODepositedToken1 :: !(Maybe Text) -- ^ "deposited_token_1" - Amount of token 1 ever deposited to position.
  , uniswapV3PositionSnapshotV3DTOWithdrawnToken0 :: !(Maybe Text) -- ^ "withdrawn_token_0" - Amount of token 0 ever withdrawn from position (without fees).
  , uniswapV3PositionSnapshotV3DTOWithdrawnToken1 :: !(Maybe Text) -- ^ "withdrawn_token_1" - Amount of token 1 ever withdrawn from position (without fees).
  , uniswapV3PositionSnapshotV3DTOCollectedFeesToken0 :: !(Maybe Text) -- ^ "collected_fees_token_0" - All time collected fees in token0.
  , uniswapV3PositionSnapshotV3DTOCollectedFeesToken1 :: !(Maybe Text) -- ^ "collected_fees_token_1" - All time collected fees in token1.
  , uniswapV3PositionSnapshotV3DTOTransaction :: !(Maybe Text) -- ^ "transaction" - Transaction in which the snapshot was initialized.
  , uniswapV3PositionSnapshotV3DTOFeeGrowthInside0LastX128 :: !(Maybe Text) -- ^ "fee_growth_inside_0_last_x128" - Variable needed for fee computation.
  , uniswapV3PositionSnapshotV3DTOFeeGrowthInside1LastX128 :: !(Maybe Text) -- ^ "fee_growth_inside_1_last_x128" - Variable needed for fee computation.
  , uniswapV3PositionSnapshotV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3PositionSnapshotV3DTO
instance A.FromJSON UniswapV3PositionSnapshotV3DTO where
  parseJSON = A.withObject "UniswapV3PositionSnapshotV3DTO" $ \o ->
    UniswapV3PositionSnapshotV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "owner")
      <*> (o .:? "pool")
      <*> (o .:? "position")
      <*> (o .:? "timestamp")
      <*> (o .:? "liquidity")
      <*> (o .:? "deposited_token_0")
      <*> (o .:? "deposited_token_1")
      <*> (o .:? "withdrawn_token_0")
      <*> (o .:? "withdrawn_token_1")
      <*> (o .:? "collected_fees_token_0")
      <*> (o .:? "collected_fees_token_1")
      <*> (o .:? "transaction")
      <*> (o .:? "fee_growth_inside_0_last_x128")
      <*> (o .:? "fee_growth_inside_1_last_x128")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3PositionSnapshotV3DTO
instance A.ToJSON UniswapV3PositionSnapshotV3DTO where
  toJSON UniswapV3PositionSnapshotV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3PositionSnapshotV3DTOEntryTime
      , "recv_time" .= uniswapV3PositionSnapshotV3DTORecvTime
      , "block_number" .= uniswapV3PositionSnapshotV3DTOBlockNumber
      , "id" .= uniswapV3PositionSnapshotV3DTOId
      , "owner" .= uniswapV3PositionSnapshotV3DTOOwner
      , "pool" .= uniswapV3PositionSnapshotV3DTOPool
      , "position" .= uniswapV3PositionSnapshotV3DTOPosition
      , "timestamp" .= uniswapV3PositionSnapshotV3DTOTimestamp
      , "liquidity" .= uniswapV3PositionSnapshotV3DTOLiquidity
      , "deposited_token_0" .= uniswapV3PositionSnapshotV3DTODepositedToken0
      , "deposited_token_1" .= uniswapV3PositionSnapshotV3DTODepositedToken1
      , "withdrawn_token_0" .= uniswapV3PositionSnapshotV3DTOWithdrawnToken0
      , "withdrawn_token_1" .= uniswapV3PositionSnapshotV3DTOWithdrawnToken1
      , "collected_fees_token_0" .= uniswapV3PositionSnapshotV3DTOCollectedFeesToken0
      , "collected_fees_token_1" .= uniswapV3PositionSnapshotV3DTOCollectedFeesToken1
      , "transaction" .= uniswapV3PositionSnapshotV3DTOTransaction
      , "fee_growth_inside_0_last_x128" .= uniswapV3PositionSnapshotV3DTOFeeGrowthInside0LastX128
      , "fee_growth_inside_1_last_x128" .= uniswapV3PositionSnapshotV3DTOFeeGrowthInside1LastX128
      , "vid" .= uniswapV3PositionSnapshotV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3PositionSnapshotV3DTO' (by applying it's required fields, if any)
mkUniswapV3PositionSnapshotV3DTO
  :: UniswapV3PositionSnapshotV3DTO
mkUniswapV3PositionSnapshotV3DTO =
  UniswapV3PositionSnapshotV3DTO
  { uniswapV3PositionSnapshotV3DTOEntryTime = Nothing
  , uniswapV3PositionSnapshotV3DTORecvTime = Nothing
  , uniswapV3PositionSnapshotV3DTOBlockNumber = Nothing
  , uniswapV3PositionSnapshotV3DTOId = Nothing
  , uniswapV3PositionSnapshotV3DTOOwner = Nothing
  , uniswapV3PositionSnapshotV3DTOPool = Nothing
  , uniswapV3PositionSnapshotV3DTOPosition = Nothing
  , uniswapV3PositionSnapshotV3DTOTimestamp = Nothing
  , uniswapV3PositionSnapshotV3DTOLiquidity = Nothing
  , uniswapV3PositionSnapshotV3DTODepositedToken0 = Nothing
  , uniswapV3PositionSnapshotV3DTODepositedToken1 = Nothing
  , uniswapV3PositionSnapshotV3DTOWithdrawnToken0 = Nothing
  , uniswapV3PositionSnapshotV3DTOWithdrawnToken1 = Nothing
  , uniswapV3PositionSnapshotV3DTOCollectedFeesToken0 = Nothing
  , uniswapV3PositionSnapshotV3DTOCollectedFeesToken1 = Nothing
  , uniswapV3PositionSnapshotV3DTOTransaction = Nothing
  , uniswapV3PositionSnapshotV3DTOFeeGrowthInside0LastX128 = Nothing
  , uniswapV3PositionSnapshotV3DTOFeeGrowthInside1LastX128 = Nothing
  , uniswapV3PositionSnapshotV3DTOVid = Nothing
  }

-- ** UniswapV3PositionV3DTO
-- | UniswapV3PositionV3DTO
-- Positions created through NonfungiblePositionManager. Positions are represented as NFTs (ERC-721 tokens) as opposed to the fungible ERC-20 tokens on Uniswap V1 and V2.
data UniswapV3PositionV3DTO = UniswapV3PositionV3DTO
  { uniswapV3PositionV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3PositionV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3PositionV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3PositionV3DTOId :: !(Maybe Text) -- ^ "id" - NFT token identifier.
  , uniswapV3PositionV3DTOOwner :: !(Maybe Text) -- ^ "owner" - Owner of the NFT.
  , uniswapV3PositionV3DTOPool :: !(Maybe Text) -- ^ "pool" - Pool position is within.
  , uniswapV3PositionV3DTOToken0 :: !(Maybe Text) -- ^ "token_0" - Reference to token0 as stored in pair contract.
  , uniswapV3PositionV3DTOToken1 :: !(Maybe Text) -- ^ "token_1" - Reference to token1 as stored in pair contract.
  , uniswapV3PositionV3DTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - Lower tick of the position.
  , uniswapV3PositionV3DTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - Upper tick of the position.
  , uniswapV3PositionV3DTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - Total position liquidity.
  , uniswapV3PositionV3DTODepositedToken0 :: !(Maybe Text) -- ^ "deposited_token_0" - Amount of token 0 ever deposited to position.
  , uniswapV3PositionV3DTODepositedToken1 :: !(Maybe Text) -- ^ "deposited_token_1" - Amount of token 1 ever deposited to position.
  , uniswapV3PositionV3DTOWithdrawnToken0 :: !(Maybe Text) -- ^ "withdrawn_token_0" - Amount of token 0 ever withdrawn from position (without fees).
  , uniswapV3PositionV3DTOWithdrawnToken1 :: !(Maybe Text) -- ^ "withdrawn_token_1" - Amount of token 1 ever withdrawn from position (without fees).
  , uniswapV3PositionV3DTOCollectedFeesToken0 :: !(Maybe Text) -- ^ "collected_fees_token_0" - All time collected fees in token0.
  , uniswapV3PositionV3DTOCollectedFeesToken1 :: !(Maybe Text) -- ^ "collected_fees_token_1" - All time collected fees in token1.
  , uniswapV3PositionV3DTOTransaction :: !(Maybe Text) -- ^ "transaction" - Transaction in which the position was initialized.
  , uniswapV3PositionV3DTOFeeGrowthInside0LastX128 :: !(Maybe Text) -- ^ "fee_growth_inside_0_last_x128" - Variable needed for fee computation.
  , uniswapV3PositionV3DTOFeeGrowthInside1LastX128 :: !(Maybe Text) -- ^ "fee_growth_inside_1_last_x128" - Variable needed for fee computation.
  , uniswapV3PositionV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3PositionV3DTO
instance A.FromJSON UniswapV3PositionV3DTO where
  parseJSON = A.withObject "UniswapV3PositionV3DTO" $ \o ->
    UniswapV3PositionV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "owner")
      <*> (o .:? "pool")
      <*> (o .:? "token_0")
      <*> (o .:? "token_1")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "liquidity")
      <*> (o .:? "deposited_token_0")
      <*> (o .:? "deposited_token_1")
      <*> (o .:? "withdrawn_token_0")
      <*> (o .:? "withdrawn_token_1")
      <*> (o .:? "collected_fees_token_0")
      <*> (o .:? "collected_fees_token_1")
      <*> (o .:? "transaction")
      <*> (o .:? "fee_growth_inside_0_last_x128")
      <*> (o .:? "fee_growth_inside_1_last_x128")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3PositionV3DTO
instance A.ToJSON UniswapV3PositionV3DTO where
  toJSON UniswapV3PositionV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3PositionV3DTOEntryTime
      , "recv_time" .= uniswapV3PositionV3DTORecvTime
      , "block_number" .= uniswapV3PositionV3DTOBlockNumber
      , "id" .= uniswapV3PositionV3DTOId
      , "owner" .= uniswapV3PositionV3DTOOwner
      , "pool" .= uniswapV3PositionV3DTOPool
      , "token_0" .= uniswapV3PositionV3DTOToken0
      , "token_1" .= uniswapV3PositionV3DTOToken1
      , "tick_lower" .= uniswapV3PositionV3DTOTickLower
      , "tick_upper" .= uniswapV3PositionV3DTOTickUpper
      , "liquidity" .= uniswapV3PositionV3DTOLiquidity
      , "deposited_token_0" .= uniswapV3PositionV3DTODepositedToken0
      , "deposited_token_1" .= uniswapV3PositionV3DTODepositedToken1
      , "withdrawn_token_0" .= uniswapV3PositionV3DTOWithdrawnToken0
      , "withdrawn_token_1" .= uniswapV3PositionV3DTOWithdrawnToken1
      , "collected_fees_token_0" .= uniswapV3PositionV3DTOCollectedFeesToken0
      , "collected_fees_token_1" .= uniswapV3PositionV3DTOCollectedFeesToken1
      , "transaction" .= uniswapV3PositionV3DTOTransaction
      , "fee_growth_inside_0_last_x128" .= uniswapV3PositionV3DTOFeeGrowthInside0LastX128
      , "fee_growth_inside_1_last_x128" .= uniswapV3PositionV3DTOFeeGrowthInside1LastX128
      , "vid" .= uniswapV3PositionV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3PositionV3DTO' (by applying it's required fields, if any)
mkUniswapV3PositionV3DTO
  :: UniswapV3PositionV3DTO
mkUniswapV3PositionV3DTO =
  UniswapV3PositionV3DTO
  { uniswapV3PositionV3DTOEntryTime = Nothing
  , uniswapV3PositionV3DTORecvTime = Nothing
  , uniswapV3PositionV3DTOBlockNumber = Nothing
  , uniswapV3PositionV3DTOId = Nothing
  , uniswapV3PositionV3DTOOwner = Nothing
  , uniswapV3PositionV3DTOPool = Nothing
  , uniswapV3PositionV3DTOToken0 = Nothing
  , uniswapV3PositionV3DTOToken1 = Nothing
  , uniswapV3PositionV3DTOTickLower = Nothing
  , uniswapV3PositionV3DTOTickUpper = Nothing
  , uniswapV3PositionV3DTOLiquidity = Nothing
  , uniswapV3PositionV3DTODepositedToken0 = Nothing
  , uniswapV3PositionV3DTODepositedToken1 = Nothing
  , uniswapV3PositionV3DTOWithdrawnToken0 = Nothing
  , uniswapV3PositionV3DTOWithdrawnToken1 = Nothing
  , uniswapV3PositionV3DTOCollectedFeesToken0 = Nothing
  , uniswapV3PositionV3DTOCollectedFeesToken1 = Nothing
  , uniswapV3PositionV3DTOTransaction = Nothing
  , uniswapV3PositionV3DTOFeeGrowthInside0LastX128 = Nothing
  , uniswapV3PositionV3DTOFeeGrowthInside1LastX128 = Nothing
  , uniswapV3PositionV3DTOVid = Nothing
  }

-- ** UniswapV3SwapV3DTO
-- | UniswapV3SwapV3DTO
-- Swap are created for each token swap within a pair.
data UniswapV3SwapV3DTO = UniswapV3SwapV3DTO
  { uniswapV3SwapV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3SwapV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3SwapV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3SwapV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , uniswapV3SwapV3DTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: transaction hash + \&quot;#\&quot; + index in swaps Transaction array.
  , uniswapV3SwapV3DTOTransaction :: !(Maybe Text) -- ^ "transaction" - Pointer to transaction.
  , uniswapV3SwapV3DTOTimestamp :: !(Maybe DateTime) -- ^ "timestamp" - Timestamp of transaction.
  , uniswapV3SwapV3DTOPool :: !(Maybe Text) -- ^ "pool" - Pool swap occured within.
  , uniswapV3SwapV3DTOToken0 :: !(Maybe Text) -- ^ "token_0" - Reference to token0 as stored in pair contract.
  , uniswapV3SwapV3DTOToken1 :: !(Maybe Text) -- ^ "token_1" - Reference to token1 as stored in pair contract.
  , uniswapV3SwapV3DTOSender :: !(Maybe Text) -- ^ "sender" - Sender of the swap.
  , uniswapV3SwapV3DTORecipient :: !(Maybe Text) -- ^ "recipient" - Recipient of the swap.
  , uniswapV3SwapV3DTOOrigin :: !(Maybe Text) -- ^ "origin" - Transaction origin: the EOA (Externally Owned Account) that initiated the transaction
  , uniswapV3SwapV3DTOAmount0 :: !(Maybe Text) -- ^ "amount_0" - Delta of token0 swapped.
  , uniswapV3SwapV3DTOAmount1 :: !(Maybe Text) -- ^ "amount_1" - Delta of token1 swapped.
  , uniswapV3SwapV3DTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - Derived amount of tokens sold in USD.
  , uniswapV3SwapV3DTOSqrtPriceX96 :: !(Maybe NumericsBigInteger) -- ^ "sqrt_price_x96"
  , uniswapV3SwapV3DTOTick :: !(Maybe NumericsBigInteger) -- ^ "tick"
  , uniswapV3SwapV3DTOLogIndex :: !(Maybe NumericsBigInteger) -- ^ "log_index"
  , uniswapV3SwapV3DTOEvaluatedPrice :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_price"
  , uniswapV3SwapV3DTOEvaluatedAmount :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_amount"
  , uniswapV3SwapV3DTOEvaluatedAggressor :: !(Maybe TransactionsETradeAggressiveSide) -- ^ "evaluated_aggressor"
  , uniswapV3SwapV3DTOPoolId :: !(Maybe Text) -- ^ /ReadOnly/ "pool_id"
  , uniswapV3SwapV3DTOTransactionId :: !(Maybe Text) -- ^ /ReadOnly/ "transaction_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3SwapV3DTO
instance A.FromJSON UniswapV3SwapV3DTO where
  parseJSON = A.withObject "UniswapV3SwapV3DTO" $ \o ->
    UniswapV3SwapV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "transaction")
      <*> (o .:? "timestamp")
      <*> (o .:? "pool")
      <*> (o .:? "token_0")
      <*> (o .:? "token_1")
      <*> (o .:? "sender")
      <*> (o .:? "recipient")
      <*> (o .:? "origin")
      <*> (o .:? "amount_0")
      <*> (o .:? "amount_1")
      <*> (o .:? "amount_usd")
      <*> (o .:? "sqrt_price_x96")
      <*> (o .:? "tick")
      <*> (o .:? "log_index")
      <*> (o .:? "evaluated_price")
      <*> (o .:? "evaluated_amount")
      <*> (o .:? "evaluated_aggressor")
      <*> (o .:? "pool_id")
      <*> (o .:? "transaction_id")

-- | ToJSON UniswapV3SwapV3DTO
instance A.ToJSON UniswapV3SwapV3DTO where
  toJSON UniswapV3SwapV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3SwapV3DTOEntryTime
      , "recv_time" .= uniswapV3SwapV3DTORecvTime
      , "block_number" .= uniswapV3SwapV3DTOBlockNumber
      , "vid" .= uniswapV3SwapV3DTOVid
      , "id" .= uniswapV3SwapV3DTOId
      , "transaction" .= uniswapV3SwapV3DTOTransaction
      , "timestamp" .= uniswapV3SwapV3DTOTimestamp
      , "pool" .= uniswapV3SwapV3DTOPool
      , "token_0" .= uniswapV3SwapV3DTOToken0
      , "token_1" .= uniswapV3SwapV3DTOToken1
      , "sender" .= uniswapV3SwapV3DTOSender
      , "recipient" .= uniswapV3SwapV3DTORecipient
      , "origin" .= uniswapV3SwapV3DTOOrigin
      , "amount_0" .= uniswapV3SwapV3DTOAmount0
      , "amount_1" .= uniswapV3SwapV3DTOAmount1
      , "amount_usd" .= uniswapV3SwapV3DTOAmountUsd
      , "sqrt_price_x96" .= uniswapV3SwapV3DTOSqrtPriceX96
      , "tick" .= uniswapV3SwapV3DTOTick
      , "log_index" .= uniswapV3SwapV3DTOLogIndex
      , "evaluated_price" .= uniswapV3SwapV3DTOEvaluatedPrice
      , "evaluated_amount" .= uniswapV3SwapV3DTOEvaluatedAmount
      , "evaluated_aggressor" .= uniswapV3SwapV3DTOEvaluatedAggressor
      , "pool_id" .= uniswapV3SwapV3DTOPoolId
      , "transaction_id" .= uniswapV3SwapV3DTOTransactionId
      ]


-- | Construct a value of type 'UniswapV3SwapV3DTO' (by applying it's required fields, if any)
mkUniswapV3SwapV3DTO
  :: UniswapV3SwapV3DTO
mkUniswapV3SwapV3DTO =
  UniswapV3SwapV3DTO
  { uniswapV3SwapV3DTOEntryTime = Nothing
  , uniswapV3SwapV3DTORecvTime = Nothing
  , uniswapV3SwapV3DTOBlockNumber = Nothing
  , uniswapV3SwapV3DTOVid = Nothing
  , uniswapV3SwapV3DTOId = Nothing
  , uniswapV3SwapV3DTOTransaction = Nothing
  , uniswapV3SwapV3DTOTimestamp = Nothing
  , uniswapV3SwapV3DTOPool = Nothing
  , uniswapV3SwapV3DTOToken0 = Nothing
  , uniswapV3SwapV3DTOToken1 = Nothing
  , uniswapV3SwapV3DTOSender = Nothing
  , uniswapV3SwapV3DTORecipient = Nothing
  , uniswapV3SwapV3DTOOrigin = Nothing
  , uniswapV3SwapV3DTOAmount0 = Nothing
  , uniswapV3SwapV3DTOAmount1 = Nothing
  , uniswapV3SwapV3DTOAmountUsd = Nothing
  , uniswapV3SwapV3DTOSqrtPriceX96 = Nothing
  , uniswapV3SwapV3DTOTick = Nothing
  , uniswapV3SwapV3DTOLogIndex = Nothing
  , uniswapV3SwapV3DTOEvaluatedPrice = Nothing
  , uniswapV3SwapV3DTOEvaluatedAmount = Nothing
  , uniswapV3SwapV3DTOEvaluatedAggressor = Nothing
  , uniswapV3SwapV3DTOPoolId = Nothing
  , uniswapV3SwapV3DTOTransactionId = Nothing
  }

-- ** UniswapV3TickDayDataV3DTO
-- | UniswapV3TickDayDataV3DTO
-- Data accumulated and condensed into day stats for each exchange. Entity gets saved only if there is a change during the day
data UniswapV3TickDayDataV3DTO = UniswapV3TickDayDataV3DTO
  { uniswapV3TickDayDataV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3TickDayDataV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3TickDayDataV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3TickDayDataV3DTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: &lt;pool address&gt;-&lt;tick index&gt;-&lt;timestamp&gt;.
  , uniswapV3TickDayDataV3DTODate :: !(Maybe Int) -- ^ "date" - Timestamp rounded to current day by dividing by 86400.
  , uniswapV3TickDayDataV3DTOPool :: !(Maybe Text) -- ^ "pool" - Pointer to pool.
  , uniswapV3TickDayDataV3DTOTick :: !(Maybe Text) -- ^ "tick" - Pointer to tick.
  , uniswapV3TickDayDataV3DTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - Total liquidity pool has as tick lower or upper at end of period.
  , uniswapV3TickDayDataV3DTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - How much liquidity changes when tick crossed at end of period.
  , uniswapV3TickDayDataV3DTOVolumeToken0 :: !(Maybe Text) -- ^ "volume_token_0" - Hourly volume of token0 with this tick in range.
  , uniswapV3TickDayDataV3DTOVolumeToken1 :: !(Maybe Text) -- ^ "volume_token_1" - Hourly volume of token1 with this tick in range.
  , uniswapV3TickDayDataV3DTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Hourly volume in derived USD with this tick in range.
  , uniswapV3TickDayDataV3DTOFeesUsd :: !(Maybe Text) -- ^ "fees_usd" - Fees in USD.
  , uniswapV3TickDayDataV3DTOFeeGrowthOutside0x128 :: !(Maybe Text) -- ^ "fee_growth_outside_0x128" - Variable needed for fee computation.
  , uniswapV3TickDayDataV3DTOFeeGrowthOutside1x128 :: !(Maybe Text) -- ^ "fee_growth_outside_1x128" - Variable needed for fee computation.
  , uniswapV3TickDayDataV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3TickDayDataV3DTO
instance A.FromJSON UniswapV3TickDayDataV3DTO where
  parseJSON = A.withObject "UniswapV3TickDayDataV3DTO" $ \o ->
    UniswapV3TickDayDataV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "date")
      <*> (o .:? "pool")
      <*> (o .:? "tick")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "volume_token_0")
      <*> (o .:? "volume_token_1")
      <*> (o .:? "volume_usd")
      <*> (o .:? "fees_usd")
      <*> (o .:? "fee_growth_outside_0x128")
      <*> (o .:? "fee_growth_outside_1x128")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3TickDayDataV3DTO
instance A.ToJSON UniswapV3TickDayDataV3DTO where
  toJSON UniswapV3TickDayDataV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3TickDayDataV3DTOEntryTime
      , "recv_time" .= uniswapV3TickDayDataV3DTORecvTime
      , "block_number" .= uniswapV3TickDayDataV3DTOBlockNumber
      , "id" .= uniswapV3TickDayDataV3DTOId
      , "date" .= uniswapV3TickDayDataV3DTODate
      , "pool" .= uniswapV3TickDayDataV3DTOPool
      , "tick" .= uniswapV3TickDayDataV3DTOTick
      , "liquidity_gross" .= uniswapV3TickDayDataV3DTOLiquidityGross
      , "liquidity_net" .= uniswapV3TickDayDataV3DTOLiquidityNet
      , "volume_token_0" .= uniswapV3TickDayDataV3DTOVolumeToken0
      , "volume_token_1" .= uniswapV3TickDayDataV3DTOVolumeToken1
      , "volume_usd" .= uniswapV3TickDayDataV3DTOVolumeUsd
      , "fees_usd" .= uniswapV3TickDayDataV3DTOFeesUsd
      , "fee_growth_outside_0x128" .= uniswapV3TickDayDataV3DTOFeeGrowthOutside0x128
      , "fee_growth_outside_1x128" .= uniswapV3TickDayDataV3DTOFeeGrowthOutside1x128
      , "vid" .= uniswapV3TickDayDataV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3TickDayDataV3DTO' (by applying it's required fields, if any)
mkUniswapV3TickDayDataV3DTO
  :: UniswapV3TickDayDataV3DTO
mkUniswapV3TickDayDataV3DTO =
  UniswapV3TickDayDataV3DTO
  { uniswapV3TickDayDataV3DTOEntryTime = Nothing
  , uniswapV3TickDayDataV3DTORecvTime = Nothing
  , uniswapV3TickDayDataV3DTOBlockNumber = Nothing
  , uniswapV3TickDayDataV3DTOId = Nothing
  , uniswapV3TickDayDataV3DTODate = Nothing
  , uniswapV3TickDayDataV3DTOPool = Nothing
  , uniswapV3TickDayDataV3DTOTick = Nothing
  , uniswapV3TickDayDataV3DTOLiquidityGross = Nothing
  , uniswapV3TickDayDataV3DTOLiquidityNet = Nothing
  , uniswapV3TickDayDataV3DTOVolumeToken0 = Nothing
  , uniswapV3TickDayDataV3DTOVolumeToken1 = Nothing
  , uniswapV3TickDayDataV3DTOVolumeUsd = Nothing
  , uniswapV3TickDayDataV3DTOFeesUsd = Nothing
  , uniswapV3TickDayDataV3DTOFeeGrowthOutside0x128 = Nothing
  , uniswapV3TickDayDataV3DTOFeeGrowthOutside1x128 = Nothing
  , uniswapV3TickDayDataV3DTOVid = Nothing
  }

-- ** UniswapV3TickV3DTO
-- | UniswapV3TickV3DTO
-- Ticks are the boundaries between discrete areas in price space.
data UniswapV3TickV3DTO = UniswapV3TickV3DTO
  { uniswapV3TickV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3TickV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3TickV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3TickV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , uniswapV3TickV3DTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: &lt;pool address&gt;#&lt;tick index&gt;
  , uniswapV3TickV3DTOPoolAddress :: !(Maybe Text) -- ^ "pool_address" - Pool address.
  , uniswapV3TickV3DTOTickIdx :: !(Maybe NumericsBigInteger) -- ^ "tick_idx"
  , uniswapV3TickV3DTOPool :: !(Maybe Text) -- ^ "pool" - Pool address.
  , uniswapV3TickV3DTOLiquidityGross :: !(Maybe NumericsBigInteger) -- ^ "liquidity_gross"
  , uniswapV3TickV3DTOLiquidityNet :: !(Maybe NumericsBigInteger) -- ^ "liquidity_net"
  , uniswapV3TickV3DTOPrice0 :: !(Maybe Text) -- ^ "price_0" - Calculated price of token0 of tick within this pool - constant.
  , uniswapV3TickV3DTOPrice1 :: !(Maybe Text) -- ^ "price_1" - Calculated price of token1 of tick within this pool - constant.
  , uniswapV3TickV3DTOVolumeToken0 :: !(Maybe Text) -- ^ "volume_token_0" - Lifetime volume of token0 with this tick in range.
  , uniswapV3TickV3DTOVolumeToken1 :: !(Maybe Text) -- ^ "volume_token_1" - Lifetime volume of token1 with this tick in range.
  , uniswapV3TickV3DTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Lifetime volume in derived USD with this tick in range.
  , uniswapV3TickV3DTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - Lifetime volume in untracked USD with this tick in range.
  , uniswapV3TickV3DTOFeesUsd :: !(Maybe Text) -- ^ "fees_usd" - Fees in USD.
  , uniswapV3TickV3DTOCollectedFeesToken0 :: !(Maybe Text) -- ^ "collected_fees_token_0" - All time collected fees in token0.
  , uniswapV3TickV3DTOCollectedFeesToken1 :: !(Maybe Text) -- ^ "collected_fees_token_1" - All time collected fees in token1.
  , uniswapV3TickV3DTOCollectedFeesUsd :: !(Maybe Text) -- ^ "collected_fees_usd" - All time collected fees in USD.
  , uniswapV3TickV3DTOCreatedAtTimestamp :: !(Maybe DateTime) -- ^ "created_at_timestamp" - Created time.
  , uniswapV3TickV3DTOLiquidityProviderCount :: !(Maybe NumericsBigInteger) -- ^ "liquidity_provider_count"
  , uniswapV3TickV3DTOFeeGrowthOutside0x128 :: !(Maybe NumericsBigInteger) -- ^ "fee_growth_outside_0x128"
  , uniswapV3TickV3DTOFeeGrowthOutside1x128 :: !(Maybe NumericsBigInteger) -- ^ "fee_growth_outside_1x128"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3TickV3DTO
instance A.FromJSON UniswapV3TickV3DTO where
  parseJSON = A.withObject "UniswapV3TickV3DTO" $ \o ->
    UniswapV3TickV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "pool_address")
      <*> (o .:? "tick_idx")
      <*> (o .:? "pool")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "price_0")
      <*> (o .:? "price_1")
      <*> (o .:? "volume_token_0")
      <*> (o .:? "volume_token_1")
      <*> (o .:? "volume_usd")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "fees_usd")
      <*> (o .:? "collected_fees_token_0")
      <*> (o .:? "collected_fees_token_1")
      <*> (o .:? "collected_fees_usd")
      <*> (o .:? "created_at_timestamp")
      <*> (o .:? "liquidity_provider_count")
      <*> (o .:? "fee_growth_outside_0x128")
      <*> (o .:? "fee_growth_outside_1x128")

-- | ToJSON UniswapV3TickV3DTO
instance A.ToJSON UniswapV3TickV3DTO where
  toJSON UniswapV3TickV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3TickV3DTOEntryTime
      , "recv_time" .= uniswapV3TickV3DTORecvTime
      , "block_number" .= uniswapV3TickV3DTOBlockNumber
      , "vid" .= uniswapV3TickV3DTOVid
      , "id" .= uniswapV3TickV3DTOId
      , "pool_address" .= uniswapV3TickV3DTOPoolAddress
      , "tick_idx" .= uniswapV3TickV3DTOTickIdx
      , "pool" .= uniswapV3TickV3DTOPool
      , "liquidity_gross" .= uniswapV3TickV3DTOLiquidityGross
      , "liquidity_net" .= uniswapV3TickV3DTOLiquidityNet
      , "price_0" .= uniswapV3TickV3DTOPrice0
      , "price_1" .= uniswapV3TickV3DTOPrice1
      , "volume_token_0" .= uniswapV3TickV3DTOVolumeToken0
      , "volume_token_1" .= uniswapV3TickV3DTOVolumeToken1
      , "volume_usd" .= uniswapV3TickV3DTOVolumeUsd
      , "untracked_volume_usd" .= uniswapV3TickV3DTOUntrackedVolumeUsd
      , "fees_usd" .= uniswapV3TickV3DTOFeesUsd
      , "collected_fees_token_0" .= uniswapV3TickV3DTOCollectedFeesToken0
      , "collected_fees_token_1" .= uniswapV3TickV3DTOCollectedFeesToken1
      , "collected_fees_usd" .= uniswapV3TickV3DTOCollectedFeesUsd
      , "created_at_timestamp" .= uniswapV3TickV3DTOCreatedAtTimestamp
      , "liquidity_provider_count" .= uniswapV3TickV3DTOLiquidityProviderCount
      , "fee_growth_outside_0x128" .= uniswapV3TickV3DTOFeeGrowthOutside0x128
      , "fee_growth_outside_1x128" .= uniswapV3TickV3DTOFeeGrowthOutside1x128
      ]


-- | Construct a value of type 'UniswapV3TickV3DTO' (by applying it's required fields, if any)
mkUniswapV3TickV3DTO
  :: UniswapV3TickV3DTO
mkUniswapV3TickV3DTO =
  UniswapV3TickV3DTO
  { uniswapV3TickV3DTOEntryTime = Nothing
  , uniswapV3TickV3DTORecvTime = Nothing
  , uniswapV3TickV3DTOBlockNumber = Nothing
  , uniswapV3TickV3DTOVid = Nothing
  , uniswapV3TickV3DTOId = Nothing
  , uniswapV3TickV3DTOPoolAddress = Nothing
  , uniswapV3TickV3DTOTickIdx = Nothing
  , uniswapV3TickV3DTOPool = Nothing
  , uniswapV3TickV3DTOLiquidityGross = Nothing
  , uniswapV3TickV3DTOLiquidityNet = Nothing
  , uniswapV3TickV3DTOPrice0 = Nothing
  , uniswapV3TickV3DTOPrice1 = Nothing
  , uniswapV3TickV3DTOVolumeToken0 = Nothing
  , uniswapV3TickV3DTOVolumeToken1 = Nothing
  , uniswapV3TickV3DTOVolumeUsd = Nothing
  , uniswapV3TickV3DTOUntrackedVolumeUsd = Nothing
  , uniswapV3TickV3DTOFeesUsd = Nothing
  , uniswapV3TickV3DTOCollectedFeesToken0 = Nothing
  , uniswapV3TickV3DTOCollectedFeesToken1 = Nothing
  , uniswapV3TickV3DTOCollectedFeesUsd = Nothing
  , uniswapV3TickV3DTOCreatedAtTimestamp = Nothing
  , uniswapV3TickV3DTOLiquidityProviderCount = Nothing
  , uniswapV3TickV3DTOFeeGrowthOutside0x128 = Nothing
  , uniswapV3TickV3DTOFeeGrowthOutside1x128 = Nothing
  }

-- ** UniswapV3TokenHourDataV3DTO
-- | UniswapV3TokenHourDataV3DTO
-- Token data aggregated across all pairs that include token.
data UniswapV3TokenHourDataV3DTO = UniswapV3TokenHourDataV3DTO
  { uniswapV3TokenHourDataV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3TokenHourDataV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3TokenHourDataV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3TokenHourDataV3DTOId :: !(Maybe Text) -- ^ "id" - Token address concatendated with date.
  , uniswapV3TokenHourDataV3DTOPeriodStartUnix :: !(Maybe Int) -- ^ "period_start_unix" - Unix timestamp for start of hour.
  , uniswapV3TokenHourDataV3DTOToken :: !(Maybe Text) -- ^ "token" - Pointer to token.
  , uniswapV3TokenHourDataV3DTOVolume :: !(Maybe Text) -- ^ "volume" - Volume in token units.
  , uniswapV3TokenHourDataV3DTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Volume in derived USD.
  , uniswapV3TokenHourDataV3DTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - Volume in USD even on pools with less reliable USD values.
  , uniswapV3TokenHourDataV3DTOTotalValueLocked :: !(Maybe Text) -- ^ "total_value_locked" - Liquidity across all pools in token units.
  , uniswapV3TokenHourDataV3DTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Liquidity across all pools in derived USD.
  , uniswapV3TokenHourDataV3DTOPriceUsd :: !(Maybe Text) -- ^ "price_usd" - Price at end of period in USD.
  , uniswapV3TokenHourDataV3DTOFeesUsd :: !(Maybe Text) -- ^ "fees_usd" - Fees in USD.
  , uniswapV3TokenHourDataV3DTOOpen :: !(Maybe Text) -- ^ "open" - Opening price USD.
  , uniswapV3TokenHourDataV3DTOHigh :: !(Maybe Text) -- ^ "high" - High price USD.
  , uniswapV3TokenHourDataV3DTOLow :: !(Maybe Text) -- ^ "low" - Low price USD.
  , uniswapV3TokenHourDataV3DTOClose :: !(Maybe Text) -- ^ "close" - Close price USD.
  , uniswapV3TokenHourDataV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3TokenHourDataV3DTO
instance A.FromJSON UniswapV3TokenHourDataV3DTO where
  parseJSON = A.withObject "UniswapV3TokenHourDataV3DTO" $ \o ->
    UniswapV3TokenHourDataV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "period_start_unix")
      <*> (o .:? "token")
      <*> (o .:? "volume")
      <*> (o .:? "volume_usd")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "total_value_locked")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "price_usd")
      <*> (o .:? "fees_usd")
      <*> (o .:? "open")
      <*> (o .:? "high")
      <*> (o .:? "low")
      <*> (o .:? "close")
      <*> (o .:? "vid")

-- | ToJSON UniswapV3TokenHourDataV3DTO
instance A.ToJSON UniswapV3TokenHourDataV3DTO where
  toJSON UniswapV3TokenHourDataV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3TokenHourDataV3DTOEntryTime
      , "recv_time" .= uniswapV3TokenHourDataV3DTORecvTime
      , "block_number" .= uniswapV3TokenHourDataV3DTOBlockNumber
      , "id" .= uniswapV3TokenHourDataV3DTOId
      , "period_start_unix" .= uniswapV3TokenHourDataV3DTOPeriodStartUnix
      , "token" .= uniswapV3TokenHourDataV3DTOToken
      , "volume" .= uniswapV3TokenHourDataV3DTOVolume
      , "volume_usd" .= uniswapV3TokenHourDataV3DTOVolumeUsd
      , "untracked_volume_usd" .= uniswapV3TokenHourDataV3DTOUntrackedVolumeUsd
      , "total_value_locked" .= uniswapV3TokenHourDataV3DTOTotalValueLocked
      , "total_value_locked_usd" .= uniswapV3TokenHourDataV3DTOTotalValueLockedUsd
      , "price_usd" .= uniswapV3TokenHourDataV3DTOPriceUsd
      , "fees_usd" .= uniswapV3TokenHourDataV3DTOFeesUsd
      , "open" .= uniswapV3TokenHourDataV3DTOOpen
      , "high" .= uniswapV3TokenHourDataV3DTOHigh
      , "low" .= uniswapV3TokenHourDataV3DTOLow
      , "close" .= uniswapV3TokenHourDataV3DTOClose
      , "vid" .= uniswapV3TokenHourDataV3DTOVid
      ]


-- | Construct a value of type 'UniswapV3TokenHourDataV3DTO' (by applying it's required fields, if any)
mkUniswapV3TokenHourDataV3DTO
  :: UniswapV3TokenHourDataV3DTO
mkUniswapV3TokenHourDataV3DTO =
  UniswapV3TokenHourDataV3DTO
  { uniswapV3TokenHourDataV3DTOEntryTime = Nothing
  , uniswapV3TokenHourDataV3DTORecvTime = Nothing
  , uniswapV3TokenHourDataV3DTOBlockNumber = Nothing
  , uniswapV3TokenHourDataV3DTOId = Nothing
  , uniswapV3TokenHourDataV3DTOPeriodStartUnix = Nothing
  , uniswapV3TokenHourDataV3DTOToken = Nothing
  , uniswapV3TokenHourDataV3DTOVolume = Nothing
  , uniswapV3TokenHourDataV3DTOVolumeUsd = Nothing
  , uniswapV3TokenHourDataV3DTOUntrackedVolumeUsd = Nothing
  , uniswapV3TokenHourDataV3DTOTotalValueLocked = Nothing
  , uniswapV3TokenHourDataV3DTOTotalValueLockedUsd = Nothing
  , uniswapV3TokenHourDataV3DTOPriceUsd = Nothing
  , uniswapV3TokenHourDataV3DTOFeesUsd = Nothing
  , uniswapV3TokenHourDataV3DTOOpen = Nothing
  , uniswapV3TokenHourDataV3DTOHigh = Nothing
  , uniswapV3TokenHourDataV3DTOLow = Nothing
  , uniswapV3TokenHourDataV3DTOClose = Nothing
  , uniswapV3TokenHourDataV3DTOVid = Nothing
  }

-- ** UniswapV3TokenV3DTO
-- | UniswapV3TokenV3DTO
-- Stores aggregated information for a specific token across all pairs that token is included in.
data UniswapV3TokenV3DTO = UniswapV3TokenV3DTO
  { uniswapV3TokenV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3TokenV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3TokenV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3TokenV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , uniswapV3TokenV3DTOId :: !(Maybe Text) -- ^ "id" - Token address.
  , uniswapV3TokenV3DTOSymbol :: !(Maybe Text) -- ^ "symbol" - Token symbol.
  , uniswapV3TokenV3DTOName :: !(Maybe Text) -- ^ "name" - Token name.
  , uniswapV3TokenV3DTODecimals :: !(Maybe Int) -- ^ "decimals" - Token decimals.
  , uniswapV3TokenV3DTOTotalSupply :: !(Maybe NumericsBigInteger) -- ^ "total_supply"
  , uniswapV3TokenV3DTOVolume :: !(Maybe Text) -- ^ "volume" - Volume in token units.
  , uniswapV3TokenV3DTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Volume in derived USD.
  , uniswapV3TokenV3DTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - Volume in USD even on pools with less reliable USD values.
  , uniswapV3TokenV3DTOFeesUsd :: !(Maybe Text) -- ^ "fees_usd" - Fees in USD.
  , uniswapV3TokenV3DTOTxCount :: !(Maybe NumericsBigInteger) -- ^ "tx_count"
  , uniswapV3TokenV3DTOPoolCount :: !(Maybe NumericsBigInteger) -- ^ "pool_count"
  , uniswapV3TokenV3DTOTotalValueLocked :: !(Maybe Text) -- ^ "total_value_locked" - Liquidity across all pools in token units.
  , uniswapV3TokenV3DTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Liquidity across all pools in derived USD.
  , uniswapV3TokenV3DTOTotalValueLockedUsdUntracked :: !(Maybe Text) -- ^ "total_value_locked_usd_untracked" - TVL derived in USD untracked.
  , uniswapV3TokenV3DTODerivedEth :: !(Maybe Text) -- ^ "derived_eth" - Derived price in ETH.
  , uniswapV3TokenV3DTOWhitelistPools :: !(Maybe [Text]) -- ^ "whitelist_pools" - Pools token is in that are white listed for USD pricing.
  , uniswapV3TokenV3DTOTokenSymbol :: !(Maybe Text) -- ^ /ReadOnly/ "token_symbol"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3TokenV3DTO
instance A.FromJSON UniswapV3TokenV3DTO where
  parseJSON = A.withObject "UniswapV3TokenV3DTO" $ \o ->
    UniswapV3TokenV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "symbol")
      <*> (o .:? "name")
      <*> (o .:? "decimals")
      <*> (o .:? "total_supply")
      <*> (o .:? "volume")
      <*> (o .:? "volume_usd")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "fees_usd")
      <*> (o .:? "tx_count")
      <*> (o .:? "pool_count")
      <*> (o .:? "total_value_locked")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_value_locked_usd_untracked")
      <*> (o .:? "derived_eth")
      <*> (o .:? "whitelist_pools")
      <*> (o .:? "token_symbol")

-- | ToJSON UniswapV3TokenV3DTO
instance A.ToJSON UniswapV3TokenV3DTO where
  toJSON UniswapV3TokenV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3TokenV3DTOEntryTime
      , "recv_time" .= uniswapV3TokenV3DTORecvTime
      , "block_number" .= uniswapV3TokenV3DTOBlockNumber
      , "vid" .= uniswapV3TokenV3DTOVid
      , "id" .= uniswapV3TokenV3DTOId
      , "symbol" .= uniswapV3TokenV3DTOSymbol
      , "name" .= uniswapV3TokenV3DTOName
      , "decimals" .= uniswapV3TokenV3DTODecimals
      , "total_supply" .= uniswapV3TokenV3DTOTotalSupply
      , "volume" .= uniswapV3TokenV3DTOVolume
      , "volume_usd" .= uniswapV3TokenV3DTOVolumeUsd
      , "untracked_volume_usd" .= uniswapV3TokenV3DTOUntrackedVolumeUsd
      , "fees_usd" .= uniswapV3TokenV3DTOFeesUsd
      , "tx_count" .= uniswapV3TokenV3DTOTxCount
      , "pool_count" .= uniswapV3TokenV3DTOPoolCount
      , "total_value_locked" .= uniswapV3TokenV3DTOTotalValueLocked
      , "total_value_locked_usd" .= uniswapV3TokenV3DTOTotalValueLockedUsd
      , "total_value_locked_usd_untracked" .= uniswapV3TokenV3DTOTotalValueLockedUsdUntracked
      , "derived_eth" .= uniswapV3TokenV3DTODerivedEth
      , "whitelist_pools" .= uniswapV3TokenV3DTOWhitelistPools
      , "token_symbol" .= uniswapV3TokenV3DTOTokenSymbol
      ]


-- | Construct a value of type 'UniswapV3TokenV3DTO' (by applying it's required fields, if any)
mkUniswapV3TokenV3DTO
  :: UniswapV3TokenV3DTO
mkUniswapV3TokenV3DTO =
  UniswapV3TokenV3DTO
  { uniswapV3TokenV3DTOEntryTime = Nothing
  , uniswapV3TokenV3DTORecvTime = Nothing
  , uniswapV3TokenV3DTOBlockNumber = Nothing
  , uniswapV3TokenV3DTOVid = Nothing
  , uniswapV3TokenV3DTOId = Nothing
  , uniswapV3TokenV3DTOSymbol = Nothing
  , uniswapV3TokenV3DTOName = Nothing
  , uniswapV3TokenV3DTODecimals = Nothing
  , uniswapV3TokenV3DTOTotalSupply = Nothing
  , uniswapV3TokenV3DTOVolume = Nothing
  , uniswapV3TokenV3DTOVolumeUsd = Nothing
  , uniswapV3TokenV3DTOUntrackedVolumeUsd = Nothing
  , uniswapV3TokenV3DTOFeesUsd = Nothing
  , uniswapV3TokenV3DTOTxCount = Nothing
  , uniswapV3TokenV3DTOPoolCount = Nothing
  , uniswapV3TokenV3DTOTotalValueLocked = Nothing
  , uniswapV3TokenV3DTOTotalValueLockedUsd = Nothing
  , uniswapV3TokenV3DTOTotalValueLockedUsdUntracked = Nothing
  , uniswapV3TokenV3DTODerivedEth = Nothing
  , uniswapV3TokenV3DTOWhitelistPools = Nothing
  , uniswapV3TokenV3DTOTokenSymbol = Nothing
  }

-- ** UniswapV3TokenV3DayDataDTO
-- | UniswapV3TokenV3DayDataDTO
-- Token data aggregated across all pairs that include token.
data UniswapV3TokenV3DayDataDTO = UniswapV3TokenV3DayDataDTO
  { uniswapV3TokenV3DayDataDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3TokenV3DayDataDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3TokenV3DayDataDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3TokenV3DayDataDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , uniswapV3TokenV3DayDataDTOId :: !(Maybe Text) -- ^ "id" - Token address concatendated with date.
  , uniswapV3TokenV3DayDataDTODate :: !(Maybe Int) -- ^ "date" - Timestamp rounded to current day by dividing by 86400.
  , uniswapV3TokenV3DayDataDTOToken :: !(Maybe Text) -- ^ "token" - Pointer to token.
  , uniswapV3TokenV3DayDataDTOVolume :: !(Maybe Text) -- ^ "volume" - Volume in token units.
  , uniswapV3TokenV3DayDataDTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Volume in derived USD.
  , uniswapV3TokenV3DayDataDTOUntrackedVolumeUsd :: !(Maybe Text) -- ^ "untracked_volume_usd" - Volume in USD even on pools with less reliable USD values.
  , uniswapV3TokenV3DayDataDTOTotalValueLocked :: !(Maybe Text) -- ^ "total_value_locked" - Liquidity across all pools in token units.
  , uniswapV3TokenV3DayDataDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Liquidity across all pools in derived USD.
  , uniswapV3TokenV3DayDataDTOPriceUsd :: !(Maybe Text) -- ^ "price_usd" - Price at end of period in USD.
  , uniswapV3TokenV3DayDataDTOFeesUsd :: !(Maybe Text) -- ^ "fees_usd" - Fees in USD.
  , uniswapV3TokenV3DayDataDTOOpen :: !(Maybe Text) -- ^ "open" - Opening price USD.
  , uniswapV3TokenV3DayDataDTOHigh :: !(Maybe Text) -- ^ "high" - High price USD.
  , uniswapV3TokenV3DayDataDTOLow :: !(Maybe Text) -- ^ "low" - Low price USD.
  , uniswapV3TokenV3DayDataDTOClose :: !(Maybe Text) -- ^ "close" - Close price USD.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3TokenV3DayDataDTO
instance A.FromJSON UniswapV3TokenV3DayDataDTO where
  parseJSON = A.withObject "UniswapV3TokenV3DayDataDTO" $ \o ->
    UniswapV3TokenV3DayDataDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "date")
      <*> (o .:? "token")
      <*> (o .:? "volume")
      <*> (o .:? "volume_usd")
      <*> (o .:? "untracked_volume_usd")
      <*> (o .:? "total_value_locked")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "price_usd")
      <*> (o .:? "fees_usd")
      <*> (o .:? "open")
      <*> (o .:? "high")
      <*> (o .:? "low")
      <*> (o .:? "close")

-- | ToJSON UniswapV3TokenV3DayDataDTO
instance A.ToJSON UniswapV3TokenV3DayDataDTO where
  toJSON UniswapV3TokenV3DayDataDTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3TokenV3DayDataDTOEntryTime
      , "recv_time" .= uniswapV3TokenV3DayDataDTORecvTime
      , "block_number" .= uniswapV3TokenV3DayDataDTOBlockNumber
      , "vid" .= uniswapV3TokenV3DayDataDTOVid
      , "id" .= uniswapV3TokenV3DayDataDTOId
      , "date" .= uniswapV3TokenV3DayDataDTODate
      , "token" .= uniswapV3TokenV3DayDataDTOToken
      , "volume" .= uniswapV3TokenV3DayDataDTOVolume
      , "volume_usd" .= uniswapV3TokenV3DayDataDTOVolumeUsd
      , "untracked_volume_usd" .= uniswapV3TokenV3DayDataDTOUntrackedVolumeUsd
      , "total_value_locked" .= uniswapV3TokenV3DayDataDTOTotalValueLocked
      , "total_value_locked_usd" .= uniswapV3TokenV3DayDataDTOTotalValueLockedUsd
      , "price_usd" .= uniswapV3TokenV3DayDataDTOPriceUsd
      , "fees_usd" .= uniswapV3TokenV3DayDataDTOFeesUsd
      , "open" .= uniswapV3TokenV3DayDataDTOOpen
      , "high" .= uniswapV3TokenV3DayDataDTOHigh
      , "low" .= uniswapV3TokenV3DayDataDTOLow
      , "close" .= uniswapV3TokenV3DayDataDTOClose
      ]


-- | Construct a value of type 'UniswapV3TokenV3DayDataDTO' (by applying it's required fields, if any)
mkUniswapV3TokenV3DayDataDTO
  :: UniswapV3TokenV3DayDataDTO
mkUniswapV3TokenV3DayDataDTO =
  UniswapV3TokenV3DayDataDTO
  { uniswapV3TokenV3DayDataDTOEntryTime = Nothing
  , uniswapV3TokenV3DayDataDTORecvTime = Nothing
  , uniswapV3TokenV3DayDataDTOBlockNumber = Nothing
  , uniswapV3TokenV3DayDataDTOVid = Nothing
  , uniswapV3TokenV3DayDataDTOId = Nothing
  , uniswapV3TokenV3DayDataDTODate = Nothing
  , uniswapV3TokenV3DayDataDTOToken = Nothing
  , uniswapV3TokenV3DayDataDTOVolume = Nothing
  , uniswapV3TokenV3DayDataDTOVolumeUsd = Nothing
  , uniswapV3TokenV3DayDataDTOUntrackedVolumeUsd = Nothing
  , uniswapV3TokenV3DayDataDTOTotalValueLocked = Nothing
  , uniswapV3TokenV3DayDataDTOTotalValueLockedUsd = Nothing
  , uniswapV3TokenV3DayDataDTOPriceUsd = Nothing
  , uniswapV3TokenV3DayDataDTOFeesUsd = Nothing
  , uniswapV3TokenV3DayDataDTOOpen = Nothing
  , uniswapV3TokenV3DayDataDTOHigh = Nothing
  , uniswapV3TokenV3DayDataDTOLow = Nothing
  , uniswapV3TokenV3DayDataDTOClose = Nothing
  }

-- ** UniswapV3UniswapDayDataV3DTO
-- | UniswapV3UniswapDayDataV3DTO
-- Data accumulated and condensed into day stats for all of Uniswap.
data UniswapV3UniswapDayDataV3DTO = UniswapV3UniswapDayDataV3DTO
  { uniswapV3UniswapDayDataV3DTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uniswapV3UniswapDayDataV3DTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uniswapV3UniswapDayDataV3DTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uniswapV3UniswapDayDataV3DTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , uniswapV3UniswapDayDataV3DTOId :: !(Maybe Text) -- ^ "id" - Timestamp rounded to current day by dividing by 86400.
  , uniswapV3UniswapDayDataV3DTODate :: !(Maybe Int) -- ^ "date" - Timestamp rounded to current day by dividing by 86400.
  , uniswapV3UniswapDayDataV3DTOVolumeEth :: !(Maybe Text) -- ^ "volume_eth" - Total volume across all pairs on this day, stored as a derived amount of ETH.
  , uniswapV3UniswapDayDataV3DTOVolumeUsd :: !(Maybe Text) -- ^ "volume_usd" - Total volume across all pairs on this day, stored as a derived amount of USD.
  , uniswapV3UniswapDayDataV3DTOVolumeUsdUntracked :: !(Maybe Text) -- ^ "volume_usd_untracked" - Total daily volume in Uniswap derived in terms of USD untracked.
  , uniswapV3UniswapDayDataV3DTOFeesUsd :: !(Maybe Text) -- ^ "fees_usd" - Fees in USD
  , uniswapV3UniswapDayDataV3DTOTxCount :: !(Maybe NumericsBigInteger) -- ^ "tx_count"
  , uniswapV3UniswapDayDataV3DTOTvlUsd :: !(Maybe Text) -- ^ "tvl_usd" - Tvl in terms of USD.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UniswapV3UniswapDayDataV3DTO
instance A.FromJSON UniswapV3UniswapDayDataV3DTO where
  parseJSON = A.withObject "UniswapV3UniswapDayDataV3DTO" $ \o ->
    UniswapV3UniswapDayDataV3DTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "date")
      <*> (o .:? "volume_eth")
      <*> (o .:? "volume_usd")
      <*> (o .:? "volume_usd_untracked")
      <*> (o .:? "fees_usd")
      <*> (o .:? "tx_count")
      <*> (o .:? "tvl_usd")

-- | ToJSON UniswapV3UniswapDayDataV3DTO
instance A.ToJSON UniswapV3UniswapDayDataV3DTO where
  toJSON UniswapV3UniswapDayDataV3DTO {..} =
   _omitNulls
      [ "entry_time" .= uniswapV3UniswapDayDataV3DTOEntryTime
      , "recv_time" .= uniswapV3UniswapDayDataV3DTORecvTime
      , "block_number" .= uniswapV3UniswapDayDataV3DTOBlockNumber
      , "vid" .= uniswapV3UniswapDayDataV3DTOVid
      , "id" .= uniswapV3UniswapDayDataV3DTOId
      , "date" .= uniswapV3UniswapDayDataV3DTODate
      , "volume_eth" .= uniswapV3UniswapDayDataV3DTOVolumeEth
      , "volume_usd" .= uniswapV3UniswapDayDataV3DTOVolumeUsd
      , "volume_usd_untracked" .= uniswapV3UniswapDayDataV3DTOVolumeUsdUntracked
      , "fees_usd" .= uniswapV3UniswapDayDataV3DTOFeesUsd
      , "tx_count" .= uniswapV3UniswapDayDataV3DTOTxCount
      , "tvl_usd" .= uniswapV3UniswapDayDataV3DTOTvlUsd
      ]


-- | Construct a value of type 'UniswapV3UniswapDayDataV3DTO' (by applying it's required fields, if any)
mkUniswapV3UniswapDayDataV3DTO
  :: UniswapV3UniswapDayDataV3DTO
mkUniswapV3UniswapDayDataV3DTO =
  UniswapV3UniswapDayDataV3DTO
  { uniswapV3UniswapDayDataV3DTOEntryTime = Nothing
  , uniswapV3UniswapDayDataV3DTORecvTime = Nothing
  , uniswapV3UniswapDayDataV3DTOBlockNumber = Nothing
  , uniswapV3UniswapDayDataV3DTOVid = Nothing
  , uniswapV3UniswapDayDataV3DTOId = Nothing
  , uniswapV3UniswapDayDataV3DTODate = Nothing
  , uniswapV3UniswapDayDataV3DTOVolumeEth = Nothing
  , uniswapV3UniswapDayDataV3DTOVolumeUsd = Nothing
  , uniswapV3UniswapDayDataV3DTOVolumeUsdUntracked = Nothing
  , uniswapV3UniswapDayDataV3DTOFeesUsd = Nothing
  , uniswapV3UniswapDayDataV3DTOTxCount = Nothing
  , uniswapV3UniswapDayDataV3DTOTvlUsd = Nothing
  }


-- * Enums


-- ** TransactionsETradeAggressiveSide

-- | Enum of 'Text'
data TransactionsETradeAggressiveSide
  = TransactionsETradeAggressiveSide'Buy -- ^ @"Buy"@
  | TransactionsETradeAggressiveSide'Sell -- ^ @"Sell"@
  | TransactionsETradeAggressiveSide'EstimatedBuy -- ^ @"EstimatedBuy"@
  | TransactionsETradeAggressiveSide'EstimatedSell -- ^ @"EstimatedSell"@
  | TransactionsETradeAggressiveSide'Unknown -- ^ @"Unknown"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON TransactionsETradeAggressiveSide where toJSON = A.toJSON . fromTransactionsETradeAggressiveSide
instance A.FromJSON TransactionsETradeAggressiveSide where parseJSON o = P.either P.fail (pure . P.id) . toTransactionsETradeAggressiveSide =<< A.parseJSON o
instance WH.ToHttpApiData TransactionsETradeAggressiveSide where toQueryParam = WH.toQueryParam . fromTransactionsETradeAggressiveSide
instance WH.FromHttpApiData TransactionsETradeAggressiveSide where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toTransactionsETradeAggressiveSide
instance MimeRender MimeMultipartFormData TransactionsETradeAggressiveSide where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'TransactionsETradeAggressiveSide' enum
fromTransactionsETradeAggressiveSide :: TransactionsETradeAggressiveSide -> Text
fromTransactionsETradeAggressiveSide = \case
  TransactionsETradeAggressiveSide'Buy -> "Buy"
  TransactionsETradeAggressiveSide'Sell -> "Sell"
  TransactionsETradeAggressiveSide'EstimatedBuy -> "EstimatedBuy"
  TransactionsETradeAggressiveSide'EstimatedSell -> "EstimatedSell"
  TransactionsETradeAggressiveSide'Unknown -> "Unknown"

-- | parse 'TransactionsETradeAggressiveSide' enum
toTransactionsETradeAggressiveSide :: Text -> P.Either String TransactionsETradeAggressiveSide
toTransactionsETradeAggressiveSide = \case
  "Buy" -> P.Right TransactionsETradeAggressiveSide'Buy
  "Sell" -> P.Right TransactionsETradeAggressiveSide'Sell
  "EstimatedBuy" -> P.Right TransactionsETradeAggressiveSide'EstimatedBuy
  "EstimatedSell" -> P.Right TransactionsETradeAggressiveSide'EstimatedSell
  "Unknown" -> P.Right TransactionsETradeAggressiveSide'Unknown
  s -> P.Left $ "toTransactionsETradeAggressiveSide: enum parse failure: " P.++ P.show s



