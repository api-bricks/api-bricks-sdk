{-
   OnChain API

    This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

   OpenAPI Version: 3.0.1
   OnChain API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OnChain.API.Cow
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OnChain.API.Cow where

import OnChain.Core
import OnChain.MimeTypes
import OnChain.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Cow

-- *** cowGetOrdersHistorical

-- | @GET \/dapps\/cow\/orders\/historical@
-- 
-- GetOrders (historical)
-- 
-- Gets orders.
-- 
cowGetOrdersHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainRequest CowGetOrdersHistorical MimeNoContent [CowOrderDTO] accept
cowGetOrdersHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/orders/historical"]

data CowGetOrdersHistorical  

-- | /Optional Param/ "startBlock" - 
instance HasOptionalParam CowGetOrdersHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - 
instance HasOptionalParam CowGetOrdersHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - 
instance HasOptionalParam CowGetOrdersHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)
instance HasOptionalParam CowGetOrdersHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)
-- | @application/json@
instance Produces CowGetOrdersHistorical MimeJSON
-- | @text/json@
instance Produces CowGetOrdersHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetOrdersHistorical MimePlainText


-- *** cowGetSettlementsHistorical

-- | @GET \/dapps\/cow\/settlements\/historical@
-- 
-- GetSettlements (historical)
-- 
-- Gets settlements.
-- 
cowGetSettlementsHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainRequest CowGetSettlementsHistorical MimeNoContent [CowSettlementDTO] accept
cowGetSettlementsHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/settlements/historical"]

data CowGetSettlementsHistorical  

-- | /Optional Param/ "startBlock" - 
instance HasOptionalParam CowGetSettlementsHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - 
instance HasOptionalParam CowGetSettlementsHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - 
instance HasOptionalParam CowGetSettlementsHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)
instance HasOptionalParam CowGetSettlementsHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)
-- | @application/json@
instance Produces CowGetSettlementsHistorical MimeJSON
-- | @text/json@
instance Produces CowGetSettlementsHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetSettlementsHistorical MimePlainText


-- *** cowGetTokensHistorical

-- | @GET \/dapps\/cow\/tokens\/historical@
-- 
-- GetTokens (historical) ðŸ”¥
-- 
-- Gets tokens.
-- 
cowGetTokensHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainRequest CowGetTokensHistorical MimeNoContent [CowTokenDTO] accept
cowGetTokensHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/tokens/historical"]

data CowGetTokensHistorical  

-- | /Optional Param/ "startBlock" - 
instance HasOptionalParam CowGetTokensHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - 
instance HasOptionalParam CowGetTokensHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - 
instance HasOptionalParam CowGetTokensHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - 
instance HasOptionalParam CowGetTokensHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "tokenId" - 
instance HasOptionalParam CowGetTokensHistorical TokenId where
  applyOptionalParam req (TokenId xs) =
    req `addQuery` toQuery ("tokenId", Just xs)
-- | @application/json@
instance Produces CowGetTokensHistorical MimeJSON
-- | @text/json@
instance Produces CowGetTokensHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetTokensHistorical MimePlainText


-- *** cowGetTradesHistorical

-- | @GET \/dapps\/cow\/trades\/historical@
-- 
-- GetTrades (historical) ðŸ”¥
-- 
-- Gets trades.
-- 
cowGetTradesHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainRequest CowGetTradesHistorical MimeNoContent [CowTradeDTO] accept
cowGetTradesHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/trades/historical"]

data CowGetTradesHistorical  

-- | /Optional Param/ "startBlock" - 
instance HasOptionalParam CowGetTradesHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - 
instance HasOptionalParam CowGetTradesHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - 
instance HasOptionalParam CowGetTradesHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - 
instance HasOptionalParam CowGetTradesHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)
-- | @application/json@
instance Produces CowGetTradesHistorical MimeJSON
-- | @text/json@
instance Produces CowGetTradesHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetTradesHistorical MimePlainText


-- *** cowGetUsersHistorical

-- | @GET \/dapps\/cow\/users\/historical@
-- 
-- GetUsers (historical)
-- 
-- Gets users.
-- 
cowGetUsersHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainRequest CowGetUsersHistorical MimeNoContent [CowUserDTO] accept
cowGetUsersHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/users/historical"]

data CowGetUsersHistorical  

-- | /Optional Param/ "startBlock" - 
instance HasOptionalParam CowGetUsersHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - 
instance HasOptionalParam CowGetUsersHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - 
instance HasOptionalParam CowGetUsersHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - 
instance HasOptionalParam CowGetUsersHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)
-- | @application/json@
instance Produces CowGetUsersHistorical MimeJSON
-- | @text/json@
instance Produces CowGetUsersHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetUsersHistorical MimePlainText

