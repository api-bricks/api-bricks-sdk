{-
   OnChain API

    This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

   OpenAPI Version: 3.0.1
   OnChain API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OnChain.API.UniswapV3
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OnChain.API.UniswapV3 where

import OnChain.Core
import OnChain.MimeTypes
import OnChain.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** UniswapV3

-- *** chainsChainIdDappsUniswapv3BundleCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/bundle\/current@
-- 
-- GetBundles
-- 
chainsChainIdDappsUniswapv3BundleCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3BundleCurrentGet MimeNoContent [BundleV3DTO] accept
chainsChainIdDappsUniswapv3BundleCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/bundle/current"]

data ChainsChainIdDappsUniswapv3BundleCurrentGet  
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3BundleCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3BundleCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3BundleCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3BurnsCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/burns\/current@
-- 
-- GetBurns
-- 
chainsChainIdDappsUniswapv3BurnsCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3BurnsCurrentGet MimeNoContent [BurnV3DTO] accept
chainsChainIdDappsUniswapv3BurnsCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/burns/current"]

data ChainsChainIdDappsUniswapv3BurnsCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3BurnsCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3BurnsCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3BurnsCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3BurnsCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3FactoryCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/factory\/current@
-- 
-- GetFactory
-- 
chainsChainIdDappsUniswapv3FactoryCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3FactoryCurrentGet MimeNoContent [FactoryV3DTO] accept
chainsChainIdDappsUniswapv3FactoryCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/factory/current"]

data ChainsChainIdDappsUniswapv3FactoryCurrentGet  
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3FactoryCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3FactoryCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3FactoryCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3MintsCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/mints\/current@
-- 
-- GetMints
-- 
chainsChainIdDappsUniswapv3MintsCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3MintsCurrentGet MimeNoContent [MintV3DTO] accept
chainsChainIdDappsUniswapv3MintsCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/mints/current"]

data ChainsChainIdDappsUniswapv3MintsCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3MintsCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3MintsCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3MintsCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3MintsCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3PoolsCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/pools\/current@
-- 
-- GetPools
-- 
chainsChainIdDappsUniswapv3PoolsCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3PoolsCurrentGet MimeNoContent [PoolV3DTO] accept
chainsChainIdDappsUniswapv3PoolsCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/pools/current"]

data ChainsChainIdDappsUniswapv3PoolsCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3PoolsCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3PoolsCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3PoolsCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3PoolsCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/poolsDayData\/current@
-- 
-- GetPoolsDayData
-- 
chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet MimeNoContent [PoolDayDataV3DTO] accept
chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/poolsDayData/current"]

data ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/poolsHourData\/current@
-- 
-- GetPoolsHourData
-- 
chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet MimeNoContent [PoolHourDataV3DTO] accept
chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/poolsHourData/current"]

data ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/positionSnapshots\/current@
-- 
-- GetPositionSnapshot
-- 
chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet MimeNoContent [PositionSnapshotV3DTO] accept
chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/positionSnapshots/current"]

data ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3PositionsCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/positions\/current@
-- 
-- GetPositions
-- 
chainsChainIdDappsUniswapv3PositionsCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3PositionsCurrentGet MimeNoContent [PositionV3DTO] accept
chainsChainIdDappsUniswapv3PositionsCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/positions/current"]

data ChainsChainIdDappsUniswapv3PositionsCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3PositionsCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3PositionsCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3PositionsCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3PositionsCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3SwapsCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/swaps\/current@
-- 
-- GetSwaps
-- 
chainsChainIdDappsUniswapv3SwapsCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3SwapsCurrentGet MimeNoContent [SwapV3DTO] accept
chainsChainIdDappsUniswapv3SwapsCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/swaps/current"]

data ChainsChainIdDappsUniswapv3SwapsCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3SwapsCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3SwapsCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3SwapsCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3SwapsCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3TicksCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/ticks\/current@
-- 
-- GetTicks
-- 
chainsChainIdDappsUniswapv3TicksCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3TicksCurrentGet MimeNoContent [TickV3DTO] accept
chainsChainIdDappsUniswapv3TicksCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/ticks/current"]

data ChainsChainIdDappsUniswapv3TicksCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3TicksCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3TicksCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3TicksCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3TicksCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3TicksDayDataCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/ticksDayData\/current@
-- 
-- GetTicksDayData
-- 
chainsChainIdDappsUniswapv3TicksDayDataCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet MimeNoContent [TickDayDataV3DTO] accept
chainsChainIdDappsUniswapv3TicksDayDataCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/ticksDayData/current"]

data ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet  

-- | /Optional Param/ "filter_pool_id" - Filter pool id
instance HasOptionalParam ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet FilterPoolId where
  applyOptionalParam req (FilterPoolId xs) =
    req `addQuery` toQuery ("filter_pool_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3TicksDayDataCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3TokensCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/tokens\/current@
-- 
-- GetTokens
-- 
chainsChainIdDappsUniswapv3TokensCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3TokensCurrentGet MimeNoContent [TokenV3DTO] accept
chainsChainIdDappsUniswapv3TokensCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/tokens/current"]

data ChainsChainIdDappsUniswapv3TokensCurrentGet  
instance HasOptionalParam ChainsChainIdDappsUniswapv3TokensCurrentGet FilterTokenId where
  applyOptionalParam req (FilterTokenId xs) =
    req `addQuery` toQuery ("filter_token_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3TokensCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3TokensCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3TokensCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3TokensDayDataCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/tokensDayData\/current@
-- 
-- GetTokensDayData
-- 
chainsChainIdDappsUniswapv3TokensDayDataCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet MimeNoContent [TokenV3DayDataDTO] accept
chainsChainIdDappsUniswapv3TokensDayDataCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/tokensDayData/current"]

data ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet  
instance HasOptionalParam ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet FilterTokenId where
  applyOptionalParam req (FilterTokenId xs) =
    req `addQuery` toQuery ("filter_token_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3TokensDayDataCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3TokensHourDataCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/tokensHourData\/current@
-- 
-- GetTokensHourData
-- 
chainsChainIdDappsUniswapv3TokensHourDataCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet MimeNoContent [TokenHourDataV3DTO] accept
chainsChainIdDappsUniswapv3TokensHourDataCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/tokensHourData/current"]

data ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet  
instance HasOptionalParam ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet FilterTokenId where
  applyOptionalParam req (FilterTokenId xs) =
    req `addQuery` toQuery ("filter_token_id", Just xs)
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3TokensHourDataCurrentGet MimePlainText


-- *** chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet

-- | @GET \/chains\/{chain_id}\/dapps\/uniswapv3\/uniswapDayData\/current@
-- 
-- GetUniswapDayData
-- 
chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChainId -- ^ "chainId" -  Chain id
  -> OnChainRequest ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet MimeNoContent [UniswapDayDataV3DTO] accept
chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet  _ (ChainId chainId) =
  _mkRequest "GET" ["/chains/",toPath chainId,"/dapps/uniswapv3/uniswapDayData/current"]

data ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet  
-- | @application/json@
instance Produces ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet MimeJSON
-- | @text/json@
instance Produces ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet MimeTextJson
-- | @text/plain@
instance Produces ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGet MimePlainText

