{-
   On Chain Dapps - REST API

    This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

   OpenAPI Version: 3.0.1
   On Chain Dapps - REST API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OnChainDapps-REST.API.CRYPTOPUNKS
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OnChainDapps-REST.API.CRYPTOPUNKS where

import OnChainDapps-REST.Core
import OnChainDapps-REST.MimeTypes
import OnChainDapps-REST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** CRYPTOPUNKS

-- *** cRYPTOPUNKSBidsCurrent

-- | @GET \/dapps\/cryptopunks\/bids\/current@
-- 
-- Bids (current)
-- 
-- Gets bids.
-- 
cRYPTOPUNKSBidsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSBidsCurrent MimeNoContent [CRYPTOPUNKSBidDTO] accept
cRYPTOPUNKSBidsCurrent  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/bids/current"]

data CRYPTOPUNKSBidsCurrent  
-- | @application/json@
instance Produces CRYPTOPUNKSBidsCurrent MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSBidsCurrent MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSBidsCurrent MimePlainText


-- *** cRYPTOPUNKSCollectionDailySnapshotsCurrent

-- | @GET \/dapps\/cryptopunks\/collectionDailySnapshots\/current@
-- 
-- CollectionDailySnapshots (current)
-- 
-- Gets collectionDailySnapshots.
-- 
cRYPTOPUNKSCollectionDailySnapshotsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSCollectionDailySnapshotsCurrent MimeNoContent [CRYPTOPUNKSCollectionDailySnapshotDTO] accept
cRYPTOPUNKSCollectionDailySnapshotsCurrent  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/collectionDailySnapshots/current"]

data CRYPTOPUNKSCollectionDailySnapshotsCurrent  
-- | @application/json@
instance Produces CRYPTOPUNKSCollectionDailySnapshotsCurrent MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSCollectionDailySnapshotsCurrent MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSCollectionDailySnapshotsCurrent MimePlainText


-- *** cRYPTOPUNKSCollectionsCurrent

-- | @GET \/dapps\/cryptopunks\/collections\/current@
-- 
-- Collections (current)
-- 
-- Gets collections.
-- 
cRYPTOPUNKSCollectionsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSCollectionsCurrent MimeNoContent [CRYPTOPUNKSCollectionDTO] accept
cRYPTOPUNKSCollectionsCurrent  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/collections/current"]

data CRYPTOPUNKSCollectionsCurrent  
-- | @application/json@
instance Produces CRYPTOPUNKSCollectionsCurrent MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSCollectionsCurrent MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSCollectionsCurrent MimePlainText


-- *** cRYPTOPUNKSDataSourcesCurrent

-- | @GET \/dapps\/cryptopunks\/dataSources\/current@
-- 
-- DataSources (current)
-- 
-- Gets dataSources.
-- 
cRYPTOPUNKSDataSourcesCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSDataSourcesCurrent MimeNoContent [CRYPTOPUNKSDataSourcesDTO] accept
cRYPTOPUNKSDataSourcesCurrent  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/dataSources/current"]

data CRYPTOPUNKSDataSourcesCurrent  
-- | @application/json@
instance Produces CRYPTOPUNKSDataSourcesCurrent MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSDataSourcesCurrent MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSDataSourcesCurrent MimePlainText


-- *** cRYPTOPUNKSGetBidsHistorical

-- | @GET \/dapps\/cryptopunks\/bids\/historical@
-- 
-- Bids (historical)
-- 
-- Gets bids.
-- 
cRYPTOPUNKSGetBidsHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSGetBidsHistorical MimeNoContent [CRYPTOPUNKSBidDTO] accept
cRYPTOPUNKSGetBidsHistorical  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/bids/historical"]

data CRYPTOPUNKSGetBidsHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CRYPTOPUNKSGetBidsHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CRYPTOPUNKSGetBidsHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CRYPTOPUNKSGetBidsHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CRYPTOPUNKSGetBidsHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - 
instance HasOptionalParam CRYPTOPUNKSGetBidsHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)
-- | @application/json@
instance Produces CRYPTOPUNKSGetBidsHistorical MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSGetBidsHistorical MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSGetBidsHistorical MimePlainText


-- *** cRYPTOPUNKSGetCollectionDailySnapshotsHistorical

-- | @GET \/dapps\/cryptopunks\/collectionDailySnapshots\/historical@
-- 
-- CollectionDailySnapshots (historical)
-- 
-- Gets collectionDailySnapshots.
-- 
cRYPTOPUNKSGetCollectionDailySnapshotsHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSGetCollectionDailySnapshotsHistorical MimeNoContent [CRYPTOPUNKSCollectionDailySnapshotDTO] accept
cRYPTOPUNKSGetCollectionDailySnapshotsHistorical  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/collectionDailySnapshots/historical"]

data CRYPTOPUNKSGetCollectionDailySnapshotsHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CRYPTOPUNKSGetCollectionDailySnapshotsHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CRYPTOPUNKSGetCollectionDailySnapshotsHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CRYPTOPUNKSGetCollectionDailySnapshotsHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CRYPTOPUNKSGetCollectionDailySnapshotsHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)
-- | @application/json@
instance Produces CRYPTOPUNKSGetCollectionDailySnapshotsHistorical MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSGetCollectionDailySnapshotsHistorical MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSGetCollectionDailySnapshotsHistorical MimePlainText


-- *** cRYPTOPUNKSGetCollectionsHistorical

-- | @GET \/dapps\/cryptopunks\/collections\/historical@
-- 
-- Collections (historical)
-- 
-- Gets collections.
-- 
cRYPTOPUNKSGetCollectionsHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSGetCollectionsHistorical MimeNoContent [CRYPTOPUNKSCollectionDTO] accept
cRYPTOPUNKSGetCollectionsHistorical  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/collections/historical"]

data CRYPTOPUNKSGetCollectionsHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CRYPTOPUNKSGetCollectionsHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CRYPTOPUNKSGetCollectionsHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CRYPTOPUNKSGetCollectionsHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CRYPTOPUNKSGetCollectionsHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - 
instance HasOptionalParam CRYPTOPUNKSGetCollectionsHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)
-- | @application/json@
instance Produces CRYPTOPUNKSGetCollectionsHistorical MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSGetCollectionsHistorical MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSGetCollectionsHistorical MimePlainText


-- *** cRYPTOPUNKSGetDataSourcesHistorical

-- | @GET \/dapps\/cryptopunks\/dataSources\/historical@
-- 
-- DataSources (historical)
-- 
-- Gets dataSources.
-- 
cRYPTOPUNKSGetDataSourcesHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSGetDataSourcesHistorical MimeNoContent [CRYPTOPUNKSDataSourcesDTO] accept
cRYPTOPUNKSGetDataSourcesHistorical  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/dataSources/historical"]

data CRYPTOPUNKSGetDataSourcesHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CRYPTOPUNKSGetDataSourcesHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CRYPTOPUNKSGetDataSourcesHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CRYPTOPUNKSGetDataSourcesHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CRYPTOPUNKSGetDataSourcesHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - 
instance HasOptionalParam CRYPTOPUNKSGetDataSourcesHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)
-- | @application/json@
instance Produces CRYPTOPUNKSGetDataSourcesHistorical MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSGetDataSourcesHistorical MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSGetDataSourcesHistorical MimePlainText


-- *** cRYPTOPUNKSGetItemsHistorical

-- | @GET \/dapps\/cryptopunks\/items\/historical@
-- 
-- Items (historical)
-- 
-- Gets items.
-- 
cRYPTOPUNKSGetItemsHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSGetItemsHistorical MimeNoContent [CRYPTOPUNKSItemDTO] accept
cRYPTOPUNKSGetItemsHistorical  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/items/historical"]

data CRYPTOPUNKSGetItemsHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CRYPTOPUNKSGetItemsHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CRYPTOPUNKSGetItemsHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CRYPTOPUNKSGetItemsHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CRYPTOPUNKSGetItemsHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)
-- | @application/json@
instance Produces CRYPTOPUNKSGetItemsHistorical MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSGetItemsHistorical MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSGetItemsHistorical MimePlainText


-- *** cRYPTOPUNKSGetMarketPlacesHistorical

-- | @GET \/dapps\/cryptopunks\/marketPlaces\/historical@
-- 
-- MarketPlaces (historical)
-- 
-- Gets marketPlaces.
-- 
cRYPTOPUNKSGetMarketPlacesHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSGetMarketPlacesHistorical MimeNoContent [CRYPTOPUNKSMarketPlaceDTO] accept
cRYPTOPUNKSGetMarketPlacesHistorical  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/marketPlaces/historical"]

data CRYPTOPUNKSGetMarketPlacesHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CRYPTOPUNKSGetMarketPlacesHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CRYPTOPUNKSGetMarketPlacesHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CRYPTOPUNKSGetMarketPlacesHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CRYPTOPUNKSGetMarketPlacesHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - 
instance HasOptionalParam CRYPTOPUNKSGetMarketPlacesHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)
-- | @application/json@
instance Produces CRYPTOPUNKSGetMarketPlacesHistorical MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSGetMarketPlacesHistorical MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSGetMarketPlacesHistorical MimePlainText


-- *** cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical

-- | @GET \/dapps\/cryptopunks\/marketplaceDailySnapshots\/historical@
-- 
-- MarketplaceDailySnapshots (historical)
-- 
-- Gets marketplaceDailySnapshots.
-- 
cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical MimeNoContent [CRYPTOPUNKSMarketplaceDailySnapshotDTO] accept
cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/marketplaceDailySnapshots/historical"]

data CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - 
instance HasOptionalParam CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)
-- | @application/json@
instance Produces CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical MimePlainText


-- *** cRYPTOPUNKSGetTradesHistorical

-- | @GET \/dapps\/cryptopunks\/trades\/historical@
-- 
-- Trades (historical)
-- 
-- Gets trades.
-- 
cRYPTOPUNKSGetTradesHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSGetTradesHistorical MimeNoContent [CRYPTOPUNKSTradeDTO] accept
cRYPTOPUNKSGetTradesHistorical  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/trades/historical"]

data CRYPTOPUNKSGetTradesHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CRYPTOPUNKSGetTradesHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CRYPTOPUNKSGetTradesHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CRYPTOPUNKSGetTradesHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CRYPTOPUNKSGetTradesHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - 
instance HasOptionalParam CRYPTOPUNKSGetTradesHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)
-- | @application/json@
instance Produces CRYPTOPUNKSGetTradesHistorical MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSGetTradesHistorical MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSGetTradesHistorical MimePlainText


-- *** cRYPTOPUNKSGetUsersHistorical

-- | @GET \/dapps\/cryptopunks\/users\/historical@
-- 
-- Users (historical)
-- 
-- Gets users.
-- 
cRYPTOPUNKSGetUsersHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSGetUsersHistorical MimeNoContent [CRYPTOPUNKSUserDTO] accept
cRYPTOPUNKSGetUsersHistorical  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/users/historical"]

data CRYPTOPUNKSGetUsersHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CRYPTOPUNKSGetUsersHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CRYPTOPUNKSGetUsersHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CRYPTOPUNKSGetUsersHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CRYPTOPUNKSGetUsersHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - 
instance HasOptionalParam CRYPTOPUNKSGetUsersHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)
-- | @application/json@
instance Produces CRYPTOPUNKSGetUsersHistorical MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSGetUsersHistorical MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSGetUsersHistorical MimePlainText


-- *** cRYPTOPUNKSItemsCurrent

-- | @GET \/dapps\/cryptopunks\/items\/current@
-- 
-- Items (current)
-- 
-- Gets items.
-- 
cRYPTOPUNKSItemsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSItemsCurrent MimeNoContent [CRYPTOPUNKSItemDTO] accept
cRYPTOPUNKSItemsCurrent  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/items/current"]

data CRYPTOPUNKSItemsCurrent  
-- | @application/json@
instance Produces CRYPTOPUNKSItemsCurrent MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSItemsCurrent MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSItemsCurrent MimePlainText


-- *** cRYPTOPUNKSMarketPlacesCurrent

-- | @GET \/dapps\/cryptopunks\/marketPlaces\/current@
-- 
-- MarketPlaces (current)
-- 
-- Gets marketPlaces.
-- 
cRYPTOPUNKSMarketPlacesCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSMarketPlacesCurrent MimeNoContent [CRYPTOPUNKSMarketPlaceDTO] accept
cRYPTOPUNKSMarketPlacesCurrent  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/marketPlaces/current"]

data CRYPTOPUNKSMarketPlacesCurrent  
-- | @application/json@
instance Produces CRYPTOPUNKSMarketPlacesCurrent MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSMarketPlacesCurrent MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSMarketPlacesCurrent MimePlainText


-- *** cRYPTOPUNKSMarketplaceDailySnapshotsCurrent

-- | @GET \/dapps\/cryptopunks\/marketplaceDailySnapshots\/current@
-- 
-- MarketplaceDailySnapshots (current)
-- 
-- Gets marketplaceDailySnapshots.
-- 
cRYPTOPUNKSMarketplaceDailySnapshotsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSMarketplaceDailySnapshotsCurrent MimeNoContent [CRYPTOPUNKSMarketplaceDailySnapshotDTO] accept
cRYPTOPUNKSMarketplaceDailySnapshotsCurrent  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/marketplaceDailySnapshots/current"]

data CRYPTOPUNKSMarketplaceDailySnapshotsCurrent  
-- | @application/json@
instance Produces CRYPTOPUNKSMarketplaceDailySnapshotsCurrent MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSMarketplaceDailySnapshotsCurrent MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSMarketplaceDailySnapshotsCurrent MimePlainText


-- *** cRYPTOPUNKSTradesCurrent

-- | @GET \/dapps\/cryptopunks\/trades\/current@
-- 
-- Trades (current)
-- 
-- Gets trades.
-- 
cRYPTOPUNKSTradesCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSTradesCurrent MimeNoContent [CRYPTOPUNKSTradeDTO] accept
cRYPTOPUNKSTradesCurrent  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/trades/current"]

data CRYPTOPUNKSTradesCurrent  
-- | @application/json@
instance Produces CRYPTOPUNKSTradesCurrent MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSTradesCurrent MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSTradesCurrent MimePlainText


-- *** cRYPTOPUNKSUsersCurrent

-- | @GET \/dapps\/cryptopunks\/users\/current@
-- 
-- Users (current)
-- 
-- Gets users.
-- 
cRYPTOPUNKSUsersCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CRYPTOPUNKSUsersCurrent MimeNoContent [CRYPTOPUNKSUserDTO] accept
cRYPTOPUNKSUsersCurrent  _ =
  _mkRequest "GET" ["/dapps/cryptopunks/users/current"]

data CRYPTOPUNKSUsersCurrent  
-- | @application/json@
instance Produces CRYPTOPUNKSUsersCurrent MimeJSON
-- | @text/json@
instance Produces CRYPTOPUNKSUsersCurrent MimeTextJson
-- | @text/plain@
instance Produces CRYPTOPUNKSUsersCurrent MimePlainText

