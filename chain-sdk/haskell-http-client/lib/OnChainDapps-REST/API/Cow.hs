{-
   On Chain Dapps - REST API

    This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

   OpenAPI Version: 3.0.1
   On Chain Dapps - REST API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OnChainDapps-REST.API.Cow
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OnChainDapps-REST.API.Cow where

import OnChainDapps-REST.Core
import OnChainDapps-REST.MimeTypes
import OnChainDapps-REST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Cow

-- *** cowGetOrdersHistorical

-- | @GET \/dapps\/cow\/orders\/historical@
-- 
-- Orders (historical)
-- 
-- Gets orders.
-- 
cowGetOrdersHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowGetOrdersHistorical MimeNoContent [CowOrderDTO] accept
cowGetOrdersHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/orders/historical"]

data CowGetOrdersHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CowGetOrdersHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CowGetOrdersHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CowGetOrdersHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CowGetOrdersHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - User's address.
instance HasOptionalParam CowGetOrdersHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)
-- | @application/json@
instance Produces CowGetOrdersHistorical MimeJSON
-- | @text/json@
instance Produces CowGetOrdersHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetOrdersHistorical MimePlainText


-- *** cowGetSettlementsHistorical

-- | @GET \/dapps\/cow\/settlements\/historical@
-- 
-- Settlements (historical)
-- 
-- Gets settlements.
-- 
cowGetSettlementsHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowGetSettlementsHistorical MimeNoContent [CowSettlementDTO] accept
cowGetSettlementsHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/settlements/historical"]

data CowGetSettlementsHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CowGetSettlementsHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CowGetSettlementsHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CowGetSettlementsHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CowGetSettlementsHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - Transaction hash.
instance HasOptionalParam CowGetSettlementsHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)
-- | @application/json@
instance Produces CowGetSettlementsHistorical MimeJSON
-- | @text/json@
instance Produces CowGetSettlementsHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetSettlementsHistorical MimePlainText


-- *** cowGetTokensHistorical

-- | @GET \/dapps\/cow\/tokens\/historical@
-- 
-- Tokens (historical)
-- 
-- Gets tokens.
-- 
cowGetTokensHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowGetTokensHistorical MimeNoContent [CowTokenDTO] accept
cowGetTokensHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/tokens/historical"]

data CowGetTokensHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CowGetTokensHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CowGetTokensHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CowGetTokensHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CowGetTokensHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - Token's address.
instance HasOptionalParam CowGetTokensHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)

-- | /Optional Param/ "address" - Token's address.
instance HasOptionalParam CowGetTokensHistorical Address where
  applyOptionalParam req (Address xs) =
    req `addQuery` toQuery ("address", Just xs)

-- | /Optional Param/ "name" - Token name fetched by ERC20 contract call.
instance HasOptionalParam CowGetTokensHistorical Name where
  applyOptionalParam req (Name xs) =
    req `addQuery` toQuery ("name", Just xs)

-- | /Optional Param/ "symbol" - Token symbol fetched by contract call.
instance HasOptionalParam CowGetTokensHistorical Symbol where
  applyOptionalParam req (Symbol xs) =
    req `addQuery` toQuery ("symbol", Just xs)
-- | @application/json@
instance Produces CowGetTokensHistorical MimeJSON
-- | @text/json@
instance Produces CowGetTokensHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetTokensHistorical MimePlainText


-- *** cowGetTradesHistorical

-- | @GET \/dapps\/cow\/trades\/historical@
-- 
-- Trades (historical)
-- 
-- Gets trades.
-- 
cowGetTradesHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowGetTradesHistorical MimeNoContent [CowTradeDTO] accept
cowGetTradesHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/trades/historical"]

data CowGetTradesHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CowGetTradesHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CowGetTradesHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CowGetTradesHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CowGetTradesHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - Identifier, format: (order id)|(transaction hash)|(event index).
instance HasOptionalParam CowGetTradesHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)

-- | /Optional Param/ "sell_token" - Address of token that is sold.
instance HasOptionalParam CowGetTradesHistorical SellToken where
  applyOptionalParam req (SellToken xs) =
    req `addQuery` toQuery ("sell_token", Just xs)

-- | /Optional Param/ "buy_token" - Address of token that is bought.
instance HasOptionalParam CowGetTradesHistorical BuyToken where
  applyOptionalParam req (BuyToken xs) =
    req `addQuery` toQuery ("buy_token", Just xs)
-- | @application/json@
instance Produces CowGetTradesHistorical MimeJSON
-- | @text/json@
instance Produces CowGetTradesHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetTradesHistorical MimePlainText


-- *** cowGetUsersHistorical

-- | @GET \/dapps\/cow\/users\/historical@
-- 
-- Users (historical)
-- 
-- Gets users.
-- 
cowGetUsersHistorical
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowGetUsersHistorical MimeNoContent [CowUserDTO] accept
cowGetUsersHistorical  _ =
  _mkRequest "GET" ["/dapps/cow/users/historical"]

data CowGetUsersHistorical  

-- | /Optional Param/ "startBlock" - The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
instance HasOptionalParam CowGetUsersHistorical StartBlock where
  applyOptionalParam req (StartBlock xs) =
    req `addQuery` toQuery ("startBlock", Just xs)

-- | /Optional Param/ "endBlock" - The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
instance HasOptionalParam CowGetUsersHistorical EndBlock where
  applyOptionalParam req (EndBlock xs) =
    req `addQuery` toQuery ("endBlock", Just xs)

-- | /Optional Param/ "startDate" - The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
instance HasOptionalParam CowGetUsersHistorical StartDate where
  applyOptionalParam req (StartDate xs) =
    req `addQuery` toQuery ("startDate", Just xs)

-- | /Optional Param/ "endDate" - The end date of timeframe.
instance HasOptionalParam CowGetUsersHistorical EndDate where
  applyOptionalParam req (EndDate xs) =
    req `addQuery` toQuery ("endDate", Just xs)

-- | /Optional Param/ "id" - User's address.
instance HasOptionalParam CowGetUsersHistorical Id where
  applyOptionalParam req (Id xs) =
    req `addQuery` toQuery ("id", Just xs)

-- | /Optional Param/ "address" - User's address.
instance HasOptionalParam CowGetUsersHistorical Address where
  applyOptionalParam req (Address xs) =
    req `addQuery` toQuery ("address", Just xs)
-- | @application/json@
instance Produces CowGetUsersHistorical MimeJSON
-- | @text/json@
instance Produces CowGetUsersHistorical MimeTextJson
-- | @text/plain@
instance Produces CowGetUsersHistorical MimePlainText


-- *** cowOrdersCurrent

-- | @GET \/dapps\/cow\/orders\/current@
-- 
-- Orders (current)
-- 
-- Gets orders.
-- 
cowOrdersCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowOrdersCurrent MimeNoContent [CowOrderDTO] accept
cowOrdersCurrent  _ =
  _mkRequest "GET" ["/dapps/cow/orders/current"]

data CowOrdersCurrent  
-- | @application/json@
instance Produces CowOrdersCurrent MimeJSON
-- | @text/json@
instance Produces CowOrdersCurrent MimeTextJson
-- | @text/plain@
instance Produces CowOrdersCurrent MimePlainText


-- *** cowSettlementsCurrent

-- | @GET \/dapps\/cow\/settlements\/current@
-- 
-- Settlements (current)
-- 
-- Gets settlements.
-- 
cowSettlementsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowSettlementsCurrent MimeNoContent [CowSettlementDTO] accept
cowSettlementsCurrent  _ =
  _mkRequest "GET" ["/dapps/cow/settlements/current"]

data CowSettlementsCurrent  
-- | @application/json@
instance Produces CowSettlementsCurrent MimeJSON
-- | @text/json@
instance Produces CowSettlementsCurrent MimeTextJson
-- | @text/plain@
instance Produces CowSettlementsCurrent MimePlainText


-- *** cowTokensCurrent

-- | @GET \/dapps\/cow\/tokens\/current@
-- 
-- Tokens (current)
-- 
-- Gets tokens.
-- 
cowTokensCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowTokensCurrent MimeNoContent [CowTokenDTO] accept
cowTokensCurrent  _ =
  _mkRequest "GET" ["/dapps/cow/tokens/current"]

data CowTokensCurrent  
-- | @application/json@
instance Produces CowTokensCurrent MimeJSON
-- | @text/json@
instance Produces CowTokensCurrent MimeTextJson
-- | @text/plain@
instance Produces CowTokensCurrent MimePlainText


-- *** cowTradesCurrent

-- | @GET \/dapps\/cow\/trades\/current@
-- 
-- Trades (current)
-- 
-- Gets trades.
-- 
cowTradesCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowTradesCurrent MimeNoContent [CowTradeDTO] accept
cowTradesCurrent  _ =
  _mkRequest "GET" ["/dapps/cow/trades/current"]

data CowTradesCurrent  
-- | @application/json@
instance Produces CowTradesCurrent MimeJSON
-- | @text/json@
instance Produces CowTradesCurrent MimeTextJson
-- | @text/plain@
instance Produces CowTradesCurrent MimePlainText


-- *** cowUsersCurrent

-- | @GET \/dapps\/cow\/users\/current@
-- 
-- Users (current)
-- 
-- Gets users.
-- 
cowUsersCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest CowUsersCurrent MimeNoContent [CowUserDTO] accept
cowUsersCurrent  _ =
  _mkRequest "GET" ["/dapps/cow/users/current"]

data CowUsersCurrent  
-- | @application/json@
instance Produces CowUsersCurrent MimeJSON
-- | @text/json@
instance Produces CowUsersCurrent MimeTextJson
-- | @text/plain@
instance Produces CowUsersCurrent MimePlainText

