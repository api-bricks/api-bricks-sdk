// @flow
/* eslint-disable no-use-before-define */
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://onchain.coinapi.io".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type BigInteger = {
    /**
     * 
     * @type {boolean}
     * @memberof BigInteger
     */
    is_power_of_two?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BigInteger
     */
    is_zero?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BigInteger
     */
    is_one?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BigInteger
     */
    is_even?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BigInteger
     */
    sign?: number;
}

/**
 * The Bundle is used as a global store of derived ETH price in USD. This provides a strong estimate for the USD price of ETH.
 * @export
 */
export type BundleV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof BundleV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BundleV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof BundleV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof BundleV3DTO
     */
    id?: string;
    /**
     * Price of ETH in usd.
     * @type {string}
     * @memberof BundleV3DTO
     */
    eth_price_usd?: string;
    /**
     * 
     * @type {number}
     * @memberof BundleV3DTO
     */
    vid?: number;
}

/**
 * Burn entities are created for every emitted Burn event on the Uniswap core contracts. The Burn entity stores key data about the event like token amounts, who burned, who received tokens, and more. This entity can be used to track liquidity removals on pairs.
 * @export
 */
export type BurnV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof BurnV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BurnV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof BurnV3DTO
     */
    block_number?: number;
    /**
     * Transaction hash + \'#\' + index in mints Transaction array.
     * @type {string}
     * @memberof BurnV3DTO
     */
    id?: string;
    /**
     * Transaction burn was included in.
     * @type {string}
     * @memberof BurnV3DTO
     */
    transaction?: string;
    /**
     * Pool position is within.
     * @type {string}
     * @memberof BurnV3DTO
     */
    pool?: string;
    /**
     * Reference to token0 as stored in pool contract.
     * @type {string}
     * @memberof BurnV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pool contract.
     * @type {string}
     * @memberof BurnV3DTO
     */
    token_1?: string;
    /**
     * Timestamp.
     * @type {string}
     * @memberof BurnV3DTO
     */
    timestamp?: string;
    /**
     * Owner of position where liquidity was burned.
     * @type {string}
     * @memberof BurnV3DTO
     */
    owner?: string;
    /**
     * Transaction origin: the EOA (Externally Owned Account) that initiated the transaction.
     * @type {string}
     * @memberof BurnV3DTO
     */
    origin?: string;
    /**
     * Amount of liquidity burned.
     * @type {string}
     * @memberof BurnV3DTO
     */
    amount?: string;
    /**
     * Amount of token 0 burned.
     * @type {string}
     * @memberof BurnV3DTO
     */
    amount_0?: string;
    /**
     * Amount of token 1 burned.
     * @type {string}
     * @memberof BurnV3DTO
     */
    amount_1?: string;
    /**
     * Derived amount based on available prices of tokens.
     * @type {string}
     * @memberof BurnV3DTO
     */
    amount_usd?: string;
    /**
     * Lower tick of position.
     * @type {string}
     * @memberof BurnV3DTO
     */
    tick_lower?: string;
    /**
     * Upper tick of position.
     * @type {string}
     * @memberof BurnV3DTO
     */
    tick_upper?: string;
    /**
     * Position within the transactions.
     * @type {string}
     * @memberof BurnV3DTO
     */
    log_index?: string;
    /**
     * 
     * @type {number}
     * @memberof BurnV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type ETradeAggressiveSide = 'Buy' | 'Sell' | 'EstimatedBuy' | 'EstimatedSell' | 'Unknown';

/**
 * The Uniswap Factory entity is responsible for storing aggregate information across all Uniswap pairs. It can be used to view stats about total liquidity, volume, amount of pairs and more.
 * @export
 */
export type FactoryV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof FactoryV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FactoryV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof FactoryV3DTO
     */
    block_number?: number;
    /**
     * Factory address.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    id?: string;
    /**
     * Amount of pools created.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    pool_count?: string;
    /**
     * Amount of transactions all time.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    tx_count?: string;
    /**
     * Total volume all time in derived USD.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_volume_usd?: string;
    /**
     * Total volume all time in derived ETH.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_volume_eth?: string;
    /**
     * Total swap fees all time in USD.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_fees_usd?: string;
    /**
     * All volume even through less reliable USD values.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_fees_eth?: string;
    /**
     * All volume even through less reliable USD values.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Total value locked derived in USD.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * Total value locked derived in ETH.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_value_locked_eth?: string;
    /**
     * Total value locked derived in USD untracked.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_value_locked_usd_untracked?: string;
    /**
     * Total value locked derived in ETH untracked.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_value_locked_eth_untracked?: string;
    /**
     * Current owner of the factory.
     * @type {string}
     * @memberof FactoryV3DTO
     */
    owner?: string;
    /**
     * 
     * @type {number}
     * @memberof FactoryV3DTO
     */
    vid?: number;
}

/**
 * Mint entities are created for every emitted Mint event on the Uniswap core contracts. The Mint entity stores key data about the event like token amounts, who sent the transaction, and more.
 * @export
 */
export type MintV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof MintV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MintV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof MintV3DTO
     */
    block_number?: number;
    /**
     * Transaction hash + \'#\' + index in mints Transaction array.
     * @type {string}
     * @memberof MintV3DTO
     */
    id?: string;
    /**
     * Which txn the mint was included in.
     * @type {string}
     * @memberof MintV3DTO
     */
    transaction?: string;
    /**
     * Time of transaction.
     * @type {string}
     * @memberof MintV3DTO
     */
    timestamp?: string;
    /**
     * Pool address.
     * @type {string}
     * @memberof MintV3DTO
     */
    pool?: string;
    /**
     * Reference to token0 as stored in pool contract.
     * @type {string}
     * @memberof MintV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pool contract.
     * @type {string}
     * @memberof MintV3DTO
     */
    token_1?: string;
    /**
     * Owner of position where liquidity minted to.
     * @type {string}
     * @memberof MintV3DTO
     */
    owner?: string;
    /**
     * The address that minted the liquidity.
     * @type {string}
     * @memberof MintV3DTO
     */
    sender?: string;
    /**
     * Transaction origin: the EOA (Externally Owned Account) that initiated the transaction.
     * @type {string}
     * @memberof MintV3DTO
     */
    origin?: string;
    /**
     * Amount of liquidity minted.
     * @type {string}
     * @memberof MintV3DTO
     */
    amount?: string;
    /**
     * Amount of token 0 minted.
     * @type {string}
     * @memberof MintV3DTO
     */
    amount_0?: string;
    /**
     * Amount of token 1 minted.
     * @type {string}
     * @memberof MintV3DTO
     */
    amount_1?: string;
    /**
     * Derived amount based on available prices of tokens.
     * @type {string}
     * @memberof MintV3DTO
     */
    amount_usd?: string;
    /**
     * Lower tick of the position.
     * @type {string}
     * @memberof MintV3DTO
     */
    tick_lower?: string;
    /**
     * Upper tick of the position.
     * @type {string}
     * @memberof MintV3DTO
     */
    tick_upper?: string;
    /**
     * Order within the transaction.
     * @type {string}
     * @memberof MintV3DTO
     */
    log_index?: string;
    /**
     * 
     * @type {number}
     * @memberof MintV3DTO
     */
    vid?: number;
}

/**
 * Information about a pair. Includes references to each token within the pair, volume information, liquidity information, and more. The pair entity mirrors the pair smart contract, and also contains aggregated information about use.
 * @export
 */
export type PairDTO = {
    /**
     * 
     * @type {Date}
     * @memberof PairDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PairDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof PairDTO
     */
    block_number?: number;
    /**
     * Pair contract address.
     * @type {string}
     * @memberof PairDTO
     */
    id?: string;
    /**
     * Factory contract address.
     * @type {string}
     * @memberof PairDTO
     */
    factory?: string;
    /**
     * Friendly name, format: <token0 name>-<token1 name>
     * @type {string}
     * @memberof PairDTO
     */
    name?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof PairDTO
     */
    token_0?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof PairDTO
     */
    token_1?: string;
    /**
     * Reserve of token0.
     * @type {string}
     * @memberof PairDTO
     */
    reserve_0?: string;
    /**
     * Reserve of token1.
     * @type {string}
     * @memberof PairDTO
     */
    reserve_1?: string;
    /**
     * Total supply of liquidity token distributed to LPs.
     * @type {string}
     * @memberof PairDTO
     */
    total_supply?: string;
    /**
     * Total liquidity in pair stored as an amount of ETH.
     * @type {string}
     * @memberof PairDTO
     */
    reserve_eth?: string;
    /**
     * Total liquidity amount in pair stored as an amount of USD.
     * @type {string}
     * @memberof PairDTO
     */
    reserve_usd?: string;
    /**
     * Total liquidity with only tracked amount.
     * @type {string}
     * @memberof PairDTO
     */
    tracked_reserve_eth?: string;
    /**
     * Token0 per token1.
     * @type {string}
     * @memberof PairDTO
     */
    token_0_price?: string;
    /**
     * Token1 per token0.
     * @type {string}
     * @memberof PairDTO
     */
    token_1_price?: string;
    /**
     * Amount of token0 swapped on this pair.
     * @type {string}
     * @memberof PairDTO
     */
    volume_token_0?: string;
    /**
     * Amount of token1 swapped on this pair.
     * @type {string}
     * @memberof PairDTO
     */
    volume_token_1?: string;
    /**
     * Total amount swapped all time in this pair stored in USD (only tracked if USD liquidity is above minimum threshold).
     * @type {string}
     * @memberof PairDTO
     */
    volume_usd?: string;
    /**
     * Total amount swapped all time in this pair stored in USD, no minimum liquidity threshold.
     * @type {string}
     * @memberof PairDTO
     */
    untracked_volume_usd?: string;
    /**
     * All time amount of transactions on this pair.
     * @type {string}
     * @memberof PairDTO
     */
    tx_count?: string;
    /**
     * Total number of LPs.
     * @type {string}
     * @memberof PairDTO
     */
    liquidity_provider_count?: string;
    /**
     * Timestamp.
     * @type {string}
     * @memberof PairDTO
     */
    timestamp?: string;
    /**
     * Block number in which pair information was created in.
     * @type {string}
     * @memberof PairDTO
     */
    block?: string;
    /**
     * 
     * @type {number}
     * @memberof PairDTO
     */
    vid?: number;
    /**
     * 
     * @type {number}
     * @memberof PairDTO
     */
    evaluated_ask?: number;
}

/**
 * Information about a pair. Includes references to each token within the pair, volume information, liquidity information, and more. The pair entity mirrors the pair smart contract, and also contains aggregated information about use.
 * @export
 */
export type PairV2DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PairV2DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PairV2DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof PairV2DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof PairV2DTO
     */
    vid?: number;
    /**
     * Pair contract address.
     * @type {string}
     * @memberof PairV2DTO
     */
    id?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof PairV2DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pair contract.
     * @type {string}
     * @memberof PairV2DTO
     */
    token_1?: string;
    /**
     * Reserve of token0.
     * @type {string}
     * @memberof PairV2DTO
     */
    reserve_0?: string;
    /**
     * Reserve of token1.
     * @type {string}
     * @memberof PairV2DTO
     */
    reserve_1?: string;
    /**
     * Total supply of liquidity token distributed to LPs.
     * @type {string}
     * @memberof PairV2DTO
     */
    total_supply?: string;
    /**
     * Total liquidity in pair stored as an amount of ETH.
     * @type {string}
     * @memberof PairV2DTO
     */
    reserve_eth?: string;
    /**
     * Total liquidity amount in pair stored as an amount of USD.
     * @type {string}
     * @memberof PairV2DTO
     */
    reserve_usd?: string;
    /**
     * Total liquidity with only tracked amount.
     * @type {string}
     * @memberof PairV2DTO
     */
    tracked_reserve_eth?: string;
    /**
     * Token0 per token1.
     * @type {string}
     * @memberof PairV2DTO
     */
    token_0_price?: string;
    /**
     * Token1 per token0.
     * @type {string}
     * @memberof PairV2DTO
     */
    token_1_price?: string;
    /**
     * Amount of token0 swapped on this pair.
     * @type {string}
     * @memberof PairV2DTO
     */
    volume_token_0?: string;
    /**
     * Amount of token1 swapped on this pair.
     * @type {string}
     * @memberof PairV2DTO
     */
    volume_token_1?: string;
    /**
     * Total amount swapped all time in this pair stored in USD (only tracked if USD liquidity is above minimum threshold).
     * @type {string}
     * @memberof PairV2DTO
     */
    volume_usd?: string;
    /**
     * Total amount swapped all time in this pair stored in USD, no minimum liquidity threshold.
     * @type {string}
     * @memberof PairV2DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof PairV2DTO
     */
    tx_count?: BigInteger;
    /**
     * Timestamp contract was created.
     * @type {Date}
     * @memberof PairV2DTO
     */
    created_at_timestamp?: Date;
    /**
     * Total number of LPs.
     * @type {string}
     * @memberof PairV2DTO
     */
    liquidity_provider_count?: string;
    /**
     * 
     * @type {number}
     * @memberof PairV2DTO
     */
    evaluated_ask?: number;
}

/**
 * Data accumulated and condensed into day stats for each pool.
 * @export
 */
export type PoolDayDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PoolDayDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoolDayDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof PoolDayDataV3DTO
     */
    block_number?: number;
    /**
     * Identifier, format: <pool address>-<day id>.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    id?: string;
    /**
     * Timestamp rounded to current day by dividing by 86400
     * @type {number}
     * @memberof PoolDayDataV3DTO
     */
    _date?: number;
    /**
     * Pointer to pool.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    pool?: string;
    /**
     * In range liquidity at end of period.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    liquidity?: string;
    /**
     * Current price tracker at end of period.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    sqrt_price?: string;
    /**
     * Price of token0 - derived from sqrtPrice.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    token_0_price?: string;
    /**
     * Price of token1 - derived from sqrtPrice.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    token_1_price?: string;
    /**
     * Current tick at end of period.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    tick?: string;
    /**
     * Tracker for global fee growth.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    fee_growth_global_0x128?: string;
    /**
     * Tracker for global fee growth.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    fee_growth_global_1x128?: string;
    /**
     * Total value locked derived in USD at end of period.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    tvl_usd?: string;
    /**
     * Volume in token0.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    volume_token_0?: string;
    /**
     * Volume in token1.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    volume_token_1?: string;
    /**
     * Volume in USD.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    fees_usd?: string;
    /**
     * Number of transactions during period.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    tx_count?: string;
    /**
     * Opening price of token0.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    open?: string;
    /**
     * High price of token0.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    high?: string;
    /**
     * Low price of token0.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    low?: string;
    /**
     * Close price of token0.
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    close?: string;
    /**
     * 
     * @type {number}
     * @memberof PoolDayDataV3DTO
     */
    vid?: number;
}

/**
 * Hourly stats tracker for pool.
 * @export
 */
export type PoolHourDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PoolHourDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoolHourDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof PoolHourDataV3DTO
     */
    block_number?: number;
    /**
     * Identifier, format: <pool address>-<day id>
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    id?: string;
    /**
     * Unix timestamp for start of hour.
     * @type {number}
     * @memberof PoolHourDataV3DTO
     */
    period_start_unix?: number;
    /**
     * Pointer to pool.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    pool?: string;
    /**
     * In range liquidity at end of period.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    liquidity?: string;
    /**
     * Current price tracker at end of period.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    sqrt_price?: string;
    /**
     * Price of token0 - derived from sqrtPrice.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    token_0_price?: string;
    /**
     * Price of token1 - derived from sqrtPrice.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    token_1_price?: string;
    /**
     * Current tick at end of period.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    tick?: string;
    /**
     * Tracker for global fee growth.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    fee_growth_global_0x128?: string;
    /**
     * Tracker for global fee growth.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    fee_growth_global_1x128?: string;
    /**
     * Total value locked derived in USD at end of period.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    tvl_usd?: string;
    /**
     * Volume in token0.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    volume_token_0?: string;
    /**
     * Volume in token1.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    volume_token_1?: string;
    /**
     * Volume in USD.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    fees_usd?: string;
    /**
     * Number of transactions during period.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    tx_count?: string;
    /**
     * Opening price of token0.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    open?: string;
    /**
     * High price of token0.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    high?: string;
    /**
     * Low price of token0.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    low?: string;
    /**
     * Close price of token0.
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    close?: string;
    /**
     * 
     * @type {number}
     * @memberof PoolHourDataV3DTO
     */
    vid?: number;
}

/**
 * Information about a pool. Includes references to each token within the pool, volume information, liquidity information, and more. The pool entity mirrors the pool smart contract, and also contains aggregated information about use.
 * @export
 */
export type PoolV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PoolV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoolV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof PoolV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof PoolV3DTO
     */
    vid?: number;
    /**
     * Pool address.
     * @type {string}
     * @memberof PoolV3DTO
     */
    id?: string;
    /**
     * Creation time.
     * @type {Date}
     * @memberof PoolV3DTO
     */
    created_at_timestamp?: Date;
    /**
     * Reference to token0 as stored in pool contract.
     * @type {string}
     * @memberof PoolV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pool contract.
     * @type {string}
     * @memberof PoolV3DTO
     */
    token_1?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    fee_tier?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    liquidity?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    sqrt_price?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    fee_growth_global_0x128?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    fee_growth_global_1x128?: BigInteger;
    /**
     * Token0 per token1.
     * @type {string}
     * @memberof PoolV3DTO
     */
    token_0_price?: string;
    /**
     * Token1 per token0.
     * @type {string}
     * @memberof PoolV3DTO
     */
    token_1_price?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    tick?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    observation_index?: BigInteger;
    /**
     * All time token0 swapped.
     * @type {string}
     * @memberof PoolV3DTO
     */
    volume_token_0?: string;
    /**
     * All time token1 swapped.
     * @type {string}
     * @memberof PoolV3DTO
     */
    volume_token_1?: string;
    /**
     * All time USD swapped.
     * @type {string}
     * @memberof PoolV3DTO
     */
    volume_usd?: string;
    /**
     * All time USD swapped, unfiltered for unreliable USD pools.
     * @type {string}
     * @memberof PoolV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof PoolV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    tx_count?: BigInteger;
    /**
     * All time fees collected token0.
     * @type {string}
     * @memberof PoolV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * All time fees collected token1.
     * @type {string}
     * @memberof PoolV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * All time fees collected derived USD.
     * @type {string}
     * @memberof PoolV3DTO
     */
    collected_fees_usd?: string;
    /**
     * Total token 0 across all ticks.
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_token_1?: string;
    /**
     * Total token 1 across all ticks.
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_eth?: string;
    /**
     * Total value locked USD.
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * Total value locked derived ETH.
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_usd_untracked?: string;
    /**
     * Liquidity providers count, used to detect new exchanges.
     * @type {string}
     * @memberof PoolV3DTO
     */
    liquidity_provider_count?: string;
    /**
     * 
     * @type {number}
     * @memberof PoolV3DTO
     */
    evaluated_ask?: number;
}

/**
 * 
 * @export
 */
export type PositionSnapshotV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PositionSnapshotV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PositionSnapshotV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof PositionSnapshotV3DTO
     */
    block_number?: number;
    /**
     * NFT token identifier, format: <NFT token id>#<block number>
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    id?: string;
    /**
     * Owner of the NFT.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    owner?: string;
    /**
     * Pool the position is within.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    pool?: string;
    /**
     * Position of which the snap was taken of.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    position?: string;
    /**
     * Timestamp of block in which the snap was created.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    timestamp?: string;
    /**
     * Total position liquidity.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    liquidity?: string;
    /**
     * Amount of token 0 ever deposited to position.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    deposited_token_0?: string;
    /**
     * Amount of token 1 ever deposited to position.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    deposited_token_1?: string;
    /**
     * Amount of token 0 ever withdrawn from position (without fees).
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    withdrawn_token_0?: string;
    /**
     * Amount of token 1 ever withdrawn from position (without fees).
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    withdrawn_token_1?: string;
    /**
     * All time collected fees in token0.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * All time collected fees in token1.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * Transaction in which the snapshot was initialized.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    transaction?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    fee_growth_inside_0_last_x128?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    fee_growth_inside_1_last_x128?: string;
    /**
     * 
     * @type {number}
     * @memberof PositionSnapshotV3DTO
     */
    vid?: number;
}

/**
 * Positions created through NonfungiblePositionManager. Positions are represented as NFTs (ERC-721 tokens) as opposed to the fungible ERC-20 tokens on Uniswap V1 and V2.
 * @export
 */
export type PositionV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PositionV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PositionV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof PositionV3DTO
     */
    block_number?: number;
    /**
     * NFT token identifier.
     * @type {string}
     * @memberof PositionV3DTO
     */
    id?: string;
    /**
     * Owner of the NFT.
     * @type {string}
     * @memberof PositionV3DTO
     */
    owner?: string;
    /**
     * Pool position is within.
     * @type {string}
     * @memberof PositionV3DTO
     */
    pool?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof PositionV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pair contract.
     * @type {string}
     * @memberof PositionV3DTO
     */
    token_1?: string;
    /**
     * Lower tick of the position.
     * @type {string}
     * @memberof PositionV3DTO
     */
    tick_lower?: string;
    /**
     * Upper tick of the position.
     * @type {string}
     * @memberof PositionV3DTO
     */
    tick_upper?: string;
    /**
     * Total position liquidity.
     * @type {string}
     * @memberof PositionV3DTO
     */
    liquidity?: string;
    /**
     * Amount of token 0 ever deposited to position.
     * @type {string}
     * @memberof PositionV3DTO
     */
    deposited_token_0?: string;
    /**
     * Amount of token 1 ever deposited to position.
     * @type {string}
     * @memberof PositionV3DTO
     */
    deposited_token_1?: string;
    /**
     * Amount of token 0 ever withdrawn from position (without fees).
     * @type {string}
     * @memberof PositionV3DTO
     */
    withdrawn_token_0?: string;
    /**
     * Amount of token 1 ever withdrawn from position (without fees).
     * @type {string}
     * @memberof PositionV3DTO
     */
    withdrawn_token_1?: string;
    /**
     * All time collected fees in token0.
     * @type {string}
     * @memberof PositionV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * All time collected fees in token1.
     * @type {string}
     * @memberof PositionV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * Transaction in which the position was initialized.
     * @type {string}
     * @memberof PositionV3DTO
     */
    transaction?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof PositionV3DTO
     */
    fee_growth_inside_0_last_x128?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof PositionV3DTO
     */
    fee_growth_inside_1_last_x128?: string;
    /**
     * 
     * @type {number}
     * @memberof PositionV3DTO
     */
    vid?: number;
}

/**
 * Swap are created for each token swap within a pair.
 * @export
 */
export type SwapDTO = {
    /**
     * 
     * @type {Date}
     * @memberof SwapDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SwapDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof SwapDTO
     */
    block_number?: number;
    /**
     * Transaction hash plus index in Transaction swap array.
     * @type {string}
     * @memberof SwapDTO
     */
    id?: string;
    /**
     * Reference to transaction swap was included in.
     * @type {string}
     * @memberof SwapDTO
     */
    transaction?: string;
    /**
     * Timestamp of swap, used for sorted lookups.
     * @type {string}
     * @memberof SwapDTO
     */
    timestamp?: string;
    /**
     * Reference to pair.
     * @type {string}
     * @memberof SwapDTO
     */
    pair?: string;
    /**
     * Address that initiated the swap.
     * @type {string}
     * @memberof SwapDTO
     */
    sender?: string;
    /**
     * Amount of token0 sold.
     * @type {string}
     * @memberof SwapDTO
     */
    amount_0_in?: string;
    /**
     * Amount of token1 sold.
     * @type {string}
     * @memberof SwapDTO
     */
    amount_1_in?: string;
    /**
     * Amount of token0 received.
     * @type {string}
     * @memberof SwapDTO
     */
    amount_0_out?: string;
    /**
     * Amount of token1 received.
     * @type {string}
     * @memberof SwapDTO
     */
    amount_1_out?: string;
    /**
     * Recipient of output tokens.
     * @type {string}
     * @memberof SwapDTO
     */
    to?: string;
    /**
     * Event index within transaction.
     * @type {string}
     * @memberof SwapDTO
     */
    log_index?: string;
    /**
     * Derived amount of tokens sold in USD.
     * @type {string}
     * @memberof SwapDTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {number}
     * @memberof SwapDTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    transaction_id?: string;
    /**
     * 
     * @type {number}
     * @memberof SwapDTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapDTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {ETradeAggressiveSide}
     * @memberof SwapDTO
     */
    evaluated_aggressor?: ETradeAggressiveSide;
}

/**
 * Swap are created for each token swap within a pair.
 * @export
 */
export type SwapV2DTO = {
    /**
     * 
     * @type {Date}
     * @memberof SwapV2DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SwapV2DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof SwapV2DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapV2DTO
     */
    vid?: number;
    /**
     * Transaction hash plus index in Transaction swap array.
     * @type {string}
     * @memberof SwapV2DTO
     */
    id?: string;
    /**
     * Reference to transaction swap was included in.
     * @type {string}
     * @memberof SwapV2DTO
     */
    transaction?: string;
    /**
     * Timestamp of swap, used for sorted lookups.
     * @type {Date}
     * @memberof SwapV2DTO
     */
    timestamp?: Date;
    /**
     * Reference to pair.
     * @type {string}
     * @memberof SwapV2DTO
     */
    pair?: string;
    /**
     * Address that initiated the swap.
     * @type {string}
     * @memberof SwapV2DTO
     */
    sender?: string;
    /**
     * The EOA (Externally Owned Account) that initiated the transaction.
     * @type {string}
     * @memberof SwapV2DTO
     */
    from?: string;
    /**
     * Amount of token0 sold.
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_0_in?: string;
    /**
     * Amount of token1 sold.
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_1_in?: string;
    /**
     * Amount of token0 received.
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_0_out?: string;
    /**
     * Amount of token1 received.
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_1_out?: string;
    /**
     * Recipient of output tokens.
     * @type {string}
     * @memberof SwapV2DTO
     */
    to?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof SwapV2DTO
     */
    log_index?: BigInteger;
    /**
     * Derived amount of tokens sold in USD.
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {number}
     * @memberof SwapV2DTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapV2DTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {ETradeAggressiveSide}
     * @memberof SwapV2DTO
     */
    evaluated_aggressor?: ETradeAggressiveSide;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    transaction_id?: string;
}

/**
 * Swap are created for each token swap within a pair.
 * @export
 */
export type SwapV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof SwapV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SwapV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof SwapV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapV3DTO
     */
    vid?: number;
    /**
     * Identifier, format: transaction hash + \"#\" + index in swaps Transaction array.
     * @type {string}
     * @memberof SwapV3DTO
     */
    id?: string;
    /**
     * Pointer to transaction.
     * @type {string}
     * @memberof SwapV3DTO
     */
    transaction?: string;
    /**
     * Timestamp of transaction.
     * @type {Date}
     * @memberof SwapV3DTO
     */
    timestamp?: Date;
    /**
     * Pool swap occured within.
     * @type {string}
     * @memberof SwapV3DTO
     */
    pool?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof SwapV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pair contract.
     * @type {string}
     * @memberof SwapV3DTO
     */
    token_1?: string;
    /**
     * Sender of the swap.
     * @type {string}
     * @memberof SwapV3DTO
     */
    sender?: string;
    /**
     * Recipient of the swap.
     * @type {string}
     * @memberof SwapV3DTO
     */
    recipient?: string;
    /**
     * Transaction origin: the EOA (Externally Owned Account) that initiated the transaction
     * @type {string}
     * @memberof SwapV3DTO
     */
    origin?: string;
    /**
     * Delta of token0 swapped.
     * @type {string}
     * @memberof SwapV3DTO
     */
    amount_0?: string;
    /**
     * Delta of token1 swapped.
     * @type {string}
     * @memberof SwapV3DTO
     */
    amount_1?: string;
    /**
     * Derived amount of tokens sold in USD.
     * @type {string}
     * @memberof SwapV3DTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof SwapV3DTO
     */
    sqrt_price_x96?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof SwapV3DTO
     */
    tick?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof SwapV3DTO
     */
    log_index?: BigInteger;
    /**
     * 
     * @type {number}
     * @memberof SwapV3DTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapV3DTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {ETradeAggressiveSide}
     * @memberof SwapV3DTO
     */
    evaluated_aggressor?: ETradeAggressiveSide;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    transaction_id?: string;
}

/**
 * Data accumulated and condensed into day stats for each exchange. Entity gets saved only if there is a change during the day
 * @export
 */
export type TickDayDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TickDayDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TickDayDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof TickDayDataV3DTO
     */
    block_number?: number;
    /**
     * Identifier, format: <pool address>-<tick index>-<timestamp>.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    id?: string;
    /**
     * Timestamp rounded to current day by dividing by 86400.
     * @type {number}
     * @memberof TickDayDataV3DTO
     */
    _date?: number;
    /**
     * Pointer to pool.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    pool?: string;
    /**
     * Pointer to tick.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    tick?: string;
    /**
     * Total liquidity pool has as tick lower or upper at end of period.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    liquidity_gross?: string;
    /**
     * How much liquidity changes when tick crossed at end of period.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    liquidity_net?: string;
    /**
     * Hourly volume of token0 with this tick in range.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    volume_token_0?: string;
    /**
     * Hourly volume of token1 with this tick in range.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    volume_token_1?: string;
    /**
     * Hourly volume in derived USD with this tick in range.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    fees_usd?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    fee_growth_outside_0x128?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    fee_growth_outside_1x128?: string;
    /**
     * 
     * @type {number}
     * @memberof TickDayDataV3DTO
     */
    vid?: number;
}

/**
 * Ticks are the boundaries between discrete areas in price space.
 * @export
 */
export type TickV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TickV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TickV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof TickV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof TickV3DTO
     */
    vid?: number;
    /**
     * Identifier, format: <pool address>#<tick index>
     * @type {string}
     * @memberof TickV3DTO
     */
    id?: string;
    /**
     * Pool address.
     * @type {string}
     * @memberof TickV3DTO
     */
    pool_address?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    tick_idx?: BigInteger;
    /**
     * Pool address.
     * @type {string}
     * @memberof TickV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    liquidity_gross?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    liquidity_net?: BigInteger;
    /**
     * Calculated price of token0 of tick within this pool - constant.
     * @type {string}
     * @memberof TickV3DTO
     */
    price_0?: string;
    /**
     * Calculated price of token1 of tick within this pool - constant.
     * @type {string}
     * @memberof TickV3DTO
     */
    price_1?: string;
    /**
     * Lifetime volume of token0 with this tick in range.
     * @type {string}
     * @memberof TickV3DTO
     */
    volume_token_0?: string;
    /**
     * Lifetime volume of token1 with this tick in range.
     * @type {string}
     * @memberof TickV3DTO
     */
    volume_token_1?: string;
    /**
     * Lifetime volume in derived USD with this tick in range.
     * @type {string}
     * @memberof TickV3DTO
     */
    volume_usd?: string;
    /**
     * Lifetime volume in untracked USD with this tick in range.
     * @type {string}
     * @memberof TickV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof TickV3DTO
     */
    fees_usd?: string;
    /**
     * All time collected fees in token0.
     * @type {string}
     * @memberof TickV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * All time collected fees in token1.
     * @type {string}
     * @memberof TickV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * All time collected fees in USD.
     * @type {string}
     * @memberof TickV3DTO
     */
    collected_fees_usd?: string;
    /**
     * Created time.
     * @type {Date}
     * @memberof TickV3DTO
     */
    created_at_timestamp?: Date;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    liquidity_provider_count?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    fee_growth_outside_0x128?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    fee_growth_outside_1x128?: BigInteger;
}

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 * @export
 */
export type TokenDTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof TokenDTO
     */
    block_number?: number;
    /**
     * Token address.
     * @type {string}
     * @memberof TokenDTO
     */
    id?: string;
    /**
     * Factory address.
     * @type {string}
     * @memberof TokenDTO
     */
    factory?: string;
    /**
     * Token symbol.
     * @type {string}
     * @memberof TokenDTO
     */
    symbol?: string;
    /**
     * Token name.
     * @type {string}
     * @memberof TokenDTO
     */
    name?: string;
    /**
     * Token decimals.
     * @type {string}
     * @memberof TokenDTO
     */
    decimals?: string;
    /**
     * Total supply of liquidity token.
     * @type {string}
     * @memberof TokenDTO
     */
    total_supply?: string;
    /**
     * Amount of token traded all time across all pairs.
     * @type {string}
     * @memberof TokenDTO
     */
    volume?: string;
    /**
     * Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold).
     * @type {string}
     * @memberof TokenDTO
     */
    volume_usd?: string;
    /**
     * Amount of token in USD traded all time across pairs (no minimum liquidity threshold).
     * @type {string}
     * @memberof TokenDTO
     */
    untracked_volume_usd?: string;
    /**
     * Amount of transactions all time in pairs including token.
     * @type {string}
     * @memberof TokenDTO
     */
    tx_count?: string;
    /**
     * Total amount of token provided as liquidity across all pairs.
     * @type {string}
     * @memberof TokenDTO
     */
    liquidity?: string;
    /**
     * ETH per token.
     * @type {string}
     * @memberof TokenDTO
     */
    derived_eth?: string;
    /**
     * Array of whitelisted pairs.
     * @type {Array<string>}
     * @memberof TokenDTO
     */
    whitelist_pairs?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof TokenDTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    token_symbol?: string;
}

/**
 * Token data aggregated across all pairs that include token.
 * @export
 */
export type TokenHourDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenHourDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenHourDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof TokenHourDataV3DTO
     */
    block_number?: number;
    /**
     * Token address concatendated with date.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    id?: string;
    /**
     * Unix timestamp for start of hour.
     * @type {number}
     * @memberof TokenHourDataV3DTO
     */
    period_start_unix?: number;
    /**
     * Pointer to token.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    token?: string;
    /**
     * Volume in token units.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    volume?: string;
    /**
     * Volume in derived USD.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    volume_usd?: string;
    /**
     * Volume in USD even on pools with less reliable USD values.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Liquidity across all pools in token units.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    total_value_locked?: string;
    /**
     * Liquidity across all pools in derived USD.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * Price at end of period in USD.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    price_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    fees_usd?: string;
    /**
     * Opening price USD.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    open?: string;
    /**
     * High price USD.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    high?: string;
    /**
     * Low price USD.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    low?: string;
    /**
     * Close price USD.
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    close?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenHourDataV3DTO
     */
    vid?: number;
}

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 * @export
 */
export type TokenV2DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenV2DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenV2DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof TokenV2DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenV2DTO
     */
    vid?: number;
    /**
     * Token address.
     * @type {string}
     * @memberof TokenV2DTO
     */
    id?: string;
    /**
     * Token symbol.
     * @type {string}
     * @memberof TokenV2DTO
     */
    symbol?: string;
    /**
     * Token name.
     * @type {string}
     * @memberof TokenV2DTO
     */
    name?: string;
    /**
     * Token decimals.
     * @type {number}
     * @memberof TokenV2DTO
     */
    decimals?: number;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV2DTO
     */
    total_supply?: BigInteger;
    /**
     * Amount of token traded all time across all pairs.
     * @type {string}
     * @memberof TokenV2DTO
     */
    trade_volume?: string;
    /**
     * Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold).
     * @type {string}
     * @memberof TokenV2DTO
     */
    trade_volume_usd?: string;
    /**
     * Amount of token in USD traded all time across pairs (no minimum liquidity threshold).
     * @type {string}
     * @memberof TokenV2DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV2DTO
     */
    tx_count?: BigInteger;
    /**
     * Total amount of token provided as liquidity across all pairs.
     * @type {string}
     * @memberof TokenV2DTO
     */
    total_liquidity?: string;
    /**
     * ETH per token.
     * @type {string}
     * @memberof TokenV2DTO
     */
    derived_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    token_symbol?: string;
}

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 * @export
 */
export type TokenV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof TokenV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenV3DTO
     */
    vid?: number;
    /**
     * Token address.
     * @type {string}
     * @memberof TokenV3DTO
     */
    id?: string;
    /**
     * Token symbol.
     * @type {string}
     * @memberof TokenV3DTO
     */
    symbol?: string;
    /**
     * Token name.
     * @type {string}
     * @memberof TokenV3DTO
     */
    name?: string;
    /**
     * Token decimals.
     * @type {number}
     * @memberof TokenV3DTO
     */
    decimals?: number;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV3DTO
     */
    total_supply?: BigInteger;
    /**
     * Volume in token units.
     * @type {string}
     * @memberof TokenV3DTO
     */
    volume?: string;
    /**
     * Volume in derived USD.
     * @type {string}
     * @memberof TokenV3DTO
     */
    volume_usd?: string;
    /**
     * Volume in USD even on pools with less reliable USD values.
     * @type {string}
     * @memberof TokenV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof TokenV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV3DTO
     */
    tx_count?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV3DTO
     */
    pool_count?: BigInteger;
    /**
     * Liquidity across all pools in token units.
     * @type {string}
     * @memberof TokenV3DTO
     */
    total_value_locked?: string;
    /**
     * Liquidity across all pools in derived USD.
     * @type {string}
     * @memberof TokenV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * TVL derived in USD untracked.
     * @type {string}
     * @memberof TokenV3DTO
     */
    total_value_locked_usd_untracked?: string;
    /**
     * Derived price in ETH.
     * @type {string}
     * @memberof TokenV3DTO
     */
    derived_eth?: string;
    /**
     * Pools token is in that are white listed for USD pricing.
     * @type {Array<string>}
     * @memberof TokenV3DTO
     */
    whitelist_pools?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    token_symbol?: string;
}

/**
 * Token data aggregated across all pairs that include token.
 * @export
 */
export type TokenV3DayDataDTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenV3DayDataDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenV3DayDataDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof TokenV3DayDataDTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenV3DayDataDTO
     */
    vid?: number;
    /**
     * Token address concatendated with date.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    id?: string;
    /**
     * Timestamp rounded to current day by dividing by 86400.
     * @type {number}
     * @memberof TokenV3DayDataDTO
     */
    _date?: number;
    /**
     * Pointer to token.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    token?: string;
    /**
     * Volume in token units.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    volume?: string;
    /**
     * Volume in derived USD.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    volume_usd?: string;
    /**
     * Volume in USD even on pools with less reliable USD values.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    untracked_volume_usd?: string;
    /**
     * Liquidity across all pools in token units.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    total_value_locked?: string;
    /**
     * Liquidity across all pools in derived USD.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    total_value_locked_usd?: string;
    /**
     * Price at end of period in USD.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    price_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    fees_usd?: string;
    /**
     * Opening price USD.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    open?: string;
    /**
     * High price USD.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    high?: string;
    /**
     * Low price USD.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    low?: string;
    /**
     * Close price USD.
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    close?: string;
}

/**
 * Data accumulated and condensed into day stats for all of Uniswap.
 * @export
 */
export type UniswapDayDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapDayDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapDayDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapDayDataV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapDayDataV3DTO
     */
    vid?: number;
    /**
     * Timestamp rounded to current day by dividing by 86400.
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    id?: string;
    /**
     * Timestamp rounded to current day by dividing by 86400.
     * @type {number}
     * @memberof UniswapDayDataV3DTO
     */
    _date?: number;
    /**
     * Total volume across all pairs on this day, stored as a derived amount of ETH.
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    volume_eth?: string;
    /**
     * Total volume across all pairs on this day, stored as a derived amount of USD.
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    volume_usd?: string;
    /**
     * Total daily volume in Uniswap derived in terms of USD untracked.
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    volume_usd_untracked?: string;
    /**
     * Fees in USD
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof UniswapDayDataV3DTO
     */
    tx_count?: BigInteger;
    /**
     * Tvl in terms of USD.
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    tvl_usd?: string;
}



/**
 * CowApi - fetch parameter creator
 * @export
 */
export const CowApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowOrdersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/cow/orders/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowSettlementHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/cow/settlement/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/cow/tokens/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowTradesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/cow/trades/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowUsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/cow/users/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type CowApiType = { 
    dappsCowOrdersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCowSettlementHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCowTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsCowTradesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCowUsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,
}

/**
 * CowApi - factory function to inject configuration 
 * @export
 */
export const CowApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): CowApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowOrdersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CowApiFetchParamCreator(configuration).dappsCowOrdersHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowSettlementHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CowApiFetchParamCreator(configuration).dappsCowSettlementHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CowApiFetchParamCreator(configuration).dappsCowTokensHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowTradesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CowApiFetchParamCreator(configuration).dappsCowTradesHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCowUsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CowApiFetchParamCreator(configuration).dappsCowUsersHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * CurveApi - fetch parameter creator
 * @export
 */
export const CurveApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveAccountsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/accounts/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveAddLiquidityEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/addLiquidityEvent/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveAdminFeeChangeLogHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/adminFeeChangeLog/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveAmplificationCoeffChangeLogHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/amplificationCoeffChangeLog/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveCoinsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/coins/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveContractsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/contracts/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveContractsVersionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/contractsVersion/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveDailyVolumeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/dailyVolume/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveFeeChangeLogHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/feeChangeLog/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeDepositHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/gaugeDeposit/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/gauge/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeLiquidityHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/gaugeLiquidity/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeTotalWeightHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/gaugeTotalWeight/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeTypeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/gaugeType/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeTypeWeightHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/gaugeTypeWeight/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeWeightHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/gaugeWeight/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeWeightVoteHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/gaugeWeightVote/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeWithdrawHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/gaugeWithdraw/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveHourlyVolumeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/hourlyVolume/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveLpTokenHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/lpToken/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurvePoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/pools/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveProposalsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/proposals/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveProposalsVoteHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/proposalsVote/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveRemoveLiquidityEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/removeLiquidityEvent/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveRemoveLiquidityOneEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/removeLiquidityOneEvent/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveSwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/swaps/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveSystemStateHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/systemState/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/tokens/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveTransferOwnershipEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/transferOwnershipEvent/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveUnderlyingCoinHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/underlyingCoin/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveVotingAppHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/votingApp/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveWeeklyVolumeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/curve/weeklyVolume/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type CurveApiType = { 
    dappsCurveAccountsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveAddLiquidityEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveAdminFeeChangeLogHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveAmplificationCoeffChangeLogHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveCoinsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveContractsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveContractsVersionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveDailyVolumeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveFeeChangeLogHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveGaugeDepositHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveGaugeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveGaugeLiquidityHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveGaugeTotalWeightHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveGaugeTypeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveGaugeTypeWeightHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveGaugeWeightHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveGaugeWeightVoteHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveGaugeWithdrawHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveHourlyVolumeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveLpTokenHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurvePoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveProposalsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveProposalsVoteHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveRemoveLiquidityEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveRemoveLiquidityOneEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveSwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveSystemStateHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveTransferOwnershipEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveUnderlyingCoinHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsCurveVotingAppHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsCurveWeeklyVolumeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * CurveApi - factory function to inject configuration 
 * @export
 */
export const CurveApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): CurveApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveAccountsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveAccountsHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveAddLiquidityEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveAddLiquidityEventHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveAdminFeeChangeLogHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveAdminFeeChangeLogHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveAmplificationCoeffChangeLogHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveAmplificationCoeffChangeLogHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveCoinsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveCoinsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveContractsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveContractsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveContractsVersionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveContractsVersionHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveDailyVolumeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveDailyVolumeHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveFeeChangeLogHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveFeeChangeLogHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeDepositHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveGaugeDepositHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveGaugeHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeLiquidityHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveGaugeLiquidityHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeTotalWeightHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveGaugeTotalWeightHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeTypeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveGaugeTypeHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeTypeWeightHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveGaugeTypeWeightHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeWeightHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveGaugeWeightHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeWeightVoteHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveGaugeWeightVoteHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveGaugeWithdrawHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveGaugeWithdrawHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveHourlyVolumeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveHourlyVolumeHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveLpTokenHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveLpTokenHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurvePoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurvePoolsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveProposalsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveProposalsHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveProposalsVoteHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveProposalsVoteHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveRemoveLiquidityEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveRemoveLiquidityEventHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveRemoveLiquidityOneEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveRemoveLiquidityOneEventHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveSwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveSwapsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveSystemStateHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveSystemStateHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveTokensHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveTransferOwnershipEventHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveTransferOwnershipEventHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveUnderlyingCoinHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveUnderlyingCoinHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveVotingAppHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveVotingAppHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsCurveWeeklyVolumeHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = CurveApiFetchParamCreator(configuration).dappsCurveWeeklyVolumeHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * DexApi - fetch parameter creator
 * @export
 */
export const DexApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexBatchHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/batch/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexOrdersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/orders/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexPricesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/prices/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexSolutionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/solution/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexStatsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/stats/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/tokens/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexTradesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/trades/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexUsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/users/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexWithdrawHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/withdraw/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexWithdrawRequestHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/dex/withdrawRequest/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type DexApiType = { 
    dappsDexBatchHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsDexOrdersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsDexPricesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsDexSolutionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsDexStatsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsDexTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsDexTradesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsDexUsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsDexWithdrawHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsDexWithdrawRequestHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * DexApi - factory function to inject configuration 
 * @export
 */
export const DexApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): DexApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexBatchHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexBatchHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexOrdersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexOrdersHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexPricesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexPricesHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexSolutionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexSolutionHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexStatsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexStatsHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexTokensHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexTradesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexTradesHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexUsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexUsersHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexWithdrawHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexWithdrawHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsDexWithdrawRequestHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DexApiFetchParamCreator(configuration).dappsDexWithdrawRequestHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * SushiswapApi - fetch parameter creator
 * @export
 */
export const SushiswapApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapBundlesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/bundles/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapBurnsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/burns/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/dayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapFactoryHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/factory/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/hourData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapLiquidityPositionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/liquidityPosition/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapLiquidityPositionSnapshotsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/liquidityPositionSnapshots/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapMintsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/mints/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapPoolDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/poolDayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapPoolHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/poolHourData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s.
         * @summary GetPools
         * @throws {RequiredError}
         */
        dappsSushiswapPoolsCurrentGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/pools/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        dappsSushiswapPoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/pools/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        dappsSushiswapSwapsCurrentGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/swaps/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetSwaps (historical)
         * @throws {RequiredError}
         */
        dappsSushiswapSwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/swaps/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapTokenDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/tokenDayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        dappsSushiswapTokensCurrentGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/tokens/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        dappsSushiswapTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/tokens/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapTransactionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/transactions/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapUsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/users/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SushiswapApiType = { 
    dappsSushiswapBundlesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsSushiswapBurnsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsSushiswapDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsSushiswapFactoryHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsSushiswapHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsSushiswapLiquidityPositionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsSushiswapLiquidityPositionSnapshotsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsSushiswapMintsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsSushiswapPoolDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsSushiswapPoolHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsSushiswapPoolsCurrentGet(options?: RequestOptions): Promise<Array<PairDTO>>,

    dappsSushiswapPoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Array<PairDTO>>,

    dappsSushiswapSwapsCurrentGet(options?: RequestOptions): Promise<Array<SwapDTO>>,

    dappsSushiswapSwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Array<SwapDTO>>,

    dappsSushiswapTokenDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsSushiswapTokensCurrentGet(options?: RequestOptions): Promise<Array<TokenDTO>>,

    dappsSushiswapTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Array<TokenDTO>>,

    dappsSushiswapTransactionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsSushiswapUsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,
}

/**
 * SushiswapApi - factory function to inject configuration 
 * @export
 */
export const SushiswapApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SushiswapApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapBundlesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapBundlesHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapBurnsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapBurnsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapFactoryHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapFactoryHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapHourDataHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapLiquidityPositionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapLiquidityPositionHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapLiquidityPositionSnapshotsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapLiquidityPositionSnapshotsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapMintsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapMintsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapPoolDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapPoolDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapPoolHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapPoolHourDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s.
         * @summary GetPools
         * @throws {RequiredError}
         */
        dappsSushiswapPoolsCurrentGet(options?: RequestOptions = {}): Promise<Array<PairDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapPoolsCurrentGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        dappsSushiswapPoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Array<PairDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapPoolsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        dappsSushiswapSwapsCurrentGet(options?: RequestOptions = {}): Promise<Array<SwapDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapSwapsCurrentGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetSwaps (historical)
         * @throws {RequiredError}
         */
        dappsSushiswapSwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Array<SwapDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapSwapsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapTokenDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapTokenDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        dappsSushiswapTokensCurrentGet(options?: RequestOptions = {}): Promise<Array<TokenDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapTokensCurrentGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        dappsSushiswapTokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Array<TokenDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapTokensHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapTransactionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapTransactionsHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsSushiswapUsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dappsSushiswapUsersHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * UniswapV2Api - fetch parameter creator
 * @export
 */
export const UniswapV2ApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2BundlesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/bundles/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2BurnsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/burns/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2DayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/dayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2FactoryHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/factory/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2LiquidityPositionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/liquidityPosition/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2LiquidityPositionSnapshotsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/liquidityPositionSnapshots/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2MintsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/mints/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2PoolDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/poolDayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2PoolHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/poolHourData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        dappsUniswapv2PoolsCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/pools/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2PoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/pools/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        dappsUniswapv2SwapsCurrentGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/swaps/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2SwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/swaps/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2TokenDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/tokenDayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        dappsUniswapv2TokensCurrentGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/tokens/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2TokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/tokens/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2TransactionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/transactions/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2UsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/users/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UniswapV2ApiType = { 
    dappsUniswapv2BundlesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2BurnsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2DayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2FactoryHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2LiquidityPositionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2LiquidityPositionSnapshotsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2MintsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2PoolDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2PoolHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2PoolsCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<PairV2DTO>>,

    dappsUniswapv2PoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2SwapsCurrentGet(options?: RequestOptions): Promise<Array<SwapV2DTO>>,

    dappsUniswapv2SwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2TokenDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2TokensCurrentGet(options?: RequestOptions): Promise<Array<TokenV2DTO>>,

    dappsUniswapv2TokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2TransactionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsUniswapv2UsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,
}

/**
 * UniswapV2Api - factory function to inject configuration 
 * @export
 */
export const UniswapV2Api = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UniswapV2ApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2BundlesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2BundlesHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2BurnsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2BurnsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2DayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2DayDataHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2FactoryHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2FactoryHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2LiquidityPositionHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2LiquidityPositionHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2LiquidityPositionSnapshotsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2LiquidityPositionSnapshotsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2MintsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2MintsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2PoolDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2PoolDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2PoolHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2PoolHourDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        dappsUniswapv2PoolsCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PairV2DTO>> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2PoolsCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2PoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2PoolsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        dappsUniswapv2SwapsCurrentGet(options?: RequestOptions = {}): Promise<Array<SwapV2DTO>> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2SwapsCurrentGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2SwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2SwapsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2TokenDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2TokenDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        dappsUniswapv2TokensCurrentGet(options?: RequestOptions = {}): Promise<Array<TokenV2DTO>> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2TokensCurrentGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2TokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2TokensHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2TransactionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2TransactionsHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv2UsersHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).dappsUniswapv2UsersHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * UniswapV3Api - fetch parameter creator
 * @export
 */
export const UniswapV3ApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GetBundles
         * @throws {RequiredError}
         */
        dappsUniswapv3BundleCurrentGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/bundle/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3BundlesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/bundles/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetBurns
         * @throws {RequiredError}
         */
        dappsUniswapv3BurnsCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/burns/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3BurnsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/burns/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3DayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/dayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetFactory
         * @throws {RequiredError}
         */
        dappsUniswapv3FactoryCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling dappsUniswapv3FactoryCurrentGet.');
            }
            const localVarPath = `/dapps/uniswapv3/factory/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3FactoryHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/factory/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetMints
         * @throws {RequiredError}
         */
        dappsUniswapv3MintsCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/mints/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3MintsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/mints/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/poolDayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/poolHourData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolsCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/pools/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPoolsDayData
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolsDayDataCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/poolsDayData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/pools/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPoolsHourData
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolsHourDataCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/poolsHourData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PositionSnapshotHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/positionSnapshot/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPositionSnapshot
         * @throws {RequiredError}
         */
        dappsUniswapv3PositionSnapshotsCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/positionSnapshots/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPositions
         * @throws {RequiredError}
         */
        dappsUniswapv3PositionsCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/positions/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PositionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/positions/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        dappsUniswapv3SwapsCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/swaps/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3SwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/swaps/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TickDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tickDayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTicks
         * @throws {RequiredError}
         */
        dappsUniswapv3TicksCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/ticks/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTicksDayData
         * @throws {RequiredError}
         */
        dappsUniswapv3TicksDayDataCurrentGet(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/ticksDayData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TicksHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/ticks/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TokenDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tokenDayData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TokenHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tokenHourData/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        dappsUniswapv3TokensCurrentGet(filterTokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tokens/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterTokenId !== undefined) {
                localVarQueryParameter['filter_token_id'] = ((filterTokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokensDayData
         * @throws {RequiredError}
         */
        dappsUniswapv3TokensDayDataCurrentGet(filterTokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tokensDayData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterTokenId !== undefined) {
                localVarQueryParameter['filter_token_id'] = ((filterTokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tokens/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokensHourData
         * @throws {RequiredError}
         */
        dappsUniswapv3TokensHourDataCurrentGet(filterTokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tokensHourData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterTokenId !== undefined) {
                localVarQueryParameter['filter_token_id'] = ((filterTokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TransactionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/transactions/historical`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetUniswapDayData
         * @throws {RequiredError}
         */
        dappsUniswapv3UniswapDayDataCurrentGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/uniswapDayData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UniswapV3ApiType = { 
    dappsUniswapv3BundleCurrentGet(options?: RequestOptions): Promise<Array<BundleV3DTO>>,

    dappsUniswapv3BundlesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3BurnsCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<BurnV3DTO>>,

    dappsUniswapv3BurnsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3DayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3FactoryCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<FactoryV3DTO>>,

    dappsUniswapv3FactoryHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3MintsCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<MintV3DTO>>,

    dappsUniswapv3MintsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3PoolDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3PoolHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3PoolsCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<PoolV3DTO>>,

    dappsUniswapv3PoolsDayDataCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<PoolDayDataV3DTO>>,

    dappsUniswapv3PoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3PoolsHourDataCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<PoolHourDataV3DTO>>,

    dappsUniswapv3PositionSnapshotHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3PositionSnapshotsCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<PositionSnapshotV3DTO>>,

    dappsUniswapv3PositionsCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<PositionV3DTO>>,

    dappsUniswapv3PositionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3SwapsCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<SwapV3DTO>>,

    dappsUniswapv3SwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3TickDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3TicksCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<TickV3DTO>>,

    dappsUniswapv3TicksDayDataCurrentGet(filterPoolId?: string, options?: RequestOptions): Promise<Array<TickDayDataV3DTO>>,

    dappsUniswapv3TicksHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3TokenDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3TokenHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3TokensCurrentGet(filterTokenId?: string, options?: RequestOptions): Promise<Array<TokenV3DTO>>,

    dappsUniswapv3TokensDayDataCurrentGet(filterTokenId?: string, options?: RequestOptions): Promise<Array<TokenV3DayDataDTO>>,

    dappsUniswapv3TokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3TokensHourDataCurrentGet(filterTokenId?: string, options?: RequestOptions): Promise<Array<TokenHourDataV3DTO>>,

    dappsUniswapv3TransactionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    dappsUniswapv3UniswapDayDataCurrentGet(options?: RequestOptions): Promise<Array<UniswapDayDataV3DTO>>,
}

/**
 * UniswapV3Api - factory function to inject configuration 
 * @export
 */
export const UniswapV3Api = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UniswapV3ApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @summary GetBundles
         * @throws {RequiredError}
         */
        dappsUniswapv3BundleCurrentGet(options?: RequestOptions = {}): Promise<Array<BundleV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3BundleCurrentGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3BundlesHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3BundlesHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetBurns
         * @throws {RequiredError}
         */
        dappsUniswapv3BurnsCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<BurnV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3BurnsCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3BurnsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3BurnsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3DayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3DayDataHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetFactory
         * @throws {RequiredError}
         */
        dappsUniswapv3FactoryCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<FactoryV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3FactoryCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3FactoryHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3FactoryHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetMints
         * @throws {RequiredError}
         */
        dappsUniswapv3MintsCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<MintV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3MintsCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3MintsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3MintsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PoolDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PoolHourDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolsCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PoolV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PoolsCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPoolsDayData
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolsDayDataCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PoolDayDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PoolsDayDataCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PoolsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPoolsHourData
         * @throws {RequiredError}
         */
        dappsUniswapv3PoolsHourDataCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PoolHourDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PoolsHourDataCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PositionSnapshotHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PositionSnapshotHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPositionSnapshot
         * @throws {RequiredError}
         */
        dappsUniswapv3PositionSnapshotsCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PositionSnapshotV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PositionSnapshotsCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPositions
         * @throws {RequiredError}
         */
        dappsUniswapv3PositionsCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PositionV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PositionsCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3PositionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3PositionsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        dappsUniswapv3SwapsCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<SwapV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3SwapsCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3SwapsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3SwapsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TickDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TickDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTicks
         * @throws {RequiredError}
         */
        dappsUniswapv3TicksCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<TickV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TicksCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTicksDayData
         * @throws {RequiredError}
         */
        dappsUniswapv3TicksDayDataCurrentGet(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<TickDayDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TicksDayDataCurrentGet(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TicksHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TicksHistoricalGet(startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TokenDayDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TokenDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TokenHourDataHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TokenHourDataHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        dappsUniswapv3TokensCurrentGet(filterTokenId?: string, options?: RequestOptions = {}): Promise<Array<TokenV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TokensCurrentGet(filterTokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokensDayData
         * @throws {RequiredError}
         */
        dappsUniswapv3TokensDayDataCurrentGet(filterTokenId?: string, options?: RequestOptions = {}): Promise<Array<TokenV3DayDataDTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TokensDayDataCurrentGet(filterTokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TokensHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TokensHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokensHourData
         * @throws {RequiredError}
         */
        dappsUniswapv3TokensHourDataCurrentGet(filterTokenId?: string, options?: RequestOptions = {}): Promise<Array<TokenHourDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TokensHourDataCurrentGet(filterTokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        dappsUniswapv3TransactionsHistoricalGet(startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3TransactionsHistoricalGet(startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetUniswapDayData
         * @throws {RequiredError}
         */
        dappsUniswapv3UniswapDayDataCurrentGet(options?: RequestOptions = {}): Promise<Array<UniswapDayDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).dappsUniswapv3UniswapDayDataCurrentGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    CowApi: CowApiType,

    CurveApi: CurveApiType,

    DexApi: DexApiType,

    SushiswapApi: SushiswapApiType,

    UniswapV2Api: UniswapV2ApiType,

    UniswapV3Api: UniswapV3ApiType,
 }
