// @flow
/* eslint-disable no-use-before-define */
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://onchain.coinapi.io".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type BigInteger = {
    /**
     * 
     * @type {boolean}
     * @memberof BigInteger
     */
    is_power_of_two?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BigInteger
     */
    is_zero?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BigInteger
     */
    is_one?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BigInteger
     */
    is_even?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BigInteger
     */
    sign?: number;
}

/**
 * 
 * @export
 */
export type BundleV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof BundleV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BundleV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof BundleV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof BundleV3DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BundleV3DTO
     */
    eth_price_usd?: string;
    /**
     * 
     * @type {number}
     * @memberof BundleV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type BurnV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof BurnV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BurnV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof BurnV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    transaction?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    origin?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    amount_0?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    amount_1?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    tick_lower?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    tick_upper?: string;
    /**
     * 
     * @type {string}
     * @memberof BurnV3DTO
     */
    log_index?: string;
    /**
     * 
     * @type {number}
     * @memberof BurnV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type ETradeAggressiveSide = 'Buy' | 'Sell' | 'EstimatedBuy' | 'EstimatedSell' | 'Unknown';

/**
 * 
 * @export
 */
export type FactoryV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof FactoryV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FactoryV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof FactoryV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    pool_count?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    tx_count?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_volume_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_fees_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_fees_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_value_locked_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_value_locked_usd_untracked?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    total_value_locked_eth_untracked?: string;
    /**
     * 
     * @type {string}
     * @memberof FactoryV3DTO
     */
    owner?: string;
    /**
     * 
     * @type {number}
     * @memberof FactoryV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type MintV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof MintV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MintV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof MintV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    transaction?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    origin?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    amount_0?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    amount_1?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    tick_lower?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    tick_upper?: string;
    /**
     * 
     * @type {string}
     * @memberof MintV3DTO
     */
    log_index?: string;
    /**
     * 
     * @type {number}
     * @memberof MintV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type PairDTO = {
    /**
     * 
     * @type {Date}
     * @memberof PairDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PairDTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof PairDTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    factory?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    reserve_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    reserve_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    total_supply?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    reserve_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    reserve_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    tracked_reserve_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    token_0_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    token_1_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    volume_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    volume_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    tx_count?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    liquidity_provider_count?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof PairDTO
     */
    block?: string;
    /**
     * 
     * @type {number}
     * @memberof PairDTO
     */
    vid?: number;
    /**
     * 
     * @type {number}
     * @memberof PairDTO
     */
    evaluated_ask?: number;
}

/**
 * 
 * @export
 */
export type PairV2DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PairV2DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PairV2DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof PairV2DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof PairV2DTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    reserve_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    reserve_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    total_supply?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    reserve_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    reserve_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    tracked_reserve_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    token_0_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    token_1_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    volume_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    volume_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof PairV2DTO
     */
    tx_count?: BigInteger;
    /**
     * 
     * @type {Date}
     * @memberof PairV2DTO
     */
    created_at_timestamp?: Date;
    /**
     * 
     * @type {string}
     * @memberof PairV2DTO
     */
    liquidity_provider_count?: string;
    /**
     * 
     * @type {number}
     * @memberof PairV2DTO
     */
    evaluated_ask?: number;
}

/**
 * 
 * @export
 */
export type PoolDayDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PoolDayDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoolDayDataV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof PoolDayDataV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof PoolDayDataV3DTO
     */
    _date?: number;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    liquidity?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    sqrt_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    token_0_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    token_1_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    tick?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    fee_growth_global_0x128?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    fee_growth_global_1x128?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    tvl_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    volume_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    volume_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    tx_count?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    open?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    high?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    low?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolDayDataV3DTO
     */
    close?: string;
    /**
     * 
     * @type {number}
     * @memberof PoolDayDataV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type PoolHourDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PoolHourDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoolHourDataV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof PoolHourDataV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof PoolHourDataV3DTO
     */
    period_start_unix?: number;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    liquidity?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    sqrt_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    token_0_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    token_1_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    tick?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    fee_growth_global_0x128?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    fee_growth_global_1x128?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    tvl_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    volume_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    volume_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    tx_count?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    open?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    high?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    low?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolHourDataV3DTO
     */
    close?: string;
    /**
     * 
     * @type {number}
     * @memberof PoolHourDataV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type PoolV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PoolV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PoolV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof PoolV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof PoolV3DTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof PoolV3DTO
     */
    created_at_timestamp?: Date;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    token_1?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    fee_tier?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    liquidity?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    sqrt_price?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    fee_growth_global_0x128?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    fee_growth_global_1x128?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    token_0_price?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    token_1_price?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    tick?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    observation_index?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    volume_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    volume_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof PoolV3DTO
     */
    tx_count?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    collected_fees_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    total_value_locked_usd_untracked?: string;
    /**
     * 
     * @type {string}
     * @memberof PoolV3DTO
     */
    liquidity_provider_count?: string;
    /**
     * 
     * @type {number}
     * @memberof PoolV3DTO
     */
    evaluated_ask?: number;
}

/**
 * 
 * @export
 */
export type PositionSnapshotV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PositionSnapshotV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PositionSnapshotV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof PositionSnapshotV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    position?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    liquidity?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    deposited_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    deposited_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    withdrawn_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    withdrawn_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    transaction?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    fee_growth_inside_0_last_x128?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionSnapshotV3DTO
     */
    fee_growth_inside_1_last_x128?: string;
    /**
     * 
     * @type {number}
     * @memberof PositionSnapshotV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type PositionV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof PositionV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PositionV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof PositionV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    tick_lower?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    tick_upper?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    liquidity?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    deposited_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    deposited_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    withdrawn_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    withdrawn_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    transaction?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    fee_growth_inside_0_last_x128?: string;
    /**
     * 
     * @type {string}
     * @memberof PositionV3DTO
     */
    fee_growth_inside_1_last_x128?: string;
    /**
     * 
     * @type {number}
     * @memberof PositionV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type SwapDTO = {
    /**
     * 
     * @type {Date}
     * @memberof SwapDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SwapDTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof SwapDTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    transaction?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    pair?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    amount_0_in?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    amount_1_in?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    amount_0_out?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    amount_1_out?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    to?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    log_index?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {number}
     * @memberof SwapDTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapDTO
     */
    transaction_id?: string;
    /**
     * 
     * @type {number}
     * @memberof SwapDTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapDTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {ETradeAggressiveSide}
     * @memberof SwapDTO
     */
    evaluated_aggressor?: ETradeAggressiveSide;
}

/**
 * 
 * @export
 */
export type SwapV2DTO = {
    /**
     * 
     * @type {Date}
     * @memberof SwapV2DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SwapV2DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof SwapV2DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapV2DTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    transaction?: string;
    /**
     * 
     * @type {Date}
     * @memberof SwapV2DTO
     */
    timestamp?: Date;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    pair?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    from?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_0_in?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_1_in?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_0_out?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_1_out?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    to?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof SwapV2DTO
     */
    log_index?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {number}
     * @memberof SwapV2DTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapV2DTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {ETradeAggressiveSide}
     * @memberof SwapV2DTO
     */
    evaluated_aggressor?: ETradeAggressiveSide;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV2DTO
     */
    transaction_id?: string;
}

/**
 * 
 * @export
 */
export type SwapV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof SwapV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SwapV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof SwapV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapV3DTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    transaction?: string;
    /**
     * 
     * @type {Date}
     * @memberof SwapV3DTO
     */
    timestamp?: Date;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    sender?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    recipient?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    origin?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    amount_0?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    amount_1?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof SwapV3DTO
     */
    sqrt_price_x96?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof SwapV3DTO
     */
    tick?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof SwapV3DTO
     */
    log_index?: BigInteger;
    /**
     * 
     * @type {number}
     * @memberof SwapV3DTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof SwapV3DTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {ETradeAggressiveSide}
     * @memberof SwapV3DTO
     */
    evaluated_aggressor?: ETradeAggressiveSide;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapV3DTO
     */
    transaction_id?: string;
}

/**
 * 
 * @export
 */
export type TickDayDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TickDayDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TickDayDataV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof TickDayDataV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof TickDayDataV3DTO
     */
    _date?: number;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    tick?: string;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    liquidity_gross?: string;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    liquidity_net?: string;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    volume_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    volume_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    fee_growth_outside_0x128?: string;
    /**
     * 
     * @type {string}
     * @memberof TickDayDataV3DTO
     */
    fee_growth_outside_1x128?: string;
    /**
     * 
     * @type {number}
     * @memberof TickDayDataV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type TickV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TickV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TickV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof TickV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof TickV3DTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    pool_address?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    tick_idx?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    liquidity_gross?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    liquidity_net?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    price_0?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    price_1?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    volume_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    volume_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * 
     * @type {string}
     * @memberof TickV3DTO
     */
    collected_fees_usd?: string;
    /**
     * 
     * @type {Date}
     * @memberof TickV3DTO
     */
    created_at_timestamp?: Date;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    liquidity_provider_count?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    fee_growth_outside_0x128?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof TickV3DTO
     */
    fee_growth_outside_1x128?: BigInteger;
}

/**
 * 
 * @export
 */
export type TokenDTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenDTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof TokenDTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    factory?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    decimals?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    total_supply?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    volume?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    tx_count?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    liquidity?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    derived_eth?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TokenDTO
     */
    whitelist_pairs?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof TokenDTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenDTO
     */
    token_symbol?: string;
}

/**
 * 
 * @export
 */
export type TokenHourDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenHourDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenHourDataV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof TokenHourDataV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenHourDataV3DTO
     */
    period_start_unix?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    volume?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    total_value_locked?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    price_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    open?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    high?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    low?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenHourDataV3DTO
     */
    close?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenHourDataV3DTO
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type TokenV2DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenV2DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenV2DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof TokenV2DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenV2DTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenV2DTO
     */
    decimals?: number;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV2DTO
     */
    total_supply?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    trade_volume?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    trade_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV2DTO
     */
    tx_count?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    total_liquidity?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    derived_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV2DTO
     */
    token_symbol?: string;
}

/**
 * 
 * @export
 */
export type TokenV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof TokenV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenV3DTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    symbol?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenV3DTO
     */
    decimals?: number;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV3DTO
     */
    total_supply?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    volume?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV3DTO
     */
    tx_count?: BigInteger;
    /**
     * 
     * @type {BigInteger}
     * @memberof TokenV3DTO
     */
    pool_count?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    total_value_locked?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    total_value_locked_usd_untracked?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    derived_eth?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TokenV3DTO
     */
    whitelist_pools?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DTO
     */
    token_symbol?: string;
}

/**
 * 
 * @export
 */
export type TokenV3DayDataDTO = {
    /**
     * 
     * @type {Date}
     * @memberof TokenV3DayDataDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokenV3DayDataDTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof TokenV3DayDataDTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof TokenV3DayDataDTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof TokenV3DayDataDTO
     */
    _date?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    volume?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    total_value_locked?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    total_value_locked_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    price_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    open?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    high?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    low?: string;
    /**
     * 
     * @type {string}
     * @memberof TokenV3DayDataDTO
     */
    close?: string;
}

/**
 * 
 * @export
 */
export type UniswapDayDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapDayDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapDayDataV3DTO
     */
    recv_time?: Date;
    /**
     * 
     * @type {number}
     * @memberof UniswapDayDataV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapDayDataV3DTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapDayDataV3DTO
     */
    _date?: number;
    /**
     * 
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    volume_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    volume_usd?: string;
    /**
     * 
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    volume_usd_untracked?: string;
    /**
     * 
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {BigInteger}
     * @memberof UniswapDayDataV3DTO
     */
    tx_count?: BigInteger;
    /**
     * 
     * @type {string}
     * @memberof UniswapDayDataV3DTO
     */
    tvl_usd?: string;
}



/**
 * BundlesApi - fetch parameter creator
 * @export
 */
export const BundlesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3BundlesHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3BundlesHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/bundles/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BundlesApiType = { 
    chainsChainIdDappsUniswapv3BundlesHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,
}

/**
 * BundlesApi - factory function to inject configuration 
 * @export
 */
export const BundlesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BundlesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3BundlesHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = BundlesApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3BundlesHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * BurnsApi - fetch parameter creator
 * @export
 */
export const BurnsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3BurnsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3BurnsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/burns/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type BurnsApiType = { 
    chainsChainIdDappsUniswapv3BurnsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * BurnsApi - factory function to inject configuration 
 * @export
 */
export const BurnsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): BurnsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3BurnsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = BurnsApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3BurnsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * FactoryApi - fetch parameter creator
 * @export
 */
export const FactoryApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3FactoryHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3FactoryHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/factory/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type FactoryApiType = { 
    chainsChainIdDappsUniswapv3FactoryHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,
}

/**
 * FactoryApi - factory function to inject configuration 
 * @export
 */
export const FactoryApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): FactoryApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3FactoryHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = FactoryApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3FactoryHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MintsApi - fetch parameter creator
 * @export
 */
export const MintsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3MintsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3MintsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/mints/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MintsApiType = { 
    chainsChainIdDappsUniswapv3MintsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * MintsApi - factory function to inject configuration 
 * @export
 */
export const MintsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MintsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3MintsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = MintsApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3MintsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PoiApi - fetch parameter creator
 * @export
 */
export const PoiApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoiHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PoiHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/poi/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PoiApiType = { 
    chainsChainIdDappsUniswapv3PoiHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,
}

/**
 * PoiApi - factory function to inject configuration 
 * @export
 */
export const PoiApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PoiApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoiHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PoiApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PoiHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PoolDayDataApi - fetch parameter creator
 * @export
 */
export const PoolDayDataApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolDayDataHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PoolDayDataHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/poolDayData/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PoolDayDataApiType = { 
    chainsChainIdDappsUniswapv3PoolDayDataHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * PoolDayDataApi - factory function to inject configuration 
 * @export
 */
export const PoolDayDataApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PoolDayDataApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolDayDataHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PoolDayDataApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PoolDayDataHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PoolHourDataApi - fetch parameter creator
 * @export
 */
export const PoolHourDataApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolHourDataHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PoolHourDataHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/poolHourData/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PoolHourDataApiType = { 
    chainsChainIdDappsUniswapv3PoolHourDataHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * PoolHourDataApi - factory function to inject configuration 
 * @export
 */
export const PoolHourDataApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PoolHourDataApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolHourDataHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PoolHourDataApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PoolHourDataHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PoolsApi - fetch parameter creator
 * @export
 */
export const PoolsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCurvePoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsCurvePoolsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/curve/pools/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapPoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsSushiswapPoolsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/sushiswap/pools/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2PoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv2PoolsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv2/pools/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PoolsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/pools/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PoolsApiType = { 
    chainsChainIdDappsCurvePoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsSushiswapPoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsUniswapv2PoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsUniswapv3PoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * PoolsApi - factory function to inject configuration 
 * @export
 */
export const PoolsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PoolsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCurvePoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PoolsApiFetchParamCreator(configuration).chainsChainIdDappsCurvePoolsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapPoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PoolsApiFetchParamCreator(configuration).chainsChainIdDappsSushiswapPoolsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2PoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PoolsApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv2PoolsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PoolsApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PoolsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PositionSnapshotApi - fetch parameter creator
 * @export
 */
export const PositionSnapshotApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PositionSnapshotHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PositionSnapshotHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/positionSnapshot/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PositionSnapshotApiType = { 
    chainsChainIdDappsUniswapv3PositionSnapshotHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * PositionSnapshotApi - factory function to inject configuration 
 * @export
 */
export const PositionSnapshotApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PositionSnapshotApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PositionSnapshotHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PositionSnapshotApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PositionSnapshotHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * PositionsApi - fetch parameter creator
 * @export
 */
export const PositionsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PositionsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PositionsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/positions/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type PositionsApiType = { 
    chainsChainIdDappsUniswapv3PositionsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * PositionsApi - factory function to inject configuration 
 * @export
 */
export const PositionsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): PositionsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PositionsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = PositionsApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PositionsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * SushiswapApi - fetch parameter creator
 * @export
 */
export const SushiswapApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s.
         * @summary GetPools
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapPoolsCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsSushiswapPoolsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/sushiswap/pools/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapSwapsCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsSushiswapSwapsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/sushiswap/swaps/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapTokensCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsSushiswapTokensCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/sushiswap/tokens/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SushiswapApiType = { 
    chainsChainIdDappsSushiswapPoolsCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<PairDTO>>,

    chainsChainIdDappsSushiswapSwapsCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<SwapDTO>>,

    chainsChainIdDappsSushiswapTokensCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<TokenDTO>>,
}

/**
 * SushiswapApi - factory function to inject configuration 
 * @export
 */
export const SushiswapApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SushiswapApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s.
         * @summary GetPools
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapPoolsCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<PairDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).chainsChainIdDappsSushiswapPoolsCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapSwapsCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<SwapDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).chainsChainIdDappsSushiswapSwapsCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapTokensCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<TokenDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).chainsChainIdDappsSushiswapTokensCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * SwapsApi - fetch parameter creator
 * @export
 */
export const SwapsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCurveSwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsCurveSwapsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/curve/swaps/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapSwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsSushiswapSwapsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/sushiswap/swaps/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2SwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv2SwapsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv2/swaps/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3SwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3SwapsHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/swaps/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SwapsApiType = { 
    chainsChainIdDappsCurveSwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsSushiswapSwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsUniswapv2SwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsUniswapv3SwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * SwapsApi - factory function to inject configuration 
 * @export
 */
export const SwapsApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SwapsApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCurveSwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SwapsApiFetchParamCreator(configuration).chainsChainIdDappsCurveSwapsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapSwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SwapsApiFetchParamCreator(configuration).chainsChainIdDappsSushiswapSwapsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2SwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SwapsApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv2SwapsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3SwapsHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = SwapsApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3SwapsHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * TickDayDataApi - fetch parameter creator
 * @export
 */
export const TickDayDataApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TickDayDataHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3TickDayDataHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/tickDayData/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type TickDayDataApiType = { 
    chainsChainIdDappsUniswapv3TickDayDataHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * TickDayDataApi - factory function to inject configuration 
 * @export
 */
export const TickDayDataApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): TickDayDataApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TickDayDataHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TickDayDataApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3TickDayDataHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * TicksApi - fetch parameter creator
 * @export
 */
export const TicksApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TicksHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3TicksHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/ticks/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (poolId !== undefined) {
                localVarQueryParameter['poolId'] = ((poolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type TicksApiType = { 
    chainsChainIdDappsUniswapv3TicksHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * TicksApi - factory function to inject configuration 
 * @export
 */
export const TicksApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): TicksApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TicksHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, poolId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TicksApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3TicksHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, poolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * TokensApi - fetch parameter creator
 * @export
 */
export const TokensApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCowTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsCowTokensHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/cow/tokens/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCurveTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsCurveTokensHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/curve/tokens/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsDexTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsDexTokensHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/dex/tokens/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsSushiswapTokensHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/sushiswap/tokens/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2TokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv2TokensHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv2/tokens/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3TokensHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/tokens/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            if (tokenId !== undefined) {
                localVarQueryParameter['tokenId'] = ((tokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type TokensApiType = { 
    chainsChainIdDappsCowTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsCurveTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsDexTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsSushiswapTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsUniswapv2TokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsUniswapv3TokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions): Promise<Response>,
}

/**
 * TokensApi - factory function to inject configuration 
 * @export
 */
export const TokensApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): TokensApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCowTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TokensApiFetchParamCreator(configuration).chainsChainIdDappsCowTokensHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCurveTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TokensApiFetchParamCreator(configuration).chainsChainIdDappsCurveTokensHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsDexTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TokensApiFetchParamCreator(configuration).chainsChainIdDappsDexTokensHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsSushiswapTokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TokensApiFetchParamCreator(configuration).chainsChainIdDappsSushiswapTokensHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2TokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TokensApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv2TokensHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TokensHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, tokenId?: string, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TokensApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3TokensHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, tokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * TradesApi - fetch parameter creator
 * @export
 */
export const TradesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCowTradesHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsCowTradesHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/cow/trades/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsDexTradesHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsDexTradesHistoricalGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/dex/trades/historical`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (startBlock !== undefined) {
                localVarQueryParameter['startBlock'] = ((startBlock:any):string);
            }

            if (endBlock !== undefined) {
                localVarQueryParameter['endBlock'] = ((endBlock:any):string);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = ((startDate:any):Date).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = ((endDate:any):Date).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type TradesApiType = { 
    chainsChainIdDappsCowTradesHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,

    chainsChainIdDappsDexTradesHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions): Promise<Response>,
}

/**
 * TradesApi - factory function to inject configuration 
 * @export
 */
export const TradesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): TradesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsCowTradesHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TradesApiFetchParamCreator(configuration).chainsChainIdDappsCowTradesHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @throws {RequiredError}
         */
        chainsChainIdDappsDexTradesHistoricalGet(chainId: string, startBlock?: number, endBlock?: number, startDate?: Date, endDate?: Date, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = TradesApiFetchParamCreator(configuration).chainsChainIdDappsDexTradesHistoricalGet(chainId, startBlock, endBlock, startDate, endDate, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * UniswapV2Api - fetch parameter creator
 * @export
 */
export const UniswapV2ApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2PoolsCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv2PoolsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv2/pools/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2SwapsCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv2SwapsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv2/swaps/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2TokensCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv2TokensCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv2/tokens/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UniswapV2ApiType = { 
    chainsChainIdDappsUniswapv2PoolsCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<PairV2DTO>>,

    chainsChainIdDappsUniswapv2SwapsCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<SwapV2DTO>>,

    chainsChainIdDappsUniswapv2TokensCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<TokenV2DTO>>,
}

/**
 * UniswapV2Api - factory function to inject configuration 
 * @export
 */
export const UniswapV2Api = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UniswapV2ApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2PoolsCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<PairV2DTO>> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv2PoolsCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2SwapsCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<SwapV2DTO>> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv2SwapsCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv2TokensCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<TokenV2DTO>> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv2TokensCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * UniswapV3Api - fetch parameter creator
 * @export
 */
export const UniswapV3ApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GetBundles
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3BundleCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3BundleCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/bundle/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetBurns
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3BurnsCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3BurnsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/burns/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetFactory
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3FactoryCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3FactoryCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/factory/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetMints
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3MintsCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3MintsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/mints/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolsCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PoolsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/pools/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPoolsDayData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/poolsDayData/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPoolsHourData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/poolsHourData/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPositionSnapshot
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/positionSnapshots/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetPositions
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PositionsCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3PositionsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/positions/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3SwapsCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3SwapsCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/swaps/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTicks
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TicksCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3TicksCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/ticks/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTicksDayData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TicksDayDataCurrentGet(chainId: string, filterPoolId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3TicksDayDataCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/ticksDayData/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TokensCurrentGet(chainId: string, filterTokenId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3TokensCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/tokens/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterTokenId !== undefined) {
                localVarQueryParameter['filter_token_id'] = ((filterTokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokensDayData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TokensDayDataCurrentGet(chainId: string, filterTokenId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3TokensDayDataCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/tokensDayData/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterTokenId !== undefined) {
                localVarQueryParameter['filter_token_id'] = ((filterTokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTokensHourData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TokensHourDataCurrentGet(chainId: string, filterTokenId?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3TokensHourDataCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/tokensHourData/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterTokenId !== undefined) {
                localVarQueryParameter['filter_token_id'] = ((filterTokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetUniswapDayData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet(chainId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'chainId' is not null or undefined
            if (chainId === null || chainId === undefined) {
                throw new RequiredError('chainId','Required parameter chainId was null or undefined when calling chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet.');
            }
            const localVarPath = `/chains/{chain_id}/dapps/uniswapv3/uniswapDayData/current`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UniswapV3ApiType = { 
    chainsChainIdDappsUniswapv3BundleCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<BundleV3DTO>>,

    chainsChainIdDappsUniswapv3BurnsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<BurnV3DTO>>,

    chainsChainIdDappsUniswapv3FactoryCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<FactoryV3DTO>>,

    chainsChainIdDappsUniswapv3MintsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<MintV3DTO>>,

    chainsChainIdDappsUniswapv3PoolsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<PoolV3DTO>>,

    chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<PoolDayDataV3DTO>>,

    chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<PoolHourDataV3DTO>>,

    chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<PositionSnapshotV3DTO>>,

    chainsChainIdDappsUniswapv3PositionsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<PositionV3DTO>>,

    chainsChainIdDappsUniswapv3SwapsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<SwapV3DTO>>,

    chainsChainIdDappsUniswapv3TicksCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<TickV3DTO>>,

    chainsChainIdDappsUniswapv3TicksDayDataCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions): Promise<Array<TickDayDataV3DTO>>,

    chainsChainIdDappsUniswapv3TokensCurrentGet(chainId: string, filterTokenId?: string, options?: RequestOptions): Promise<Array<TokenV3DTO>>,

    chainsChainIdDappsUniswapv3TokensDayDataCurrentGet(chainId: string, filterTokenId?: string, options?: RequestOptions): Promise<Array<TokenV3DayDataDTO>>,

    chainsChainIdDappsUniswapv3TokensHourDataCurrentGet(chainId: string, filterTokenId?: string, options?: RequestOptions): Promise<Array<TokenHourDataV3DTO>>,

    chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet(chainId: string, options?: RequestOptions): Promise<Array<UniswapDayDataV3DTO>>,
}

/**
 * UniswapV3Api - factory function to inject configuration 
 * @export
 */
export const UniswapV3Api = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UniswapV3ApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * 
         * @summary GetBundles
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3BundleCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<BundleV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3BundleCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetBurns
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3BurnsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<BurnV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3BurnsCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetFactory
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3FactoryCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<FactoryV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3FactoryCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetMints
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3MintsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<MintV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3MintsCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPools
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PoolV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PoolsCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPoolsDayData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PoolDayDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPoolsHourData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PoolHourDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPositionSnapshot
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PositionSnapshotV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetPositions
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3PositionsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<PositionV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3PositionsCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetSwaps
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3SwapsCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<SwapV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3SwapsCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTicks
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TicksCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<TickV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3TicksCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTicksDayData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TicksDayDataCurrentGet(chainId: string, filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<TickDayDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3TicksDayDataCurrentGet(chainId, filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokens
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TokensCurrentGet(chainId: string, filterTokenId?: string, options?: RequestOptions = {}): Promise<Array<TokenV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3TokensCurrentGet(chainId, filterTokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokensDayData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TokensDayDataCurrentGet(chainId: string, filterTokenId?: string, options?: RequestOptions = {}): Promise<Array<TokenV3DayDataDTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3TokensDayDataCurrentGet(chainId, filterTokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetTokensHourData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3TokensHourDataCurrentGet(chainId: string, filterTokenId?: string, options?: RequestOptions = {}): Promise<Array<TokenHourDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3TokensHourDataCurrentGet(chainId, filterTokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * 
         * @summary GetUniswapDayData
         * @throws {RequiredError}
         */
        chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet(chainId: string, options?: RequestOptions = {}): Promise<Array<UniswapDayDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet(chainId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    BundlesApi: BundlesApiType,

    BurnsApi: BurnsApiType,

    FactoryApi: FactoryApiType,

    MintsApi: MintsApiType,

    PoiApi: PoiApiType,

    PoolDayDataApi: PoolDayDataApiType,

    PoolHourDataApi: PoolHourDataApiType,

    PoolsApi: PoolsApiType,

    PositionSnapshotApi: PositionSnapshotApiType,

    PositionsApi: PositionsApiType,

    SushiswapApi: SushiswapApiType,

    SwapsApi: SwapsApiType,

    TickDayDataApi: TickDayDataApiType,

    TicksApi: TicksApiType,

    TokensApi: TokensApiType,

    TradesApi: TradesApiType,

    UniswapV2Api: UniswapV2ApiType,

    UniswapV3Api: UniswapV3ApiType,
 }
