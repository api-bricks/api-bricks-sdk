// @flow
/* eslint-disable no-use-before-define */
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://onchain.coinapi.io".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type CurveExchangeDTO = {
    /**
     * 
     * @type {Date}
     * @memberof CurveExchangeDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CurveExchangeDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof CurveExchangeDTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    pool?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    buyer?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    receiver?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    token_sold?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    token_bought?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    amount_sold?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    amount_bought?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    block?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    transaction?: string;
    /**
     * 
     * @type {number}
     * @memberof CurveExchangeDTO
     */
    vid?: number;
    /**
     * 
     * @type {number}
     * @memberof CurveExchangeDTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof CurveExchangeDTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {TransactionsETradeAggressiveSide}
     * @memberof CurveExchangeDTO
     */
    evaluated_aggressor?: TransactionsETradeAggressiveSide;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof CurveExchangeDTO
     */
    transaction_id?: string;
}

/**
 * Trade for a single user, as part of a ring trade. It\'s part of the solution submitted by a solver for a given batch.
 * @export
 */
export type DexTradeDTO = {
    /**
     * 
     * @type {Date}
     * @memberof DexTradeDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DexTradeDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof DexTradeDTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    order?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    sell_volume?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    buy_volume?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    trade_batch_id?: string;
    /**
     * The date of the end of the batch.
     * @type {string}
     * @memberof DexTradeDTO
     */
    trade_epoch?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    buy_token?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    sell_token?: string;
    /**
     * The date where the transaction was mined.
     * @type {string}
     * @memberof DexTradeDTO
     */
    create_epoch?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    revert_epoch?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    tx_hash?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    tx_log_index?: string;
    /**
     * 
     * @type {number}
     * @memberof DexTradeDTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof DexTradeDTO
     */
    transaction_id?: string;
    /**
     * 
     * @type {number}
     * @memberof DexTradeDTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof DexTradeDTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {TransactionsETradeAggressiveSide}
     * @memberof DexTradeDTO
     */
    evaluated_aggressor?: TransactionsETradeAggressiveSide;
}

/**
 * 
 * @export
 */
export type NumericsBigInteger = {
    /**
     * 
     * @type {boolean}
     * @memberof NumericsBigInteger
     */
    is_power_of_two?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NumericsBigInteger
     */
    is_zero?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NumericsBigInteger
     */
    is_one?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NumericsBigInteger
     */
    is_even?: boolean;
    /**
     * 
     * @type {number}
     * @memberof NumericsBigInteger
     */
    sign?: number;
}

/**
 * Information about a pair. Includes references to each token within the pair, volume information, liquidity information, and more. The pair entity mirrors the pair smart contract, and also contains aggregated information about use.
 * @export
 */
export type SushiswapPairDTO = {
    /**
     * 
     * @type {Date}
     * @memberof SushiswapPairDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SushiswapPairDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof SushiswapPairDTO
     */
    block_number?: number;
    /**
     * Pair contract address.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    id?: string;
    /**
     * Factory contract address.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    factory?: string;
    /**
     * Friendly name, format: <token0 name>-<token1 name>
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    name?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    token_0?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    token_1?: string;
    /**
     * Reserve of token0.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    reserve_0?: string;
    /**
     * Reserve of token1.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    reserve_1?: string;
    /**
     * Total supply of liquidity token distributed to LPs.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    total_supply?: string;
    /**
     * Total liquidity in pair stored as an amount of ETH.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    reserve_eth?: string;
    /**
     * Total liquidity amount in pair stored as an amount of USD.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    reserve_usd?: string;
    /**
     * Total liquidity with only tracked amount.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    tracked_reserve_eth?: string;
    /**
     * Token0 per token1.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    token_0_price?: string;
    /**
     * Token1 per token0.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    token_1_price?: string;
    /**
     * Amount of token0 swapped on this pair.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    volume_token_0?: string;
    /**
     * Amount of token1 swapped on this pair.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    volume_token_1?: string;
    /**
     * Total amount swapped all time in this pair stored in USD (only tracked if USD liquidity is above minimum threshold).
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    volume_usd?: string;
    /**
     * Total amount swapped all time in this pair stored in USD, no minimum liquidity threshold.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    untracked_volume_usd?: string;
    /**
     * All time amount of transactions on this pair.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    tx_count?: string;
    /**
     * Total number of LPs.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    liquidity_provider_count?: string;
    /**
     * Timestamp.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    timestamp?: string;
    /**
     * Block number in which pair information was created in.
     * @type {string}
     * @memberof SushiswapPairDTO
     */
    block?: string;
    /**
     * 
     * @type {number}
     * @memberof SushiswapPairDTO
     */
    vid?: number;
    /**
     * 
     * @type {number}
     * @memberof SushiswapPairDTO
     */
    evaluated_ask?: number;
}

/**
 * Swap are created for each token swap within a pair.
 * @export
 */
export type SushiswapSwapDTO = {
    /**
     * 
     * @type {Date}
     * @memberof SushiswapSwapDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SushiswapSwapDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof SushiswapSwapDTO
     */
    block_number?: number;
    /**
     * Transaction hash plus index in Transaction swap array.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    id?: string;
    /**
     * Reference to transaction swap was included in.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    transaction?: string;
    /**
     * Timestamp of swap, used for sorted lookups.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    timestamp?: string;
    /**
     * Reference to pair.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    pair?: string;
    /**
     * Address that initiated the swap.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    sender?: string;
    /**
     * Amount of token0 sold.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    amount_0_in?: string;
    /**
     * Amount of token1 sold.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    amount_1_in?: string;
    /**
     * Amount of token0 received.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    amount_0_out?: string;
    /**
     * Amount of token1 received.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    amount_1_out?: string;
    /**
     * Recipient of output tokens.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    to?: string;
    /**
     * Event index within transaction.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    log_index?: string;
    /**
     * Derived amount of tokens sold in USD.
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {number}
     * @memberof SushiswapSwapDTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof SushiswapSwapDTO
     */
    transaction_id?: string;
    /**
     * 
     * @type {number}
     * @memberof SushiswapSwapDTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof SushiswapSwapDTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {TransactionsETradeAggressiveSide}
     * @memberof SushiswapSwapDTO
     */
    evaluated_aggressor?: TransactionsETradeAggressiveSide;
}

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 * @export
 */
export type SushiswapTokenDTO = {
    /**
     * 
     * @type {Date}
     * @memberof SushiswapTokenDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SushiswapTokenDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof SushiswapTokenDTO
     */
    block_number?: number;
    /**
     * Token address.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    id?: string;
    /**
     * Factory address.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    factory?: string;
    /**
     * Token symbol.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    symbol?: string;
    /**
     * Token name.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    name?: string;
    /**
     * Token decimals.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    decimals?: string;
    /**
     * Total supply of liquidity token.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    total_supply?: string;
    /**
     * Amount of token traded all time across all pairs.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    volume?: string;
    /**
     * Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold).
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    volume_usd?: string;
    /**
     * Amount of token in USD traded all time across pairs (no minimum liquidity threshold).
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    untracked_volume_usd?: string;
    /**
     * Amount of transactions all time in pairs including token.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    tx_count?: string;
    /**
     * Total amount of token provided as liquidity across all pairs.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    liquidity?: string;
    /**
     * ETH per token.
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    derived_eth?: string;
    /**
     * Array of whitelisted pairs.
     * @type {Array<string>}
     * @memberof SushiswapTokenDTO
     */
    whitelist_pairs?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof SushiswapTokenDTO
     */
    vid?: number;
    /**
     * 
     * @type {string}
     * @memberof SushiswapTokenDTO
     */
    token_symbol?: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type TransactionsETradeAggressiveSide = 'Buy' | 'Sell' | 'EstimatedBuy' | 'EstimatedSell' | 'Unknown';

/**
 * Information about a pair. Includes references to each token within the pair, volume information, liquidity information, and more. The pair entity mirrors the pair smart contract, and also contains aggregated information about use.
 * @export
 */
export type UniswapV2PairV2DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV2PairV2DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV2PairV2DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV2PairV2DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV2PairV2DTO
     */
    vid?: number;
    /**
     * Pair contract address.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    id?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pair contract.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    token_1?: string;
    /**
     * Reserve of token0.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    reserve_0?: string;
    /**
     * Reserve of token1.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    reserve_1?: string;
    /**
     * Total supply of liquidity token distributed to LPs.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    total_supply?: string;
    /**
     * Total liquidity in pair stored as an amount of ETH.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    reserve_eth?: string;
    /**
     * Total liquidity amount in pair stored as an amount of USD.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    reserve_usd?: string;
    /**
     * Total liquidity with only tracked amount.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    tracked_reserve_eth?: string;
    /**
     * Token0 per token1.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    token_0_price?: string;
    /**
     * Token1 per token0.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    token_1_price?: string;
    /**
     * Amount of token0 swapped on this pair.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    volume_token_0?: string;
    /**
     * Amount of token1 swapped on this pair.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    volume_token_1?: string;
    /**
     * Total amount swapped all time in this pair stored in USD (only tracked if USD liquidity is above minimum threshold).
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    volume_usd?: string;
    /**
     * Total amount swapped all time in this pair stored in USD, no minimum liquidity threshold.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV2PairV2DTO
     */
    tx_count?: NumericsBigInteger;
    /**
     * Timestamp contract was created.
     * @type {Date}
     * @memberof UniswapV2PairV2DTO
     */
    created_at_timestamp?: Date;
    /**
     * Total number of LPs.
     * @type {string}
     * @memberof UniswapV2PairV2DTO
     */
    liquidity_provider_count?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV2PairV2DTO
     */
    evaluated_ask?: number;
}

/**
 * Swap are created for each token swap within a pair.
 * @export
 */
export type UniswapV2SwapV2DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV2SwapV2DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV2SwapV2DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV2SwapV2DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV2SwapV2DTO
     */
    vid?: number;
    /**
     * Transaction hash plus index in Transaction swap array.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    id?: string;
    /**
     * Reference to transaction swap was included in.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    transaction?: string;
    /**
     * Timestamp of swap, used for sorted lookups.
     * @type {Date}
     * @memberof UniswapV2SwapV2DTO
     */
    timestamp?: Date;
    /**
     * Reference to pair.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    pair?: string;
    /**
     * Address that initiated the swap.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    sender?: string;
    /**
     * The EOA (Externally Owned Account) that initiated the transaction.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    from?: string;
    /**
     * Amount of token0 sold.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    amount_0_in?: string;
    /**
     * Amount of token1 sold.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    amount_1_in?: string;
    /**
     * Amount of token0 received.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    amount_0_out?: string;
    /**
     * Amount of token1 received.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    amount_1_out?: string;
    /**
     * Recipient of output tokens.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    to?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV2SwapV2DTO
     */
    log_index?: NumericsBigInteger;
    /**
     * Derived amount of tokens sold in USD.
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV2SwapV2DTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV2SwapV2DTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {TransactionsETradeAggressiveSide}
     * @memberof UniswapV2SwapV2DTO
     */
    evaluated_aggressor?: TransactionsETradeAggressiveSide;
    /**
     * 
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UniswapV2SwapV2DTO
     */
    transaction_id?: string;
}

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 * @export
 */
export type UniswapV2TokenV2DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV2TokenV2DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV2TokenV2DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV2TokenV2DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV2TokenV2DTO
     */
    vid?: number;
    /**
     * Token address.
     * @type {string}
     * @memberof UniswapV2TokenV2DTO
     */
    id?: string;
    /**
     * Token symbol.
     * @type {string}
     * @memberof UniswapV2TokenV2DTO
     */
    symbol?: string;
    /**
     * Token name.
     * @type {string}
     * @memberof UniswapV2TokenV2DTO
     */
    name?: string;
    /**
     * Token decimals.
     * @type {number}
     * @memberof UniswapV2TokenV2DTO
     */
    decimals?: number;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV2TokenV2DTO
     */
    total_supply?: NumericsBigInteger;
    /**
     * Amount of token traded all time across all pairs.
     * @type {string}
     * @memberof UniswapV2TokenV2DTO
     */
    trade_volume?: string;
    /**
     * Amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold).
     * @type {string}
     * @memberof UniswapV2TokenV2DTO
     */
    trade_volume_usd?: string;
    /**
     * Amount of token in USD traded all time across pairs (no minimum liquidity threshold).
     * @type {string}
     * @memberof UniswapV2TokenV2DTO
     */
    untracked_volume_usd?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV2TokenV2DTO
     */
    tx_count?: NumericsBigInteger;
    /**
     * Total amount of token provided as liquidity across all pairs.
     * @type {string}
     * @memberof UniswapV2TokenV2DTO
     */
    total_liquidity?: string;
    /**
     * ETH per token.
     * @type {string}
     * @memberof UniswapV2TokenV2DTO
     */
    derived_eth?: string;
    /**
     * 
     * @type {string}
     * @memberof UniswapV2TokenV2DTO
     */
    token_symbol?: string;
}

/**
 * The Bundle is used as a global store of derived ETH price in USD. This provides a strong estimate for the USD price of ETH.
 * @export
 */
export type UniswapV3BundleV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3BundleV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3BundleV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3BundleV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {string}
     * @memberof UniswapV3BundleV3DTO
     */
    id?: string;
    /**
     * Price of ETH in usd.
     * @type {string}
     * @memberof UniswapV3BundleV3DTO
     */
    eth_price_usd?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3BundleV3DTO
     */
    vid?: number;
}

/**
 * Burn entities are created for every emitted Burn event on the Uniswap core contracts. The Burn entity stores key data about the event like token amounts, who burned, who received tokens, and more. This entity can be used to track liquidity removals on pairs.
 * @export
 */
export type UniswapV3BurnV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3BurnV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3BurnV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3BurnV3DTO
     */
    block_number?: number;
    /**
     * Transaction hash + \'#\' + index in mints Transaction array.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    id?: string;
    /**
     * Transaction burn was included in.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    transaction?: string;
    /**
     * Pool position is within.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    pool?: string;
    /**
     * Reference to token0 as stored in pool contract.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pool contract.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    token_1?: string;
    /**
     * Timestamp.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    timestamp?: string;
    /**
     * Owner of position where liquidity was burned.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    owner?: string;
    /**
     * Transaction origin: the EOA (Externally Owned Account) that initiated the transaction.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    origin?: string;
    /**
     * Amount of liquidity burned.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    amount?: string;
    /**
     * Amount of token 0 burned.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    amount_0?: string;
    /**
     * Amount of token 1 burned.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    amount_1?: string;
    /**
     * Derived amount based on available prices of tokens.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    amount_usd?: string;
    /**
     * Lower tick of position.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    tick_lower?: string;
    /**
     * Upper tick of position.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    tick_upper?: string;
    /**
     * Position within the transactions.
     * @type {string}
     * @memberof UniswapV3BurnV3DTO
     */
    log_index?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3BurnV3DTO
     */
    vid?: number;
}

/**
 * The Uniswap Factory entity is responsible for storing aggregate information across all Uniswap pairs. It can be used to view stats about total liquidity, volume, amount of pairs and more.
 * @export
 */
export type UniswapV3FactoryV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3FactoryV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3FactoryV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3FactoryV3DTO
     */
    block_number?: number;
    /**
     * Factory address.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    id?: string;
    /**
     * Amount of pools created.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    pool_count?: string;
    /**
     * Amount of transactions all time.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    tx_count?: string;
    /**
     * Total volume all time in derived USD.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    total_volume_usd?: string;
    /**
     * Total volume all time in derived ETH.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    total_volume_eth?: string;
    /**
     * Total swap fees all time in USD.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    total_fees_usd?: string;
    /**
     * All volume even through less reliable USD values.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    total_fees_eth?: string;
    /**
     * All volume even through less reliable USD values.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Total value locked derived in USD.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * Total value locked derived in ETH.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    total_value_locked_eth?: string;
    /**
     * Total value locked derived in USD untracked.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    total_value_locked_usd_untracked?: string;
    /**
     * Total value locked derived in ETH untracked.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    total_value_locked_eth_untracked?: string;
    /**
     * Current owner of the factory.
     * @type {string}
     * @memberof UniswapV3FactoryV3DTO
     */
    owner?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3FactoryV3DTO
     */
    vid?: number;
}

/**
 * Mint entities are created for every emitted Mint event on the Uniswap core contracts. The Mint entity stores key data about the event like token amounts, who sent the transaction, and more.
 * @export
 */
export type UniswapV3MintV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3MintV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3MintV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3MintV3DTO
     */
    block_number?: number;
    /**
     * Transaction hash + \'#\' + index in mints Transaction array.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    id?: string;
    /**
     * Which txn the mint was included in.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    transaction?: string;
    /**
     * Time of transaction.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    timestamp?: string;
    /**
     * Pool address.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    pool?: string;
    /**
     * Reference to token0 as stored in pool contract.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pool contract.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    token_1?: string;
    /**
     * Owner of position where liquidity minted to.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    owner?: string;
    /**
     * The address that minted the liquidity.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    sender?: string;
    /**
     * Transaction origin: the EOA (Externally Owned Account) that initiated the transaction.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    origin?: string;
    /**
     * Amount of liquidity minted.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    amount?: string;
    /**
     * Amount of token 0 minted.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    amount_0?: string;
    /**
     * Amount of token 1 minted.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    amount_1?: string;
    /**
     * Derived amount based on available prices of tokens.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    amount_usd?: string;
    /**
     * Lower tick of the position.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    tick_lower?: string;
    /**
     * Upper tick of the position.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    tick_upper?: string;
    /**
     * Order within the transaction.
     * @type {string}
     * @memberof UniswapV3MintV3DTO
     */
    log_index?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3MintV3DTO
     */
    vid?: number;
}

/**
 * Data accumulated and condensed into day stats for each pool.
 * @export
 */
export type UniswapV3PoolDayDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    block_number?: number;
    /**
     * Identifier, format: <pool address>-<day id>.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    id?: string;
    /**
     * Timestamp rounded to current day by dividing by 86400
     * @type {number}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    _date?: number;
    /**
     * Pointer to pool.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    pool?: string;
    /**
     * In range liquidity at end of period.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    liquidity?: string;
    /**
     * Current price tracker at end of period.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    sqrt_price?: string;
    /**
     * Price of token0 - derived from sqrtPrice.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    token_0_price?: string;
    /**
     * Price of token1 - derived from sqrtPrice.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    token_1_price?: string;
    /**
     * Current tick at end of period.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    tick?: string;
    /**
     * Tracker for global fee growth.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    fee_growth_global_0x128?: string;
    /**
     * Tracker for global fee growth.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    fee_growth_global_1x128?: string;
    /**
     * Total value locked derived in USD at end of period.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    tvl_usd?: string;
    /**
     * Volume in token0.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    volume_token_0?: string;
    /**
     * Volume in token1.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    volume_token_1?: string;
    /**
     * Volume in USD.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    fees_usd?: string;
    /**
     * Number of transactions during period.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    tx_count?: string;
    /**
     * Opening price of token0.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    open?: string;
    /**
     * High price of token0.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    high?: string;
    /**
     * Low price of token0.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    low?: string;
    /**
     * Close price of token0.
     * @type {string}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    close?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3PoolDayDataV3DTO
     */
    vid?: number;
}

/**
 * Hourly stats tracker for pool.
 * @export
 */
export type UniswapV3PoolHourDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    block_number?: number;
    /**
     * Identifier, format: <pool address>-<day id>
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    id?: string;
    /**
     * Unix timestamp for start of hour.
     * @type {number}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    period_start_unix?: number;
    /**
     * Pointer to pool.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    pool?: string;
    /**
     * In range liquidity at end of period.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    liquidity?: string;
    /**
     * Current price tracker at end of period.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    sqrt_price?: string;
    /**
     * Price of token0 - derived from sqrtPrice.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    token_0_price?: string;
    /**
     * Price of token1 - derived from sqrtPrice.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    token_1_price?: string;
    /**
     * Current tick at end of period.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    tick?: string;
    /**
     * Tracker for global fee growth.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    fee_growth_global_0x128?: string;
    /**
     * Tracker for global fee growth.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    fee_growth_global_1x128?: string;
    /**
     * Total value locked derived in USD at end of period.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    tvl_usd?: string;
    /**
     * Volume in token0.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    volume_token_0?: string;
    /**
     * Volume in token1.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    volume_token_1?: string;
    /**
     * Volume in USD.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    fees_usd?: string;
    /**
     * Number of transactions during period.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    tx_count?: string;
    /**
     * Opening price of token0.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    open?: string;
    /**
     * High price of token0.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    high?: string;
    /**
     * Low price of token0.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    low?: string;
    /**
     * Close price of token0.
     * @type {string}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    close?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3PoolHourDataV3DTO
     */
    vid?: number;
}

/**
 * Information about a pool. Includes references to each token within the pool, volume information, liquidity information, and more. The pool entity mirrors the pool smart contract, and also contains aggregated information about use.
 * @export
 */
export type UniswapV3PoolV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PoolV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PoolV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3PoolV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3PoolV3DTO
     */
    vid?: number;
    /**
     * Pool address.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    id?: string;
    /**
     * Creation time.
     * @type {Date}
     * @memberof UniswapV3PoolV3DTO
     */
    created_at_timestamp?: Date;
    /**
     * Reference to token0 as stored in pool contract.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pool contract.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    token_1?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3PoolV3DTO
     */
    fee_tier?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3PoolV3DTO
     */
    liquidity?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3PoolV3DTO
     */
    sqrt_price?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3PoolV3DTO
     */
    fee_growth_global_0x128?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3PoolV3DTO
     */
    fee_growth_global_1x128?: NumericsBigInteger;
    /**
     * Token0 per token1.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    token_0_price?: string;
    /**
     * Token1 per token0.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    token_1_price?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3PoolV3DTO
     */
    tick?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3PoolV3DTO
     */
    observation_index?: NumericsBigInteger;
    /**
     * All time token0 swapped.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    volume_token_0?: string;
    /**
     * All time token1 swapped.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    volume_token_1?: string;
    /**
     * All time USD swapped.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    volume_usd?: string;
    /**
     * All time USD swapped, unfiltered for unreliable USD pools.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3PoolV3DTO
     */
    tx_count?: NumericsBigInteger;
    /**
     * All time fees collected token0.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * All time fees collected token1.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * All time fees collected derived USD.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    collected_fees_usd?: string;
    /**
     * Total token 0 across all ticks.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    total_value_locked_token_0?: string;
    /**
     * 
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    total_value_locked_token_1?: string;
    /**
     * Total token 1 across all ticks.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    total_value_locked_eth?: string;
    /**
     * Total value locked USD.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * Total value locked derived ETH.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    total_value_locked_usd_untracked?: string;
    /**
     * Liquidity providers count, used to detect new exchanges.
     * @type {string}
     * @memberof UniswapV3PoolV3DTO
     */
    liquidity_provider_count?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3PoolV3DTO
     */
    evaluated_ask?: number;
}

/**
 * 
 * @export
 */
export type UniswapV3PositionSnapshotV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    block_number?: number;
    /**
     * NFT token identifier, format: <NFT token id>#<block number>
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    id?: string;
    /**
     * Owner of the NFT.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    owner?: string;
    /**
     * Pool the position is within.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    pool?: string;
    /**
     * Position of which the snap was taken of.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    position?: string;
    /**
     * Timestamp of block in which the snap was created.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    timestamp?: string;
    /**
     * Total position liquidity.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    liquidity?: string;
    /**
     * Amount of token 0 ever deposited to position.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    deposited_token_0?: string;
    /**
     * Amount of token 1 ever deposited to position.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    deposited_token_1?: string;
    /**
     * Amount of token 0 ever withdrawn from position (without fees).
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    withdrawn_token_0?: string;
    /**
     * Amount of token 1 ever withdrawn from position (without fees).
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    withdrawn_token_1?: string;
    /**
     * All time collected fees in token0.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * All time collected fees in token1.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * Transaction in which the snapshot was initialized.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    transaction?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    fee_growth_inside_0_last_x128?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    fee_growth_inside_1_last_x128?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3PositionSnapshotV3DTO
     */
    vid?: number;
}

/**
 * Positions created through NonfungiblePositionManager. Positions are represented as NFTs (ERC-721 tokens) as opposed to the fungible ERC-20 tokens on Uniswap V1 and V2.
 * @export
 */
export type UniswapV3PositionV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PositionV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3PositionV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3PositionV3DTO
     */
    block_number?: number;
    /**
     * NFT token identifier.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    id?: string;
    /**
     * Owner of the NFT.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    owner?: string;
    /**
     * Pool position is within.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    pool?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pair contract.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    token_1?: string;
    /**
     * Lower tick of the position.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    tick_lower?: string;
    /**
     * Upper tick of the position.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    tick_upper?: string;
    /**
     * Total position liquidity.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    liquidity?: string;
    /**
     * Amount of token 0 ever deposited to position.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    deposited_token_0?: string;
    /**
     * Amount of token 1 ever deposited to position.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    deposited_token_1?: string;
    /**
     * Amount of token 0 ever withdrawn from position (without fees).
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    withdrawn_token_0?: string;
    /**
     * Amount of token 1 ever withdrawn from position (without fees).
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    withdrawn_token_1?: string;
    /**
     * All time collected fees in token0.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * All time collected fees in token1.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * Transaction in which the position was initialized.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    transaction?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    fee_growth_inside_0_last_x128?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof UniswapV3PositionV3DTO
     */
    fee_growth_inside_1_last_x128?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3PositionV3DTO
     */
    vid?: number;
}

/**
 * Swap are created for each token swap within a pair.
 * @export
 */
export type UniswapV3SwapV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3SwapV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3SwapV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3SwapV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3SwapV3DTO
     */
    vid?: number;
    /**
     * Identifier, format: transaction hash + \"#\" + index in swaps Transaction array.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    id?: string;
    /**
     * Pointer to transaction.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    transaction?: string;
    /**
     * Timestamp of transaction.
     * @type {Date}
     * @memberof UniswapV3SwapV3DTO
     */
    timestamp?: Date;
    /**
     * Pool swap occured within.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    pool?: string;
    /**
     * Reference to token0 as stored in pair contract.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    token_0?: string;
    /**
     * Reference to token1 as stored in pair contract.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    token_1?: string;
    /**
     * Sender of the swap.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    sender?: string;
    /**
     * Recipient of the swap.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    recipient?: string;
    /**
     * Transaction origin: the EOA (Externally Owned Account) that initiated the transaction
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    origin?: string;
    /**
     * Delta of token0 swapped.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    amount_0?: string;
    /**
     * Delta of token1 swapped.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    amount_1?: string;
    /**
     * Derived amount of tokens sold in USD.
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    amount_usd?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3SwapV3DTO
     */
    sqrt_price_x96?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3SwapV3DTO
     */
    tick?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3SwapV3DTO
     */
    log_index?: NumericsBigInteger;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3SwapV3DTO
     */
    evaluated_price?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3SwapV3DTO
     */
    evaluated_amount?: number;
    /**
     * 
     * @type {TransactionsETradeAggressiveSide}
     * @memberof UniswapV3SwapV3DTO
     */
    evaluated_aggressor?: TransactionsETradeAggressiveSide;
    /**
     * 
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    pool_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UniswapV3SwapV3DTO
     */
    transaction_id?: string;
}

/**
 * Data accumulated and condensed into day stats for each exchange. Entity gets saved only if there is a change during the day
 * @export
 */
export type UniswapV3TickDayDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    block_number?: number;
    /**
     * Identifier, format: <pool address>-<tick index>-<timestamp>.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    id?: string;
    /**
     * Timestamp rounded to current day by dividing by 86400.
     * @type {number}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    _date?: number;
    /**
     * Pointer to pool.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    pool?: string;
    /**
     * Pointer to tick.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    tick?: string;
    /**
     * Total liquidity pool has as tick lower or upper at end of period.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    liquidity_gross?: string;
    /**
     * How much liquidity changes when tick crossed at end of period.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    liquidity_net?: string;
    /**
     * Hourly volume of token0 with this tick in range.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    volume_token_0?: string;
    /**
     * Hourly volume of token1 with this tick in range.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    volume_token_1?: string;
    /**
     * Hourly volume in derived USD with this tick in range.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    fees_usd?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    fee_growth_outside_0x128?: string;
    /**
     * Variable needed for fee computation.
     * @type {string}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    fee_growth_outside_1x128?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3TickDayDataV3DTO
     */
    vid?: number;
}

/**
 * Ticks are the boundaries between discrete areas in price space.
 * @export
 */
export type UniswapV3TickV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TickV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TickV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3TickV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3TickV3DTO
     */
    vid?: number;
    /**
     * Identifier, format: <pool address>#<tick index>
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    id?: string;
    /**
     * Pool address.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    pool_address?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3TickV3DTO
     */
    tick_idx?: NumericsBigInteger;
    /**
     * Pool address.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    pool?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3TickV3DTO
     */
    liquidity_gross?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3TickV3DTO
     */
    liquidity_net?: NumericsBigInteger;
    /**
     * Calculated price of token0 of tick within this pool - constant.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    price_0?: string;
    /**
     * Calculated price of token1 of tick within this pool - constant.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    price_1?: string;
    /**
     * Lifetime volume of token0 with this tick in range.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    volume_token_0?: string;
    /**
     * Lifetime volume of token1 with this tick in range.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    volume_token_1?: string;
    /**
     * Lifetime volume in derived USD with this tick in range.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    volume_usd?: string;
    /**
     * Lifetime volume in untracked USD with this tick in range.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    fees_usd?: string;
    /**
     * All time collected fees in token0.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    collected_fees_token_0?: string;
    /**
     * All time collected fees in token1.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    collected_fees_token_1?: string;
    /**
     * All time collected fees in USD.
     * @type {string}
     * @memberof UniswapV3TickV3DTO
     */
    collected_fees_usd?: string;
    /**
     * Created time.
     * @type {Date}
     * @memberof UniswapV3TickV3DTO
     */
    created_at_timestamp?: Date;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3TickV3DTO
     */
    liquidity_provider_count?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3TickV3DTO
     */
    fee_growth_outside_0x128?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3TickV3DTO
     */
    fee_growth_outside_1x128?: NumericsBigInteger;
}

/**
 * Token data aggregated across all pairs that include token.
 * @export
 */
export type UniswapV3TokenHourDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    block_number?: number;
    /**
     * Token address concatendated with date.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    id?: string;
    /**
     * Unix timestamp for start of hour.
     * @type {number}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    period_start_unix?: number;
    /**
     * Pointer to token.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    token?: string;
    /**
     * Volume in token units.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    volume?: string;
    /**
     * Volume in derived USD.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    volume_usd?: string;
    /**
     * Volume in USD even on pools with less reliable USD values.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Liquidity across all pools in token units.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    total_value_locked?: string;
    /**
     * Liquidity across all pools in derived USD.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * Price at end of period in USD.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    price_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    fees_usd?: string;
    /**
     * Opening price USD.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    open?: string;
    /**
     * High price USD.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    high?: string;
    /**
     * Low price USD.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    low?: string;
    /**
     * Close price USD.
     * @type {string}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    close?: string;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3TokenHourDataV3DTO
     */
    vid?: number;
}

/**
 * Stores aggregated information for a specific token across all pairs that token is included in.
 * @export
 */
export type UniswapV3TokenV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TokenV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TokenV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3TokenV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3TokenV3DTO
     */
    vid?: number;
    /**
     * Token address.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    id?: string;
    /**
     * Token symbol.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    symbol?: string;
    /**
     * Token name.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    name?: string;
    /**
     * Token decimals.
     * @type {number}
     * @memberof UniswapV3TokenV3DTO
     */
    decimals?: number;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3TokenV3DTO
     */
    total_supply?: NumericsBigInteger;
    /**
     * Volume in token units.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    volume?: string;
    /**
     * Volume in derived USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    volume_usd?: string;
    /**
     * Volume in USD even on pools with less reliable USD values.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    untracked_volume_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3TokenV3DTO
     */
    tx_count?: NumericsBigInteger;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3TokenV3DTO
     */
    pool_count?: NumericsBigInteger;
    /**
     * Liquidity across all pools in token units.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    total_value_locked?: string;
    /**
     * Liquidity across all pools in derived USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    total_value_locked_usd?: string;
    /**
     * TVL derived in USD untracked.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    total_value_locked_usd_untracked?: string;
    /**
     * Derived price in ETH.
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    derived_eth?: string;
    /**
     * Pools token is in that are white listed for USD pricing.
     * @type {Array<string>}
     * @memberof UniswapV3TokenV3DTO
     */
    whitelist_pools?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof UniswapV3TokenV3DTO
     */
    token_symbol?: string;
}

/**
 * Token data aggregated across all pairs that include token.
 * @export
 */
export type UniswapV3TokenV3DayDataDTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    vid?: number;
    /**
     * Token address concatendated with date.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    id?: string;
    /**
     * Timestamp rounded to current day by dividing by 86400.
     * @type {number}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    _date?: number;
    /**
     * Pointer to token.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    token?: string;
    /**
     * Volume in token units.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    volume?: string;
    /**
     * Volume in derived USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    volume_usd?: string;
    /**
     * Volume in USD even on pools with less reliable USD values.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    untracked_volume_usd?: string;
    /**
     * Liquidity across all pools in token units.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    total_value_locked?: string;
    /**
     * Liquidity across all pools in derived USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    total_value_locked_usd?: string;
    /**
     * Price at end of period in USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    price_usd?: string;
    /**
     * Fees in USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    fees_usd?: string;
    /**
     * Opening price USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    open?: string;
    /**
     * High price USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    high?: string;
    /**
     * Low price USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    low?: string;
    /**
     * Close price USD.
     * @type {string}
     * @memberof UniswapV3TokenV3DayDataDTO
     */
    close?: string;
}

/**
 * Data accumulated and condensed into day stats for all of Uniswap.
 * @export
 */
export type UniswapV3UniswapDayDataV3DTO = {
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    entry_time?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    recv_time?: Date;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    block_number?: number;
    /**
     * 
     * @type {number}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    vid?: number;
    /**
     * Timestamp rounded to current day by dividing by 86400.
     * @type {string}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    id?: string;
    /**
     * Timestamp rounded to current day by dividing by 86400.
     * @type {number}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    _date?: number;
    /**
     * Total volume across all pairs on this day, stored as a derived amount of ETH.
     * @type {string}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    volume_eth?: string;
    /**
     * Total volume across all pairs on this day, stored as a derived amount of USD.
     * @type {string}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    volume_usd?: string;
    /**
     * Total daily volume in Uniswap derived in terms of USD untracked.
     * @type {string}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    volume_usd_untracked?: string;
    /**
     * Fees in USD
     * @type {string}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    fees_usd?: string;
    /**
     * 
     * @type {NumericsBigInteger}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    tx_count?: NumericsBigInteger;
    /**
     * Tvl in terms of USD.
     * @type {string}
     * @memberof UniswapV3UniswapDayDataV3DTO
     */
    tvl_usd?: string;
}



/**
 * SushiswapApi - fetch parameter creator
 * @export
 */
export const SushiswapApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets exchanges.
         * @summary Exchanges (current) 🔥
         * @throws {RequiredError}
         */
        curveGetExchangesCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/exchanges/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets trades.
         * @summary Trades (current) 🔥
         * @throws {RequiredError}
         */
        dexGetTradesCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/trades/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets pools.
         * @summary Pools (current) 🔥
         * @throws {RequiredError}
         */
        sushiswapGetPoolsCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/pools/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets swaps.
         * @summary Swaps (current) 🔥
         * @throws {RequiredError}
         */
        sushiswapGetSwapsCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/swaps/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets tokens.
         * @summary Tokens (current) 🔥
         * @throws {RequiredError}
         */
        sushiswapGetTokensCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/sushiswap/tokens/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SushiswapApiType = { 
    curveGetExchangesCurrent(options?: RequestOptions): Promise<Array<CurveExchangeDTO>>,

    dexGetTradesCurrent(options?: RequestOptions): Promise<Array<DexTradeDTO>>,

    sushiswapGetPoolsCurrent(options?: RequestOptions): Promise<Array<SushiswapPairDTO>>,

    sushiswapGetSwapsCurrent(options?: RequestOptions): Promise<Array<SushiswapSwapDTO>>,

    sushiswapGetTokensCurrent(options?: RequestOptions): Promise<Array<SushiswapTokenDTO>>,
}

/**
 * SushiswapApi - factory function to inject configuration 
 * @export
 */
export const SushiswapApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SushiswapApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Gets exchanges.
         * @summary Exchanges (current) 🔥
         * @throws {RequiredError}
         */
        curveGetExchangesCurrent(options?: RequestOptions = {}): Promise<Array<CurveExchangeDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).curveGetExchangesCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets trades.
         * @summary Trades (current) 🔥
         * @throws {RequiredError}
         */
        dexGetTradesCurrent(options?: RequestOptions = {}): Promise<Array<DexTradeDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).dexGetTradesCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets pools.
         * @summary Pools (current) 🔥
         * @throws {RequiredError}
         */
        sushiswapGetPoolsCurrent(options?: RequestOptions = {}): Promise<Array<SushiswapPairDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).sushiswapGetPoolsCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets swaps.
         * @summary Swaps (current) 🔥
         * @throws {RequiredError}
         */
        sushiswapGetSwapsCurrent(options?: RequestOptions = {}): Promise<Array<SushiswapSwapDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).sushiswapGetSwapsCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets tokens.
         * @summary Tokens (current) 🔥
         * @throws {RequiredError}
         */
        sushiswapGetTokensCurrent(options?: RequestOptions = {}): Promise<Array<SushiswapTokenDTO>> {
            const localVarFetchArgs = SushiswapApiFetchParamCreator(configuration).sushiswapGetTokensCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * UniswapV2Api - fetch parameter creator
 * @export
 */
export const UniswapV2ApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets pools.
         * @summary Pools (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV2GetPoolsCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/pools/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets swaps.
         * @summary Swaps (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV2GetSwapsCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/swaps/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets tokens.
         * @summary Tokens (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV2GetTokensCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv2/tokens/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UniswapV2ApiType = { 
    uniswapV2GetPoolsCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV2PairV2DTO>>,

    uniswapV2GetSwapsCurrent(options?: RequestOptions): Promise<Array<UniswapV2SwapV2DTO>>,

    uniswapV2GetTokensCurrent(options?: RequestOptions): Promise<Array<UniswapV2TokenV2DTO>>,
}

/**
 * UniswapV2Api - factory function to inject configuration 
 * @export
 */
export const UniswapV2Api = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UniswapV2ApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Gets pools.
         * @summary Pools (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV2GetPoolsCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV2PairV2DTO>> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).uniswapV2GetPoolsCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets swaps.
         * @summary Swaps (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV2GetSwapsCurrent(options?: RequestOptions = {}): Promise<Array<UniswapV2SwapV2DTO>> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).uniswapV2GetSwapsCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets tokens.
         * @summary Tokens (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV2GetTokensCurrent(options?: RequestOptions = {}): Promise<Array<UniswapV2TokenV2DTO>> {
            const localVarFetchArgs = UniswapV2ApiFetchParamCreator(configuration).uniswapV2GetTokensCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * UniswapV3Api - fetch parameter creator
 * @export
 */
export const UniswapV3ApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets bundles.
         * @summary Bundles (current)
         * @throws {RequiredError}
         */
        uniswapV3GetBundlesCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/bundles/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets burns.
         * @summary Burns (current)
         * @throws {RequiredError}
         */
        uniswapV3GetBurnsCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/burns/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets uniswapv3 day data.
         * @summary DayData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetDayDataCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/dayData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets factory.
         * @summary Factory (current)
         * @throws {RequiredError}
         */
        uniswapV3GetFactoryCurrent(options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/factory/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets mints.
         * @summary Mints (current)
         * @throws {RequiredError}
         */
        uniswapV3GetMintsCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/mints/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets pools.
         * @summary Pools (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV3GetPoolsCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/pools/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets pools day data.
         * @summary PoolsDayData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetPoolsDayDataCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/poolsDayData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets pools hour data.
         * @summary PoolsHourData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetPoolsHourDataCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/poolsHourData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets positions.
         * @summary Positions (current)
         * @throws {RequiredError}
         */
        uniswapV3GetPositionsCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/positions/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets positions snapshots.
         * @summary PositionsSnapshots (current)
         * @throws {RequiredError}
         */
        uniswapV3GetPositionsSnapshotsCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/positionSnapshots/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets swaps.
         * @summary Swaps (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV3GetSwapsCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/swaps/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets ticks.
         * @summary Ticks (current)
         * @throws {RequiredError}
         */
        uniswapV3GetTicksCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/ticks/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets ticks day data.
         * @summary TicksDayData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetTicksDayDataCurrent(filterPoolId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/ticksDayData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterPoolId !== undefined) {
                localVarQueryParameter['filter_pool_id'] = ((filterPoolId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets tokens.
         * @summary Tokens (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV3GetTokensCurrent(filterTokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tokens/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterTokenId !== undefined) {
                localVarQueryParameter['filter_token_id'] = ((filterTokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets tokens day data.
         * @summary TokensDayData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetTokensDayDataCurrent(filterTokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tokensDayData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterTokenId !== undefined) {
                localVarQueryParameter['filter_token_id'] = ((filterTokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets tokens hour data.
         * @summary TokensHourData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetTokensHourDataCurrent(filterTokenId?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/dapps/uniswapv3/tokensHourData/current`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            if (filterTokenId !== undefined) {
                localVarQueryParameter['filter_token_id'] = ((filterTokenId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type UniswapV3ApiType = { 
    uniswapV3GetBundlesCurrent(options?: RequestOptions): Promise<Array<UniswapV3BundleV3DTO>>,

    uniswapV3GetBurnsCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3BurnV3DTO>>,

    uniswapV3GetDayDataCurrent(options?: RequestOptions): Promise<Array<UniswapV3UniswapDayDataV3DTO>>,

    uniswapV3GetFactoryCurrent(options?: RequestOptions): Promise<Array<UniswapV3FactoryV3DTO>>,

    uniswapV3GetMintsCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3MintV3DTO>>,

    uniswapV3GetPoolsCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3PoolV3DTO>>,

    uniswapV3GetPoolsDayDataCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3PoolDayDataV3DTO>>,

    uniswapV3GetPoolsHourDataCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3PoolHourDataV3DTO>>,

    uniswapV3GetPositionsCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3PositionV3DTO>>,

    uniswapV3GetPositionsSnapshotsCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3PositionSnapshotV3DTO>>,

    uniswapV3GetSwapsCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3SwapV3DTO>>,

    uniswapV3GetTicksCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3TickV3DTO>>,

    uniswapV3GetTicksDayDataCurrent(filterPoolId?: string, options?: RequestOptions): Promise<Array<UniswapV3TickDayDataV3DTO>>,

    uniswapV3GetTokensCurrent(filterTokenId?: string, options?: RequestOptions): Promise<Array<UniswapV3TokenV3DTO>>,

    uniswapV3GetTokensDayDataCurrent(filterTokenId?: string, options?: RequestOptions): Promise<Array<UniswapV3TokenV3DayDataDTO>>,

    uniswapV3GetTokensHourDataCurrent(filterTokenId?: string, options?: RequestOptions): Promise<Array<UniswapV3TokenHourDataV3DTO>>,
}

/**
 * UniswapV3Api - factory function to inject configuration 
 * @export
 */
export const UniswapV3Api = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): UniswapV3ApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Gets bundles.
         * @summary Bundles (current)
         * @throws {RequiredError}
         */
        uniswapV3GetBundlesCurrent(options?: RequestOptions = {}): Promise<Array<UniswapV3BundleV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetBundlesCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets burns.
         * @summary Burns (current)
         * @throws {RequiredError}
         */
        uniswapV3GetBurnsCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3BurnV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetBurnsCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets uniswapv3 day data.
         * @summary DayData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetDayDataCurrent(options?: RequestOptions = {}): Promise<Array<UniswapV3UniswapDayDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetDayDataCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets factory.
         * @summary Factory (current)
         * @throws {RequiredError}
         */
        uniswapV3GetFactoryCurrent(options?: RequestOptions = {}): Promise<Array<UniswapV3FactoryV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetFactoryCurrent(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets mints.
         * @summary Mints (current)
         * @throws {RequiredError}
         */
        uniswapV3GetMintsCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3MintV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetMintsCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets pools.
         * @summary Pools (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV3GetPoolsCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3PoolV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetPoolsCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets pools day data.
         * @summary PoolsDayData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetPoolsDayDataCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3PoolDayDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetPoolsDayDataCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets pools hour data.
         * @summary PoolsHourData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetPoolsHourDataCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3PoolHourDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetPoolsHourDataCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets positions.
         * @summary Positions (current)
         * @throws {RequiredError}
         */
        uniswapV3GetPositionsCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3PositionV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetPositionsCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets positions snapshots.
         * @summary PositionsSnapshots (current)
         * @throws {RequiredError}
         */
        uniswapV3GetPositionsSnapshotsCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3PositionSnapshotV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetPositionsSnapshotsCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets swaps.
         * @summary Swaps (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV3GetSwapsCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3SwapV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetSwapsCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets ticks.
         * @summary Ticks (current)
         * @throws {RequiredError}
         */
        uniswapV3GetTicksCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3TickV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetTicksCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets ticks day data.
         * @summary TicksDayData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetTicksDayDataCurrent(filterPoolId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3TickDayDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetTicksDayDataCurrent(filterPoolId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets tokens.
         * @summary Tokens (current) 🔥
         * @throws {RequiredError}
         */
        uniswapV3GetTokensCurrent(filterTokenId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3TokenV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetTokensCurrent(filterTokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets tokens day data.
         * @summary TokensDayData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetTokensDayDataCurrent(filterTokenId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3TokenV3DayDataDTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetTokensDayDataCurrent(filterTokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Gets tokens hour data.
         * @summary TokensHourData (current)
         * @throws {RequiredError}
         */
        uniswapV3GetTokensHourDataCurrent(filterTokenId?: string, options?: RequestOptions = {}): Promise<Array<UniswapV3TokenHourDataV3DTO>> {
            const localVarFetchArgs = UniswapV3ApiFetchParamCreator(configuration).uniswapV3GetTokensHourDataCurrent(filterTokenId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    SushiswapApi: SushiswapApiType,

    UniswapV2Api: UniswapV2ApiType,

    UniswapV3Api: UniswapV3ApiType,
 }
