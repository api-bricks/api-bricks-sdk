=begin
#OnChain API

# This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.0

=end

require 'cgi'

module OpenapiClient
  class UniswapV3Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # GetBundles
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @return [Array<BundleV3DTO>]
    def chains_chain_id_dapps_uniswapv3_bundle_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_bundle_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetBundles
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BundleV3DTO>, Integer, Hash)>] Array<BundleV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_bundle_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_bundle_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_bundle_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/bundle/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BundleV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_bundle_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_bundle_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetBurns
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<BurnV3DTO>]
    def chains_chain_id_dapps_uniswapv3_burns_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_burns_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetBurns
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<BurnV3DTO>, Integer, Hash)>] Array<BurnV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_burns_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_burns_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_burns_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/burns/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<BurnV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_burns_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_burns_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetFactory
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @return [Array<FactoryV3DTO>]
    def chains_chain_id_dapps_uniswapv3_factory_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_factory_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetFactory
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FactoryV3DTO>, Integer, Hash)>] Array<FactoryV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_factory_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_factory_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_factory_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/factory/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FactoryV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_factory_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_factory_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetMints
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<MintV3DTO>]
    def chains_chain_id_dapps_uniswapv3_mints_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_mints_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetMints
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<MintV3DTO>, Integer, Hash)>] Array<MintV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_mints_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_mints_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_mints_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/mints/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MintV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_mints_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_mints_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPools
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<PoolV3DTO>]
    def chains_chain_id_dapps_uniswapv3_pools_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_pools_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetPools
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<PoolV3DTO>, Integer, Hash)>] Array<PoolV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_pools_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_pools_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_pools_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/pools/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PoolV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_pools_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_pools_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPoolsDayData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<PoolDayDataV3DTO>]
    def chains_chain_id_dapps_uniswapv3_pools_day_data_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_pools_day_data_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetPoolsDayData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<PoolDayDataV3DTO>, Integer, Hash)>] Array<PoolDayDataV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_pools_day_data_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_pools_day_data_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_pools_day_data_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/poolsDayData/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PoolDayDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_pools_day_data_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_pools_day_data_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPoolsHourData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<PoolHourDataV3DTO>]
    def chains_chain_id_dapps_uniswapv3_pools_hour_data_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_pools_hour_data_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetPoolsHourData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<PoolHourDataV3DTO>, Integer, Hash)>] Array<PoolHourDataV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_pools_hour_data_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_pools_hour_data_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_pools_hour_data_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/poolsHourData/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PoolHourDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_pools_hour_data_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_pools_hour_data_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPositionSnapshot
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<PositionSnapshotV3DTO>]
    def chains_chain_id_dapps_uniswapv3_position_snapshots_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_position_snapshots_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetPositionSnapshot
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<PositionSnapshotV3DTO>, Integer, Hash)>] Array<PositionSnapshotV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_position_snapshots_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_position_snapshots_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_position_snapshots_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/positionSnapshots/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PositionSnapshotV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_position_snapshots_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_position_snapshots_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPositions
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<PositionV3DTO>]
    def chains_chain_id_dapps_uniswapv3_positions_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_positions_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetPositions
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<PositionV3DTO>, Integer, Hash)>] Array<PositionV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_positions_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_positions_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_positions_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/positions/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PositionV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_positions_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_positions_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetSwaps
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<SwapV3DTO>]
    def chains_chain_id_dapps_uniswapv3_swaps_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_swaps_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetSwaps
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<SwapV3DTO>, Integer, Hash)>] Array<SwapV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_swaps_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_swaps_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_swaps_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/swaps/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SwapV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_swaps_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_swaps_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTicks
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<TickV3DTO>]
    def chains_chain_id_dapps_uniswapv3_ticks_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_ticks_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetTicks
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<TickV3DTO>, Integer, Hash)>] Array<TickV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_ticks_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_ticks_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_ticks_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/ticks/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TickV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_ticks_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_ticks_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTicksDayData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<TickDayDataV3DTO>]
    def chains_chain_id_dapps_uniswapv3_ticks_day_data_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_ticks_day_data_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetTicksDayData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id Filter pool id
    # @return [Array<(Array<TickDayDataV3DTO>, Integer, Hash)>] Array<TickDayDataV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_ticks_day_data_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_ticks_day_data_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_ticks_day_data_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/ticksDayData/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TickDayDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_ticks_day_data_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_ticks_day_data_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTokens
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<TokenV3DTO>]
    def chains_chain_id_dapps_uniswapv3_tokens_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_tokens_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetTokens
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<(Array<TokenV3DTO>, Integer, Hash)>] Array<TokenV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_tokens_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_tokens_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_tokens_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/tokens/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_token_id'] = opts[:'filter_token_id'] if !opts[:'filter_token_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TokenV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_tokens_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_tokens_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTokensDayData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<TokenV3DayDataDTO>]
    def chains_chain_id_dapps_uniswapv3_tokens_day_data_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_tokens_day_data_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetTokensDayData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<(Array<TokenV3DayDataDTO>, Integer, Hash)>] Array<TokenV3DayDataDTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_tokens_day_data_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_tokens_day_data_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_tokens_day_data_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/tokensDayData/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_token_id'] = opts[:'filter_token_id'] if !opts[:'filter_token_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TokenV3DayDataDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_tokens_day_data_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_tokens_day_data_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTokensHourData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<TokenHourDataV3DTO>]
    def chains_chain_id_dapps_uniswapv3_tokens_hour_data_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_tokens_hour_data_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetTokensHourData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<(Array<TokenHourDataV3DTO>, Integer, Hash)>] Array<TokenHourDataV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_tokens_hour_data_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_tokens_hour_data_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_tokens_hour_data_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/tokensHourData/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_token_id'] = opts[:'filter_token_id'] if !opts[:'filter_token_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TokenHourDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_tokens_hour_data_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_tokens_hour_data_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetUniswapDayData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @return [Array<UniswapDayDataV3DTO>]
    def chains_chain_id_dapps_uniswapv3_uniswap_day_data_current_get(chain_id, opts = {})
      data, _status_code, _headers = chains_chain_id_dapps_uniswapv3_uniswap_day_data_current_get_with_http_info(chain_id, opts)
      data
    end

    # GetUniswapDayData
    # @param chain_id [String] Chain id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UniswapDayDataV3DTO>, Integer, Hash)>] Array<UniswapDayDataV3DTO> data, response status code and response headers
    def chains_chain_id_dapps_uniswapv3_uniswap_day_data_current_get_with_http_info(chain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.chains_chain_id_dapps_uniswapv3_uniswap_day_data_current_get ...'
      end
      # verify the required parameter 'chain_id' is set
      if @api_client.config.client_side_validation && chain_id.nil?
        fail ArgumentError, "Missing the required parameter 'chain_id' when calling UniswapV3Api.chains_chain_id_dapps_uniswapv3_uniswap_day_data_current_get"
      end
      # resource path
      local_var_path = '/chains/{chain_id}/dapps/uniswapv3/uniswapDayData/current'.sub('{' + 'chain_id' + '}', CGI.escape(chain_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapDayDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.chains_chain_id_dapps_uniswapv3_uniswap_day_data_current_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#chains_chain_id_dapps_uniswapv3_uniswap_day_data_current_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
