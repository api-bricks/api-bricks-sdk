=begin
#OnChain API

# This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class UniswapV3Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # GetBundles (current)
    # Gets bundles.
    # @param [Hash] opts the optional parameters
    # @return [Array<UniswapV3BundleV3DTO>]
    def uniswap_v3_get_bundles__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_bundles__current_with_http_info(opts)
      data
    end

    # GetBundles (current)
    # Gets bundles.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UniswapV3BundleV3DTO>, Integer, Hash)>] Array<UniswapV3BundleV3DTO> data, response status code and response headers
    def uniswap_v3_get_bundles__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_bundles__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/bundles/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3BundleV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_bundles__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_bundles__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetBundles (historical)
    # Gets bundles.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<UniswapV3BundleV3DTO>]
    def uniswap_v3_get_bundles__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_bundles__historical_with_http_info(opts)
      data
    end

    # GetBundles (historical)
    # Gets bundles.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<(Array<UniswapV3BundleV3DTO>, Integer, Hash)>] Array<UniswapV3BundleV3DTO> data, response status code and response headers
    def uniswap_v3_get_bundles__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_bundles__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/bundles/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3BundleV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_bundles__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_bundles__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetBurns (current)
    # Gets burns.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3BurnV3DTO>]
    def uniswap_v3_get_burns__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_burns__current_with_http_info(opts)
      data
    end

    # GetBurns (current)
    # Gets burns.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3BurnV3DTO>, Integer, Hash)>] Array<UniswapV3BurnV3DTO> data, response status code and response headers
    def uniswap_v3_get_burns__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_burns__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/burns/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3BurnV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_burns__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_burns__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetBurns (historical)
    # Gets burns.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3BurnV3DTO>]
    def uniswap_v3_get_burns__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_burns__historical_with_http_info(opts)
      data
    end

    # GetBurns (historical)
    # Gets burns.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3BurnV3DTO>, Integer, Hash)>] Array<UniswapV3BurnV3DTO> data, response status code and response headers
    def uniswap_v3_get_burns__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_burns__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/burns/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3BurnV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_burns__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_burns__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetDayData (current)
    # Gets uniswapv3 day data.
    # @param [Hash] opts the optional parameters
    # @return [Array<UniswapV3UniswapDayDataV3DTO>]
    def uniswap_v3_get_day_data__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_day_data__current_with_http_info(opts)
      data
    end

    # GetDayData (current)
    # Gets uniswapv3 day data.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UniswapV3UniswapDayDataV3DTO>, Integer, Hash)>] Array<UniswapV3UniswapDayDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_day_data__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_day_data__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/dayData/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3UniswapDayDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_day_data__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_day_data__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetDayData (historical)
    # Gets uniswapv3 day data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<UniswapV3UniswapDayDataV3DTO>]
    def uniswap_v3_get_day_data__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_day_data__historical_with_http_info(opts)
      data
    end

    # GetDayData (historical)
    # Gets uniswapv3 day data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<(Array<UniswapV3UniswapDayDataV3DTO>, Integer, Hash)>] Array<UniswapV3UniswapDayDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_day_data__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_day_data__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/dayData/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3UniswapDayDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_day_data__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_day_data__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetFactory (current)
    # Gets factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<UniswapV3FactoryV3DTO>]
    def uniswap_v3_get_factory__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_factory__current_with_http_info(opts)
      data
    end

    # GetFactory (current)
    # Gets factory.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UniswapV3FactoryV3DTO>, Integer, Hash)>] Array<UniswapV3FactoryV3DTO> data, response status code and response headers
    def uniswap_v3_get_factory__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_factory__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/factory/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3FactoryV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_factory__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_factory__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetFactory (historical)
    # Gets factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<UniswapV3FactoryV3DTO>]
    def uniswap_v3_get_factory__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_factory__historical_with_http_info(opts)
      data
    end

    # GetFactory (historical)
    # Gets factory.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<(Array<UniswapV3FactoryV3DTO>, Integer, Hash)>] Array<UniswapV3FactoryV3DTO> data, response status code and response headers
    def uniswap_v3_get_factory__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_factory__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/factory/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3FactoryV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_factory__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_factory__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetMints (current)
    # Gets mints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3MintV3DTO>]
    def uniswap_v3_get_mints__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_mints__current_with_http_info(opts)
      data
    end

    # GetMints (current)
    # Gets mints.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3MintV3DTO>, Integer, Hash)>] Array<UniswapV3MintV3DTO> data, response status code and response headers
    def uniswap_v3_get_mints__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_mints__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/mints/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3MintV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_mints__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_mints__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetMints (historical)
    # Gets mints.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3MintV3DTO>]
    def uniswap_v3_get_mints__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_mints__historical_with_http_info(opts)
      data
    end

    # GetMints (historical)
    # Gets mints.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3MintV3DTO>, Integer, Hash)>] Array<UniswapV3MintV3DTO> data, response status code and response headers
    def uniswap_v3_get_mints__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_mints__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/mints/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3MintV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_mints__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_mints__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPools (current) 🔥
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3PoolV3DTO>]
    def uniswap_v3_get_pools__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_pools__current_with_http_info(opts)
      data
    end

    # GetPools (current) 🔥
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3PoolV3DTO>, Integer, Hash)>] Array<UniswapV3PoolV3DTO> data, response status code and response headers
    def uniswap_v3_get_pools__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_pools__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/pools/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PoolV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_pools__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_pools__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPools (historical) 🔥
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3PoolV3DTO>]
    def uniswap_v3_get_pools__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_pools__historical_with_http_info(opts)
      data
    end

    # GetPools (historical) 🔥
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3PoolV3DTO>, Integer, Hash)>] Array<UniswapV3PoolV3DTO> data, response status code and response headers
    def uniswap_v3_get_pools__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_pools__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/pools/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PoolV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_pools__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_pools__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPoolsDayData (current)
    # Gets pools day data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3PoolDayDataV3DTO>]
    def uniswap_v3_get_pools_day_data__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_pools_day_data__current_with_http_info(opts)
      data
    end

    # GetPoolsDayData (current)
    # Gets pools day data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3PoolDayDataV3DTO>, Integer, Hash)>] Array<UniswapV3PoolDayDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_pools_day_data__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_pools_day_data__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/poolsDayData/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PoolDayDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_pools_day_data__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_pools_day_data__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPoolsDayData (historical)
    # Gets pools day data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3PoolDayDataV3DTO>]
    def uniswap_v3_get_pools_day_data__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_pools_day_data__historical_with_http_info(opts)
      data
    end

    # GetPoolsDayData (historical)
    # Gets pools day data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3PoolDayDataV3DTO>, Integer, Hash)>] Array<UniswapV3PoolDayDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_pools_day_data__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_pools_day_data__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/poolsDayData/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PoolDayDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_pools_day_data__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_pools_day_data__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPoolsHourData (current)
    # Gets pools hour data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3PoolHourDataV3DTO>]
    def uniswap_v3_get_pools_hour_data__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_pools_hour_data__current_with_http_info(opts)
      data
    end

    # GetPoolsHourData (current)
    # Gets pools hour data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3PoolHourDataV3DTO>, Integer, Hash)>] Array<UniswapV3PoolHourDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_pools_hour_data__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_pools_hour_data__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/poolsHourData/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PoolHourDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_pools_hour_data__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_pools_hour_data__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPoolsHourData (historical)
    # Gets pools hour data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3PoolHourDataV3DTO>]
    def uniswap_v3_get_pools_hour_data__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_pools_hour_data__historical_with_http_info(opts)
      data
    end

    # GetPoolsHourData (historical)
    # Gets pools hour data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3PoolHourDataV3DTO>, Integer, Hash)>] Array<UniswapV3PoolHourDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_pools_hour_data__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_pools_hour_data__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/poolsHourData/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PoolHourDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_pools_hour_data__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_pools_hour_data__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPositions (current)
    # Gets positions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3PositionV3DTO>]
    def uniswap_v3_get_positions__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_positions__current_with_http_info(opts)
      data
    end

    # GetPositions (current)
    # Gets positions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3PositionV3DTO>, Integer, Hash)>] Array<UniswapV3PositionV3DTO> data, response status code and response headers
    def uniswap_v3_get_positions__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_positions__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/positions/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PositionV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_positions__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_positions__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPositions (historical)
    # Gets positions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3PositionV3DTO>]
    def uniswap_v3_get_positions__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_positions__historical_with_http_info(opts)
      data
    end

    # GetPositions (historical)
    # Gets positions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3PositionV3DTO>, Integer, Hash)>] Array<UniswapV3PositionV3DTO> data, response status code and response headers
    def uniswap_v3_get_positions__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_positions__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/positions/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PositionV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_positions__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_positions__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPositionsSnaphots (historical)
    # Gets positions snapshots.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3PositionSnapshotV3DTO>]
    def uniswap_v3_get_positions_snaphots__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_positions_snaphots__historical_with_http_info(opts)
      data
    end

    # GetPositionsSnaphots (historical)
    # Gets positions snapshots.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3PositionSnapshotV3DTO>, Integer, Hash)>] Array<UniswapV3PositionSnapshotV3DTO> data, response status code and response headers
    def uniswap_v3_get_positions_snaphots__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_positions_snaphots__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/positionsSnapshots/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PositionSnapshotV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_positions_snaphots__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_positions_snaphots__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetPositionsSnapshots (current)
    # Gets positions snapshots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3PositionSnapshotV3DTO>]
    def uniswap_v3_get_positions_snapshots__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_positions_snapshots__current_with_http_info(opts)
      data
    end

    # GetPositionsSnapshots (current)
    # Gets positions snapshots.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3PositionSnapshotV3DTO>, Integer, Hash)>] Array<UniswapV3PositionSnapshotV3DTO> data, response status code and response headers
    def uniswap_v3_get_positions_snapshots__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_positions_snapshots__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/positionSnapshots/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3PositionSnapshotV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_positions_snapshots__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_positions_snapshots__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetSwaps (current) 🔥
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3SwapV3DTO>]
    def uniswap_v3_get_swaps__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_swaps__current_with_http_info(opts)
      data
    end

    # GetSwaps (current) 🔥
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3SwapV3DTO>, Integer, Hash)>] Array<UniswapV3SwapV3DTO> data, response status code and response headers
    def uniswap_v3_get_swaps__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_swaps__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/swaps/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3SwapV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_swaps__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_swaps__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetSwaps (historical) 🔥
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3SwapV3DTO>]
    def uniswap_v3_get_swaps__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_swaps__historical_with_http_info(opts)
      data
    end

    # GetSwaps (historical) 🔥
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3SwapV3DTO>, Integer, Hash)>] Array<UniswapV3SwapV3DTO> data, response status code and response headers
    def uniswap_v3_get_swaps__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_swaps__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/swaps/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3SwapV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_swaps__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_swaps__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTicks (current)
    # Gets ticks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3TickV3DTO>]
    def uniswap_v3_get_ticks__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_ticks__current_with_http_info(opts)
      data
    end

    # GetTicks (current)
    # Gets ticks.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3TickV3DTO>, Integer, Hash)>] Array<UniswapV3TickV3DTO> data, response status code and response headers
    def uniswap_v3_get_ticks__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_ticks__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/ticks/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TickV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_ticks__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_ticks__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTicks (historical)
    # Gets ticks.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3TickV3DTO>]
    def uniswap_v3_get_ticks__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_ticks__historical_with_http_info(opts)
      data
    end

    # GetTicks (historical)
    # Gets ticks.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3TickV3DTO>, Integer, Hash)>] Array<UniswapV3TickV3DTO> data, response status code and response headers
    def uniswap_v3_get_ticks__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_ticks__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/ticks/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TickV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_ticks__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_ticks__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTicksDayData (current)
    # Gets ticks day data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<UniswapV3TickDayDataV3DTO>]
    def uniswap_v3_get_ticks_day_data__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_ticks_day_data__current_with_http_info(opts)
      data
    end

    # GetTicksDayData (current)
    # Gets ticks day data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_pool_id 
    # @return [Array<(Array<UniswapV3TickDayDataV3DTO>, Integer, Hash)>] Array<UniswapV3TickDayDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_ticks_day_data__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_ticks_day_data__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/ticksDayData/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_pool_id'] = opts[:'filter_pool_id'] if !opts[:'filter_pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TickDayDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_ticks_day_data__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_ticks_day_data__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTicksDayData (historical)
    # Gets ticks day data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<UniswapV3TickDayDataV3DTO>]
    def uniswap_v3_get_ticks_day_data__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_ticks_day_data__historical_with_http_info(opts)
      data
    end

    # GetTicksDayData (historical)
    # Gets ticks day data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :pool_id 
    # @return [Array<(Array<UniswapV3TickDayDataV3DTO>, Integer, Hash)>] Array<UniswapV3TickDayDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_ticks_day_data__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_ticks_day_data__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/ticksDayData/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'poolId'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TickDayDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_ticks_day_data__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_ticks_day_data__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTokens (current) 🔥
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<UniswapV3TokenV3DTO>]
    def uniswap_v3_get_tokens__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_tokens__current_with_http_info(opts)
      data
    end

    # GetTokens (current) 🔥
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<(Array<UniswapV3TokenV3DTO>, Integer, Hash)>] Array<UniswapV3TokenV3DTO> data, response status code and response headers
    def uniswap_v3_get_tokens__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_tokens__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/tokens/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_token_id'] = opts[:'filter_token_id'] if !opts[:'filter_token_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TokenV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_tokens__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_tokens__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTokens (historical) 🔥
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :token_id 
    # @return [Array<UniswapV3TokenV3DTO>]
    def uniswap_v3_get_tokens__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_tokens__historical_with_http_info(opts)
      data
    end

    # GetTokens (historical) 🔥
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :token_id 
    # @return [Array<(Array<UniswapV3TokenV3DTO>, Integer, Hash)>] Array<UniswapV3TokenV3DTO> data, response status code and response headers
    def uniswap_v3_get_tokens__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_tokens__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/tokens/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tokenId'] = opts[:'token_id'] if !opts[:'token_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TokenV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_tokens__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_tokens__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTokensDayData (current)
    # Gets tokens day data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<UniswapV3TokenV3DayDataDTO>]
    def uniswap_v3_get_tokens_day_data__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_tokens_day_data__current_with_http_info(opts)
      data
    end

    # GetTokensDayData (current)
    # Gets tokens day data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<(Array<UniswapV3TokenV3DayDataDTO>, Integer, Hash)>] Array<UniswapV3TokenV3DayDataDTO> data, response status code and response headers
    def uniswap_v3_get_tokens_day_data__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_tokens_day_data__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/tokensDayData/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_token_id'] = opts[:'filter_token_id'] if !opts[:'filter_token_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TokenV3DayDataDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_tokens_day_data__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_tokens_day_data__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTokensDayData (historical)
    # Gets tokens day data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :token_id 
    # @return [Array<UniswapV3TokenV3DayDataDTO>]
    def uniswap_v3_get_tokens_day_data__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_tokens_day_data__historical_with_http_info(opts)
      data
    end

    # GetTokensDayData (historical)
    # Gets tokens day data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :token_id 
    # @return [Array<(Array<UniswapV3TokenV3DayDataDTO>, Integer, Hash)>] Array<UniswapV3TokenV3DayDataDTO> data, response status code and response headers
    def uniswap_v3_get_tokens_day_data__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_tokens_day_data__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/tokensDayData/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tokenId'] = opts[:'token_id'] if !opts[:'token_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TokenV3DayDataDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_tokens_day_data__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_tokens_day_data__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTokensHourData (current)
    # Gets tokens hour data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<UniswapV3TokenHourDataV3DTO>]
    def uniswap_v3_get_tokens_hour_data__current(opts = {})
      data, _status_code, _headers = uniswap_v3_get_tokens_hour_data__current_with_http_info(opts)
      data
    end

    # GetTokensHourData (current)
    # Gets tokens hour data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter_token_id 
    # @return [Array<(Array<UniswapV3TokenHourDataV3DTO>, Integer, Hash)>] Array<UniswapV3TokenHourDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_tokens_hour_data__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_tokens_hour_data__current ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/tokensHourData/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter_token_id'] = opts[:'filter_token_id'] if !opts[:'filter_token_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TokenHourDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_tokens_hour_data__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_tokens_hour_data__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTokensHourData (historical)
    # Gets tokens hour data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :token_id 
    # @return [Array<UniswapV3TokenHourDataV3DTO>]
    def uniswap_v3_get_tokens_hour_data__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_tokens_hour_data__historical_with_http_info(opts)
      data
    end

    # GetTokensHourData (historical)
    # Gets tokens hour data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :token_id 
    # @return [Array<(Array<UniswapV3TokenHourDataV3DTO>, Integer, Hash)>] Array<UniswapV3TokenHourDataV3DTO> data, response status code and response headers
    def uniswap_v3_get_tokens_hour_data__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_tokens_hour_data__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/tokensHourData/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'tokenId'] = opts[:'token_id'] if !opts[:'token_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TokenHourDataV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_tokens_hour_data__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_tokens_hour_data__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetTransactions (historical)
    # Gets transactions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<UniswapV3TransactionV3DTO>]
    def uniswap_v3_get_transactions__historical(opts = {})
      data, _status_code, _headers = uniswap_v3_get_transactions__historical_with_http_info(opts)
      data
    end

    # GetTransactions (historical)
    # Gets transactions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @return [Array<(Array<UniswapV3TransactionV3DTO>, Integer, Hash)>] Array<UniswapV3TransactionV3DTO> data, response status code and response headers
    def uniswap_v3_get_transactions__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UniswapV3Api.uniswap_v3_get_transactions__historical ...'
      end
      # resource path
      local_var_path = '/dapps/uniswapv3/transactions/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UniswapV3TransactionV3DTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UniswapV3Api.uniswap_v3_get_transactions__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UniswapV3Api#uniswap_v3_get_transactions__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
