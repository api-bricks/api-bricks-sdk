=begin
#On Chain Dapps - REST API

# This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module OpenapiClient
  class CurveApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accounts (current)
    # Gets accounts.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveAccountDTO>]
    def curve_accounts__current(opts = {})
      data, _status_code, _headers = curve_accounts__current_with_http_info(opts)
      data
    end

    # Accounts (current)
    # Gets accounts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveAccountDTO>, Integer, Hash)>] Array<CurveAccountDTO> data, response status code and response headers
    def curve_accounts__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_accounts__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/accounts/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveAccountDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_accounts__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_accounts__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # AddLiquidityEvents (current)
    # Gets addLiquidityEvents.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveAddLiquidityEventDTO>]
    def curve_add_liquidity_events__current(opts = {})
      data, _status_code, _headers = curve_add_liquidity_events__current_with_http_info(opts)
      data
    end

    # AddLiquidityEvents (current)
    # Gets addLiquidityEvents.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveAddLiquidityEventDTO>, Integer, Hash)>] Array<CurveAddLiquidityEventDTO> data, response status code and response headers
    def curve_add_liquidity_events__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_add_liquidity_events__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/addLiquidityEvents/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveAddLiquidityEventDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_add_liquidity_events__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_add_liquidity_events__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # AdminFeeChangeLogs (current)
    # Gets adminFeeChangeLogs.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveAdminFeeChangeLogDTO>]
    def curve_admin_fee_change_logs__current(opts = {})
      data, _status_code, _headers = curve_admin_fee_change_logs__current_with_http_info(opts)
      data
    end

    # AdminFeeChangeLogs (current)
    # Gets adminFeeChangeLogs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveAdminFeeChangeLogDTO>, Integer, Hash)>] Array<CurveAdminFeeChangeLogDTO> data, response status code and response headers
    def curve_admin_fee_change_logs__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_admin_fee_change_logs__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/adminFeeChangeLogs/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveAdminFeeChangeLogDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_admin_fee_change_logs__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_admin_fee_change_logs__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # AmplificationCoeffChangeLogs (current)
    # Gets amplificationCoeffChangeLogs.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveAmplificationCoeffChangeLogDTO>]
    def curve_amplification_coeff_change_logs__current(opts = {})
      data, _status_code, _headers = curve_amplification_coeff_change_logs__current_with_http_info(opts)
      data
    end

    # AmplificationCoeffChangeLogs (current)
    # Gets amplificationCoeffChangeLogs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveAmplificationCoeffChangeLogDTO>, Integer, Hash)>] Array<CurveAmplificationCoeffChangeLogDTO> data, response status code and response headers
    def curve_amplification_coeff_change_logs__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_amplification_coeff_change_logs__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/amplificationCoeffChangeLogs/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveAmplificationCoeffChangeLogDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_amplification_coeff_change_logs__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_amplification_coeff_change_logs__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Coins (current)
    # Gets coins.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveCoinDTO>]
    def curve_coins__current(opts = {})
      data, _status_code, _headers = curve_coins__current_with_http_info(opts)
      data
    end

    # Coins (current)
    # Gets coins.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveCoinDTO>, Integer, Hash)>] Array<CurveCoinDTO> data, response status code and response headers
    def curve_coins__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_coins__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/coins/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveCoinDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_coins__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_coins__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ContractVersions (current)
    # Gets contractVersions.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveContractVersionDTO>]
    def curve_contract_versions__current(opts = {})
      data, _status_code, _headers = curve_contract_versions__current_with_http_info(opts)
      data
    end

    # ContractVersions (current)
    # Gets contractVersions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveContractVersionDTO>, Integer, Hash)>] Array<CurveContractVersionDTO> data, response status code and response headers
    def curve_contract_versions__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_contract_versions__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/contractVersions/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveContractVersionDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_contract_versions__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_contract_versions__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Contracts (current)
    # Gets contracts.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveContractDTO>]
    def curve_contracts__current(opts = {})
      data, _status_code, _headers = curve_contracts__current_with_http_info(opts)
      data
    end

    # Contracts (current)
    # Gets contracts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveContractDTO>, Integer, Hash)>] Array<CurveContractDTO> data, response status code and response headers
    def curve_contracts__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_contracts__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/contracts/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveContractDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_contracts__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_contracts__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DailyVolumes (current)
    # Gets dailyVolumes.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveDailyVolumeDTO>]
    def curve_daily_volumes__current(opts = {})
      data, _status_code, _headers = curve_daily_volumes__current_with_http_info(opts)
      data
    end

    # DailyVolumes (current)
    # Gets dailyVolumes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveDailyVolumeDTO>, Integer, Hash)>] Array<CurveDailyVolumeDTO> data, response status code and response headers
    def curve_daily_volumes__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_daily_volumes__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/dailyVolumes/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveDailyVolumeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_daily_volumes__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_daily_volumes__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchanges (current)
    # Gets exchanges.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pool 
    # @return [Array<CurveExchangeDTO>]
    def curve_exchanges__current(opts = {})
      data, _status_code, _headers = curve_exchanges__current_with_http_info(opts)
      data
    end

    # Exchanges (current)
    # Gets exchanges.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveExchangeDTO>, Integer, Hash)>] Array<CurveExchangeDTO> data, response status code and response headers
    def curve_exchanges__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_exchanges__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/exchanges/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveExchangeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_exchanges__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_exchanges__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # FeeChangeLogs (current)
    # Gets feeChangeLogs.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveFeeChangeLogDTO>]
    def curve_fee_change_logs__current(opts = {})
      data, _status_code, _headers = curve_fee_change_logs__current_with_http_info(opts)
      data
    end

    # FeeChangeLogs (current)
    # Gets feeChangeLogs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveFeeChangeLogDTO>, Integer, Hash)>] Array<CurveFeeChangeLogDTO> data, response status code and response headers
    def curve_fee_change_logs__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_fee_change_logs__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/feeChangeLogs/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveFeeChangeLogDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_fee_change_logs__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_fee_change_logs__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeDeposits (current)
    # Gets gaugeDeposits.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveGaugeDepositDTO>]
    def curve_gauge_deposits__current(opts = {})
      data, _status_code, _headers = curve_gauge_deposits__current_with_http_info(opts)
      data
    end

    # GaugeDeposits (current)
    # Gets gaugeDeposits.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveGaugeDepositDTO>, Integer, Hash)>] Array<CurveGaugeDepositDTO> data, response status code and response headers
    def curve_gauge_deposits__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_gauge_deposits__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeDeposits/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeDepositDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_gauge_deposits__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_gauge_deposits__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeLiquidities (current)
    # Gets gaugeLiquidities.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveGaugeLiquidityDTO>]
    def curve_gauge_liquidities__current(opts = {})
      data, _status_code, _headers = curve_gauge_liquidities__current_with_http_info(opts)
      data
    end

    # GaugeLiquidities (current)
    # Gets gaugeLiquidities.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveGaugeLiquidityDTO>, Integer, Hash)>] Array<CurveGaugeLiquidityDTO> data, response status code and response headers
    def curve_gauge_liquidities__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_gauge_liquidities__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeLiquidities/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeLiquidityDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_gauge_liquidities__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_gauge_liquidities__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeTotalWeights (current)
    # Gets gaugeTotalWeights.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveGaugeTotalWeightDTO>]
    def curve_gauge_total_weights__current(opts = {})
      data, _status_code, _headers = curve_gauge_total_weights__current_with_http_info(opts)
      data
    end

    # GaugeTotalWeights (current)
    # Gets gaugeTotalWeights.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveGaugeTotalWeightDTO>, Integer, Hash)>] Array<CurveGaugeTotalWeightDTO> data, response status code and response headers
    def curve_gauge_total_weights__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_gauge_total_weights__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeTotalWeights/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeTotalWeightDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_gauge_total_weights__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_gauge_total_weights__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeTypeWeights (current)
    # Gets gaugeTypeWeights.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveGaugeTypeWeightDTO>]
    def curve_gauge_type_weights__current(opts = {})
      data, _status_code, _headers = curve_gauge_type_weights__current_with_http_info(opts)
      data
    end

    # GaugeTypeWeights (current)
    # Gets gaugeTypeWeights.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveGaugeTypeWeightDTO>, Integer, Hash)>] Array<CurveGaugeTypeWeightDTO> data, response status code and response headers
    def curve_gauge_type_weights__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_gauge_type_weights__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeTypeWeights/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeTypeWeightDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_gauge_type_weights__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_gauge_type_weights__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeTypes (current)
    # Gets gaugeTypes.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveGaugeTypeDTO>]
    def curve_gauge_types__current(opts = {})
      data, _status_code, _headers = curve_gauge_types__current_with_http_info(opts)
      data
    end

    # GaugeTypes (current)
    # Gets gaugeTypes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveGaugeTypeDTO>, Integer, Hash)>] Array<CurveGaugeTypeDTO> data, response status code and response headers
    def curve_gauge_types__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_gauge_types__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeTypes/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeTypeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_gauge_types__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_gauge_types__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeWeightVotes (current)
    # Gets gaugeWeightVotes.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveGaugeWeightVoteDTO>]
    def curve_gauge_weight_votes__current(opts = {})
      data, _status_code, _headers = curve_gauge_weight_votes__current_with_http_info(opts)
      data
    end

    # GaugeWeightVotes (current)
    # Gets gaugeWeightVotes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveGaugeWeightVoteDTO>, Integer, Hash)>] Array<CurveGaugeWeightVoteDTO> data, response status code and response headers
    def curve_gauge_weight_votes__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_gauge_weight_votes__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeWeightVotes/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeWeightVoteDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_gauge_weight_votes__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_gauge_weight_votes__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeWeights (current)
    # Gets gaugeWeights.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveGaugeWeightDTO>]
    def curve_gauge_weights__current(opts = {})
      data, _status_code, _headers = curve_gauge_weights__current_with_http_info(opts)
      data
    end

    # GaugeWeights (current)
    # Gets gaugeWeights.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveGaugeWeightDTO>, Integer, Hash)>] Array<CurveGaugeWeightDTO> data, response status code and response headers
    def curve_gauge_weights__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_gauge_weights__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeWeights/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeWeightDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_gauge_weights__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_gauge_weights__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeWithdraws (current)
    # Gets gaugeWithdraws.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveGaugeWithdrawDTO>]
    def curve_gauge_withdraws__current(opts = {})
      data, _status_code, _headers = curve_gauge_withdraws__current_with_http_info(opts)
      data
    end

    # GaugeWithdraws (current)
    # Gets gaugeWithdraws.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveGaugeWithdrawDTO>, Integer, Hash)>] Array<CurveGaugeWithdrawDTO> data, response status code and response headers
    def curve_gauge_withdraws__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_gauge_withdraws__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeWithdraws/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeWithdrawDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_gauge_withdraws__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_gauge_withdraws__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gauges (current)
    # Gets gauges.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveGaugeDTO>]
    def curve_gauges__current(opts = {})
      data, _status_code, _headers = curve_gauges__current_with_http_info(opts)
      data
    end

    # Gauges (current)
    # Gets gauges.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveGaugeDTO>, Integer, Hash)>] Array<CurveGaugeDTO> data, response status code and response headers
    def curve_gauges__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_gauges__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gauges/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_gauges__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_gauges__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accounts (historical)
    # Gets accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @return [Array<CurveAccountDTO>]
    def curve_get_accounts__historical(opts = {})
      data, _status_code, _headers = curve_get_accounts__historical_with_http_info(opts)
      data
    end

    # Accounts (historical)
    # Gets accounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @return [Array<(Array<CurveAccountDTO>, Integer, Hash)>] Array<CurveAccountDTO> data, response status code and response headers
    def curve_get_accounts__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_accounts__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/accounts/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveAccountDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_accounts__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_accounts__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # AddLiquidityEvents (historical)
    # Gets addLiquidityEvents.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveAddLiquidityEventDTO>]
    def curve_get_add_liquidity_events__historical(opts = {})
      data, _status_code, _headers = curve_get_add_liquidity_events__historical_with_http_info(opts)
      data
    end

    # AddLiquidityEvents (historical)
    # Gets addLiquidityEvents.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveAddLiquidityEventDTO>, Integer, Hash)>] Array<CurveAddLiquidityEventDTO> data, response status code and response headers
    def curve_get_add_liquidity_events__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_add_liquidity_events__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/addLiquidityEvents/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveAddLiquidityEventDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_add_liquidity_events__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_add_liquidity_events__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # AdminFeeChangeLogs (historical)
    # Gets adminFeeChangeLogs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveAdminFeeChangeLogDTO>]
    def curve_get_admin_fee_change_logs__historical(opts = {})
      data, _status_code, _headers = curve_get_admin_fee_change_logs__historical_with_http_info(opts)
      data
    end

    # AdminFeeChangeLogs (historical)
    # Gets adminFeeChangeLogs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveAdminFeeChangeLogDTO>, Integer, Hash)>] Array<CurveAdminFeeChangeLogDTO> data, response status code and response headers
    def curve_get_admin_fee_change_logs__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_admin_fee_change_logs__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/adminFeeChangeLogs/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveAdminFeeChangeLogDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_admin_fee_change_logs__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_admin_fee_change_logs__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # AmplificationCoeffChangeLogs (historical)
    # Gets amplificationCoeffChangeLogs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveAmplificationCoeffChangeLogDTO>]
    def curve_get_amplification_coeff_change_logs__historical(opts = {})
      data, _status_code, _headers = curve_get_amplification_coeff_change_logs__historical_with_http_info(opts)
      data
    end

    # AmplificationCoeffChangeLogs (historical)
    # Gets amplificationCoeffChangeLogs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveAmplificationCoeffChangeLogDTO>, Integer, Hash)>] Array<CurveAmplificationCoeffChangeLogDTO> data, response status code and response headers
    def curve_get_amplification_coeff_change_logs__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_amplification_coeff_change_logs__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/amplificationCoeffChangeLogs/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveAmplificationCoeffChangeLogDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_amplification_coeff_change_logs__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_amplification_coeff_change_logs__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Coins (historical)
    # Gets coins.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Identifier, format: (pool_id)-(coin_index).
    # @option opts [String] :pool 
    # @return [Array<CurveCoinDTO>]
    def curve_get_coins__historical(opts = {})
      data, _status_code, _headers = curve_get_coins__historical_with_http_info(opts)
      data
    end

    # Coins (historical)
    # Gets coins.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Identifier, format: (pool_id)-(coin_index).
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveCoinDTO>, Integer, Hash)>] Array<CurveCoinDTO> data, response status code and response headers
    def curve_get_coins__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_coins__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/coins/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveCoinDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_coins__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_coins__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ContractVersions (historical)
    # Gets contractVersions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @return [Array<CurveContractVersionDTO>]
    def curve_get_contract_versions__historical(opts = {})
      data, _status_code, _headers = curve_get_contract_versions__historical_with_http_info(opts)
      data
    end

    # ContractVersions (historical)
    # Gets contractVersions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @return [Array<(Array<CurveContractVersionDTO>, Integer, Hash)>] Array<CurveContractVersionDTO> data, response status code and response headers
    def curve_get_contract_versions__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_contract_versions__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/contractVersions/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveContractVersionDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_contract_versions__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_contract_versions__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Contracts (historical)
    # Gets contracts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<CurveContractDTO>]
    def curve_get_contracts__historical(opts = {})
      data, _status_code, _headers = curve_get_contracts__historical_with_http_info(opts)
      data
    end

    # Contracts (historical)
    # Gets contracts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<(Array<CurveContractDTO>, Integer, Hash)>] Array<CurveContractDTO> data, response status code and response headers
    def curve_get_contracts__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_contracts__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/contracts/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveContractDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_contracts__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_contracts__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DailyVolumes (historical)
    # Gets dailyVolumes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveDailyVolumeDTO>]
    def curve_get_daily_volumes__historical(opts = {})
      data, _status_code, _headers = curve_get_daily_volumes__historical_with_http_info(opts)
      data
    end

    # DailyVolumes (historical)
    # Gets dailyVolumes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveDailyVolumeDTO>, Integer, Hash)>] Array<CurveDailyVolumeDTO> data, response status code and response headers
    def curve_get_daily_volumes__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_daily_volumes__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/dailyVolumes/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveDailyVolumeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_daily_volumes__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_daily_volumes__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchanges (historical)
    # Gets exchanges.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveExchangeDTO>]
    def curve_get_exchanges__historical(opts = {})
      data, _status_code, _headers = curve_get_exchanges__historical_with_http_info(opts)
      data
    end

    # Exchanges (historical)
    # Gets exchanges.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveExchangeDTO>, Integer, Hash)>] Array<CurveExchangeDTO> data, response status code and response headers
    def curve_get_exchanges__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_exchanges__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/exchanges/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveExchangeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_exchanges__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_exchanges__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # FeeChangeLogs (historical)
    # Gets feeChangeLogs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveFeeChangeLogDTO>]
    def curve_get_fee_change_logs__historical(opts = {})
      data, _status_code, _headers = curve_get_fee_change_logs__historical_with_http_info(opts)
      data
    end

    # FeeChangeLogs (historical)
    # Gets feeChangeLogs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveFeeChangeLogDTO>, Integer, Hash)>] Array<CurveFeeChangeLogDTO> data, response status code and response headers
    def curve_get_fee_change_logs__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_fee_change_logs__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/feeChangeLogs/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveFeeChangeLogDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_fee_change_logs__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_fee_change_logs__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeDeposits (historical)
    # Gets gaugeDeposits.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<CurveGaugeDepositDTO>]
    def curve_get_gauge_deposits__historical(opts = {})
      data, _status_code, _headers = curve_get_gauge_deposits__historical_with_http_info(opts)
      data
    end

    # GaugeDeposits (historical)
    # Gets gaugeDeposits.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<(Array<CurveGaugeDepositDTO>, Integer, Hash)>] Array<CurveGaugeDepositDTO> data, response status code and response headers
    def curve_get_gauge_deposits__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_gauge_deposits__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeDeposits/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeDepositDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_gauge_deposits__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_gauge_deposits__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeLiquidities (historical)
    # Gets gaugeLiquidities.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :user 
    # @return [Array<CurveGaugeLiquidityDTO>]
    def curve_get_gauge_liquidities__historical(opts = {})
      data, _status_code, _headers = curve_get_gauge_liquidities__historical_with_http_info(opts)
      data
    end

    # GaugeLiquidities (historical)
    # Gets gaugeLiquidities.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :user 
    # @return [Array<(Array<CurveGaugeLiquidityDTO>, Integer, Hash)>] Array<CurveGaugeLiquidityDTO> data, response status code and response headers
    def curve_get_gauge_liquidities__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_gauge_liquidities__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeLiquidities/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeLiquidityDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_gauge_liquidities__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_gauge_liquidities__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeTotalWeights (historical)
    # Gets gaugeTotalWeights.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<CurveGaugeTotalWeightDTO>]
    def curve_get_gauge_total_weights__historical(opts = {})
      data, _status_code, _headers = curve_get_gauge_total_weights__historical_with_http_info(opts)
      data
    end

    # GaugeTotalWeights (historical)
    # Gets gaugeTotalWeights.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<(Array<CurveGaugeTotalWeightDTO>, Integer, Hash)>] Array<CurveGaugeTotalWeightDTO> data, response status code and response headers
    def curve_get_gauge_total_weights__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_gauge_total_weights__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeTotalWeights/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeTotalWeightDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_gauge_total_weights__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_gauge_total_weights__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeTypeWeights (historical)
    # Gets gaugeTypeWeights.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<CurveGaugeTypeWeightDTO>]
    def curve_get_gauge_type_weights__historical(opts = {})
      data, _status_code, _headers = curve_get_gauge_type_weights__historical_with_http_info(opts)
      data
    end

    # GaugeTypeWeights (historical)
    # Gets gaugeTypeWeights.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<(Array<CurveGaugeTypeWeightDTO>, Integer, Hash)>] Array<CurveGaugeTypeWeightDTO> data, response status code and response headers
    def curve_get_gauge_type_weights__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_gauge_type_weights__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeTypeWeights/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeTypeWeightDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_gauge_type_weights__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_gauge_type_weights__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeTypes (historical)
    # Gets gaugeTypes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :name 
    # @return [Array<CurveGaugeTypeDTO>]
    def curve_get_gauge_types__historical(opts = {})
      data, _status_code, _headers = curve_get_gauge_types__historical_with_http_info(opts)
      data
    end

    # GaugeTypes (historical)
    # Gets gaugeTypes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :name 
    # @return [Array<(Array<CurveGaugeTypeDTO>, Integer, Hash)>] Array<CurveGaugeTypeDTO> data, response status code and response headers
    def curve_get_gauge_types__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_gauge_types__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeTypes/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeTypeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_gauge_types__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_gauge_types__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeWeightVotes (historical)
    # Gets gaugeWeightVotes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :user 
    # @return [Array<CurveGaugeWeightVoteDTO>]
    def curve_get_gauge_weight_votes__historical(opts = {})
      data, _status_code, _headers = curve_get_gauge_weight_votes__historical_with_http_info(opts)
      data
    end

    # GaugeWeightVotes (historical)
    # Gets gaugeWeightVotes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :user 
    # @return [Array<(Array<CurveGaugeWeightVoteDTO>, Integer, Hash)>] Array<CurveGaugeWeightVoteDTO> data, response status code and response headers
    def curve_get_gauge_weight_votes__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_gauge_weight_votes__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeWeightVotes/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeWeightVoteDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_gauge_weight_votes__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_gauge_weight_votes__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeWeights (historical)
    # Gets gaugeWeights.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<CurveGaugeWeightDTO>]
    def curve_get_gauge_weights__historical(opts = {})
      data, _status_code, _headers = curve_get_gauge_weights__historical_with_http_info(opts)
      data
    end

    # GaugeWeights (historical)
    # Gets gaugeWeights.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<(Array<CurveGaugeWeightDTO>, Integer, Hash)>] Array<CurveGaugeWeightDTO> data, response status code and response headers
    def curve_get_gauge_weights__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_gauge_weights__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeWeights/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeWeightDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_gauge_weights__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_gauge_weights__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GaugeWithdraws (historical)
    # Gets gaugeWithdraws.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<CurveGaugeWithdrawDTO>]
    def curve_get_gauge_withdraws__historical(opts = {})
      data, _status_code, _headers = curve_get_gauge_withdraws__historical_with_http_info(opts)
      data
    end

    # GaugeWithdraws (historical)
    # Gets gaugeWithdraws.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<(Array<CurveGaugeWithdrawDTO>, Integer, Hash)>] Array<CurveGaugeWithdrawDTO> data, response status code and response headers
    def curve_get_gauge_withdraws__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_gauge_withdraws__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gaugeWithdraws/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeWithdrawDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_gauge_withdraws__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_gauge_withdraws__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gauges (historical)
    # Gets gauges.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @option opts [String] :pool 
    # @return [Array<CurveGaugeDTO>]
    def curve_get_gauges__historical(opts = {})
      data, _status_code, _headers = curve_get_gauges__historical_with_http_info(opts)
      data
    end

    # Gauges (historical)
    # Gets gauges.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveGaugeDTO>, Integer, Hash)>] Array<CurveGaugeDTO> data, response status code and response headers
    def curve_get_gauges__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_gauges__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/gauges/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveGaugeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_gauges__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_gauges__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # HourlyVolumes (historical)
    # Gets hourlyVolumes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveHourlyVolumeDTO>]
    def curve_get_hourly_volumes__historical(opts = {})
      data, _status_code, _headers = curve_get_hourly_volumes__historical_with_http_info(opts)
      data
    end

    # HourlyVolumes (historical)
    # Gets hourlyVolumes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveHourlyVolumeDTO>, Integer, Hash)>] Array<CurveHourlyVolumeDTO> data, response status code and response headers
    def curve_get_hourly_volumes__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_hourly_volumes__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/hourlyVolumes/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveHourlyVolumeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_hourly_volumes__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_hourly_volumes__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # LpTokens (historical)
    # Gets lpTokens.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @option opts [String] :name 
    # @option opts [String] :symbol 
    # @option opts [String] :pool 
    # @return [Array<CurveLpTokenDTO>]
    def curve_get_lp_tokens__historical(opts = {})
      data, _status_code, _headers = curve_get_lp_tokens__historical_with_http_info(opts)
      data
    end

    # LpTokens (historical)
    # Gets lpTokens.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @option opts [String] :name 
    # @option opts [String] :symbol 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveLpTokenDTO>, Integer, Hash)>] Array<CurveLpTokenDTO> data, response status code and response headers
    def curve_get_lp_tokens__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_lp_tokens__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/lpTokens/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveLpTokenDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_lp_tokens__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_lp_tokens__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pools (historical)
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Pool address.
    # @option opts [String] :name Pool&#39;s human-readable name.
    # @return [Array<CurvePoolDTO>]
    def curve_get_pools__historical(opts = {})
      data, _status_code, _headers = curve_get_pools__historical_with_http_info(opts)
      data
    end

    # Pools (historical)
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Pool address.
    # @option opts [String] :name Pool&#39;s human-readable name.
    # @return [Array<(Array<CurvePoolDTO>, Integer, Hash)>] Array<CurvePoolDTO> data, response status code and response headers
    def curve_get_pools__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_pools__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/pools/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurvePoolDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_pools__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_pools__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ProposalVotes (historical)
    # Gets proposalVotes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<CurveProposalVoteDTO>]
    def curve_get_proposal_votes__historical(opts = {})
      data, _status_code, _headers = curve_get_proposal_votes__historical_with_http_info(opts)
      data
    end

    # ProposalVotes (historical)
    # Gets proposalVotes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<(Array<CurveProposalVoteDTO>, Integer, Hash)>] Array<CurveProposalVoteDTO> data, response status code and response headers
    def curve_get_proposal_votes__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_proposal_votes__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/proposalVotes/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveProposalVoteDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_proposal_votes__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_proposal_votes__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Proposals (historical)
    # Gets proposals.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<CurveProposalDTO>]
    def curve_get_proposals__historical(opts = {})
      data, _status_code, _headers = curve_get_proposals__historical_with_http_info(opts)
      data
    end

    # Proposals (historical)
    # Gets proposals.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @return [Array<(Array<CurveProposalDTO>, Integer, Hash)>] Array<CurveProposalDTO> data, response status code and response headers
    def curve_get_proposals__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_proposals__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/proposals/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveProposalDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_proposals__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_proposals__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # RemoveLiquidityEvents (historical)
    # Gets removeLiquidityEvents.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveRemoveLiquidityEventDTO>]
    def curve_get_remove_liquidity_events__historical(opts = {})
      data, _status_code, _headers = curve_get_remove_liquidity_events__historical_with_http_info(opts)
      data
    end

    # RemoveLiquidityEvents (historical)
    # Gets removeLiquidityEvents.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveRemoveLiquidityEventDTO>, Integer, Hash)>] Array<CurveRemoveLiquidityEventDTO> data, response status code and response headers
    def curve_get_remove_liquidity_events__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_remove_liquidity_events__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/removeLiquidityEvents/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveRemoveLiquidityEventDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_remove_liquidity_events__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_remove_liquidity_events__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # RemoveLiquidityOneEvents (historical)
    # Gets removeLiquidityOneEvents.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveRemoveLiquidityOneEventDTO>]
    def curve_get_remove_liquidity_one_events__historical(opts = {})
      data, _status_code, _headers = curve_get_remove_liquidity_one_events__historical_with_http_info(opts)
      data
    end

    # RemoveLiquidityOneEvents (historical)
    # Gets removeLiquidityOneEvents.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveRemoveLiquidityOneEventDTO>, Integer, Hash)>] Array<CurveRemoveLiquidityOneEventDTO> data, response status code and response headers
    def curve_get_remove_liquidity_one_events__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_remove_liquidity_one_events__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/removeLiquidityOneEvents/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveRemoveLiquidityOneEventDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_remove_liquidity_one_events__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_remove_liquidity_one_events__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # SystemStates (historical)
    # Gets systemStates.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Singleton ID, equals to &#39;current&#39;.
    # @return [Array<CurveSystemStateDTO>]
    def curve_get_system_states__historical(opts = {})
      data, _status_code, _headers = curve_get_system_states__historical_with_http_info(opts)
      data
    end

    # SystemStates (historical)
    # Gets systemStates.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Singleton ID, equals to &#39;current&#39;.
    # @return [Array<(Array<CurveSystemStateDTO>, Integer, Hash)>] Array<CurveSystemStateDTO> data, response status code and response headers
    def curve_get_system_states__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_system_states__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/systemStates/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveSystemStateDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_system_states__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_system_states__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tokens (historical)
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @option opts [String] :name 
    # @option opts [String] :symbol 
    # @return [Array<CurveTokenDTO>]
    def curve_get_tokens__historical(opts = {})
      data, _status_code, _headers = curve_get_tokens__historical_with_http_info(opts)
      data
    end

    # Tokens (historical)
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :address 
    # @option opts [String] :name 
    # @option opts [String] :symbol 
    # @return [Array<(Array<CurveTokenDTO>, Integer, Hash)>] Array<CurveTokenDTO> data, response status code and response headers
    def curve_get_tokens__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_tokens__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/tokens/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveTokenDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_tokens__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_tokens__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # TransferOwnershipEvents (historical)
    # Gets transferOwnershipEvents.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveTransferOwnershipEventDTO>]
    def curve_get_transfer_ownership_events__historical(opts = {})
      data, _status_code, _headers = curve_get_transfer_ownership_events__historical_with_http_info(opts)
      data
    end

    # TransferOwnershipEvents (historical)
    # Gets transferOwnershipEvents.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveTransferOwnershipEventDTO>, Integer, Hash)>] Array<CurveTransferOwnershipEventDTO> data, response status code and response headers
    def curve_get_transfer_ownership_events__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_transfer_ownership_events__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/transferOwnershipEvents/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveTransferOwnershipEventDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_transfer_ownership_events__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_transfer_ownership_events__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # UnderlyingCoins (historical)
    # Gets underlyingCoins.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Equals to: (pool_id)-(coin_index).
    # @option opts [String] :pool 
    # @return [Array<CurveUnderlyingCoinDTO>]
    def curve_get_underlying_coins__historical(opts = {})
      data, _status_code, _headers = curve_get_underlying_coins__historical_with_http_info(opts)
      data
    end

    # UnderlyingCoins (historical)
    # Gets underlyingCoins.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Equals to: (pool_id)-(coin_index).
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveUnderlyingCoinDTO>, Integer, Hash)>] Array<CurveUnderlyingCoinDTO> data, response status code and response headers
    def curve_get_underlying_coins__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_underlying_coins__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/underlyingCoins/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveUnderlyingCoinDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_underlying_coins__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_underlying_coins__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # VotingApps (historical)
    # Gets votingApps.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id App address.
    # @option opts [String] :address 
    # @return [Array<CurveVotingAppDTO>]
    def curve_get_voting_apps__historical(opts = {})
      data, _status_code, _headers = curve_get_voting_apps__historical_with_http_info(opts)
      data
    end

    # VotingApps (historical)
    # Gets votingApps.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id App address.
    # @option opts [String] :address 
    # @return [Array<(Array<CurveVotingAppDTO>, Integer, Hash)>] Array<CurveVotingAppDTO> data, response status code and response headers
    def curve_get_voting_apps__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_voting_apps__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/votingApps/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'address'] = opts[:'address'] if !opts[:'address'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveVotingAppDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_voting_apps__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_voting_apps__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # WeeklyVolumes (historical)
    # Gets weeklyVolumes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<CurveWeeklyVolumeDTO>]
    def curve_get_weekly_volumes__historical(opts = {})
      data, _status_code, _headers = curve_get_weekly_volumes__historical_with_http_info(opts)
      data
    end

    # WeeklyVolumes (historical)
    # Gets weeklyVolumes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id 
    # @option opts [String] :pool 
    # @return [Array<(Array<CurveWeeklyVolumeDTO>, Integer, Hash)>] Array<CurveWeeklyVolumeDTO> data, response status code and response headers
    def curve_get_weekly_volumes__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_get_weekly_volumes__historical ...'
      end
      # resource path
      local_var_path = '/dapps/curve/weeklyVolumes/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool'] = opts[:'pool'] if !opts[:'pool'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveWeeklyVolumeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_get_weekly_volumes__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_get_weekly_volumes__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # HourlyVolumes (current)
    # Gets hourlyVolumes.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveHourlyVolumeDTO>]
    def curve_hourly_volumes__current(opts = {})
      data, _status_code, _headers = curve_hourly_volumes__current_with_http_info(opts)
      data
    end

    # HourlyVolumes (current)
    # Gets hourlyVolumes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveHourlyVolumeDTO>, Integer, Hash)>] Array<CurveHourlyVolumeDTO> data, response status code and response headers
    def curve_hourly_volumes__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_hourly_volumes__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/hourlyVolumes/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveHourlyVolumeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_hourly_volumes__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_hourly_volumes__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # LpTokens (current)
    # Gets lpTokens.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveLpTokenDTO>]
    def curve_lp_tokens__current(opts = {})
      data, _status_code, _headers = curve_lp_tokens__current_with_http_info(opts)
      data
    end

    # LpTokens (current)
    # Gets lpTokens.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveLpTokenDTO>, Integer, Hash)>] Array<CurveLpTokenDTO> data, response status code and response headers
    def curve_lp_tokens__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_lp_tokens__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/lpTokens/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveLpTokenDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_lp_tokens__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_lp_tokens__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pools (current)
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Pool address.
    # @return [Array<CurvePoolDTO>]
    def curve_pools__current(opts = {})
      data, _status_code, _headers = curve_pools__current_with_http_info(opts)
      data
    end

    # Pools (current)
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Pool address.
    # @return [Array<(Array<CurvePoolDTO>, Integer, Hash)>] Array<CurvePoolDTO> data, response status code and response headers
    def curve_pools__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_pools__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/pools/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurvePoolDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_pools__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_pools__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ProposalVotes (current)
    # Gets proposalVotes.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveProposalVoteDTO>]
    def curve_proposal_votes__current(opts = {})
      data, _status_code, _headers = curve_proposal_votes__current_with_http_info(opts)
      data
    end

    # ProposalVotes (current)
    # Gets proposalVotes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveProposalVoteDTO>, Integer, Hash)>] Array<CurveProposalVoteDTO> data, response status code and response headers
    def curve_proposal_votes__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_proposal_votes__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/proposalVotes/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveProposalVoteDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_proposal_votes__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_proposal_votes__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Proposals (current)
    # Gets proposals.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveProposalDTO>]
    def curve_proposals__current(opts = {})
      data, _status_code, _headers = curve_proposals__current_with_http_info(opts)
      data
    end

    # Proposals (current)
    # Gets proposals.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveProposalDTO>, Integer, Hash)>] Array<CurveProposalDTO> data, response status code and response headers
    def curve_proposals__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_proposals__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/proposals/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveProposalDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_proposals__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_proposals__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # RemoveLiquidityEvents (current)
    # Gets removeLiquidityEvents.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveRemoveLiquidityEventDTO>]
    def curve_remove_liquidity_events__current(opts = {})
      data, _status_code, _headers = curve_remove_liquidity_events__current_with_http_info(opts)
      data
    end

    # RemoveLiquidityEvents (current)
    # Gets removeLiquidityEvents.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveRemoveLiquidityEventDTO>, Integer, Hash)>] Array<CurveRemoveLiquidityEventDTO> data, response status code and response headers
    def curve_remove_liquidity_events__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_remove_liquidity_events__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/removeLiquidityEvents/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveRemoveLiquidityEventDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_remove_liquidity_events__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_remove_liquidity_events__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # RemoveLiquidityOneEvents (current)
    # Gets removeLiquidityOneEvents.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveRemoveLiquidityOneEventDTO>]
    def curve_remove_liquidity_one_events__current(opts = {})
      data, _status_code, _headers = curve_remove_liquidity_one_events__current_with_http_info(opts)
      data
    end

    # RemoveLiquidityOneEvents (current)
    # Gets removeLiquidityOneEvents.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveRemoveLiquidityOneEventDTO>, Integer, Hash)>] Array<CurveRemoveLiquidityOneEventDTO> data, response status code and response headers
    def curve_remove_liquidity_one_events__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_remove_liquidity_one_events__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/removeLiquidityOneEvents/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveRemoveLiquidityOneEventDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_remove_liquidity_one_events__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_remove_liquidity_one_events__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # SystemStates (current)
    # Gets systemStates.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveSystemStateDTO>]
    def curve_system_states__current(opts = {})
      data, _status_code, _headers = curve_system_states__current_with_http_info(opts)
      data
    end

    # SystemStates (current)
    # Gets systemStates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveSystemStateDTO>, Integer, Hash)>] Array<CurveSystemStateDTO> data, response status code and response headers
    def curve_system_states__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_system_states__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/systemStates/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveSystemStateDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_system_states__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_system_states__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tokens (current)
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveTokenDTO>]
    def curve_tokens__current(opts = {})
      data, _status_code, _headers = curve_tokens__current_with_http_info(opts)
      data
    end

    # Tokens (current)
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveTokenDTO>, Integer, Hash)>] Array<CurveTokenDTO> data, response status code and response headers
    def curve_tokens__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_tokens__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/tokens/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveTokenDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_tokens__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_tokens__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # TransferOwnershipEvents (current)
    # Gets transferOwnershipEvents.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveTransferOwnershipEventDTO>]
    def curve_transfer_ownership_events__current(opts = {})
      data, _status_code, _headers = curve_transfer_ownership_events__current_with_http_info(opts)
      data
    end

    # TransferOwnershipEvents (current)
    # Gets transferOwnershipEvents.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveTransferOwnershipEventDTO>, Integer, Hash)>] Array<CurveTransferOwnershipEventDTO> data, response status code and response headers
    def curve_transfer_ownership_events__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_transfer_ownership_events__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/transferOwnershipEvents/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveTransferOwnershipEventDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_transfer_ownership_events__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_transfer_ownership_events__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # UnderlyingCoins (current)
    # Gets underlyingCoins.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveUnderlyingCoinDTO>]
    def curve_underlying_coins__current(opts = {})
      data, _status_code, _headers = curve_underlying_coins__current_with_http_info(opts)
      data
    end

    # UnderlyingCoins (current)
    # Gets underlyingCoins.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveUnderlyingCoinDTO>, Integer, Hash)>] Array<CurveUnderlyingCoinDTO> data, response status code and response headers
    def curve_underlying_coins__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_underlying_coins__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/underlyingCoins/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveUnderlyingCoinDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_underlying_coins__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_underlying_coins__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # VotingApps (current)
    # Gets votingApps.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveVotingAppDTO>]
    def curve_voting_apps__current(opts = {})
      data, _status_code, _headers = curve_voting_apps__current_with_http_info(opts)
      data
    end

    # VotingApps (current)
    # Gets votingApps.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveVotingAppDTO>, Integer, Hash)>] Array<CurveVotingAppDTO> data, response status code and response headers
    def curve_voting_apps__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_voting_apps__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/votingApps/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveVotingAppDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_voting_apps__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_voting_apps__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # WeeklyVolumes (current)
    # Gets weeklyVolumes.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveWeeklyVolumeDTO>]
    def curve_weekly_volumes__current(opts = {})
      data, _status_code, _headers = curve_weekly_volumes__current_with_http_info(opts)
      data
    end

    # WeeklyVolumes (current)
    # Gets weeklyVolumes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveWeeklyVolumeDTO>, Integer, Hash)>] Array<CurveWeeklyVolumeDTO> data, response status code and response headers
    def curve_weekly_volumes__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CurveApi.curve_weekly_volumes__current ...'
      end
      # resource path
      local_var_path = '/dapps/curve/weeklyVolumes/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveWeeklyVolumeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CurveApi.curve_weekly_volumes__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CurveApi#curve_weekly_volumes__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
