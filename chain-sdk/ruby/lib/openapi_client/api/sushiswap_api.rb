=begin
#OnChain API

# This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module OpenapiClient
  class SushiswapApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Exchanges (current) ðŸ”¥
    # Gets exchanges.
    # @param [Hash] opts the optional parameters
    # @return [Array<CurveExchangeDTO>]
    def curve_get_exchanges__current(opts = {})
      data, _status_code, _headers = curve_get_exchanges__current_with_http_info(opts)
      data
    end

    # Exchanges (current) ðŸ”¥
    # Gets exchanges.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CurveExchangeDTO>, Integer, Hash)>] Array<CurveExchangeDTO> data, response status code and response headers
    def curve_get_exchanges__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.curve_get_exchanges__current ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/exchanges/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CurveExchangeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.curve_get_exchanges__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#curve_get_exchanges__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trades (current) ðŸ”¥
    # Gets trades.
    # @param [Hash] opts the optional parameters
    # @return [Array<DexTradeDTO>]
    def dex_get_trades__current(opts = {})
      data, _status_code, _headers = dex_get_trades__current_with_http_info(opts)
      data
    end

    # Trades (current) ðŸ”¥
    # Gets trades.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DexTradeDTO>, Integer, Hash)>] Array<DexTradeDTO> data, response status code and response headers
    def dex_get_trades__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.dex_get_trades__current ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/trades/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DexTradeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.dex_get_trades__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#dex_get_trades__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bundles (historical) ðŸ”¥
    # Gets bundles.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Hardcoded to &#39;1&#39;.
    # @return [Array<SushiswapBundleDTO>]
    def sushiswap_get_bundles__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_bundles__historical_with_http_info(opts)
      data
    end

    # Bundles (historical) ðŸ”¥
    # Gets bundles.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Hardcoded to &#39;1&#39;.
    # @return [Array<(Array<SushiswapBundleDTO>, Integer, Hash)>] Array<SushiswapBundleDTO> data, response status code and response headers
    def sushiswap_get_bundles__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_bundles__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/bundles/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapBundleDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_bundles__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_bundles__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Burns (historical) ðŸ”¥
    # Gets burns.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :pair 
    # @return [Array<SushiswapBurnDTO>]
    def sushiswap_get_burns__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_burns__historical_with_http_info(opts)
      data
    end

    # Burns (historical) ðŸ”¥
    # Gets burns.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :pair 
    # @return [Array<(Array<SushiswapBurnDTO>, Integer, Hash)>] Array<SushiswapBurnDTO> data, response status code and response headers
    def sushiswap_get_burns__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_burns__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/burns/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pair'] = opts[:'pair'] if !opts[:'pair'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapBurnDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_burns__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_burns__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DayDatas (historical) ðŸ”¥
    # Gets daydatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Unix timestamp for start of day / 86400 giving a unique day index.
    # @return [Array<SushiswapDayDataDTO>]
    def sushiswap_get_day_datas__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_day_datas__historical_with_http_info(opts)
      data
    end

    # DayDatas (historical) ðŸ”¥
    # Gets daydatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Unix timestamp for start of day / 86400 giving a unique day index.
    # @return [Array<(Array<SushiswapDayDataDTO>, Integer, Hash)>] Array<SushiswapDayDataDTO> data, response status code and response headers
    def sushiswap_get_day_datas__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_day_datas__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/daydatas/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapDayDataDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_day_datas__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_day_datas__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Factorys (historical) ðŸ”¥
    # Gets factorys.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Factory address.
    # @return [Array<SushiswapFactoryDTO>]
    def sushiswap_get_factorys__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_factorys__historical_with_http_info(opts)
      data
    end

    # Factorys (historical) ðŸ”¥
    # Gets factorys.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Factory address.
    # @return [Array<(Array<SushiswapFactoryDTO>, Integer, Hash)>] Array<SushiswapFactoryDTO> data, response status code and response headers
    def sushiswap_get_factorys__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_factorys__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/factorys/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapFactoryDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_factorys__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_factorys__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # HourDatas (historical) ðŸ”¥
    # Gets hourdatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Start of hour timestamp.
    # @return [Array<SushiswapHourDataDTO>]
    def sushiswap_get_hour_datas__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_hour_datas__historical_with_http_info(opts)
      data
    end

    # HourDatas (historical) ðŸ”¥
    # Gets hourdatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Start of hour timestamp.
    # @return [Array<(Array<SushiswapHourDataDTO>, Integer, Hash)>] Array<SushiswapHourDataDTO> data, response status code and response headers
    def sushiswap_get_hour_datas__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_hour_datas__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/hourdatas/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapHourDataDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_hour_datas__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_hour_datas__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # LiquidityPositionSnapshots (historical) ðŸ”¥
    # Gets liquiditypositionsnapshots.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :user 
    # @option opts [String] :pair 
    # @return [Array<SushiswapLiquidityPositionSnapshotDTO>]
    def sushiswap_get_liquidity_position_snapshots__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_liquidity_position_snapshots__historical_with_http_info(opts)
      data
    end

    # LiquidityPositionSnapshots (historical) ðŸ”¥
    # Gets liquiditypositionsnapshots.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :user 
    # @option opts [String] :pair 
    # @return [Array<(Array<SushiswapLiquidityPositionSnapshotDTO>, Integer, Hash)>] Array<SushiswapLiquidityPositionSnapshotDTO> data, response status code and response headers
    def sushiswap_get_liquidity_position_snapshots__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_liquidity_position_snapshots__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/liquiditypositionsnapshots/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'pair'] = opts[:'pair'] if !opts[:'pair'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapLiquidityPositionSnapshotDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_liquidity_position_snapshots__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_liquidity_position_snapshots__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # LiquidityPositions (historical) ðŸ”¥
    # Gets liquiditypositions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :user 
    # @option opts [String] :pair 
    # @return [Array<SushiswapLiquidityPositionDTO>]
    def sushiswap_get_liquidity_positions__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_liquidity_positions__historical_with_http_info(opts)
      data
    end

    # LiquidityPositions (historical) ðŸ”¥
    # Gets liquiditypositions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :user 
    # @option opts [String] :pair 
    # @return [Array<(Array<SushiswapLiquidityPositionDTO>, Integer, Hash)>] Array<SushiswapLiquidityPositionDTO> data, response status code and response headers
    def sushiswap_get_liquidity_positions__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_liquidity_positions__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/liquiditypositions/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'pair'] = opts[:'pair'] if !opts[:'pair'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapLiquidityPositionDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_liquidity_positions__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_liquidity_positions__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mints (historical) ðŸ”¥
    # Gets mints.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :pair 
    # @return [Array<SushiswapMintDTO>]
    def sushiswap_get_mints__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_mints__historical_with_http_info(opts)
      data
    end

    # Mints (historical) ðŸ”¥
    # Gets mints.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :pair 
    # @return [Array<(Array<SushiswapMintDTO>, Integer, Hash)>] Array<SushiswapMintDTO> data, response status code and response headers
    def sushiswap_get_mints__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_mints__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/mints/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pair'] = opts[:'pair'] if !opts[:'pair'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapMintDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_mints__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_mints__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PairDayDatas (historical) ðŸ”¥
    # Gets pairdaydatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :pair 
    # @option opts [String] :token_0 
    # @option opts [String] :token_1 
    # @return [Array<SushiswapPairDayDataDTO>]
    def sushiswap_get_pair_day_datas__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_pair_day_datas__historical_with_http_info(opts)
      data
    end

    # PairDayDatas (historical) ðŸ”¥
    # Gets pairdaydatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :pair 
    # @option opts [String] :token_0 
    # @option opts [String] :token_1 
    # @return [Array<(Array<SushiswapPairDayDataDTO>, Integer, Hash)>] Array<SushiswapPairDayDataDTO> data, response status code and response headers
    def sushiswap_get_pair_day_datas__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_pair_day_datas__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/pairdaydatas/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pair'] = opts[:'pair'] if !opts[:'pair'].nil?
      query_params[:'token_0'] = opts[:'token_0'] if !opts[:'token_0'].nil?
      query_params[:'token_1'] = opts[:'token_1'] if !opts[:'token_1'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapPairDayDataDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_pair_day_datas__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_pair_day_datas__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # PairHourDatas (historical) ðŸ”¥
    # Gets pairhourdatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :pair 
    # @return [Array<SushiswapPairHourDataDTO>]
    def sushiswap_get_pair_hour_datas__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_pair_hour_datas__historical_with_http_info(opts)
      data
    end

    # PairHourDatas (historical) ðŸ”¥
    # Gets pairhourdatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :pair 
    # @return [Array<(Array<SushiswapPairHourDataDTO>, Integer, Hash)>] Array<SushiswapPairHourDataDTO> data, response status code and response headers
    def sushiswap_get_pair_hour_datas__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_pair_hour_datas__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/pairhourdatas/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pair'] = opts[:'pair'] if !opts[:'pair'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapPairHourDataDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_pair_hour_datas__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_pair_hour_datas__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pairs (historical) ðŸ”¥
    # Gets pairs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :name 
    # @option opts [String] :token_0 
    # @option opts [String] :token_1 
    # @return [Array<SushiswapPairDTO>]
    def sushiswap_get_pairs__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_pairs__historical_with_http_info(opts)
      data
    end

    # Pairs (historical) ðŸ”¥
    # Gets pairs.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block 
    # @option opts [Integer] :end_block 
    # @option opts [Time] :start_date 
    # @option opts [Time] :end_date 
    # @option opts [String] :id 
    # @option opts [String] :name 
    # @option opts [String] :token_0 
    # @option opts [String] :token_1 
    # @return [Array<(Array<SushiswapPairDTO>, Integer, Hash)>] Array<SushiswapPairDTO> data, response status code and response headers
    def sushiswap_get_pairs__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_pairs__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/pairs/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'token_0'] = opts[:'token_0'] if !opts[:'token_0'].nil?
      query_params[:'token_1'] = opts[:'token_1'] if !opts[:'token_1'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapPairDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_pairs__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_pairs__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pools (current) ðŸ”¥
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @return [Array<SushiswapPairDTO>]
    def sushiswap_get_pools__current(opts = {})
      data, _status_code, _headers = sushiswap_get_pools__current_with_http_info(opts)
      data
    end

    # Pools (current) ðŸ”¥
    # Gets pools.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SushiswapPairDTO>, Integer, Hash)>] Array<SushiswapPairDTO> data, response status code and response headers
    def sushiswap_get_pools__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_pools__current ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/pools/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapPairDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_pools__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_pools__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Swaps (current) ðŸ”¥
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @return [Array<SushiswapSwapDTO>]
    def sushiswap_get_swaps__current(opts = {})
      data, _status_code, _headers = sushiswap_get_swaps__current_with_http_info(opts)
      data
    end

    # Swaps (current) ðŸ”¥
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SushiswapSwapDTO>, Integer, Hash)>] Array<SushiswapSwapDTO> data, response status code and response headers
    def sushiswap_get_swaps__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_swaps__current ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/swaps/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapSwapDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_swaps__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_swaps__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Swaps (historical) ðŸ”¥
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Transaction hash plus index in Transaction swap array.
    # @option opts [String] :pair Reference to pair.
    # @return [Array<SushiswapSwapDTO>]
    def sushiswap_get_swaps__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_swaps__historical_with_http_info(opts)
      data
    end

    # Swaps (historical) ðŸ”¥
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Transaction hash plus index in Transaction swap array.
    # @option opts [String] :pair Reference to pair.
    # @return [Array<(Array<SushiswapSwapDTO>, Integer, Hash)>] Array<SushiswapSwapDTO> data, response status code and response headers
    def sushiswap_get_swaps__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_swaps__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/swaps/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pair'] = opts[:'pair'] if !opts[:'pair'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapSwapDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_swaps__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_swaps__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # TokenDayDatas (historical) ðŸ”¥
    # Gets tokendaydatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Identifier, day start timestamp in unix / 86400.
    # @return [Array<SushiswapTokenDayDataDTO>]
    def sushiswap_get_token_day_datas__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_token_day_datas__historical_with_http_info(opts)
      data
    end

    # TokenDayDatas (historical) ðŸ”¥
    # Gets tokendaydatas.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Identifier, day start timestamp in unix / 86400.
    # @return [Array<(Array<SushiswapTokenDayDataDTO>, Integer, Hash)>] Array<SushiswapTokenDayDataDTO> data, response status code and response headers
    def sushiswap_get_token_day_datas__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_token_day_datas__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/tokendaydatas/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapTokenDayDataDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_token_day_datas__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_token_day_datas__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tokens (current) ðŸ”¥
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @return [Array<SushiswapTokenDTO>]
    def sushiswap_get_tokens__current(opts = {})
      data, _status_code, _headers = sushiswap_get_tokens__current_with_http_info(opts)
      data
    end

    # Tokens (current) ðŸ”¥
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SushiswapTokenDTO>, Integer, Hash)>] Array<SushiswapTokenDTO> data, response status code and response headers
    def sushiswap_get_tokens__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_tokens__current ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/tokens/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapTokenDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_tokens__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_tokens__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tokens (historical) ðŸ”¥
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Token address.
    # @option opts [String] :symbol Token symbol.
    # @option opts [String] :name Token name.
    # @return [Array<SushiswapTokenDTO>]
    def sushiswap_get_tokens__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_tokens__historical_with_http_info(opts)
      data
    end

    # Tokens (historical) ðŸ”¥
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Token address.
    # @option opts [String] :symbol Token symbol.
    # @option opts [String] :name Token name.
    # @return [Array<(Array<SushiswapTokenDTO>, Integer, Hash)>] Array<SushiswapTokenDTO> data, response status code and response headers
    def sushiswap_get_tokens__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_tokens__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/tokens/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'symbol'] = opts[:'symbol'] if !opts[:'symbol'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapTokenDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_tokens__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_tokens__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Transactions (historical) ðŸ”¥
    # Gets transactions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Ethereum transaction hash.
    # @return [Array<SushiswapTransactionDTO>]
    def sushiswap_get_transactions__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_transactions__historical_with_http_info(opts)
      data
    end

    # Transactions (historical) ðŸ”¥
    # Gets transactions.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id Ethereum transaction hash.
    # @return [Array<(Array<SushiswapTransactionDTO>, Integer, Hash)>] Array<SushiswapTransactionDTO> data, response status code and response headers
    def sushiswap_get_transactions__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_transactions__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/transactions/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapTransactionDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_transactions__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_transactions__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users (historical) ðŸ”¥
    # Gets users.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id User address.
    # @return [Array<SushiswapUserDTO>]
    def sushiswap_get_users__historical(opts = {})
      data, _status_code, _headers = sushiswap_get_users__historical_with_http_info(opts)
      data
    end

    # Users (historical) ðŸ”¥
    # Gets users.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
    # @option opts [Integer] :end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
    # @option opts [Time] :start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
    # @option opts [Time] :end_date The end date of timeframe.
    # @option opts [String] :id User address.
    # @return [Array<(Array<SushiswapUserDTO>, Integer, Hash)>] Array<SushiswapUserDTO> data, response status code and response headers
    def sushiswap_get_users__historical_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SushiswapApi.sushiswap_get_users__historical ...'
      end
      # resource path
      local_var_path = '/dapps/sushiswap/users/historical'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startBlock'] = opts[:'start_block'] if !opts[:'start_block'].nil?
      query_params[:'endBlock'] = opts[:'end_block'] if !opts[:'end_block'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SushiswapUserDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SushiswapApi.sushiswap_get_users__historical",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SushiswapApi#sushiswap_get_users__historical\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
