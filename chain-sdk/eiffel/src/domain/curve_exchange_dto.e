note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CURVE_EXCHANGE_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    id: detachable STRING_32
      -- 
    pool: detachable STRING_32
      -- 
    buyer: detachable STRING_32
      -- 
    receiver: detachable STRING_32
      -- 
    token_sold: detachable STRING_32
      -- 
    token_bought: detachable STRING_32
      -- 
    amount_sold: detachable STRING_32
      -- 
    amount_bought: detachable STRING_32
      -- 
    block: detachable STRING_32
      -- 
    timestamp: detachable STRING_32
      -- 
    transaction: detachable STRING_32
      -- 
 	vid: INTEGER_64
    	 -- 
 	evaluated_price: REAL_64
    	 
 	evaluated_amount: REAL_64
    	 
    evaluated_aggressor: detachable TRANSACTIONS_E_TRADE_AGGRESSIVE_SIDE
      
    pool_id: detachable STRING_32
      
    transaction_id: detachable STRING_32
      

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_pool (a_name: like pool)
        -- Set 'pool' with 'a_name'.
      do
        pool := a_name
      ensure
        pool_set: pool = a_name
      end

    set_buyer (a_name: like buyer)
        -- Set 'buyer' with 'a_name'.
      do
        buyer := a_name
      ensure
        buyer_set: buyer = a_name
      end

    set_receiver (a_name: like receiver)
        -- Set 'receiver' with 'a_name'.
      do
        receiver := a_name
      ensure
        receiver_set: receiver = a_name
      end

    set_token_sold (a_name: like token_sold)
        -- Set 'token_sold' with 'a_name'.
      do
        token_sold := a_name
      ensure
        token_sold_set: token_sold = a_name
      end

    set_token_bought (a_name: like token_bought)
        -- Set 'token_bought' with 'a_name'.
      do
        token_bought := a_name
      ensure
        token_bought_set: token_bought = a_name
      end

    set_amount_sold (a_name: like amount_sold)
        -- Set 'amount_sold' with 'a_name'.
      do
        amount_sold := a_name
      ensure
        amount_sold_set: amount_sold = a_name
      end

    set_amount_bought (a_name: like amount_bought)
        -- Set 'amount_bought' with 'a_name'.
      do
        amount_bought := a_name
      ensure
        amount_bought_set: amount_bought = a_name
      end

    set_block (a_name: like block)
        -- Set 'block' with 'a_name'.
      do
        block := a_name
      ensure
        block_set: block = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_transaction (a_name: like transaction)
        -- Set 'transaction' with 'a_name'.
      do
        transaction := a_name
      ensure
        transaction_set: transaction = a_name
      end

    set_vid (a_name: like vid)
        -- Set 'vid' with 'a_name'.
      do
        vid := a_name
      ensure
        vid_set: vid = a_name
      end

    set_evaluated_price (a_name: like evaluated_price)
        -- Set 'evaluated_price' with 'a_name'.
      do
        evaluated_price := a_name
      ensure
        evaluated_price_set: evaluated_price = a_name
      end

    set_evaluated_amount (a_name: like evaluated_amount)
        -- Set 'evaluated_amount' with 'a_name'.
      do
        evaluated_amount := a_name
      ensure
        evaluated_amount_set: evaluated_amount = a_name
      end

    set_evaluated_aggressor (a_name: like evaluated_aggressor)
        -- Set 'evaluated_aggressor' with 'a_name'.
      do
        evaluated_aggressor := a_name
      ensure
        evaluated_aggressor_set: evaluated_aggressor = a_name
      end

    set_pool_id (a_name: like pool_id)
        -- Set 'pool_id' with 'a_name'.
      do
        pool_id := a_name
      ensure
        pool_id_set: pool_id = a_name
      end

    set_transaction_id (a_name: like transaction_id)
        -- Set 'transaction_id' with 'a_name'.
      do
        transaction_id := a_name
      ensure
        transaction_id_set: transaction_id = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CURVE_EXCHANGE_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached pool as l_pool then
          Result.append ("%Npool:")
          Result.append (l_pool.out)
          Result.append ("%N")
        end
        if attached buyer as l_buyer then
          Result.append ("%Nbuyer:")
          Result.append (l_buyer.out)
          Result.append ("%N")
        end
        if attached receiver as l_receiver then
          Result.append ("%Nreceiver:")
          Result.append (l_receiver.out)
          Result.append ("%N")
        end
        if attached token_sold as l_token_sold then
          Result.append ("%Ntoken_sold:")
          Result.append (l_token_sold.out)
          Result.append ("%N")
        end
        if attached token_bought as l_token_bought then
          Result.append ("%Ntoken_bought:")
          Result.append (l_token_bought.out)
          Result.append ("%N")
        end
        if attached amount_sold as l_amount_sold then
          Result.append ("%Namount_sold:")
          Result.append (l_amount_sold.out)
          Result.append ("%N")
        end
        if attached amount_bought as l_amount_bought then
          Result.append ("%Namount_bought:")
          Result.append (l_amount_bought.out)
          Result.append ("%N")
        end
        if attached block as l_block then
          Result.append ("%Nblock:")
          Result.append (l_block.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached transaction as l_transaction then
          Result.append ("%Ntransaction:")
          Result.append (l_transaction.out)
          Result.append ("%N")
        end
        if attached vid as l_vid then
          Result.append ("%Nvid:")
          Result.append (l_vid.out)
          Result.append ("%N")
        end
        if attached evaluated_price as l_evaluated_price then
          Result.append ("%Nevaluated_price:")
          Result.append (l_evaluated_price.out)
          Result.append ("%N")
        end
        if attached evaluated_amount as l_evaluated_amount then
          Result.append ("%Nevaluated_amount:")
          Result.append (l_evaluated_amount.out)
          Result.append ("%N")
        end
        if attached evaluated_aggressor as l_evaluated_aggressor then
          Result.append ("%Nevaluated_aggressor:")
          Result.append (l_evaluated_aggressor.out)
          Result.append ("%N")
        end
        if attached pool_id as l_pool_id then
          Result.append ("%Npool_id:")
          Result.append (l_pool_id.out)
          Result.append ("%N")
        end
        if attached transaction_id as l_transaction_id then
          Result.append ("%Ntransaction_id:")
          Result.append (l_transaction_id.out)
          Result.append ("%N")
        end
      end
end

