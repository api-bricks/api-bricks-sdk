note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class COW_ORDER_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    id: detachable STRING_32
      -- User's address.
    owner: detachable STRING_32
      -- User's address.
    trades_timestamp: detachable STRING_32
      -- Block's timestamp on trade event.
    invalidate_timestamp: detachable STRING_32
      -- Block's timestamp on invalidate event.
    presign_timestamp: detachable STRING_32
      -- Block's timestamp on presign event.
 	is_signed: BOOLEAN
    	 -- Determines whether order is signed.
 	is_valid: BOOLEAN
    	 -- Determines whether order is valid.
 	vid: INTEGER_64
    	 -- 

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_owner (a_name: like owner)
        -- Set 'owner' with 'a_name'.
      do
        owner := a_name
      ensure
        owner_set: owner = a_name
      end

    set_trades_timestamp (a_name: like trades_timestamp)
        -- Set 'trades_timestamp' with 'a_name'.
      do
        trades_timestamp := a_name
      ensure
        trades_timestamp_set: trades_timestamp = a_name
      end

    set_invalidate_timestamp (a_name: like invalidate_timestamp)
        -- Set 'invalidate_timestamp' with 'a_name'.
      do
        invalidate_timestamp := a_name
      ensure
        invalidate_timestamp_set: invalidate_timestamp = a_name
      end

    set_presign_timestamp (a_name: like presign_timestamp)
        -- Set 'presign_timestamp' with 'a_name'.
      do
        presign_timestamp := a_name
      ensure
        presign_timestamp_set: presign_timestamp = a_name
      end

    set_is_signed (a_name: like is_signed)
        -- Set 'is_signed' with 'a_name'.
      do
        is_signed := a_name
      ensure
        is_signed_set: is_signed = a_name
      end

    set_is_valid (a_name: like is_valid)
        -- Set 'is_valid' with 'a_name'.
      do
        is_valid := a_name
      ensure
        is_valid_set: is_valid = a_name
      end

    set_vid (a_name: like vid)
        -- Set 'vid' with 'a_name'.
      do
        vid := a_name
      ensure
        vid_set: vid = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass COW_ORDER_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached owner as l_owner then
          Result.append ("%Nowner:")
          Result.append (l_owner.out)
          Result.append ("%N")
        end
        if attached trades_timestamp as l_trades_timestamp then
          Result.append ("%Ntrades_timestamp:")
          Result.append (l_trades_timestamp.out)
          Result.append ("%N")
        end
        if attached invalidate_timestamp as l_invalidate_timestamp then
          Result.append ("%Ninvalidate_timestamp:")
          Result.append (l_invalidate_timestamp.out)
          Result.append ("%N")
        end
        if attached presign_timestamp as l_presign_timestamp then
          Result.append ("%Npresign_timestamp:")
          Result.append (l_presign_timestamp.out)
          Result.append ("%N")
        end
        if attached is_signed as l_is_signed then
          Result.append ("%Nis_signed:")
          Result.append (l_is_signed.out)
          Result.append ("%N")
        end
        if attached is_valid as l_is_valid then
          Result.append ("%Nis_valid:")
          Result.append (l_is_valid.out)
          Result.append ("%N")
        end
        if attached vid as l_vid then
          Result.append ("%Nvid:")
          Result.append (l_vid.out)
          Result.append ("%N")
        end
      end
end

