note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class SUSHISWAP_BURN_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    id: detachable STRING_32
      -- Identifier, format: (transaction id):(transaction.burns.length).
    transaction: detachable STRING_32
      -- Reference to the transaction Burn was included in.
    timestamp: detachable STRING_32
      -- Timestamp of Burn, used to sort recent liquidity removals.
    pair: detachable STRING_32
      -- Reference to pair.
    liquidity: detachable STRING_32
      -- Amount of liquidity tokens burned.
    sender: detachable STRING_32
      -- Address that initiated the liquidity removal.
    amount_0: detachable STRING_32
      -- Amount of token0 removed.
    amount_1: detachable STRING_32
      -- Amount of token1 removed.
    to: detachable STRING_32
      -- Recipient of tokens.
    log_index: detachable STRING_32
      -- Index in the transaction event was emitted.
    amount_usd: detachable STRING_32
      -- Derived amount based on available prices of tokens.
 	complete: BOOLEAN
    	 -- 
    fee_to: detachable STRING_32
      -- Address of fee recipient (if fee is on).
    fee_liquidity: detachable STRING_32
      -- Amount of tokens sent to fee recipient (if fee is on).
 	vid: INTEGER_64
    	 -- 

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_transaction (a_name: like transaction)
        -- Set 'transaction' with 'a_name'.
      do
        transaction := a_name
      ensure
        transaction_set: transaction = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_pair (a_name: like pair)
        -- Set 'pair' with 'a_name'.
      do
        pair := a_name
      ensure
        pair_set: pair = a_name
      end

    set_liquidity (a_name: like liquidity)
        -- Set 'liquidity' with 'a_name'.
      do
        liquidity := a_name
      ensure
        liquidity_set: liquidity = a_name
      end

    set_sender (a_name: like sender)
        -- Set 'sender' with 'a_name'.
      do
        sender := a_name
      ensure
        sender_set: sender = a_name
      end

    set_amount_0 (a_name: like amount_0)
        -- Set 'amount_0' with 'a_name'.
      do
        amount_0 := a_name
      ensure
        amount_0_set: amount_0 = a_name
      end

    set_amount_1 (a_name: like amount_1)
        -- Set 'amount_1' with 'a_name'.
      do
        amount_1 := a_name
      ensure
        amount_1_set: amount_1 = a_name
      end

    set_to (a_name: like to)
        -- Set 'to' with 'a_name'.
      do
        to := a_name
      ensure
        to_set: to = a_name
      end

    set_log_index (a_name: like log_index)
        -- Set 'log_index' with 'a_name'.
      do
        log_index := a_name
      ensure
        log_index_set: log_index = a_name
      end

    set_amount_usd (a_name: like amount_usd)
        -- Set 'amount_usd' with 'a_name'.
      do
        amount_usd := a_name
      ensure
        amount_usd_set: amount_usd = a_name
      end

    set_complete (a_name: like complete)
        -- Set 'complete' with 'a_name'.
      do
        complete := a_name
      ensure
        complete_set: complete = a_name
      end

    set_fee_to (a_name: like fee_to)
        -- Set 'fee_to' with 'a_name'.
      do
        fee_to := a_name
      ensure
        fee_to_set: fee_to = a_name
      end

    set_fee_liquidity (a_name: like fee_liquidity)
        -- Set 'fee_liquidity' with 'a_name'.
      do
        fee_liquidity := a_name
      ensure
        fee_liquidity_set: fee_liquidity = a_name
      end

    set_vid (a_name: like vid)
        -- Set 'vid' with 'a_name'.
      do
        vid := a_name
      ensure
        vid_set: vid = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass SUSHISWAP_BURN_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached transaction as l_transaction then
          Result.append ("%Ntransaction:")
          Result.append (l_transaction.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached pair as l_pair then
          Result.append ("%Npair:")
          Result.append (l_pair.out)
          Result.append ("%N")
        end
        if attached liquidity as l_liquidity then
          Result.append ("%Nliquidity:")
          Result.append (l_liquidity.out)
          Result.append ("%N")
        end
        if attached sender as l_sender then
          Result.append ("%Nsender:")
          Result.append (l_sender.out)
          Result.append ("%N")
        end
        if attached amount_0 as l_amount_0 then
          Result.append ("%Namount_0:")
          Result.append (l_amount_0.out)
          Result.append ("%N")
        end
        if attached amount_1 as l_amount_1 then
          Result.append ("%Namount_1:")
          Result.append (l_amount_1.out)
          Result.append ("%N")
        end
        if attached to as l_to then
          Result.append ("%Nto:")
          Result.append (l_to.out)
          Result.append ("%N")
        end
        if attached log_index as l_log_index then
          Result.append ("%Nlog_index:")
          Result.append (l_log_index.out)
          Result.append ("%N")
        end
        if attached amount_usd as l_amount_usd then
          Result.append ("%Namount_usd:")
          Result.append (l_amount_usd.out)
          Result.append ("%N")
        end
        if attached complete as l_complete then
          Result.append ("%Ncomplete:")
          Result.append (l_complete.out)
          Result.append ("%N")
        end
        if attached fee_to as l_fee_to then
          Result.append ("%Nfee_to:")
          Result.append (l_fee_to.out)
          Result.append ("%N")
        end
        if attached fee_liquidity as l_fee_liquidity then
          Result.append ("%Nfee_liquidity:")
          Result.append (l_fee_liquidity.out)
          Result.append ("%N")
        end
        if attached vid as l_vid then
          Result.append ("%Nvid:")
          Result.append (l_vid.out)
          Result.append ("%N")
        end
      end
end

