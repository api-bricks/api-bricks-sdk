note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CURVE_PROPOSAL_VOTE_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    id: detachable STRING_32
      -- 
    proposal: detachable STRING_32
      -- 
 	supports: BOOLEAN
    	 -- 
    stake: detachable STRING_32
      -- 
    voter: detachable STRING_32
      -- 
    created: detachable STRING_32
      -- 
    created_at_block: detachable STRING_32
      -- 
    created_at_transaction: detachable STRING_32
      -- 
 	vid: INTEGER_64
    	 -- 

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_proposal (a_name: like proposal)
        -- Set 'proposal' with 'a_name'.
      do
        proposal := a_name
      ensure
        proposal_set: proposal = a_name
      end

    set_supports (a_name: like supports)
        -- Set 'supports' with 'a_name'.
      do
        supports := a_name
      ensure
        supports_set: supports = a_name
      end

    set_stake (a_name: like stake)
        -- Set 'stake' with 'a_name'.
      do
        stake := a_name
      ensure
        stake_set: stake = a_name
      end

    set_voter (a_name: like voter)
        -- Set 'voter' with 'a_name'.
      do
        voter := a_name
      ensure
        voter_set: voter = a_name
      end

    set_created (a_name: like created)
        -- Set 'created' with 'a_name'.
      do
        created := a_name
      ensure
        created_set: created = a_name
      end

    set_created_at_block (a_name: like created_at_block)
        -- Set 'created_at_block' with 'a_name'.
      do
        created_at_block := a_name
      ensure
        created_at_block_set: created_at_block = a_name
      end

    set_created_at_transaction (a_name: like created_at_transaction)
        -- Set 'created_at_transaction' with 'a_name'.
      do
        created_at_transaction := a_name
      ensure
        created_at_transaction_set: created_at_transaction = a_name
      end

    set_vid (a_name: like vid)
        -- Set 'vid' with 'a_name'.
      do
        vid := a_name
      ensure
        vid_set: vid = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CURVE_PROPOSAL_VOTE_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached proposal as l_proposal then
          Result.append ("%Nproposal:")
          Result.append (l_proposal.out)
          Result.append ("%N")
        end
        if attached supports as l_supports then
          Result.append ("%Nsupports:")
          Result.append (l_supports.out)
          Result.append ("%N")
        end
        if attached stake as l_stake then
          Result.append ("%Nstake:")
          Result.append (l_stake.out)
          Result.append ("%N")
        end
        if attached voter as l_voter then
          Result.append ("%Nvoter:")
          Result.append (l_voter.out)
          Result.append ("%N")
        end
        if attached created as l_created then
          Result.append ("%Ncreated:")
          Result.append (l_created.out)
          Result.append ("%N")
        end
        if attached created_at_block as l_created_at_block then
          Result.append ("%Ncreated_at_block:")
          Result.append (l_created_at_block.out)
          Result.append ("%N")
        end
        if attached created_at_transaction as l_created_at_transaction then
          Result.append ("%Ncreated_at_transaction:")
          Result.append (l_created_at_transaction.out)
          Result.append ("%N")
        end
        if attached vid as l_vid then
          Result.append ("%Nvid:")
          Result.append (l_vid.out)
          Result.append ("%N")
        end
      end
end

