note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CURVE_SYSTEM_STATE_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    id: detachable STRING_32
      -- Singleton ID, equals to 'current'.
    registry_contract: detachable STRING_32
      -- Current pool registry address.
    contract_count: detachable STRING_32
      -- Number of contracts in the AddressProvider registry.
    gauge_count: detachable STRING_32
      -- Number of gauges registered.
    gauge_type_count: detachable STRING_32
      -- Number of gauge types registered.
    pool_count: detachable STRING_32
      -- Number of active pools.
    token_count: detachable STRING_32
      -- Number of tokens registered.
    total_pool_count: detachable STRING_32
      -- Total number of pools (including removed ones).
    updated: detachable STRING_32
      -- 
    updated_at_block: detachable STRING_32
      -- 
    updated_at_transaction: detachable STRING_32
      -- 
 	vid: INTEGER_64
    	 -- 

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_registry_contract (a_name: like registry_contract)
        -- Set 'registry_contract' with 'a_name'.
      do
        registry_contract := a_name
      ensure
        registry_contract_set: registry_contract = a_name
      end

    set_contract_count (a_name: like contract_count)
        -- Set 'contract_count' with 'a_name'.
      do
        contract_count := a_name
      ensure
        contract_count_set: contract_count = a_name
      end

    set_gauge_count (a_name: like gauge_count)
        -- Set 'gauge_count' with 'a_name'.
      do
        gauge_count := a_name
      ensure
        gauge_count_set: gauge_count = a_name
      end

    set_gauge_type_count (a_name: like gauge_type_count)
        -- Set 'gauge_type_count' with 'a_name'.
      do
        gauge_type_count := a_name
      ensure
        gauge_type_count_set: gauge_type_count = a_name
      end

    set_pool_count (a_name: like pool_count)
        -- Set 'pool_count' with 'a_name'.
      do
        pool_count := a_name
      ensure
        pool_count_set: pool_count = a_name
      end

    set_token_count (a_name: like token_count)
        -- Set 'token_count' with 'a_name'.
      do
        token_count := a_name
      ensure
        token_count_set: token_count = a_name
      end

    set_total_pool_count (a_name: like total_pool_count)
        -- Set 'total_pool_count' with 'a_name'.
      do
        total_pool_count := a_name
      ensure
        total_pool_count_set: total_pool_count = a_name
      end

    set_updated (a_name: like updated)
        -- Set 'updated' with 'a_name'.
      do
        updated := a_name
      ensure
        updated_set: updated = a_name
      end

    set_updated_at_block (a_name: like updated_at_block)
        -- Set 'updated_at_block' with 'a_name'.
      do
        updated_at_block := a_name
      ensure
        updated_at_block_set: updated_at_block = a_name
      end

    set_updated_at_transaction (a_name: like updated_at_transaction)
        -- Set 'updated_at_transaction' with 'a_name'.
      do
        updated_at_transaction := a_name
      ensure
        updated_at_transaction_set: updated_at_transaction = a_name
      end

    set_vid (a_name: like vid)
        -- Set 'vid' with 'a_name'.
      do
        vid := a_name
      ensure
        vid_set: vid = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CURVE_SYSTEM_STATE_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached registry_contract as l_registry_contract then
          Result.append ("%Nregistry_contract:")
          Result.append (l_registry_contract.out)
          Result.append ("%N")
        end
        if attached contract_count as l_contract_count then
          Result.append ("%Ncontract_count:")
          Result.append (l_contract_count.out)
          Result.append ("%N")
        end
        if attached gauge_count as l_gauge_count then
          Result.append ("%Ngauge_count:")
          Result.append (l_gauge_count.out)
          Result.append ("%N")
        end
        if attached gauge_type_count as l_gauge_type_count then
          Result.append ("%Ngauge_type_count:")
          Result.append (l_gauge_type_count.out)
          Result.append ("%N")
        end
        if attached pool_count as l_pool_count then
          Result.append ("%Npool_count:")
          Result.append (l_pool_count.out)
          Result.append ("%N")
        end
        if attached token_count as l_token_count then
          Result.append ("%Ntoken_count:")
          Result.append (l_token_count.out)
          Result.append ("%N")
        end
        if attached total_pool_count as l_total_pool_count then
          Result.append ("%Ntotal_pool_count:")
          Result.append (l_total_pool_count.out)
          Result.append ("%N")
        end
        if attached updated as l_updated then
          Result.append ("%Nupdated:")
          Result.append (l_updated.out)
          Result.append ("%N")
        end
        if attached updated_at_block as l_updated_at_block then
          Result.append ("%Nupdated_at_block:")
          Result.append (l_updated_at_block.out)
          Result.append ("%N")
        end
        if attached updated_at_transaction as l_updated_at_transaction then
          Result.append ("%Nupdated_at_transaction:")
          Result.append (l_updated_at_transaction.out)
          Result.append ("%N")
        end
        if attached vid as l_vid then
          Result.append ("%Nvid:")
          Result.append (l_vid.out)
          Result.append ("%N")
        end
      end
end

