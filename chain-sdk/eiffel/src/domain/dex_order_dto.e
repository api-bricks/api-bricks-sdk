note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class DEX_ORDER_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    id: detachable STRING_32
      -- Identifier, format: (owner address)-(order id)
    owner: detachable STRING_32
      -- Reference to owner.
 	order_id: INTEGER_32
    	 -- Order id.
    from_batch_id: detachable STRING_32
      -- Batch id from which order became valid.
    from_epoch: detachable STRING_32
      -- Start of epoch in which order was placed and became valid.
    until_batch_id: detachable STRING_32
      -- Batch id until which trade was still valid.
    until_epoch: detachable STRING_32
      -- End of epoch in which order was placed.
    buy_token: detachable STRING_32
      -- Identifier of token that was bought.
    sell_token: detachable STRING_32
      -- Identifier of token that was sold.
    price_numerator: detachable STRING_32
      -- Price enumerator.
    price_denominator: detachable STRING_32
      -- Price denominator.
    max_sell_amount: detachable STRING_32
      -- Maximum sell amount.
    min_receive_amount: detachable STRING_32
      -- Minimum receive amount.
    sold_volume: detachable STRING_32
      -- Sold volume.
    bought_volume: detachable STRING_32
      -- Bought volume.
    create_epoch: detachable STRING_32
      -- Epoch in which order was created.
    cancel_epoch: detachable STRING_32
      -- Epoch in which order was cancelled.
    delete_epoch: detachable STRING_32
      -- Epoch in which order was deleted.
    tx_hash: detachable STRING_32
      -- Transaction hash.
    tx_log_index: detachable STRING_32
      -- Event index within transaction.
 	vid: INTEGER_64
    	 -- 

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_owner (a_name: like owner)
        -- Set 'owner' with 'a_name'.
      do
        owner := a_name
      ensure
        owner_set: owner = a_name
      end

    set_order_id (a_name: like order_id)
        -- Set 'order_id' with 'a_name'.
      do
        order_id := a_name
      ensure
        order_id_set: order_id = a_name
      end

    set_from_batch_id (a_name: like from_batch_id)
        -- Set 'from_batch_id' with 'a_name'.
      do
        from_batch_id := a_name
      ensure
        from_batch_id_set: from_batch_id = a_name
      end

    set_from_epoch (a_name: like from_epoch)
        -- Set 'from_epoch' with 'a_name'.
      do
        from_epoch := a_name
      ensure
        from_epoch_set: from_epoch = a_name
      end

    set_until_batch_id (a_name: like until_batch_id)
        -- Set 'until_batch_id' with 'a_name'.
      do
        until_batch_id := a_name
      ensure
        until_batch_id_set: until_batch_id = a_name
      end

    set_until_epoch (a_name: like until_epoch)
        -- Set 'until_epoch' with 'a_name'.
      do
        until_epoch := a_name
      ensure
        until_epoch_set: until_epoch = a_name
      end

    set_buy_token (a_name: like buy_token)
        -- Set 'buy_token' with 'a_name'.
      do
        buy_token := a_name
      ensure
        buy_token_set: buy_token = a_name
      end

    set_sell_token (a_name: like sell_token)
        -- Set 'sell_token' with 'a_name'.
      do
        sell_token := a_name
      ensure
        sell_token_set: sell_token = a_name
      end

    set_price_numerator (a_name: like price_numerator)
        -- Set 'price_numerator' with 'a_name'.
      do
        price_numerator := a_name
      ensure
        price_numerator_set: price_numerator = a_name
      end

    set_price_denominator (a_name: like price_denominator)
        -- Set 'price_denominator' with 'a_name'.
      do
        price_denominator := a_name
      ensure
        price_denominator_set: price_denominator = a_name
      end

    set_max_sell_amount (a_name: like max_sell_amount)
        -- Set 'max_sell_amount' with 'a_name'.
      do
        max_sell_amount := a_name
      ensure
        max_sell_amount_set: max_sell_amount = a_name
      end

    set_min_receive_amount (a_name: like min_receive_amount)
        -- Set 'min_receive_amount' with 'a_name'.
      do
        min_receive_amount := a_name
      ensure
        min_receive_amount_set: min_receive_amount = a_name
      end

    set_sold_volume (a_name: like sold_volume)
        -- Set 'sold_volume' with 'a_name'.
      do
        sold_volume := a_name
      ensure
        sold_volume_set: sold_volume = a_name
      end

    set_bought_volume (a_name: like bought_volume)
        -- Set 'bought_volume' with 'a_name'.
      do
        bought_volume := a_name
      ensure
        bought_volume_set: bought_volume = a_name
      end

    set_create_epoch (a_name: like create_epoch)
        -- Set 'create_epoch' with 'a_name'.
      do
        create_epoch := a_name
      ensure
        create_epoch_set: create_epoch = a_name
      end

    set_cancel_epoch (a_name: like cancel_epoch)
        -- Set 'cancel_epoch' with 'a_name'.
      do
        cancel_epoch := a_name
      ensure
        cancel_epoch_set: cancel_epoch = a_name
      end

    set_delete_epoch (a_name: like delete_epoch)
        -- Set 'delete_epoch' with 'a_name'.
      do
        delete_epoch := a_name
      ensure
        delete_epoch_set: delete_epoch = a_name
      end

    set_tx_hash (a_name: like tx_hash)
        -- Set 'tx_hash' with 'a_name'.
      do
        tx_hash := a_name
      ensure
        tx_hash_set: tx_hash = a_name
      end

    set_tx_log_index (a_name: like tx_log_index)
        -- Set 'tx_log_index' with 'a_name'.
      do
        tx_log_index := a_name
      ensure
        tx_log_index_set: tx_log_index = a_name
      end

    set_vid (a_name: like vid)
        -- Set 'vid' with 'a_name'.
      do
        vid := a_name
      ensure
        vid_set: vid = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass DEX_ORDER_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached owner as l_owner then
          Result.append ("%Nowner:")
          Result.append (l_owner.out)
          Result.append ("%N")
        end
        if attached order_id as l_order_id then
          Result.append ("%Norder_id:")
          Result.append (l_order_id.out)
          Result.append ("%N")
        end
        if attached from_batch_id as l_from_batch_id then
          Result.append ("%Nfrom_batch_id:")
          Result.append (l_from_batch_id.out)
          Result.append ("%N")
        end
        if attached from_epoch as l_from_epoch then
          Result.append ("%Nfrom_epoch:")
          Result.append (l_from_epoch.out)
          Result.append ("%N")
        end
        if attached until_batch_id as l_until_batch_id then
          Result.append ("%Nuntil_batch_id:")
          Result.append (l_until_batch_id.out)
          Result.append ("%N")
        end
        if attached until_epoch as l_until_epoch then
          Result.append ("%Nuntil_epoch:")
          Result.append (l_until_epoch.out)
          Result.append ("%N")
        end
        if attached buy_token as l_buy_token then
          Result.append ("%Nbuy_token:")
          Result.append (l_buy_token.out)
          Result.append ("%N")
        end
        if attached sell_token as l_sell_token then
          Result.append ("%Nsell_token:")
          Result.append (l_sell_token.out)
          Result.append ("%N")
        end
        if attached price_numerator as l_price_numerator then
          Result.append ("%Nprice_numerator:")
          Result.append (l_price_numerator.out)
          Result.append ("%N")
        end
        if attached price_denominator as l_price_denominator then
          Result.append ("%Nprice_denominator:")
          Result.append (l_price_denominator.out)
          Result.append ("%N")
        end
        if attached max_sell_amount as l_max_sell_amount then
          Result.append ("%Nmax_sell_amount:")
          Result.append (l_max_sell_amount.out)
          Result.append ("%N")
        end
        if attached min_receive_amount as l_min_receive_amount then
          Result.append ("%Nmin_receive_amount:")
          Result.append (l_min_receive_amount.out)
          Result.append ("%N")
        end
        if attached sold_volume as l_sold_volume then
          Result.append ("%Nsold_volume:")
          Result.append (l_sold_volume.out)
          Result.append ("%N")
        end
        if attached bought_volume as l_bought_volume then
          Result.append ("%Nbought_volume:")
          Result.append (l_bought_volume.out)
          Result.append ("%N")
        end
        if attached create_epoch as l_create_epoch then
          Result.append ("%Ncreate_epoch:")
          Result.append (l_create_epoch.out)
          Result.append ("%N")
        end
        if attached cancel_epoch as l_cancel_epoch then
          Result.append ("%Ncancel_epoch:")
          Result.append (l_cancel_epoch.out)
          Result.append ("%N")
        end
        if attached delete_epoch as l_delete_epoch then
          Result.append ("%Ndelete_epoch:")
          Result.append (l_delete_epoch.out)
          Result.append ("%N")
        end
        if attached tx_hash as l_tx_hash then
          Result.append ("%Ntx_hash:")
          Result.append (l_tx_hash.out)
          Result.append ("%N")
        end
        if attached tx_log_index as l_tx_log_index then
          Result.append ("%Ntx_log_index:")
          Result.append (l_tx_log_index.out)
          Result.append ("%N")
        end
        if attached vid as l_vid then
          Result.append ("%Nvid:")
          Result.append (l_vid.out)
          Result.append ("%N")
        end
      end
end

