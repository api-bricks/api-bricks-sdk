note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class DEX_SOLUTION_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    id: detachable STRING_32
      -- 
    batch: detachable STRING_32
      -- 
    solver: detachable STRING_32
      -- 
    fee_reward: detachable STRING_32
      -- 
    objective_value: detachable STRING_32
      -- 
    utility: detachable STRING_32
      -- 
    trades: detachable LIST [STRING_32]
      -- 
    create_epoch: detachable STRING_32
      -- 
    revert_epoch: detachable STRING_32
      -- 
    tx_hash: detachable STRING_32
      -- 
    tx_log_index: detachable STRING_32
      -- 
 	vid: INTEGER_64
    	 -- 

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_batch (a_name: like batch)
        -- Set 'batch' with 'a_name'.
      do
        batch := a_name
      ensure
        batch_set: batch = a_name
      end

    set_solver (a_name: like solver)
        -- Set 'solver' with 'a_name'.
      do
        solver := a_name
      ensure
        solver_set: solver = a_name
      end

    set_fee_reward (a_name: like fee_reward)
        -- Set 'fee_reward' with 'a_name'.
      do
        fee_reward := a_name
      ensure
        fee_reward_set: fee_reward = a_name
      end

    set_objective_value (a_name: like objective_value)
        -- Set 'objective_value' with 'a_name'.
      do
        objective_value := a_name
      ensure
        objective_value_set: objective_value = a_name
      end

    set_utility (a_name: like utility)
        -- Set 'utility' with 'a_name'.
      do
        utility := a_name
      ensure
        utility_set: utility = a_name
      end

    set_trades (a_name: like trades)
        -- Set 'trades' with 'a_name'.
      do
        trades := a_name
      ensure
        trades_set: trades = a_name
      end

    set_create_epoch (a_name: like create_epoch)
        -- Set 'create_epoch' with 'a_name'.
      do
        create_epoch := a_name
      ensure
        create_epoch_set: create_epoch = a_name
      end

    set_revert_epoch (a_name: like revert_epoch)
        -- Set 'revert_epoch' with 'a_name'.
      do
        revert_epoch := a_name
      ensure
        revert_epoch_set: revert_epoch = a_name
      end

    set_tx_hash (a_name: like tx_hash)
        -- Set 'tx_hash' with 'a_name'.
      do
        tx_hash := a_name
      ensure
        tx_hash_set: tx_hash = a_name
      end

    set_tx_log_index (a_name: like tx_log_index)
        -- Set 'tx_log_index' with 'a_name'.
      do
        tx_log_index := a_name
      ensure
        tx_log_index_set: tx_log_index = a_name
      end

    set_vid (a_name: like vid)
        -- Set 'vid' with 'a_name'.
      do
        vid := a_name
      ensure
        vid_set: vid = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass DEX_SOLUTION_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached batch as l_batch then
          Result.append ("%Nbatch:")
          Result.append (l_batch.out)
          Result.append ("%N")
        end
        if attached solver as l_solver then
          Result.append ("%Nsolver:")
          Result.append (l_solver.out)
          Result.append ("%N")
        end
        if attached fee_reward as l_fee_reward then
          Result.append ("%Nfee_reward:")
          Result.append (l_fee_reward.out)
          Result.append ("%N")
        end
        if attached objective_value as l_objective_value then
          Result.append ("%Nobjective_value:")
          Result.append (l_objective_value.out)
          Result.append ("%N")
        end
        if attached utility as l_utility then
          Result.append ("%Nutility:")
          Result.append (l_utility.out)
          Result.append ("%N")
        end
        if attached trades as l_trades then
          across l_trades as ic loop
            Result.append ("%N trades:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached create_epoch as l_create_epoch then
          Result.append ("%Ncreate_epoch:")
          Result.append (l_create_epoch.out)
          Result.append ("%N")
        end
        if attached revert_epoch as l_revert_epoch then
          Result.append ("%Nrevert_epoch:")
          Result.append (l_revert_epoch.out)
          Result.append ("%N")
        end
        if attached tx_hash as l_tx_hash then
          Result.append ("%Ntx_hash:")
          Result.append (l_tx_hash.out)
          Result.append ("%N")
        end
        if attached tx_log_index as l_tx_log_index then
          Result.append ("%Ntx_log_index:")
          Result.append (l_tx_log_index.out)
          Result.append ("%N")
        end
        if attached vid as l_vid then
          Result.append ("%Nvid:")
          Result.append (l_vid.out)
          Result.append ("%N")
        end
      end
end

