note
 description:"[
		OnChain API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	UNISWAPV3_API

inherit

    API_I


feature -- API Access


	uniswap_v3_bundles_current : detachable LIST [UNISWAP_V3_BUNDLE_DTO]
			-- Bundles (current)
			-- Gets bundles.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_BUNDLE_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/bundles/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_BUNDLE_DTO] } l_response.data ({ LIST [UNISWAP_V3_BUNDLE_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_burns_current : detachable LIST [UNISWAP_V3_BURN_DTO]
			-- Burns (current)
			-- Gets burns.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_BURN_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/burns/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_BURN_DTO] } l_response.data ({ LIST [UNISWAP_V3_BURN_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_factorys_current : detachable LIST [UNISWAP_V3_FACTORY_DTO]
			-- Factorys (current)
			-- Gets factorys.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_FACTORY_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/factorys/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_FACTORY_DTO] } l_response.data ({ LIST [UNISWAP_V3_FACTORY_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_bundles_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32): detachable LIST [UNISWAP_V3_BUNDLE_DTO]
			-- Bundles (historical)
			-- Gets bundles.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id  (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_BUNDLE_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/bundles/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_BUNDLE_DTO] } l_response.data ({ LIST [UNISWAP_V3_BUNDLE_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_burns_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; pool: STRING_32; token_0: STRING_32; token_1: STRING_32): detachable LIST [UNISWAP_V3_BURN_DTO]
			-- Burns (historical)
			-- Gets burns.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Transaction hash + &#39;#&#39; + index in mints Transaction array. (optional, default to null)
			-- 
			-- argument: pool Pool position is within. (optional, default to null)
			-- 
			-- argument: token_0 Reference to token0 as stored in pool contract. (optional, default to null)
			-- 
			-- argument: token_1 Reference to token1 as stored in pool contract. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_BURN_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/burns/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_0", token_0));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_1", token_1));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_BURN_DTO] } l_response.data ({ LIST [UNISWAP_V3_BURN_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_factorys_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32): detachable LIST [UNISWAP_V3_FACTORY_DTO]
			-- Factorys (historical)
			-- Gets factorys.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Factory address. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_FACTORY_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/factorys/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_FACTORY_DTO] } l_response.data ({ LIST [UNISWAP_V3_FACTORY_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_mints_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; pool: STRING_32; token_0: STRING_32; token_1: STRING_32): detachable LIST [UNISWAP_V3_MINT_DTO]
			-- Mints (historical)
			-- Gets mints.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Transaction hash + &#39;#&#39; + index in mints Transaction array. (optional, default to null)
			-- 
			-- argument: pool Pool address. (optional, default to null)
			-- 
			-- argument: token_0 Reference to token0 as stored in pool contract. (optional, default to null)
			-- 
			-- argument: token_1 Reference to token1 as stored in pool contract. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_MINT_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/mints/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_0", token_0));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_1", token_1));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_MINT_DTO] } l_response.data ({ LIST [UNISWAP_V3_MINT_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_pool_day_datas_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; pool: STRING_32): detachable LIST [UNISWAP_V3_POOL_DAY_DATA_DTO]
			-- PoolDayDatas (historical)
			-- Gets poolDayDatas.
			-- 
			-- argument: start_block  (optional, default to null)
			-- 
			-- argument: end_block  (optional, default to null)
			-- 
			-- argument: start_date  (optional, default to null)
			-- 
			-- argument: end_date  (optional, default to null)
			-- 
			-- argument: id  (optional, default to null)
			-- 
			-- argument: pool  (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POOL_DAY_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/poolDayDatas/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POOL_DAY_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_POOL_DAY_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_pool_hour_datas_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; pool: STRING_32): detachable LIST [UNISWAP_V3_POOL_HOUR_DATA_DTO]
			-- PoolHourDatas (historical)
			-- Gets poolHourDatas.
			-- 
			-- argument: start_block  (optional, default to null)
			-- 
			-- argument: end_block  (optional, default to null)
			-- 
			-- argument: start_date  (optional, default to null)
			-- 
			-- argument: end_date  (optional, default to null)
			-- 
			-- argument: id  (optional, default to null)
			-- 
			-- argument: pool  (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POOL_HOUR_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/poolHourDatas/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POOL_HOUR_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_POOL_HOUR_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_pools_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; token_0: STRING_32; token_1: STRING_32): detachable LIST [UNISWAP_V3_POOL_DTO]
			-- Pools (historical)
			-- Gets pools.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Pool address. (optional, default to null)
			-- 
			-- argument: token_0 Reference to token0 as stored in pool contract. (optional, default to null)
			-- 
			-- argument: token_1 Reference to token1 as stored in pool contract. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POOL_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/pools/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_0", token_0));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_1", token_1));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POOL_DTO] } l_response.data ({ LIST [UNISWAP_V3_POOL_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_position_snapshots_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; pool: STRING_32): detachable LIST [UNISWAP_V3_POSITION_SNAPSHOT_DTO]
			-- PositionSnapshots (historical)
			-- Gets positionSnapshots.
			-- 
			-- argument: start_block  (optional, default to null)
			-- 
			-- argument: end_block  (optional, default to null)
			-- 
			-- argument: start_date  (optional, default to null)
			-- 
			-- argument: end_date  (optional, default to null)
			-- 
			-- argument: id  (optional, default to null)
			-- 
			-- argument: pool  (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POSITION_SNAPSHOT_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/positionSnapshots/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POSITION_SNAPSHOT_DTO] } l_response.data ({ LIST [UNISWAP_V3_POSITION_SNAPSHOT_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_positions_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; pool: STRING_32; token_0: STRING_32; token_1: STRING_32): detachable LIST [UNISWAP_V3_POSITION_DTO]
			-- Positions (historical)
			-- Gets positions.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id NFT token identifier. (optional, default to null)
			-- 
			-- argument: pool Pool position is within. (optional, default to null)
			-- 
			-- argument: token_0 Reference to token0 as stored in pair contract. (optional, default to null)
			-- 
			-- argument: token_1 Reference to token1 as stored in pair contract. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POSITION_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/positions/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_0", token_0));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_1", token_1));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POSITION_DTO] } l_response.data ({ LIST [UNISWAP_V3_POSITION_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_swaps_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; pool: STRING_32; token_0: STRING_32; token_1: STRING_32): detachable LIST [UNISWAP_V3_SWAP_DTO]
			-- Swaps (historical)
			-- Gets swaps.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Identifier, format: transaction hash + \&quot;#\&quot; + index in swaps Transaction array. (optional, default to null)
			-- 
			-- argument: pool Pool swap occured within. (optional, default to null)
			-- 
			-- argument: token_0 Reference to token0 as stored in pair contract. (optional, default to null)
			-- 
			-- argument: token_1 Reference to token1 as stored in pair contract. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_SWAP_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/swaps/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_0", token_0));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token_1", token_1));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_SWAP_DTO] } l_response.data ({ LIST [UNISWAP_V3_SWAP_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_tick_day_datas_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; pool: STRING_32): detachable LIST [UNISWAP_V3_TICK_DAY_DATA_DTO]
			-- TickDayDatas (historical)
			-- Gets tickDayDatas.
			-- 
			-- argument: start_block  (optional, default to null)
			-- 
			-- argument: end_block  (optional, default to null)
			-- 
			-- argument: start_date  (optional, default to null)
			-- 
			-- argument: end_date  (optional, default to null)
			-- 
			-- argument: id  (optional, default to null)
			-- 
			-- argument: pool  (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TICK_DAY_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/tickDayDatas/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TICK_DAY_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_TICK_DAY_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_ticks_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; pool: STRING_32): detachable LIST [UNISWAP_V3_TICK_DTO]
			-- Ticks (historical)
			-- Gets ticks.
			-- 
			-- argument: start_block  (optional, default to null)
			-- 
			-- argument: end_block  (optional, default to null)
			-- 
			-- argument: start_date  (optional, default to null)
			-- 
			-- argument: end_date  (optional, default to null)
			-- 
			-- argument: id  (optional, default to null)
			-- 
			-- argument: pool  (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TICK_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/ticks/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TICK_DTO] } l_response.data ({ LIST [UNISWAP_V3_TICK_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_token_hour_datas_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32): detachable LIST [UNISWAP_V3_TOKEN_HOUR_DATA_DTO]
			-- TokenHourDatas (historical)
			-- Gets tokenHourDatas.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Token address concatendated with date. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TOKEN_HOUR_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/tokenHourDatas/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TOKEN_HOUR_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_TOKEN_HOUR_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_token_v3_day_datas_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32): detachable LIST [UNISWAP_V3_TOKEN_V3_DAY_DATA_DTO]
			-- TokenV3DayDatas (historical)
			-- Gets tokenV3DayDatas.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Token address concatendated with date. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TOKEN_V3_DAY_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/tokenV3DayDatas/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TOKEN_V3_DAY_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_TOKEN_V3_DAY_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_tokens_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32; symbol: STRING_32; name: STRING_32): detachable LIST [UNISWAP_V3_TOKEN_DTO]
			-- Tokens (historical)
			-- Gets tokens.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Token address. (optional, default to null)
			-- 
			-- argument: symbol Token symbol. (optional, default to null)
			-- 
			-- argument: name Token name. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TOKEN_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/tokens/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "symbol", symbol));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "name", name));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TOKEN_DTO] } l_response.data ({ LIST [UNISWAP_V3_TOKEN_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_transactions_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32): detachable LIST [UNISWAP_V3_TRANSACTION_DTO]
			-- Transactions (historical)
			-- Gets transactions.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Transaction hash. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TRANSACTION_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/transactions/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TRANSACTION_DTO] } l_response.data ({ LIST [UNISWAP_V3_TRANSACTION_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_get_uniswap_day_datas_historical (start_block: INTEGER_64; end_block: INTEGER_64; start_date: DATE_TIME; end_date: DATE_TIME; id: STRING_32): detachable LIST [UNISWAP_V3_UNISWAP_DAY_DATA_DTO]
			-- UniswapDayDatas (historical)
			-- Gets uniswapDayDatas.
			-- 
			-- argument: start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional, default to null)
			-- 
			-- argument: end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional, default to null)
			-- 
			-- argument: start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional, default to null)
			-- 
			-- argument: end_date The end date of timeframe. (optional, default to null)
			-- 
			-- argument: id Timestamp rounded to current day by dividing by 86400. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_UNISWAP_DAY_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/uniswapDayDatas/historical"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startBlock", start_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endBlock", end_block));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "startDate", start_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "endDate", end_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_UNISWAP_DAY_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_UNISWAP_DAY_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_mints_current : detachable LIST [UNISWAP_V3_MINT_DTO]
			-- Mints (current)
			-- Gets mints.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_MINT_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/mints/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_MINT_DTO] } l_response.data ({ LIST [UNISWAP_V3_MINT_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_pool_day_datas_current : detachable LIST [UNISWAP_V3_POOL_DAY_DATA_DTO]
			-- PoolDayDatas (current)
			-- Gets poolDayDatas.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POOL_DAY_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/poolDayDatas/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POOL_DAY_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_POOL_DAY_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_pool_hour_datas_current : detachable LIST [UNISWAP_V3_POOL_HOUR_DATA_DTO]
			-- PoolHourDatas (current)
			-- Gets poolHourDatas.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POOL_HOUR_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/poolHourDatas/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POOL_HOUR_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_POOL_HOUR_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_pools_current (id: STRING_32): detachable LIST [UNISWAP_V3_POOL_DTO]
			-- Pools (current)
			-- Gets pools.
			-- 
			-- argument: id Pool address. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POOL_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/pools/current"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "id", id));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POOL_DTO] } l_response.data ({ LIST [UNISWAP_V3_POOL_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_position_snapshots_current : detachable LIST [UNISWAP_V3_POSITION_SNAPSHOT_DTO]
			-- PositionSnapshots (current)
			-- Gets positionSnapshots.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POSITION_SNAPSHOT_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/positionSnapshots/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POSITION_SNAPSHOT_DTO] } l_response.data ({ LIST [UNISWAP_V3_POSITION_SNAPSHOT_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_positions_current : detachable LIST [UNISWAP_V3_POSITION_DTO]
			-- Positions (current)
			-- Gets positions.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_POSITION_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/positions/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_POSITION_DTO] } l_response.data ({ LIST [UNISWAP_V3_POSITION_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_swaps_current (pool: STRING_32): detachable LIST [UNISWAP_V3_SWAP_DTO]
			-- Swaps (current)
			-- Gets swaps.
			-- 
			-- argument: pool Pool swap occured within. (optional, default to null)
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_SWAP_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/swaps/current"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pool", pool));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_SWAP_DTO] } l_response.data ({ LIST [UNISWAP_V3_SWAP_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_tick_day_datas_current : detachable LIST [UNISWAP_V3_TICK_DAY_DATA_DTO]
			-- TickDayDatas (current)
			-- Gets tickDayDatas.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TICK_DAY_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/tickDayDatas/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TICK_DAY_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_TICK_DAY_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_ticks_current : detachable LIST [UNISWAP_V3_TICK_DTO]
			-- Ticks (current)
			-- Gets ticks.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TICK_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/ticks/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TICK_DTO] } l_response.data ({ LIST [UNISWAP_V3_TICK_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_token_hour_datas_current : detachable LIST [UNISWAP_V3_TOKEN_HOUR_DATA_DTO]
			-- TokenHourDatas (current)
			-- Gets tokenHourDatas.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TOKEN_HOUR_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/tokenHourDatas/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TOKEN_HOUR_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_TOKEN_HOUR_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_token_v3_day_datas_current : detachable LIST [UNISWAP_V3_TOKEN_V3_DAY_DATA_DTO]
			-- TokenV3DayDatas (current)
			-- Gets tokenV3DayDatas.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TOKEN_V3_DAY_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/tokenV3DayDatas/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TOKEN_V3_DAY_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_TOKEN_V3_DAY_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_tokens_current : detachable LIST [UNISWAP_V3_TOKEN_DTO]
			-- Tokens (current)
			-- Gets tokens.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TOKEN_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/tokens/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TOKEN_DTO] } l_response.data ({ LIST [UNISWAP_V3_TOKEN_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_transactions_current : detachable LIST [UNISWAP_V3_TRANSACTION_DTO]
			-- Transactions (current)
			-- Gets transactions.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_TRANSACTION_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/transactions/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_TRANSACTION_DTO] } l_response.data ({ LIST [UNISWAP_V3_TRANSACTION_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	uniswap_v3_uniswap_day_datas_current : detachable LIST [UNISWAP_V3_UNISWAP_DAY_DATA_DTO]
			-- UniswapDayDatas (current)
			-- Gets uniswapDayDatas.
			-- 
			-- 
			-- Result LIST [UNISWAP_V3_UNISWAP_DAY_DATA_DTO]
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/dapps/uniswapv3/uniswapDayDatas/current"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/plain", "application/json", "text/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST [UNISWAP_V3_UNISWAP_DAY_DATA_DTO] } l_response.data ({ LIST [UNISWAP_V3_UNISWAP_DAY_DATA_DTO] }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
