/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* Tracks pair data across each hour.
*/
export class UniswapV2PairHourDataDTO {
    'entryTime'?: Date;
    'recvTime'?: Date;
    /**
    * Number of block in which entity was recorded.
    */
    'blockNumber'?: number;
    /**
    * 
    */
    'id'?: string | null;
    /**
    * Unix timestamp for start of hour.
    */
    'hourStartUnix'?: number;
    /**
    * Address for pair contract.
    */
    'pair'?: string | null;
    /**
    * Reserve of token0 (updated during each transaction on pair).
    */
    'reserve0'?: string | null;
    /**
    * Reserve of token1 (updated during each transaction on pair).
    */
    'reserve1'?: string | null;
    /**
    * Total supply of liquidity token distributed to LPs.
    */
    'totalSupply'?: string | null;
    /**
    * Reserve of token0 plus token1 stored as a derived USD amount.
    */
    'reserveUsd'?: string | null;
    /**
    * Total amount of token0 swapped throughout hour.
    */
    'hourlyVolumeToken0'?: string | null;
    /**
    * Total amount of token1 swapped throughout hour.
    */
    'hourlyVolumeToken1'?: string | null;
    /**
    * Total volume within pair throughout hour.
    */
    'hourlyVolumeUsd'?: string | null;
    /**
    * Amount of transactions on pair throughout hour.
    */
    'hourlyTxns'?: string | null;
    /**
    * 
    */
    'vid'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "entryTime",
            "baseName": "entry_time",
            "type": "Date"
        },
        {
            "name": "recvTime",
            "baseName": "recv_time",
            "type": "Date"
        },
        {
            "name": "blockNumber",
            "baseName": "block_number",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "hourStartUnix",
            "baseName": "hour_start_unix",
            "type": "number"
        },
        {
            "name": "pair",
            "baseName": "pair",
            "type": "string"
        },
        {
            "name": "reserve0",
            "baseName": "reserve_0",
            "type": "string"
        },
        {
            "name": "reserve1",
            "baseName": "reserve_1",
            "type": "string"
        },
        {
            "name": "totalSupply",
            "baseName": "total_supply",
            "type": "string"
        },
        {
            "name": "reserveUsd",
            "baseName": "reserve_usd",
            "type": "string"
        },
        {
            "name": "hourlyVolumeToken0",
            "baseName": "hourly_volume_token_0",
            "type": "string"
        },
        {
            "name": "hourlyVolumeToken1",
            "baseName": "hourly_volume_token_1",
            "type": "string"
        },
        {
            "name": "hourlyVolumeUsd",
            "baseName": "hourly_volume_usd",
            "type": "string"
        },
        {
            "name": "hourlyTxns",
            "baseName": "hourly_txns",
            "type": "string"
        },
        {
            "name": "vid",
            "baseName": "vid",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return UniswapV2PairHourDataDTO.attributeTypeMap;
    }
}

