/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A type collecting global stats about this instance of Gnosis Protocol.
 */
@ApiModel(description = "A type collecting global stats about this instance of Gnosis Protocol.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-16T19:45:04.011918Z[Etc/UTC]")
public class DexStatsDTO {
  public static final String SERIALIZED_NAME_ENTRY_TIME = "entry_time";
  @SerializedName(SERIALIZED_NAME_ENTRY_TIME)
  private OffsetDateTime entryTime;

  public static final String SERIALIZED_NAME_RECV_TIME = "recv_time";
  @SerializedName(SERIALIZED_NAME_RECV_TIME)
  private OffsetDateTime recvTime;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "block_number";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private Long blockNumber;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VOLUME_IN_OWL = "volume_in_owl";
  @SerializedName(SERIALIZED_NAME_VOLUME_IN_OWL)
  private String volumeInOwl;

  public static final String SERIALIZED_NAME_UTILITY_IN_OWL = "utility_in_owl";
  @SerializedName(SERIALIZED_NAME_UTILITY_IN_OWL)
  private String utilityInOwl;

  public static final String SERIALIZED_NAME_OWL_BURNT = "owl_burnt";
  @SerializedName(SERIALIZED_NAME_OWL_BURNT)
  private String owlBurnt;

  public static final String SERIALIZED_NAME_SETTLED_BATCH_COUNT = "settled_batch_count";
  @SerializedName(SERIALIZED_NAME_SETTLED_BATCH_COUNT)
  private Integer settledBatchCount;

  public static final String SERIALIZED_NAME_SETTLED_TRADE_COUNT = "settled_trade_count";
  @SerializedName(SERIALIZED_NAME_SETTLED_TRADE_COUNT)
  private Integer settledTradeCount;

  public static final String SERIALIZED_NAME_LISTED_TOKENS = "listed_tokens";
  @SerializedName(SERIALIZED_NAME_LISTED_TOKENS)
  private Integer listedTokens;

  public static final String SERIALIZED_NAME_VID = "vid";
  @SerializedName(SERIALIZED_NAME_VID)
  private Long vid;

  public DexStatsDTO() {
  }

  public DexStatsDTO entryTime(OffsetDateTime entryTime) {
    
    this.entryTime = entryTime;
    return this;
  }

   /**
   * Get entryTime
   * @return entryTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEntryTime() {
    return entryTime;
  }


  public void setEntryTime(OffsetDateTime entryTime) {
    this.entryTime = entryTime;
  }


  public DexStatsDTO recvTime(OffsetDateTime recvTime) {
    
    this.recvTime = recvTime;
    return this;
  }

   /**
   * Get recvTime
   * @return recvTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getRecvTime() {
    return recvTime;
  }


  public void setRecvTime(OffsetDateTime recvTime) {
    this.recvTime = recvTime;
  }


  public DexStatsDTO blockNumber(Long blockNumber) {
    
    this.blockNumber = blockNumber;
    return this;
  }

   /**
   * Number of block in which entity was recorded.
   * @return blockNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of block in which entity was recorded.")

  public Long getBlockNumber() {
    return blockNumber;
  }


  public void setBlockNumber(Long blockNumber) {
    this.blockNumber = blockNumber;
  }


  public DexStatsDTO id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * 
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public DexStatsDTO volumeInOwl(String volumeInOwl) {
    
    this.volumeInOwl = volumeInOwl;
    return this;
  }

   /**
   * The total volume denominated in OWL (all sell amounts combined).
   * @return volumeInOwl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total volume denominated in OWL (all sell amounts combined).")

  public String getVolumeInOwl() {
    return volumeInOwl;
  }


  public void setVolumeInOwl(String volumeInOwl) {
    this.volumeInOwl = volumeInOwl;
  }


  public DexStatsDTO utilityInOwl(String utilityInOwl) {
    
    this.utilityInOwl = utilityInOwl;
    return this;
  }

   /**
   * The total trader surplus in OWL.
   * @return utilityInOwl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total trader surplus in OWL.")

  public String getUtilityInOwl() {
    return utilityInOwl;
  }


  public void setUtilityInOwl(String utilityInOwl) {
    this.utilityInOwl = utilityInOwl;
  }


  public DexStatsDTO owlBurnt(String owlBurnt) {
    
    this.owlBurnt = owlBurnt;
    return this;
  }

   /**
   * The total amount of OWL burnt (equivalent to fees rewarded to solvers).
   * @return owlBurnt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount of OWL burnt (equivalent to fees rewarded to solvers).")

  public String getOwlBurnt() {
    return owlBurnt;
  }


  public void setOwlBurnt(String owlBurnt) {
    this.owlBurnt = owlBurnt;
  }


  public DexStatsDTO settledBatchCount(Integer settledBatchCount) {
    
    this.settledBatchCount = settledBatchCount;
    return this;
  }

   /**
   * The total number of settled batches.
   * @return settledBatchCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of settled batches.")

  public Integer getSettledBatchCount() {
    return settledBatchCount;
  }


  public void setSettledBatchCount(Integer settledBatchCount) {
    this.settledBatchCount = settledBatchCount;
  }


  public DexStatsDTO settledTradeCount(Integer settledTradeCount) {
    
    this.settledTradeCount = settledTradeCount;
    return this;
  }

   /**
   * The total number of settled trades.
   * @return settledTradeCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total number of settled trades.")

  public Integer getSettledTradeCount() {
    return settledTradeCount;
  }


  public void setSettledTradeCount(Integer settledTradeCount) {
    this.settledTradeCount = settledTradeCount;
  }


  public DexStatsDTO listedTokens(Integer listedTokens) {
    
    this.listedTokens = listedTokens;
    return this;
  }

   /**
   * The number of listed tokens.
   * @return listedTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of listed tokens.")

  public Integer getListedTokens() {
    return listedTokens;
  }


  public void setListedTokens(Integer listedTokens) {
    this.listedTokens = listedTokens;
  }


  public DexStatsDTO vid(Long vid) {
    
    this.vid = vid;
    return this;
  }

   /**
   * 
   * @return vid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getVid() {
    return vid;
  }


  public void setVid(Long vid) {
    this.vid = vid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DexStatsDTO dexStatsDTO = (DexStatsDTO) o;
    return Objects.equals(this.entryTime, dexStatsDTO.entryTime) &&
        Objects.equals(this.recvTime, dexStatsDTO.recvTime) &&
        Objects.equals(this.blockNumber, dexStatsDTO.blockNumber) &&
        Objects.equals(this.id, dexStatsDTO.id) &&
        Objects.equals(this.volumeInOwl, dexStatsDTO.volumeInOwl) &&
        Objects.equals(this.utilityInOwl, dexStatsDTO.utilityInOwl) &&
        Objects.equals(this.owlBurnt, dexStatsDTO.owlBurnt) &&
        Objects.equals(this.settledBatchCount, dexStatsDTO.settledBatchCount) &&
        Objects.equals(this.settledTradeCount, dexStatsDTO.settledTradeCount) &&
        Objects.equals(this.listedTokens, dexStatsDTO.listedTokens) &&
        Objects.equals(this.vid, dexStatsDTO.vid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryTime, recvTime, blockNumber, id, volumeInOwl, utilityInOwl, owlBurnt, settledBatchCount, settledTradeCount, listedTokens, vid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DexStatsDTO {\n");
    sb.append("    entryTime: ").append(toIndentedString(entryTime)).append("\n");
    sb.append("    recvTime: ").append(toIndentedString(recvTime)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    volumeInOwl: ").append(toIndentedString(volumeInOwl)).append("\n");
    sb.append("    utilityInOwl: ").append(toIndentedString(utilityInOwl)).append("\n");
    sb.append("    owlBurnt: ").append(toIndentedString(owlBurnt)).append("\n");
    sb.append("    settledBatchCount: ").append(toIndentedString(settledBatchCount)).append("\n");
    sb.append("    settledTradeCount: ").append(toIndentedString(settledTradeCount)).append("\n");
    sb.append("    listedTokens: ").append(toIndentedString(listedTokens)).append("\n");
    sb.append("    vid: ").append(toIndentedString(vid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entry_time");
    openapiFields.add("recv_time");
    openapiFields.add("block_number");
    openapiFields.add("id");
    openapiFields.add("volume_in_owl");
    openapiFields.add("utility_in_owl");
    openapiFields.add("owl_burnt");
    openapiFields.add("settled_batch_count");
    openapiFields.add("settled_trade_count");
    openapiFields.add("listed_tokens");
    openapiFields.add("vid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DexStatsDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DexStatsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DexStatsDTO is not found in the empty JSON string", DexStatsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DexStatsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DexStatsDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("volume_in_owl") != null && !jsonObj.get("volume_in_owl").isJsonNull()) && !jsonObj.get("volume_in_owl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volume_in_owl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volume_in_owl").toString()));
      }
      if ((jsonObj.get("utility_in_owl") != null && !jsonObj.get("utility_in_owl").isJsonNull()) && !jsonObj.get("utility_in_owl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `utility_in_owl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("utility_in_owl").toString()));
      }
      if ((jsonObj.get("owl_burnt") != null && !jsonObj.get("owl_burnt").isJsonNull()) && !jsonObj.get("owl_burnt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owl_burnt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owl_burnt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DexStatsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DexStatsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DexStatsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DexStatsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<DexStatsDTO>() {
           @Override
           public void write(JsonWriter out, DexStatsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DexStatsDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DexStatsDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DexStatsDTO
  * @throws IOException if the JSON string is invalid with respect to DexStatsDTO
  */
  public static DexStatsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DexStatsDTO.class);
  }

 /**
  * Convert an instance of DexStatsDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

