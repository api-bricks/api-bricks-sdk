/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BundleV3DTO;
import org.openapitools.client.model.BurnV3DTO;
import org.openapitools.client.model.FactoryV3DTO;
import org.openapitools.client.model.MintV3DTO;
import org.openapitools.client.model.PoolDayDataV3DTO;
import org.openapitools.client.model.PoolHourDataV3DTO;
import org.openapitools.client.model.PoolV3DTO;
import org.openapitools.client.model.PositionSnapshotV3DTO;
import org.openapitools.client.model.PositionV3DTO;
import org.openapitools.client.model.SwapV3DTO;
import org.openapitools.client.model.TickDayDataV3DTO;
import org.openapitools.client.model.TickV3DTO;
import org.openapitools.client.model.TokenHourDataV3DTO;
import org.openapitools.client.model.TokenV3DTO;
import org.openapitools.client.model.TokenV3DayDataDTO;
import org.openapitools.client.model.UniswapDayDataV3DTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UniswapV3Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UniswapV3Api() {
        this(Configuration.getDefaultApiClient());
    }

    public UniswapV3Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for chainsChainIdDappsUniswapv3BundleCurrentGet
     * @param chainId Chain id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3BundleCurrentGetCall(String chainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/bundle/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3BundleCurrentGetValidateBeforeCall(String chainId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BundleCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3BundleCurrentGetCall(chainId, _callback);
        return localVarCall;

    }

    /**
     * GetBundles
     * 
     * @param chainId Chain id (required)
     * @return List&lt;BundleV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<BundleV3DTO> chainsChainIdDappsUniswapv3BundleCurrentGet(String chainId) throws ApiException {
        ApiResponse<List<BundleV3DTO>> localVarResp = chainsChainIdDappsUniswapv3BundleCurrentGetWithHttpInfo(chainId);
        return localVarResp.getData();
    }

    /**
     * GetBundles
     * 
     * @param chainId Chain id (required)
     * @return ApiResponse&lt;List&lt;BundleV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BundleV3DTO>> chainsChainIdDappsUniswapv3BundleCurrentGetWithHttpInfo(String chainId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3BundleCurrentGetValidateBeforeCall(chainId, null);
        Type localVarReturnType = new TypeToken<List<BundleV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetBundles (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3BundleCurrentGetAsync(String chainId, final ApiCallback<List<BundleV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3BundleCurrentGetValidateBeforeCall(chainId, _callback);
        Type localVarReturnType = new TypeToken<List<BundleV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3BurnsCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3BurnsCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/burns/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3BurnsCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BurnsCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3BurnsCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetBurns
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;BurnV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<BurnV3DTO> chainsChainIdDappsUniswapv3BurnsCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<BurnV3DTO>> localVarResp = chainsChainIdDappsUniswapv3BurnsCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetBurns
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;BurnV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BurnV3DTO>> chainsChainIdDappsUniswapv3BurnsCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3BurnsCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<BurnV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetBurns (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3BurnsCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<BurnV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3BurnsCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<BurnV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3FactoryCurrentGet
     * @param chainId Chain id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3FactoryCurrentGetCall(String chainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/factory/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3FactoryCurrentGetValidateBeforeCall(String chainId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3FactoryCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3FactoryCurrentGetCall(chainId, _callback);
        return localVarCall;

    }

    /**
     * GetFactory
     * 
     * @param chainId Chain id (required)
     * @return List&lt;FactoryV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<FactoryV3DTO> chainsChainIdDappsUniswapv3FactoryCurrentGet(String chainId) throws ApiException {
        ApiResponse<List<FactoryV3DTO>> localVarResp = chainsChainIdDappsUniswapv3FactoryCurrentGetWithHttpInfo(chainId);
        return localVarResp.getData();
    }

    /**
     * GetFactory
     * 
     * @param chainId Chain id (required)
     * @return ApiResponse&lt;List&lt;FactoryV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FactoryV3DTO>> chainsChainIdDappsUniswapv3FactoryCurrentGetWithHttpInfo(String chainId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3FactoryCurrentGetValidateBeforeCall(chainId, null);
        Type localVarReturnType = new TypeToken<List<FactoryV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetFactory (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3FactoryCurrentGetAsync(String chainId, final ApiCallback<List<FactoryV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3FactoryCurrentGetValidateBeforeCall(chainId, _callback);
        Type localVarReturnType = new TypeToken<List<FactoryV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3MintsCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3MintsCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/mints/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3MintsCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3MintsCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3MintsCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetMints
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;MintV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<MintV3DTO> chainsChainIdDappsUniswapv3MintsCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<MintV3DTO>> localVarResp = chainsChainIdDappsUniswapv3MintsCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetMints
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;MintV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MintV3DTO>> chainsChainIdDappsUniswapv3MintsCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3MintsCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<MintV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetMints (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3MintsCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<MintV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3MintsCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<MintV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3PoolsCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PoolsCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/pools/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3PoolsCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PoolsCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetPools
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;PoolV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<PoolV3DTO> chainsChainIdDappsUniswapv3PoolsCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<PoolV3DTO>> localVarResp = chainsChainIdDappsUniswapv3PoolsCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetPools
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;PoolV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PoolV3DTO>> chainsChainIdDappsUniswapv3PoolsCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PoolsCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<PoolV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetPools (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PoolsCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<PoolV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PoolsCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<PoolV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PoolsDayDataCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/poolsDayData/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3PoolsDayDataCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PoolsDayDataCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetPoolsDayData
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;PoolDayDataV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<PoolDayDataV3DTO> chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<PoolDayDataV3DTO>> localVarResp = chainsChainIdDappsUniswapv3PoolsDayDataCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetPoolsDayData
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;PoolDayDataV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PoolDayDataV3DTO>> chainsChainIdDappsUniswapv3PoolsDayDataCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PoolsDayDataCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<PoolDayDataV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetPoolsDayData (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PoolsDayDataCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<PoolDayDataV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PoolsDayDataCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<PoolDayDataV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PoolsHourDataCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/poolsHourData/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3PoolsHourDataCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PoolsHourDataCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetPoolsHourData
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;PoolHourDataV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<PoolHourDataV3DTO> chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<PoolHourDataV3DTO>> localVarResp = chainsChainIdDappsUniswapv3PoolsHourDataCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetPoolsHourData
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;PoolHourDataV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PoolHourDataV3DTO>> chainsChainIdDappsUniswapv3PoolsHourDataCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PoolsHourDataCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<PoolHourDataV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetPoolsHourData (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PoolsHourDataCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<PoolHourDataV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PoolsHourDataCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<PoolHourDataV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/positionSnapshots/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetPositionSnapshot
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;PositionSnapshotV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<PositionSnapshotV3DTO> chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<PositionSnapshotV3DTO>> localVarResp = chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetPositionSnapshot
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;PositionSnapshotV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PositionSnapshotV3DTO>> chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<PositionSnapshotV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetPositionSnapshot (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<PositionSnapshotV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<PositionSnapshotV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3PositionsCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PositionsCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/positions/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3PositionsCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionsCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PositionsCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetPositions
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;PositionV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<PositionV3DTO> chainsChainIdDappsUniswapv3PositionsCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<PositionV3DTO>> localVarResp = chainsChainIdDappsUniswapv3PositionsCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetPositions
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;PositionV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PositionV3DTO>> chainsChainIdDappsUniswapv3PositionsCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PositionsCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<PositionV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetPositions (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3PositionsCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<PositionV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3PositionsCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<PositionV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3SwapsCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3SwapsCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/swaps/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3SwapsCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3SwapsCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3SwapsCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetSwaps
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;SwapV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<SwapV3DTO> chainsChainIdDappsUniswapv3SwapsCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<SwapV3DTO>> localVarResp = chainsChainIdDappsUniswapv3SwapsCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetSwaps
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;SwapV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SwapV3DTO>> chainsChainIdDappsUniswapv3SwapsCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3SwapsCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<SwapV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetSwaps (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3SwapsCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<SwapV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3SwapsCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<SwapV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3TicksCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TicksCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/ticks/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3TicksCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TicksCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetTicks
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;TickV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<TickV3DTO> chainsChainIdDappsUniswapv3TicksCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<TickV3DTO>> localVarResp = chainsChainIdDappsUniswapv3TicksCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetTicks
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;TickV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TickV3DTO>> chainsChainIdDappsUniswapv3TicksCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TicksCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<TickV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTicks (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TicksCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<TickV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TicksCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<TickV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3TicksDayDataCurrentGet
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TicksDayDataCurrentGetCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/ticksDayData/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPoolId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_pool_id", filterPoolId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3TicksDayDataCurrentGetValidateBeforeCall(String chainId, String filterPoolId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksDayDataCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TicksDayDataCurrentGetCall(chainId, filterPoolId, _callback);
        return localVarCall;

    }

    /**
     * GetTicksDayData
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return List&lt;TickDayDataV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<TickDayDataV3DTO> chainsChainIdDappsUniswapv3TicksDayDataCurrentGet(String chainId, String filterPoolId) throws ApiException {
        ApiResponse<List<TickDayDataV3DTO>> localVarResp = chainsChainIdDappsUniswapv3TicksDayDataCurrentGetWithHttpInfo(chainId, filterPoolId);
        return localVarResp.getData();
    }

    /**
     * GetTicksDayData
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @return ApiResponse&lt;List&lt;TickDayDataV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TickDayDataV3DTO>> chainsChainIdDappsUniswapv3TicksDayDataCurrentGetWithHttpInfo(String chainId, String filterPoolId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TicksDayDataCurrentGetValidateBeforeCall(chainId, filterPoolId, null);
        Type localVarReturnType = new TypeToken<List<TickDayDataV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTicksDayData (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterPoolId Filter pool id (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TicksDayDataCurrentGetAsync(String chainId, String filterPoolId, final ApiCallback<List<TickDayDataV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TicksDayDataCurrentGetValidateBeforeCall(chainId, filterPoolId, _callback);
        Type localVarReturnType = new TypeToken<List<TickDayDataV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3TokensCurrentGet
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TokensCurrentGetCall(String chainId, String filterTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/tokens/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterTokenId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_token_id", filterTokenId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3TokensCurrentGetValidateBeforeCall(String chainId, String filterTokenId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TokensCurrentGetCall(chainId, filterTokenId, _callback);
        return localVarCall;

    }

    /**
     * GetTokens
     * 
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @return List&lt;TokenV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<TokenV3DTO> chainsChainIdDappsUniswapv3TokensCurrentGet(String chainId, String filterTokenId) throws ApiException {
        ApiResponse<List<TokenV3DTO>> localVarResp = chainsChainIdDappsUniswapv3TokensCurrentGetWithHttpInfo(chainId, filterTokenId);
        return localVarResp.getData();
    }

    /**
     * GetTokens
     * 
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @return ApiResponse&lt;List&lt;TokenV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TokenV3DTO>> chainsChainIdDappsUniswapv3TokensCurrentGetWithHttpInfo(String chainId, String filterTokenId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TokensCurrentGetValidateBeforeCall(chainId, filterTokenId, null);
        Type localVarReturnType = new TypeToken<List<TokenV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTokens (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TokensCurrentGetAsync(String chainId, String filterTokenId, final ApiCallback<List<TokenV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TokensCurrentGetValidateBeforeCall(chainId, filterTokenId, _callback);
        Type localVarReturnType = new TypeToken<List<TokenV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3TokensDayDataCurrentGet
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TokensDayDataCurrentGetCall(String chainId, String filterTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/tokensDayData/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterTokenId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_token_id", filterTokenId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3TokensDayDataCurrentGetValidateBeforeCall(String chainId, String filterTokenId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensDayDataCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TokensDayDataCurrentGetCall(chainId, filterTokenId, _callback);
        return localVarCall;

    }

    /**
     * GetTokensDayData
     * 
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @return List&lt;TokenV3DayDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<TokenV3DayDataDTO> chainsChainIdDappsUniswapv3TokensDayDataCurrentGet(String chainId, String filterTokenId) throws ApiException {
        ApiResponse<List<TokenV3DayDataDTO>> localVarResp = chainsChainIdDappsUniswapv3TokensDayDataCurrentGetWithHttpInfo(chainId, filterTokenId);
        return localVarResp.getData();
    }

    /**
     * GetTokensDayData
     * 
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @return ApiResponse&lt;List&lt;TokenV3DayDataDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TokenV3DayDataDTO>> chainsChainIdDappsUniswapv3TokensDayDataCurrentGetWithHttpInfo(String chainId, String filterTokenId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TokensDayDataCurrentGetValidateBeforeCall(chainId, filterTokenId, null);
        Type localVarReturnType = new TypeToken<List<TokenV3DayDataDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTokensDayData (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TokensDayDataCurrentGetAsync(String chainId, String filterTokenId, final ApiCallback<List<TokenV3DayDataDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TokensDayDataCurrentGetValidateBeforeCall(chainId, filterTokenId, _callback);
        Type localVarReturnType = new TypeToken<List<TokenV3DayDataDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3TokensHourDataCurrentGet
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TokensHourDataCurrentGetCall(String chainId, String filterTokenId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/tokensHourData/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterTokenId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_token_id", filterTokenId));
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3TokensHourDataCurrentGetValidateBeforeCall(String chainId, String filterTokenId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensHourDataCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TokensHourDataCurrentGetCall(chainId, filterTokenId, _callback);
        return localVarCall;

    }

    /**
     * GetTokensHourData
     * 
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @return List&lt;TokenHourDataV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<TokenHourDataV3DTO> chainsChainIdDappsUniswapv3TokensHourDataCurrentGet(String chainId, String filterTokenId) throws ApiException {
        ApiResponse<List<TokenHourDataV3DTO>> localVarResp = chainsChainIdDappsUniswapv3TokensHourDataCurrentGetWithHttpInfo(chainId, filterTokenId);
        return localVarResp.getData();
    }

    /**
     * GetTokensHourData
     * 
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @return ApiResponse&lt;List&lt;TokenHourDataV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TokenHourDataV3DTO>> chainsChainIdDappsUniswapv3TokensHourDataCurrentGetWithHttpInfo(String chainId, String filterTokenId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TokensHourDataCurrentGetValidateBeforeCall(chainId, filterTokenId, null);
        Type localVarReturnType = new TypeToken<List<TokenHourDataV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTokensHourData (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param filterTokenId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3TokensHourDataCurrentGetAsync(String chainId, String filterTokenId, final ApiCallback<List<TokenHourDataV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3TokensHourDataCurrentGetValidateBeforeCall(chainId, filterTokenId, _callback);
        Type localVarReturnType = new TypeToken<List<TokenHourDataV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet
     * @param chainId Chain id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3UniswapDayDataCurrentGetCall(String chainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chains/{chain_id}/dapps/uniswapv3/uniswapDayData/current"
            .replaceAll("\\{" + "chain_id" + "\\}", localVarApiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call chainsChainIdDappsUniswapv3UniswapDayDataCurrentGetValidateBeforeCall(String chainId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet(Async)");
        }
        

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3UniswapDayDataCurrentGetCall(chainId, _callback);
        return localVarCall;

    }

    /**
     * GetUniswapDayData
     * 
     * @param chainId Chain id (required)
     * @return List&lt;UniswapDayDataV3DTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<UniswapDayDataV3DTO> chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet(String chainId) throws ApiException {
        ApiResponse<List<UniswapDayDataV3DTO>> localVarResp = chainsChainIdDappsUniswapv3UniswapDayDataCurrentGetWithHttpInfo(chainId);
        return localVarResp.getData();
    }

    /**
     * GetUniswapDayData
     * 
     * @param chainId Chain id (required)
     * @return ApiResponse&lt;List&lt;UniswapDayDataV3DTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UniswapDayDataV3DTO>> chainsChainIdDappsUniswapv3UniswapDayDataCurrentGetWithHttpInfo(String chainId) throws ApiException {
        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3UniswapDayDataCurrentGetValidateBeforeCall(chainId, null);
        Type localVarReturnType = new TypeToken<List<UniswapDayDataV3DTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetUniswapDayData (asynchronously)
     * 
     * @param chainId Chain id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call chainsChainIdDappsUniswapv3UniswapDayDataCurrentGetAsync(String chainId, final ApiCallback<List<UniswapDayDataV3DTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = chainsChainIdDappsUniswapv3UniswapDayDataCurrentGetValidateBeforeCall(chainId, _callback);
        Type localVarReturnType = new TypeToken<List<UniswapDayDataV3DTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
