/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CRYPTOPUNKSBidDTO;
import org.openapitools.client.model.CRYPTOPUNKSCollectionDTO;
import org.openapitools.client.model.CRYPTOPUNKSCollectionDailySnapshotDTO;
import org.openapitools.client.model.CRYPTOPUNKSDataSourcesDTO;
import org.openapitools.client.model.CRYPTOPUNKSItemDTO;
import org.openapitools.client.model.CRYPTOPUNKSMarketPlaceDTO;
import org.openapitools.client.model.CRYPTOPUNKSMarketplaceDailySnapshotDTO;
import org.openapitools.client.model.CRYPTOPUNKSTradeDTO;
import org.openapitools.client.model.CRYPTOPUNKSUserDTO;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CryptopunksApi
 */
@Disabled
public class CryptopunksApiTest {

    private final CryptopunksApi api = new CryptopunksApi();

    /**
     * Bids (current)
     *
     * Gets bids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSBidsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSBidDTO> response = api.cRYPTOPUNKSBidsCurrent();
        // TODO: test validations
    }

    /**
     * CollectionDailySnapshots (current)
     *
     * Gets collectionDailySnapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSCollectionDailySnapshotsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSCollectionDailySnapshotDTO> response = api.cRYPTOPUNKSCollectionDailySnapshotsCurrent();
        // TODO: test validations
    }

    /**
     * Collections (current)
     *
     * Gets collections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSCollectionsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSCollectionDTO> response = api.cRYPTOPUNKSCollectionsCurrent();
        // TODO: test validations
    }

    /**
     * DataSources (current)
     *
     * Gets dataSources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSDataSourcesCurrentTest() throws ApiException {
        List<CRYPTOPUNKSDataSourcesDTO> response = api.cRYPTOPUNKSDataSourcesCurrent();
        // TODO: test validations
    }

    /**
     * Bids (historical)
     *
     * Gets bids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSGetBidsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CRYPTOPUNKSBidDTO> response = api.cRYPTOPUNKSGetBidsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * CollectionDailySnapshots (historical)
     *
     * Gets collectionDailySnapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSGetCollectionDailySnapshotsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CRYPTOPUNKSCollectionDailySnapshotDTO> response = api.cRYPTOPUNKSGetCollectionDailySnapshotsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Collections (historical)
     *
     * Gets collections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSGetCollectionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CRYPTOPUNKSCollectionDTO> response = api.cRYPTOPUNKSGetCollectionsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * DataSources (historical)
     *
     * Gets dataSources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSGetDataSourcesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CRYPTOPUNKSDataSourcesDTO> response = api.cRYPTOPUNKSGetDataSourcesHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * Items (historical)
     *
     * Gets items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSGetItemsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CRYPTOPUNKSItemDTO> response = api.cRYPTOPUNKSGetItemsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * MarketPlaces (historical)
     *
     * Gets marketPlaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSGetMarketPlacesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CRYPTOPUNKSMarketPlaceDTO> response = api.cRYPTOPUNKSGetMarketPlacesHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * MarketplaceDailySnapshots (historical)
     *
     * Gets marketplaceDailySnapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSGetMarketplaceDailySnapshotsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CRYPTOPUNKSMarketplaceDailySnapshotDTO> response = api.cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * Trades (historical)
     *
     * Gets trades.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSGetTradesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CRYPTOPUNKSTradeDTO> response = api.cRYPTOPUNKSGetTradesHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * Users (historical)
     *
     * Gets users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSGetUsersHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CRYPTOPUNKSUserDTO> response = api.cRYPTOPUNKSGetUsersHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * Items (current)
     *
     * Gets items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSItemsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSItemDTO> response = api.cRYPTOPUNKSItemsCurrent();
        // TODO: test validations
    }

    /**
     * MarketPlaces (current)
     *
     * Gets marketPlaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSMarketPlacesCurrentTest() throws ApiException {
        List<CRYPTOPUNKSMarketPlaceDTO> response = api.cRYPTOPUNKSMarketPlacesCurrent();
        // TODO: test validations
    }

    /**
     * MarketplaceDailySnapshots (current)
     *
     * Gets marketplaceDailySnapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSMarketplaceDailySnapshotsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSMarketplaceDailySnapshotDTO> response = api.cRYPTOPUNKSMarketplaceDailySnapshotsCurrent();
        // TODO: test validations
    }

    /**
     * Trades (current)
     *
     * Gets trades.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSTradesCurrentTest() throws ApiException {
        List<CRYPTOPUNKSTradeDTO> response = api.cRYPTOPUNKSTradesCurrent();
        // TODO: test validations
    }

    /**
     * Users (current)
     *
     * Gets users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSUsersCurrentTest() throws ApiException {
        List<CRYPTOPUNKSUserDTO> response = api.cRYPTOPUNKSUsersCurrent();
        // TODO: test validations
    }

}
