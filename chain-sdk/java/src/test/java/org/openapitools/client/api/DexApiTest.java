/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DexBatchDTO;
import org.openapitools.client.model.DexDepositDTO;
import org.openapitools.client.model.DexOrderDTO;
import org.openapitools.client.model.DexPriceDTO;
import org.openapitools.client.model.DexSolutionDTO;
import org.openapitools.client.model.DexStatsDTO;
import org.openapitools.client.model.DexTokenDTO;
import org.openapitools.client.model.DexTradeDTO;
import org.openapitools.client.model.DexUserDTO;
import org.openapitools.client.model.DexWithdrawDTO;
import org.openapitools.client.model.DexWithdrawRequestDTO;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DexApi
 */
@Disabled
public class DexApiTest {

    private final DexApi api = new DexApi();

    /**
     * BatchDTOs (historical) ðŸ”¥
     *
     * Gets BatchDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetBatchDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexBatchDTO> response = api.dexGetBatchDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Batches (historical)
     *
     * Gets batches.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetBatchesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<DexBatchDTO> response = api.dexGetBatchesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * DepositDTOs (historical) ðŸ”¥
     *
     * Gets DepositDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetDepositDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexDepositDTO> response = api.dexGetDepositDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Deposits (historical)
     *
     * Gets deposits.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetDepositsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<DexDepositDTO> response = api.dexGetDepositsHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * OrderDTOs (historical) ðŸ”¥
     *
     * Gets OrderDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetOrderDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexOrderDTO> response = api.dexGetOrderDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Orders (historical)
     *
     * Gets orders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetOrdersHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<DexOrderDTO> response = api.dexGetOrdersHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * PriceDTOs (historical) ðŸ”¥
     *
     * Gets PriceDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetPriceDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexPriceDTO> response = api.dexGetPriceDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Prices (historical)
     *
     * Gets prices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetPricesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<DexPriceDTO> response = api.dexGetPricesHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * SolutionDTOs (historical) ðŸ”¥
     *
     * Gets SolutionDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetSolutionDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexSolutionDTO> response = api.dexGetSolutionDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Solutions (historical)
     *
     * Gets solutions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetSolutionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<DexSolutionDTO> response = api.dexGetSolutionsHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * StatsDTOs (historical) ðŸ”¥
     *
     * Gets StatsDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetStatsDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexStatsDTO> response = api.dexGetStatsDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Stats (historical)
     *
     * Gets stats.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetStatsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<DexStatsDTO> response = api.dexGetStatsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * TokenDTOs (historical) ðŸ”¥
     *
     * Gets TokenDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetTokenDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexTokenDTO> response = api.dexGetTokenDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Tokens (historical) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<DexTokenDTO> response = api.dexGetTokensHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * TradeDTOs (historical) ðŸ”¥
     *
     * Gets TradeDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetTradeDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexTradeDTO> response = api.dexGetTradeDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Trades (historical) ðŸ”¥
     *
     * Gets trades.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetTradesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<DexTradeDTO> response = api.dexGetTradesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * UserDTOs (historical) ðŸ”¥
     *
     * Gets UserDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetUserDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexUserDTO> response = api.dexGetUserDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Users (historical)
     *
     * Gets users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetUsersHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<DexUserDTO> response = api.dexGetUsersHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * WithdrawDTOs (historical) ðŸ”¥
     *
     * Gets WithdrawDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetWithdrawDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexWithdrawDTO> response = api.dexGetWithdrawDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * WithdrawRequestDTOs (historical) ðŸ”¥
     *
     * Gets WithdrawRequestDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetWithdrawRequestDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<DexWithdrawRequestDTO> response = api.dexGetWithdrawRequestDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Withdraws (historical)
     *
     * Gets withdraws.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetWithdrawsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<DexWithdrawDTO> response = api.dexGetWithdrawsHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * WithdrawsRequests (historical)
     *
     * Gets withdraws requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetWithdrawsRequestsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<DexWithdrawRequestDTO> response = api.dexGetWithdrawsRequestsHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

}
