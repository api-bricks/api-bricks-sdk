/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CurveAccountDTO;
import org.openapitools.client.model.CurveAddLiquidityEventDTO;
import org.openapitools.client.model.CurveAdminFeeChangeLogDTO;
import org.openapitools.client.model.CurveAmplificationCoeffChangeLogDTO;
import org.openapitools.client.model.CurveCoinDTO;
import org.openapitools.client.model.CurveContractDTO;
import org.openapitools.client.model.CurveContractVersionDTO;
import org.openapitools.client.model.CurveDailyVolumeDTO;
import org.openapitools.client.model.CurveExchangeDTO;
import org.openapitools.client.model.CurveFeeChangeLogDTO;
import org.openapitools.client.model.CurveGaugeDTO;
import org.openapitools.client.model.CurveGaugeDepositDTO;
import org.openapitools.client.model.CurveGaugeLiquidityDTO;
import org.openapitools.client.model.CurveGaugeTotalWeightDTO;
import org.openapitools.client.model.CurveGaugeTypeDTO;
import org.openapitools.client.model.CurveGaugeTypeWeightDTO;
import org.openapitools.client.model.CurveGaugeWeightDTO;
import org.openapitools.client.model.CurveGaugeWeightVoteDTO;
import org.openapitools.client.model.CurveGaugeWithdrawDTO;
import org.openapitools.client.model.CurveHourlyVolumeDTO;
import org.openapitools.client.model.CurveLpTokenDTO;
import org.openapitools.client.model.CurvePoolDTO;
import org.openapitools.client.model.CurveProposalDTO;
import org.openapitools.client.model.CurveProposalVoteDTO;
import org.openapitools.client.model.CurveRemoveLiquidityEventDTO;
import org.openapitools.client.model.CurveRemoveLiquidityOneEventDTO;
import org.openapitools.client.model.CurveSystemStateDTO;
import org.openapitools.client.model.CurveTokenDTO;
import org.openapitools.client.model.CurveTransferOwnershipEventDTO;
import org.openapitools.client.model.CurveUnderlyingCoinDTO;
import org.openapitools.client.model.CurveVotingAppDTO;
import org.openapitools.client.model.CurveWeeklyVolumeDTO;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CurveApi
 */
@Disabled
public class CurveApiTest {

    private final CurveApi api = new CurveApi();

    /**
     * AccountDTOs (historical) ðŸ”¥
     *
     * Gets AccountDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAccountDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAccountDTO> response = api.curveGetAccountDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Accounts (historical)
     *
     * Gets accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAccountsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveAccountDTO> response = api.curveGetAccountsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * AddLiquidityEventDTOs (historical) ðŸ”¥
     *
     * Gets AddLiquidityEventDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAddLiquidityEventDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAddLiquidityEventDTO> response = api.curveGetAddLiquidityEventDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * AddLiquidityEvents (historical)
     *
     * Gets add liquidity events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAddLiquidityEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAddLiquidityEventDTO> response = api.curveGetAddLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * AdminFeeChangeLogDTOs (historical) ðŸ”¥
     *
     * Gets AdminFeeChangeLogDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAdminFeeChangeLogDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAdminFeeChangeLogDTO> response = api.curveGetAdminFeeChangeLogDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * AdminFeeChangeLogs (historical)
     *
     * Gets admin fee change logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAdminFeeChangeLogsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAdminFeeChangeLogDTO> response = api.curveGetAdminFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * AmplificationCoeffChangeLogDTOs (historical) ðŸ”¥
     *
     * Gets AmplificationCoeffChangeLogDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAmplificationCoeffChangeLogDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAmplificationCoeffChangeLogDTO> response = api.curveGetAmplificationCoeffChangeLogDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * AmplificationCoeffChangeLogs (historical)
     *
     * Gets amplification coeff change logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAmplificationCoeffChangeLogsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAmplificationCoeffChangeLogDTO> response = api.curveGetAmplificationCoeffChangeLogsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * CoinDTOs (historical) ðŸ”¥
     *
     * Gets CoinDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetCoinDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveCoinDTO> response = api.curveGetCoinDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Coins (historical)
     *
     * Gets coins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetCoinsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveCoinDTO> response = api.curveGetCoinsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * ContractDTOs (historical) ðŸ”¥
     *
     * Gets ContractDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetContractDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveContractDTO> response = api.curveGetContractDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * ContractVersionDTOs (historical) ðŸ”¥
     *
     * Gets ContractVersionDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetContractVersionDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveContractVersionDTO> response = api.curveGetContractVersionDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Contracts (historical)
     *
     * Gets contracts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetContractsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveContractDTO> response = api.curveGetContractsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * ContractsVersions (historical)
     *
     * Gets contracts versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetContractsVersionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveContractVersionDTO> response = api.curveGetContractsVersionsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * DailyVolumeDTOs (historical) ðŸ”¥
     *
     * Gets DailyVolumeDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetDailyVolumeDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveDailyVolumeDTO> response = api.curveGetDailyVolumeDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * DailyVolumes (historical)
     *
     * Gets daily volumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetDailyVolumesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveDailyVolumeDTO> response = api.curveGetDailyVolumesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * ExchangeDTOs (historical) ðŸ”¥
     *
     * Gets ExchangeDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetExchangeDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveExchangeDTO> response = api.curveGetExchangeDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Exchanges (historical) ðŸ”¥
     *
     * Gets exchanges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetExchangesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveExchangeDTO> response = api.curveGetExchangesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * FeeChangeLogDTOs (historical) ðŸ”¥
     *
     * Gets FeeChangeLogDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetFeeChangeLogDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveFeeChangeLogDTO> response = api.curveGetFeeChangeLogDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * FeeChangeLogs (historical)
     *
     * Gets fee change logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetFeeChangeLogsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveFeeChangeLogDTO> response = api.curveGetFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugeDTOs (historical) ðŸ”¥
     *
     * Gets GaugeDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeDTO> response = api.curveGetGaugeDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugeDepositDTOs (historical) ðŸ”¥
     *
     * Gets GaugeDepositDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeDepositDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeDepositDTO> response = api.curveGetGaugeDepositDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugeLiquidityDTOs (historical) ðŸ”¥
     *
     * Gets GaugeLiquidityDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeLiquidityDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeLiquidityDTO> response = api.curveGetGaugeLiquidityDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugeTotalWeightDTOs (historical) ðŸ”¥
     *
     * Gets GaugeTotalWeightDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeTotalWeightDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeTotalWeightDTO> response = api.curveGetGaugeTotalWeightDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugeTypeDTOs (historical) ðŸ”¥
     *
     * Gets GaugeTypeDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeTypeDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeTypeDTO> response = api.curveGetGaugeTypeDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugeTypeWeightDTOs (historical) ðŸ”¥
     *
     * Gets GaugeTypeWeightDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeTypeWeightDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeTypeWeightDTO> response = api.curveGetGaugeTypeWeightDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugeWeightDTOs (historical) ðŸ”¥
     *
     * Gets GaugeWeightDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeWeightDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeWeightDTO> response = api.curveGetGaugeWeightDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugeWeightVoteDTOs (historical) ðŸ”¥
     *
     * Gets GaugeWeightVoteDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeWeightVoteDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeWeightVoteDTO> response = api.curveGetGaugeWeightVoteDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugeWithdrawDTOs (historical) ðŸ”¥
     *
     * Gets GaugeWithdrawDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeWithdrawDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeWithdrawDTO> response = api.curveGetGaugeWithdrawDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugesDeposits (historical)
     *
     * Gets gauges deposits.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesDepositsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeDepositDTO> response = api.curveGetGaugesDepositsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Gauges (historical)
     *
     * Gets gauges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeDTO> response = api.curveGetGaugesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GaugesLiquidity (historical)
     *
     * Gets gauges liquidity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesLiquidityHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeLiquidityDTO> response = api.curveGetGaugesLiquidityHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GaugesTotalWeights (historical)
     *
     * Gets gauges total weights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesTotalWeightsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeTotalWeightDTO> response = api.curveGetGaugesTotalWeightsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GaugesTypes (historical)
     *
     * Gets gauges types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesTypesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeTypeDTO> response = api.curveGetGaugesTypesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GaugesTypesWeights (historical)
     *
     * Gets gauges types weights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesTypesWeightsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeTypeWeightDTO> response = api.curveGetGaugesTypesWeightsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GaugesWeights (historical)
     *
     * Gets gauges weights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesWeightsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeWeightDTO> response = api.curveGetGaugesWeightsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GaugesWeightsVotes (historical)
     *
     * Gets gauges weights votes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesWeightsVotesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeWeightVoteDTO> response = api.curveGetGaugesWeightsVotesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GaugesWithdraw (historical)
     *
     * Gets gauges withdraws.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesWithdrawHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeWithdrawDTO> response = api.curveGetGaugesWithdrawHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * HourlyVolumeDTOs (historical) ðŸ”¥
     *
     * Gets HourlyVolumeDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetHourlyVolumeDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveHourlyVolumeDTO> response = api.curveGetHourlyVolumeDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * HourlyVolumes (historical)
     *
     * Gets hourly volumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetHourlyVolumesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveHourlyVolumeDTO> response = api.curveGetHourlyVolumesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * LpTokenDTOs (historical) ðŸ”¥
     *
     * Gets LpTokenDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetLpTokenDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveLpTokenDTO> response = api.curveGetLpTokenDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * LpTokens (historical)
     *
     * Gets lp tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetLpTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveLpTokenDTO> response = api.curveGetLpTokensHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * PoolDTOs (historical) ðŸ”¥
     *
     * Gets PoolDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetPoolDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurvePoolDTO> response = api.curveGetPoolDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Pools (historical) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetPoolsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurvePoolDTO> response = api.curveGetPoolsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * ProposalDTOs (historical) ðŸ”¥
     *
     * Gets ProposalDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetProposalDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveProposalDTO> response = api.curveGetProposalDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * ProposalVoteDTOs (historical) ðŸ”¥
     *
     * Gets ProposalVoteDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetProposalVoteDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveProposalVoteDTO> response = api.curveGetProposalVoteDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Proposals (historical)
     *
     * Gets proposals.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetProposalsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveProposalDTO> response = api.curveGetProposalsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * ProposalsVotes (historical)
     *
     * Gets proposals votes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetProposalsVotesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveProposalVoteDTO> response = api.curveGetProposalsVotesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * RemoveLiquidityEventDTOs (historical) ðŸ”¥
     *
     * Gets RemoveLiquidityEventDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetRemoveLiquidityEventDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveRemoveLiquidityEventDTO> response = api.curveGetRemoveLiquidityEventDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * RemoveLiquidityEvents (historical)
     *
     * Gets remove liquidity events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetRemoveLiquidityEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveRemoveLiquidityEventDTO> response = api.curveGetRemoveLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * RemoveLiquidityOneEventDTOs (historical) ðŸ”¥
     *
     * Gets RemoveLiquidityOneEventDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetRemoveLiquidityOneEventDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveRemoveLiquidityOneEventDTO> response = api.curveGetRemoveLiquidityOneEventDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * RemoveLiquidityOneEvents (historical)
     *
     * Gets remove liquidity one events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetRemoveLiquidityOneEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveRemoveLiquidityOneEventDTO> response = api.curveGetRemoveLiquidityOneEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * SystemStateDTOs (historical) ðŸ”¥
     *
     * Gets SystemStateDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetSystemStateDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveSystemStateDTO> response = api.curveGetSystemStateDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * SystemStates (historical)
     *
     * Gets system states.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetSystemStatesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveSystemStateDTO> response = api.curveGetSystemStatesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * TokenDTOs (historical) ðŸ”¥
     *
     * Gets TokenDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetTokenDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveTokenDTO> response = api.curveGetTokenDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Tokens (historical) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<CurveTokenDTO> response = api.curveGetTokensHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * TransferOwnershipEventDTOs (historical) ðŸ”¥
     *
     * Gets TransferOwnershipEventDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetTransferOwnershipEventDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveTransferOwnershipEventDTO> response = api.curveGetTransferOwnershipEventDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * TransferOwnershipEvents (historical)
     *
     * Gets transfer ownership events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetTransferOwnershipEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveTransferOwnershipEventDTO> response = api.curveGetTransferOwnershipEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * UnderlyingCoinDTOs (historical) ðŸ”¥
     *
     * Gets UnderlyingCoinDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetUnderlyingCoinDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveUnderlyingCoinDTO> response = api.curveGetUnderlyingCoinDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * UnderlyingCoins (historical)
     *
     * Gets underlying coins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetUnderlyingCoinsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveUnderlyingCoinDTO> response = api.curveGetUnderlyingCoinsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * VotingAppDTOs (historical) ðŸ”¥
     *
     * Gets VotingAppDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetVotingAppDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveVotingAppDTO> response = api.curveGetVotingAppDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * VotingApps (historical)
     *
     * Gets voting apps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetVotingAppsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveVotingAppDTO> response = api.curveGetVotingAppsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * WeeklyVolumeDTOs (historical) ðŸ”¥
     *
     * Gets WeeklyVolumeDTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetWeeklyVolumeDTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveWeeklyVolumeDTO> response = api.curveGetWeeklyVolumeDTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * WeeklyVolumes (historical)
     *
     * Gets weekly volumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetWeeklyVolumesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveWeeklyVolumeDTO> response = api.curveGetWeeklyVolumesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

}
