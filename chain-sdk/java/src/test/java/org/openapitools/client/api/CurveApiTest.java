/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CurveAccountDTO;
import org.openapitools.client.model.CurveAddLiquidityEventDTO;
import org.openapitools.client.model.CurveAdminFeeChangeLogDTO;
import org.openapitools.client.model.CurveAmplificationCoeffChangeLogDTO;
import org.openapitools.client.model.CurveCoinDTO;
import org.openapitools.client.model.CurveContractDTO;
import org.openapitools.client.model.CurveContractVersionDTO;
import org.openapitools.client.model.CurveDailyVolumeDTO;
import org.openapitools.client.model.CurveExchangeDTO;
import org.openapitools.client.model.CurveFeeChangeLogDTO;
import org.openapitools.client.model.CurveGaugeDTO;
import org.openapitools.client.model.CurveGaugeDepositDTO;
import org.openapitools.client.model.CurveGaugeLiquidityDTO;
import org.openapitools.client.model.CurveGaugeTotalWeightDTO;
import org.openapitools.client.model.CurveGaugeTypeDTO;
import org.openapitools.client.model.CurveGaugeTypeWeightDTO;
import org.openapitools.client.model.CurveGaugeWeightDTO;
import org.openapitools.client.model.CurveGaugeWeightVoteDTO;
import org.openapitools.client.model.CurveGaugeWithdrawDTO;
import org.openapitools.client.model.CurveHourlyVolumeDTO;
import org.openapitools.client.model.CurveLpTokenDTO;
import org.openapitools.client.model.CurvePoolDTO;
import org.openapitools.client.model.CurveProposalDTO;
import org.openapitools.client.model.CurveProposalVoteDTO;
import org.openapitools.client.model.CurveRemoveLiquidityEventDTO;
import org.openapitools.client.model.CurveRemoveLiquidityOneEventDTO;
import org.openapitools.client.model.CurveSystemStateDTO;
import org.openapitools.client.model.CurveTokenDTO;
import org.openapitools.client.model.CurveTransferOwnershipEventDTO;
import org.openapitools.client.model.CurveUnderlyingCoinDTO;
import org.openapitools.client.model.CurveVotingAppDTO;
import org.openapitools.client.model.CurveWeeklyVolumeDTO;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CurveApi
 */
@Disabled
public class CurveApiTest {

    private final CurveApi api = new CurveApi();

    /**
     * GetAccounts (historical)
     *
     * Gets accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAccountsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveAccountDTO> response = api.curveGetAccountsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetAddLiquidityEvents (historical)
     *
     * Gets add liquidity events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAddLiquidityEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAddLiquidityEventDTO> response = api.curveGetAddLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetAdminFeeChangeLogs (historical)
     *
     * Gets admin fee change logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAdminFeeChangeLogsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAdminFeeChangeLogDTO> response = api.curveGetAdminFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetAmplificationCoeffChangeLogs (historical)
     *
     * Gets amplification coeff change logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAmplificationCoeffChangeLogsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveAmplificationCoeffChangeLogDTO> response = api.curveGetAmplificationCoeffChangeLogsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetCoins (historical)
     *
     * Gets coins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetCoinsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveCoinDTO> response = api.curveGetCoinsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetContracts (historical)
     *
     * Gets contracts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetContractsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveContractDTO> response = api.curveGetContractsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetContractsVersions (historical)
     *
     * Gets contracts versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetContractsVersionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveContractVersionDTO> response = api.curveGetContractsVersionsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetDailyVolumes (historical)
     *
     * Gets daily volumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetDailyVolumesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveDailyVolumeDTO> response = api.curveGetDailyVolumesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetExchanges (historical) ðŸ”¥
     *
     * Gets exchanges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetExchangesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveExchangeDTO> response = api.curveGetExchangesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetFeeChangeLogs (historical)
     *
     * Gets fee change logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetFeeChangeLogsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveFeeChangeLogDTO> response = api.curveGetFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetGaugesDeposits (historical)
     *
     * Gets gauges deposits.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesDepositsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeDepositDTO> response = api.curveGetGaugesDepositsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetGauges (historical)
     *
     * Gets gauges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveGaugeDTO> response = api.curveGetGaugesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetGaugesLiquidity (historical)
     *
     * Gets gauges liquidity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesLiquidityHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeLiquidityDTO> response = api.curveGetGaugesLiquidityHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetGaugesTotalWeights (historical)
     *
     * Gets gauges total weights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesTotalWeightsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeTotalWeightDTO> response = api.curveGetGaugesTotalWeightsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetGaugesTypes (historical)
     *
     * Gets gauges types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesTypesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeTypeDTO> response = api.curveGetGaugesTypesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetGaugesTypesWeights (historical)
     *
     * Gets gauges types weights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesTypesWeightsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeTypeWeightDTO> response = api.curveGetGaugesTypesWeightsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetGaugesWeights (historical)
     *
     * Gets gauges weights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesWeightsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeWeightDTO> response = api.curveGetGaugesWeightsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetGaugesWeightsVotes (historical)
     *
     * Gets gauges weights votes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesWeightsVotesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeWeightVoteDTO> response = api.curveGetGaugesWeightsVotesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetGaugesWithdraw (historical)
     *
     * Gets gauges withdraws.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesWithdrawHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveGaugeWithdrawDTO> response = api.curveGetGaugesWithdrawHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetHourlyVolumes (historical)
     *
     * Gets hourly volumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetHourlyVolumesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveHourlyVolumeDTO> response = api.curveGetHourlyVolumesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetLpTokens (historical)
     *
     * Gets lp tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetLpTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveLpTokenDTO> response = api.curveGetLpTokensHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPools (historical) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetPoolsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurvePoolDTO> response = api.curveGetPoolsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetProposals (historical)
     *
     * Gets proposals.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetProposalsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveProposalDTO> response = api.curveGetProposalsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetProposalsVotes (historical)
     *
     * Gets proposals votes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetProposalsVotesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveProposalVoteDTO> response = api.curveGetProposalsVotesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetRemoveLiquidityEvents (historical)
     *
     * Gets remove liquidity events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetRemoveLiquidityEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveRemoveLiquidityEventDTO> response = api.curveGetRemoveLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetRemoveLiquidityOneEvents (historical)
     *
     * Gets remove liquidity one events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetRemoveLiquidityOneEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveRemoveLiquidityOneEventDTO> response = api.curveGetRemoveLiquidityOneEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetSystemStates (historical)
     *
     * Gets system states.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetSystemStatesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveSystemStateDTO> response = api.curveGetSystemStatesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetTokens (historical) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<CurveTokenDTO> response = api.curveGetTokensHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * GetTransferOwnershipEvents (historical)
     *
     * Gets transfer ownership events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetTransferOwnershipEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveTransferOwnershipEventDTO> response = api.curveGetTransferOwnershipEventsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetUnderlyingCoins (historical)
     *
     * Gets underlying coins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetUnderlyingCoinsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveUnderlyingCoinDTO> response = api.curveGetUnderlyingCoinsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetVotingApps (historical)
     *
     * Gets voting apps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetVotingAppsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<CurveVotingAppDTO> response = api.curveGetVotingAppsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetWeeklyVolumes (historical)
     *
     * Gets weekly volumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetWeeklyVolumesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<CurveWeeklyVolumeDTO> response = api.curveGetWeeklyVolumesHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

}
