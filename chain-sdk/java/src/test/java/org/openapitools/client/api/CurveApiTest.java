/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CurveAccountDTO;
import org.openapitools.client.model.CurveAddLiquidityEventDTO;
import org.openapitools.client.model.CurveAdminFeeChangeLogDTO;
import org.openapitools.client.model.CurveAmplificationCoeffChangeLogDTO;
import org.openapitools.client.model.CurveCoinDTO;
import org.openapitools.client.model.CurveContractDTO;
import org.openapitools.client.model.CurveContractVersionDTO;
import org.openapitools.client.model.CurveDailyVolumeDTO;
import org.openapitools.client.model.CurveExchangeDTO;
import org.openapitools.client.model.CurveFeeChangeLogDTO;
import org.openapitools.client.model.CurveGaugeDTO;
import org.openapitools.client.model.CurveGaugeDepositDTO;
import org.openapitools.client.model.CurveGaugeLiquidityDTO;
import org.openapitools.client.model.CurveGaugeTotalWeightDTO;
import org.openapitools.client.model.CurveGaugeTypeDTO;
import org.openapitools.client.model.CurveGaugeTypeWeightDTO;
import org.openapitools.client.model.CurveGaugeWeightDTO;
import org.openapitools.client.model.CurveGaugeWeightVoteDTO;
import org.openapitools.client.model.CurveGaugeWithdrawDTO;
import org.openapitools.client.model.CurveHourlyVolumeDTO;
import org.openapitools.client.model.CurveLpTokenDTO;
import org.openapitools.client.model.CurvePoolDTO;
import org.openapitools.client.model.CurveProposalDTO;
import org.openapitools.client.model.CurveProposalVoteDTO;
import org.openapitools.client.model.CurveRemoveLiquidityEventDTO;
import org.openapitools.client.model.CurveRemoveLiquidityOneEventDTO;
import org.openapitools.client.model.CurveSystemStateDTO;
import org.openapitools.client.model.CurveTokenDTO;
import org.openapitools.client.model.CurveTransferOwnershipEventDTO;
import org.openapitools.client.model.CurveUnderlyingCoinDTO;
import org.openapitools.client.model.CurveVotingAppDTO;
import org.openapitools.client.model.CurveWeeklyVolumeDTO;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CurveApi
 */
@Disabled
public class CurveApiTest {

    private final CurveApi api = new CurveApi();

    /**
     * Accounts (historical) ðŸ”¥
     *
     * Gets accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAccountsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String address = null;
        List<CurveAccountDTO> response = api.curveGetAccountsHistorical(startBlock, endBlock, startDate, endDate, id, address);
        // TODO: test validations
    }

    /**
     * AddLiquidityEvents (historical) ðŸ”¥
     *
     * Gets addliquidityevents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAddLiquidityEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveAddLiquidityEventDTO> response = api.curveGetAddLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * AdminFeeChangeLogs (historical) ðŸ”¥
     *
     * Gets adminfeechangelogs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAdminFeeChangeLogsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveAdminFeeChangeLogDTO> response = api.curveGetAdminFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * AmplificationCoeffChangeLogs (historical) ðŸ”¥
     *
     * Gets amplificationcoeffchangelogs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetAmplificationCoeffChangeLogsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveAmplificationCoeffChangeLogDTO> response = api.curveGetAmplificationCoeffChangeLogsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * Coins (historical) ðŸ”¥
     *
     * Gets coins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetCoinsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveCoinDTO> response = api.curveGetCoinsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * ContractVersions (historical) ðŸ”¥
     *
     * Gets contractversions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetContractVersionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String address = null;
        List<CurveContractVersionDTO> response = api.curveGetContractVersionsHistorical(startBlock, endBlock, startDate, endDate, id, address);
        // TODO: test validations
    }

    /**
     * Contracts (historical) ðŸ”¥
     *
     * Gets contracts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetContractsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CurveContractDTO> response = api.curveGetContractsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * DailyVolumes (historical) ðŸ”¥
     *
     * Gets dailyvolumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetDailyVolumesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveDailyVolumeDTO> response = api.curveGetDailyVolumesHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * Exchanges (historical) ðŸ”¥
     *
     * Gets exchanges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetExchangesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveExchangeDTO> response = api.curveGetExchangesHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * FeeChangeLogs (historical) ðŸ”¥
     *
     * Gets feechangelogs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetFeeChangeLogsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveFeeChangeLogDTO> response = api.curveGetFeeChangeLogsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * GaugeDeposits (historical) ðŸ”¥
     *
     * Gets gaugedeposits.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeDepositsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CurveGaugeDepositDTO> response = api.curveGetGaugeDepositsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * GaugeLiquiditys (historical) ðŸ”¥
     *
     * Gets gaugeliquiditys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeLiquiditysHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String user = null;
        List<CurveGaugeLiquidityDTO> response = api.curveGetGaugeLiquiditysHistorical(startBlock, endBlock, startDate, endDate, id, user);
        // TODO: test validations
    }

    /**
     * GaugeTotalWeights (historical) ðŸ”¥
     *
     * Gets gaugetotalweights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeTotalWeightsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CurveGaugeTotalWeightDTO> response = api.curveGetGaugeTotalWeightsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * GaugeTypeWeights (historical) ðŸ”¥
     *
     * Gets gaugetypeweights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeTypeWeightsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CurveGaugeTypeWeightDTO> response = api.curveGetGaugeTypeWeightsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * GaugeTypes (historical) ðŸ”¥
     *
     * Gets gaugetypes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeTypesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String name = null;
        List<CurveGaugeTypeDTO> response = api.curveGetGaugeTypesHistorical(startBlock, endBlock, startDate, endDate, id, name);
        // TODO: test validations
    }

    /**
     * GaugeWeightVotes (historical) ðŸ”¥
     *
     * Gets gaugeweightvotes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeWeightVotesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String user = null;
        List<CurveGaugeWeightVoteDTO> response = api.curveGetGaugeWeightVotesHistorical(startBlock, endBlock, startDate, endDate, id, user);
        // TODO: test validations
    }

    /**
     * GaugeWeights (historical) ðŸ”¥
     *
     * Gets gaugeweights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeWeightsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CurveGaugeWeightDTO> response = api.curveGetGaugeWeightsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * GaugeWithdraws (historical) ðŸ”¥
     *
     * Gets gaugewithdraws.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugeWithdrawsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CurveGaugeWithdrawDTO> response = api.curveGetGaugeWithdrawsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * Gauges (historical) ðŸ”¥
     *
     * Gets gauges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetGaugesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String address = null;
        String pool = null;
        List<CurveGaugeDTO> response = api.curveGetGaugesHistorical(startBlock, endBlock, startDate, endDate, id, address, pool);
        // TODO: test validations
    }

    /**
     * HourlyVolumes (historical) ðŸ”¥
     *
     * Gets hourlyvolumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetHourlyVolumesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveHourlyVolumeDTO> response = api.curveGetHourlyVolumesHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * LpTokens (historical) ðŸ”¥
     *
     * Gets lptokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetLpTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String address = null;
        String name = null;
        String symbol = null;
        String pool = null;
        List<CurveLpTokenDTO> response = api.curveGetLpTokensHistorical(startBlock, endBlock, startDate, endDate, id, address, name, symbol, pool);
        // TODO: test validations
    }

    /**
     * Pools (historical) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetPoolsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String name = null;
        List<CurvePoolDTO> response = api.curveGetPoolsHistorical(startBlock, endBlock, startDate, endDate, id, name);
        // TODO: test validations
    }

    /**
     * ProposalVotes (historical) ðŸ”¥
     *
     * Gets proposalvotes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetProposalVotesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CurveProposalVoteDTO> response = api.curveGetProposalVotesHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * Proposals (historical) ðŸ”¥
     *
     * Gets proposals.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetProposalsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CurveProposalDTO> response = api.curveGetProposalsHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * RemoveLiquidityEvents (historical) ðŸ”¥
     *
     * Gets removeliquidityevents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetRemoveLiquidityEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveRemoveLiquidityEventDTO> response = api.curveGetRemoveLiquidityEventsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * RemoveLiquidityOneEvents (historical) ðŸ”¥
     *
     * Gets removeliquidityoneevents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetRemoveLiquidityOneEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveRemoveLiquidityOneEventDTO> response = api.curveGetRemoveLiquidityOneEventsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * SystemStates (historical) ðŸ”¥
     *
     * Gets systemstates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetSystemStatesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<CurveSystemStateDTO> response = api.curveGetSystemStatesHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * Tokens (historical) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String address = null;
        String name = null;
        String symbol = null;
        List<CurveTokenDTO> response = api.curveGetTokensHistorical(startBlock, endBlock, startDate, endDate, id, address, name, symbol);
        // TODO: test validations
    }

    /**
     * TransferOwnershipEvents (historical) ðŸ”¥
     *
     * Gets transferownershipevents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetTransferOwnershipEventsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveTransferOwnershipEventDTO> response = api.curveGetTransferOwnershipEventsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * UnderlyingCoins (historical) ðŸ”¥
     *
     * Gets underlyingcoins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetUnderlyingCoinsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveUnderlyingCoinDTO> response = api.curveGetUnderlyingCoinsHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * VotingApps (historical) ðŸ”¥
     *
     * Gets votingapps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetVotingAppsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String address = null;
        List<CurveVotingAppDTO> response = api.curveGetVotingAppsHistorical(startBlock, endBlock, startDate, endDate, id, address);
        // TODO: test validations
    }

    /**
     * WeeklyVolumes (historical) ðŸ”¥
     *
     * Gets weeklyvolumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetWeeklyVolumesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<CurveWeeklyVolumeDTO> response = api.curveGetWeeklyVolumesHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

}
