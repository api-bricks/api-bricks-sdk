/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CurveExchangeDTO;
import org.openapitools.client.model.DexTradeDTO;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SushiswapBundleDTO;
import org.openapitools.client.model.SushiswapBurnDTO;
import org.openapitools.client.model.SushiswapDayDataDTO;
import org.openapitools.client.model.SushiswapFactoryDTO;
import org.openapitools.client.model.SushiswapHourDataDTO;
import org.openapitools.client.model.SushiswapLiquidityPositionDTO;
import org.openapitools.client.model.SushiswapLiquidityPositionSnapshotDTO;
import org.openapitools.client.model.SushiswapMintDTO;
import org.openapitools.client.model.SushiswapPairDTO;
import org.openapitools.client.model.SushiswapPairDayDataDTO;
import org.openapitools.client.model.SushiswapPairHourDataDTO;
import org.openapitools.client.model.SushiswapSwapDTO;
import org.openapitools.client.model.SushiswapTokenDTO;
import org.openapitools.client.model.SushiswapTokenDayDataDTO;
import org.openapitools.client.model.SushiswapTransactionDTO;
import org.openapitools.client.model.SushiswapUserDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SushiswapApi
 */
@Disabled
public class SushiswapApiTest {

    private final SushiswapApi api = new SushiswapApi();

    /**
     * Exchanges (current) ðŸ”¥
     *
     * Gets exchanges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGetExchangesCurrentTest() throws ApiException {
        List<CurveExchangeDTO> response = api.curveGetExchangesCurrent();
        // TODO: test validations
    }

    /**
     * Trades (current) ðŸ”¥
     *
     * Gets trades.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dexGetTradesCurrentTest() throws ApiException {
        List<DexTradeDTO> response = api.dexGetTradesCurrent();
        // TODO: test validations
    }

    /**
     * Bundles (historical)
     *
     * Gets bundles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetBundlesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<SushiswapBundleDTO> response = api.sushiswapGetBundlesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Burns (historical)
     *
     * Gets burns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetBurnsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<SushiswapBurnDTO> response = api.sushiswapGetBurnsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * DayData (historical)
     *
     * Gets day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<SushiswapDayDataDTO> response = api.sushiswapGetDayDataHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Factory (historical)
     *
     * Gets factory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetFactoryHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<SushiswapFactoryDTO> response = api.sushiswapGetFactoryHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * HourData (historical)
     *
     * Gets hour data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetHourDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<SushiswapHourDataDTO> response = api.sushiswapGetHourDataHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * LiquidityPosition (historical)
     *
     * Gets liquidity position.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetLiquidityPositionHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<SushiswapLiquidityPositionDTO> response = api.sushiswapGetLiquidityPositionHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * LiquidityPositionSnapshot (historical)
     *
     * Gets liquidity position snapshot.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetLiquidityPositionSnapshotHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<SushiswapLiquidityPositionSnapshotDTO> response = api.sushiswapGetLiquidityPositionSnapshotHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Mints (historical)
     *
     * Gets mints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetMintsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<SushiswapMintDTO> response = api.sushiswapGetMintsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Pools (current) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetPoolsCurrentTest() throws ApiException {
        List<SushiswapPairDTO> response = api.sushiswapGetPoolsCurrent();
        // TODO: test validations
    }

    /**
     * PoolsDayData (historical)
     *
     * Gets pools day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetPoolsDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<SushiswapPairDayDataDTO> response = api.sushiswapGetPoolsDayDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Pools (historical) ðŸ”¥
     *
     * Gets list of pools for given filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetPoolsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<SushiswapPairDTO> response = api.sushiswapGetPoolsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * PoolsHourData (historical)
     *
     * Gets pools tracked each our.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetPoolsHourDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<SushiswapPairHourDataDTO> response = api.sushiswapGetPoolsHourDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Swaps (current) ðŸ”¥
     *
     * Gets swaps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetSwapsCurrentTest() throws ApiException {
        List<SushiswapSwapDTO> response = api.sushiswapGetSwapsCurrent();
        // TODO: test validations
    }

    /**
     * Swaps (historical) ðŸ”¥
     *
     * Gets list of swaps for given filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetSwapsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<SushiswapSwapDTO> response = api.sushiswapGetSwapsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Tokens (current) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetTokensCurrentTest() throws ApiException {
        List<SushiswapTokenDTO> response = api.sushiswapGetTokensCurrent();
        // TODO: test validations
    }

    /**
     * TokensDayData (historical)
     *
     * Gets tokens day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetTokensDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<SushiswapTokenDayDataDTO> response = api.sushiswapGetTokensDayDataHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * Tokens (historical) ðŸ”¥
     *
     * Gets list of tokens for given filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<SushiswapTokenDTO> response = api.sushiswapGetTokensHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * Transactions (historical)
     *
     * Gets transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetTransactionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<SushiswapTransactionDTO> response = api.sushiswapGetTransactionsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Users (historical)
     *
     * Gets users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sushiswapGetUsersHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<SushiswapUserDTO> response = api.sushiswapGetUsersHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

}
