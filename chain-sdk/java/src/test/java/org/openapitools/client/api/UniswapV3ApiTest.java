/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UniswapV3BundleV3DTO;
import org.openapitools.client.model.UniswapV3BurnV3DTO;
import org.openapitools.client.model.UniswapV3FactoryV3DTO;
import org.openapitools.client.model.UniswapV3MintV3DTO;
import org.openapitools.client.model.UniswapV3PoolDayDataV3DTO;
import org.openapitools.client.model.UniswapV3PoolHourDataV3DTO;
import org.openapitools.client.model.UniswapV3PoolV3DTO;
import org.openapitools.client.model.UniswapV3PositionSnapshotV3DTO;
import org.openapitools.client.model.UniswapV3PositionV3DTO;
import org.openapitools.client.model.UniswapV3SwapV3DTO;
import org.openapitools.client.model.UniswapV3TickDayDataV3DTO;
import org.openapitools.client.model.UniswapV3TickV3DTO;
import org.openapitools.client.model.UniswapV3TokenHourDataV3DTO;
import org.openapitools.client.model.UniswapV3TokenV3DTO;
import org.openapitools.client.model.UniswapV3TokenV3DayDataDTO;
import org.openapitools.client.model.UniswapV3TransactionV3DTO;
import org.openapitools.client.model.UniswapV3UniswapDayDataV3DTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UniswapV3Api
 */
@Disabled
public class UniswapV3ApiTest {

    private final UniswapV3Api api = new UniswapV3Api();

    /**
     * GetBundles (current)
     *
     * Gets bundles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetBundlesCurrentTest() throws ApiException {
        List<UniswapV3BundleV3DTO> response = api.uniswapV3GetBundlesCurrent();
        // TODO: test validations
    }

    /**
     * GetBundles (historical)
     *
     * Gets bundles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetBundlesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<UniswapV3BundleV3DTO> response = api.uniswapV3GetBundlesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetBurns (current)
     *
     * Gets burns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetBurnsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3BurnV3DTO> response = api.uniswapV3GetBurnsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetBurns (historical)
     *
     * Gets burns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetBurnsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3BurnV3DTO> response = api.uniswapV3GetBurnsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetDayData (current)
     *
     * Gets uniswapv3 day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetDayDataCurrentTest() throws ApiException {
        List<UniswapV3UniswapDayDataV3DTO> response = api.uniswapV3GetDayDataCurrent();
        // TODO: test validations
    }

    /**
     * GetDayData (historical)
     *
     * Gets uniswapv3 day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<UniswapV3UniswapDayDataV3DTO> response = api.uniswapV3GetDayDataHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetFactory (current)
     *
     * Gets factory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetFactoryCurrentTest() throws ApiException {
        List<UniswapV3FactoryV3DTO> response = api.uniswapV3GetFactoryCurrent();
        // TODO: test validations
    }

    /**
     * GetFactory (historical)
     *
     * Gets factory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetFactoryHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<UniswapV3FactoryV3DTO> response = api.uniswapV3GetFactoryHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetMints (current)
     *
     * Gets mints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetMintsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3MintV3DTO> response = api.uniswapV3GetMintsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetMints (historical)
     *
     * Gets mints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetMintsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3MintV3DTO> response = api.uniswapV3GetMintsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPools (current) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PoolV3DTO> response = api.uniswapV3GetPoolsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPoolsDayData (current)
     *
     * Gets pools day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolsDayDataCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PoolDayDataV3DTO> response = api.uniswapV3GetPoolsDayDataCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPoolsDayData (historical)
     *
     * Gets pools day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolsDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3PoolDayDataV3DTO> response = api.uniswapV3GetPoolsDayDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPools (historical) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3PoolV3DTO> response = api.uniswapV3GetPoolsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPoolsHourData (current)
     *
     * Gets pools hour data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolsHourDataCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PoolHourDataV3DTO> response = api.uniswapV3GetPoolsHourDataCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPoolsHourData (historical)
     *
     * Gets pools hour data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolsHourDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3PoolHourDataV3DTO> response = api.uniswapV3GetPoolsHourDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPositions (current)
     *
     * Gets positions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPositionsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PositionV3DTO> response = api.uniswapV3GetPositionsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPositions (historical)
     *
     * Gets positions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPositionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3PositionV3DTO> response = api.uniswapV3GetPositionsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPositionsSnaphots (historical)
     *
     * Gets positions snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPositionsSnaphotsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3PositionSnapshotV3DTO> response = api.uniswapV3GetPositionsSnaphotsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPositionsSnapshots (current)
     *
     * Gets positions snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPositionsSnapshotsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PositionSnapshotV3DTO> response = api.uniswapV3GetPositionsSnapshotsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetSwaps (current) ðŸ”¥
     *
     * Gets swaps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetSwapsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3SwapV3DTO> response = api.uniswapV3GetSwapsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetSwaps (historical) ðŸ”¥
     *
     * Gets swaps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetSwapsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3SwapV3DTO> response = api.uniswapV3GetSwapsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetTicks (current)
     *
     * Gets ticks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTicksCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3TickV3DTO> response = api.uniswapV3GetTicksCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetTicksDayData (current)
     *
     * Gets ticks day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTicksDayDataCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3TickDayDataV3DTO> response = api.uniswapV3GetTicksDayDataCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetTicksDayData (historical)
     *
     * Gets ticks day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTicksDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3TickDayDataV3DTO> response = api.uniswapV3GetTicksDayDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetTicks (historical)
     *
     * Gets ticks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTicksHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV3TickV3DTO> response = api.uniswapV3GetTicksHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetTokens (current) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokensCurrentTest() throws ApiException {
        String filterTokenId = null;
        List<UniswapV3TokenV3DTO> response = api.uniswapV3GetTokensCurrent(filterTokenId);
        // TODO: test validations
    }

    /**
     * GetTokensDayData (current)
     *
     * Gets tokens day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokensDayDataCurrentTest() throws ApiException {
        String filterTokenId = null;
        List<UniswapV3TokenV3DayDataDTO> response = api.uniswapV3GetTokensDayDataCurrent(filterTokenId);
        // TODO: test validations
    }

    /**
     * GetTokensDayData (historical)
     *
     * Gets tokens day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokensDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<UniswapV3TokenV3DayDataDTO> response = api.uniswapV3GetTokensDayDataHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * GetTokens (historical) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<UniswapV3TokenV3DTO> response = api.uniswapV3GetTokensHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * GetTokensHourData (current)
     *
     * Gets tokens hour data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokensHourDataCurrentTest() throws ApiException {
        String filterTokenId = null;
        List<UniswapV3TokenHourDataV3DTO> response = api.uniswapV3GetTokensHourDataCurrent(filterTokenId);
        // TODO: test validations
    }

    /**
     * GetTokensHourData (historical)
     *
     * Gets tokens hour data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokensHourDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<UniswapV3TokenHourDataV3DTO> response = api.uniswapV3GetTokensHourDataHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * GetTransactions (historical)
     *
     * Gets transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTransactionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<UniswapV3TransactionV3DTO> response = api.uniswapV3GetTransactionsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

}
