/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UniswapV3BundleV3DTO;
import org.openapitools.client.model.UniswapV3BurnV3DTO;
import org.openapitools.client.model.UniswapV3FactoryV3DTO;
import org.openapitools.client.model.UniswapV3MintV3DTO;
import org.openapitools.client.model.UniswapV3PoolDayDataV3DTO;
import org.openapitools.client.model.UniswapV3PoolHourDataV3DTO;
import org.openapitools.client.model.UniswapV3PoolV3DTO;
import org.openapitools.client.model.UniswapV3PositionSnapshotV3DTO;
import org.openapitools.client.model.UniswapV3PositionV3DTO;
import org.openapitools.client.model.UniswapV3SwapV3DTO;
import org.openapitools.client.model.UniswapV3TickDayDataV3DTO;
import org.openapitools.client.model.UniswapV3TickV3DTO;
import org.openapitools.client.model.UniswapV3TokenHourDataV3DTO;
import org.openapitools.client.model.UniswapV3TokenV3DTO;
import org.openapitools.client.model.UniswapV3TokenV3DayDataDTO;
import org.openapitools.client.model.UniswapV3TransactionV3DTO;
import org.openapitools.client.model.UniswapV3UniswapDayDataV3DTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UniswapV3Api
 */
@Disabled
public class UniswapV3ApiTest {

    private final UniswapV3Api api = new UniswapV3Api();

    /**
     * BundleV3s (historical) ðŸ”¥
     *
     * Gets bundlev3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetBundleV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV3BundleV3DTO> response = api.uniswapV3GetBundleV3sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * Bundles (current)
     *
     * Gets bundles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetBundlesCurrentTest() throws ApiException {
        List<UniswapV3BundleV3DTO> response = api.uniswapV3GetBundlesCurrent();
        // TODO: test validations
    }

    /**
     * BurnV3s (historical) ðŸ”¥
     *
     * Gets burnv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetBurnV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        String token0 = null;
        String token1 = null;
        List<UniswapV3BurnV3DTO> response = api.uniswapV3GetBurnV3sHistorical(startBlock, endBlock, startDate, endDate, id, pool, token0, token1);
        // TODO: test validations
    }

    /**
     * Burns (current)
     *
     * Gets burns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetBurnsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3BurnV3DTO> response = api.uniswapV3GetBurnsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * DayData (current)
     *
     * Gets uniswapv3 day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetDayDataCurrentTest() throws ApiException {
        List<UniswapV3UniswapDayDataV3DTO> response = api.uniswapV3GetDayDataCurrent();
        // TODO: test validations
    }

    /**
     * Factory (current)
     *
     * Gets factory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetFactoryCurrentTest() throws ApiException {
        List<UniswapV3FactoryV3DTO> response = api.uniswapV3GetFactoryCurrent();
        // TODO: test validations
    }

    /**
     * FactoryV3s (historical) ðŸ”¥
     *
     * Gets factoryv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetFactoryV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV3FactoryV3DTO> response = api.uniswapV3GetFactoryV3sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * MintV3s (historical) ðŸ”¥
     *
     * Gets mintv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetMintV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        String token0 = null;
        String token1 = null;
        List<UniswapV3MintV3DTO> response = api.uniswapV3GetMintV3sHistorical(startBlock, endBlock, startDate, endDate, id, pool, token0, token1);
        // TODO: test validations
    }

    /**
     * Mints (current)
     *
     * Gets mints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetMintsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3MintV3DTO> response = api.uniswapV3GetMintsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * PoolDayDataV3s (historical) ðŸ”¥
     *
     * Gets pooldaydatav3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolDayDataV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<UniswapV3PoolDayDataV3DTO> response = api.uniswapV3GetPoolDayDataV3sHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * PoolHourDataV3s (historical) ðŸ”¥
     *
     * Gets poolhourdatav3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolHourDataV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<UniswapV3PoolHourDataV3DTO> response = api.uniswapV3GetPoolHourDataV3sHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * PoolV3s (historical) ðŸ”¥
     *
     * Gets poolv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String token0 = null;
        String token1 = null;
        List<UniswapV3PoolV3DTO> response = api.uniswapV3GetPoolV3sHistorical(startBlock, endBlock, startDate, endDate, id, token0, token1);
        // TODO: test validations
    }

    /**
     * Pools (current) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PoolV3DTO> response = api.uniswapV3GetPoolsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * PoolsDayData (current)
     *
     * Gets pools day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolsDayDataCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PoolDayDataV3DTO> response = api.uniswapV3GetPoolsDayDataCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * PoolsHourData (current)
     *
     * Gets pools hour data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPoolsHourDataCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PoolHourDataV3DTO> response = api.uniswapV3GetPoolsHourDataCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * PositionSnapshotV3s (historical) ðŸ”¥
     *
     * Gets positionsnapshotv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPositionSnapshotV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<UniswapV3PositionSnapshotV3DTO> response = api.uniswapV3GetPositionSnapshotV3sHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * PositionV3s (historical) ðŸ”¥
     *
     * Gets positionv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPositionV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        String token0 = null;
        String token1 = null;
        List<UniswapV3PositionV3DTO> response = api.uniswapV3GetPositionV3sHistorical(startBlock, endBlock, startDate, endDate, id, pool, token0, token1);
        // TODO: test validations
    }

    /**
     * Positions (current)
     *
     * Gets positions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPositionsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PositionV3DTO> response = api.uniswapV3GetPositionsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * PositionsSnapshots (current)
     *
     * Gets positions snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetPositionsSnapshotsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PositionSnapshotV3DTO> response = api.uniswapV3GetPositionsSnapshotsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * SwapV3s (historical) ðŸ”¥
     *
     * Gets swapv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetSwapV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        String token0 = null;
        String token1 = null;
        List<UniswapV3SwapV3DTO> response = api.uniswapV3GetSwapV3sHistorical(startBlock, endBlock, startDate, endDate, id, pool, token0, token1);
        // TODO: test validations
    }

    /**
     * Swaps (current) ðŸ”¥
     *
     * Gets swaps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetSwapsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3SwapV3DTO> response = api.uniswapV3GetSwapsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * TickDayDataV3s (historical) ðŸ”¥
     *
     * Gets tickdaydatav3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTickDayDataV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<UniswapV3TickDayDataV3DTO> response = api.uniswapV3GetTickDayDataV3sHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * TickV3s (historical) ðŸ”¥
     *
     * Gets tickv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTickV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pool = null;
        List<UniswapV3TickV3DTO> response = api.uniswapV3GetTickV3sHistorical(startBlock, endBlock, startDate, endDate, id, pool);
        // TODO: test validations
    }

    /**
     * Ticks (current)
     *
     * Gets ticks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTicksCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3TickV3DTO> response = api.uniswapV3GetTicksCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * TicksDayData (current)
     *
     * Gets ticks day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTicksDayDataCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3TickDayDataV3DTO> response = api.uniswapV3GetTicksDayDataCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * TokenHourDataV3s (historical) ðŸ”¥
     *
     * Gets tokenhourdatav3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokenHourDataV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV3TokenHourDataV3DTO> response = api.uniswapV3GetTokenHourDataV3sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * TokenV3DayDatas (historical) ðŸ”¥
     *
     * Gets tokenv3daydatas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokenV3DayDatasHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV3TokenV3DayDataDTO> response = api.uniswapV3GetTokenV3DayDatasHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * TokenV3s (historical) ðŸ”¥
     *
     * Gets tokenv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokenV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String symbol = null;
        String name = null;
        List<UniswapV3TokenV3DTO> response = api.uniswapV3GetTokenV3sHistorical(startBlock, endBlock, startDate, endDate, id, symbol, name);
        // TODO: test validations
    }

    /**
     * Tokens (current) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokensCurrentTest() throws ApiException {
        String filterTokenId = null;
        List<UniswapV3TokenV3DTO> response = api.uniswapV3GetTokensCurrent(filterTokenId);
        // TODO: test validations
    }

    /**
     * TokensDayData (current)
     *
     * Gets tokens day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokensDayDataCurrentTest() throws ApiException {
        String filterTokenId = null;
        List<UniswapV3TokenV3DayDataDTO> response = api.uniswapV3GetTokensDayDataCurrent(filterTokenId);
        // TODO: test validations
    }

    /**
     * TokensHourData (current)
     *
     * Gets tokens hour data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTokensHourDataCurrentTest() throws ApiException {
        String filterTokenId = null;
        List<UniswapV3TokenHourDataV3DTO> response = api.uniswapV3GetTokensHourDataCurrent(filterTokenId);
        // TODO: test validations
    }

    /**
     * TransactionV3s (historical) ðŸ”¥
     *
     * Gets transactionv3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetTransactionV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV3TransactionV3DTO> response = api.uniswapV3GetTransactionV3sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * UniswapDayDataV3s (historical) ðŸ”¥
     *
     * Gets uniswapdaydatav3s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3GetUniswapDayDataV3sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV3UniswapDayDataV3DTO> response = api.uniswapV3GetUniswapDayDataV3sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

}
