/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UniswapV3BundleV3DTO;
import org.openapitools.client.model.UniswapV3BurnV3DTO;
import org.openapitools.client.model.UniswapV3FactoryV3DTO;
import org.openapitools.client.model.UniswapV3MintV3DTO;
import org.openapitools.client.model.UniswapV3PoolDayDataV3DTO;
import org.openapitools.client.model.UniswapV3PoolHourDataV3DTO;
import org.openapitools.client.model.UniswapV3PoolV3DTO;
import org.openapitools.client.model.UniswapV3PositionSnapshotV3DTO;
import org.openapitools.client.model.UniswapV3PositionV3DTO;
import org.openapitools.client.model.UniswapV3SwapV3DTO;
import org.openapitools.client.model.UniswapV3TickDayDataV3DTO;
import org.openapitools.client.model.UniswapV3TickV3DTO;
import org.openapitools.client.model.UniswapV3TokenHourDataV3DTO;
import org.openapitools.client.model.UniswapV3TokenV3DTO;
import org.openapitools.client.model.UniswapV3TokenV3DayDataDTO;
import org.openapitools.client.model.UniswapV3UniswapDayDataV3DTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UniswapV3Api
 */
@Disabled
public class UniswapV3ApiTest {

    private final UniswapV3Api api = new UniswapV3Api();

    /**
     * GetBundles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3BundleCurrentGetTest() throws ApiException {
        List<UniswapV3BundleV3DTO> response = api.dappsUniswapv3BundleCurrentGet();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3BundlesHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        api.dappsUniswapv3BundlesHistoricalGet(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetBurns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3BurnsCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3BurnV3DTO> response = api.dappsUniswapv3BurnsCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3BurnsHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3BurnsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3DayDataHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        api.dappsUniswapv3DayDataHistoricalGet(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetFactory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3FactoryCurrentGetTest() throws ApiException {
        String chainId = null;
        List<UniswapV3FactoryV3DTO> response = api.dappsUniswapv3FactoryCurrentGet(chainId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3FactoryHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        api.dappsUniswapv3FactoryHistoricalGet(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetMints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3MintsCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3MintV3DTO> response = api.dappsUniswapv3MintsCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3MintsHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3MintsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PoolDayDataHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3PoolDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PoolHourDataHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3PoolHourDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPools
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PoolsCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PoolV3DTO> response = api.dappsUniswapv3PoolsCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPoolsDayData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PoolsDayDataCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PoolDayDataV3DTO> response = api.dappsUniswapv3PoolsDayDataCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PoolsHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3PoolsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPoolsHourData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PoolsHourDataCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PoolHourDataV3DTO> response = api.dappsUniswapv3PoolsHourDataCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PositionSnapshotHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3PositionSnapshotHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetPositionSnapshot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PositionSnapshotsCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PositionSnapshotV3DTO> response = api.dappsUniswapv3PositionSnapshotsCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPositions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PositionsCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3PositionV3DTO> response = api.dappsUniswapv3PositionsCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3PositionsHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3PositionsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetSwaps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3SwapsCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3SwapV3DTO> response = api.dappsUniswapv3SwapsCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3SwapsHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3SwapsHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TickDayDataHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3TickDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * GetTicks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TicksCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3TickV3DTO> response = api.dappsUniswapv3TicksCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * GetTicksDayData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TicksDayDataCurrentGetTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV3TickDayDataV3DTO> response = api.dappsUniswapv3TicksDayDataCurrentGet(filterPoolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TicksHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        api.dappsUniswapv3TicksHistoricalGet(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TokenDayDataHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        api.dappsUniswapv3TokenDayDataHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TokenHourDataHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        api.dappsUniswapv3TokenHourDataHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * GetTokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TokensCurrentGetTest() throws ApiException {
        String filterTokenId = null;
        List<UniswapV3TokenV3DTO> response = api.dappsUniswapv3TokensCurrentGet(filterTokenId);
        // TODO: test validations
    }

    /**
     * GetTokensDayData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TokensDayDataCurrentGetTest() throws ApiException {
        String filterTokenId = null;
        List<UniswapV3TokenV3DayDataDTO> response = api.dappsUniswapv3TokensDayDataCurrentGet(filterTokenId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TokensHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        api.dappsUniswapv3TokensHistoricalGet(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * GetTokensHourData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TokensHourDataCurrentGetTest() throws ApiException {
        String filterTokenId = null;
        List<UniswapV3TokenHourDataV3DTO> response = api.dappsUniswapv3TokensHourDataCurrentGet(filterTokenId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3TransactionsHistoricalGetTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        api.dappsUniswapv3TransactionsHistoricalGet(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * GetUniswapDayData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dappsUniswapv3UniswapDayDataCurrentGetTest() throws ApiException {
        List<UniswapV3UniswapDayDataV3DTO> response = api.dappsUniswapv3UniswapDayDataCurrentGet();
        // TODO: test validations
    }

}
