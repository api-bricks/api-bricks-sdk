/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BundleV3DTO;
import org.openapitools.client.model.BurnV3DTO;
import org.openapitools.client.model.FactoryV3DTO;
import org.openapitools.client.model.MintV3DTO;
import org.openapitools.client.model.PoolDayDataV3DTO;
import org.openapitools.client.model.PoolHourDataV3DTO;
import org.openapitools.client.model.PoolV3DTO;
import org.openapitools.client.model.PositionSnapshotV3DTO;
import org.openapitools.client.model.PositionV3DTO;
import org.openapitools.client.model.SwapV3DTO;
import org.openapitools.client.model.TickDayDataV3DTO;
import org.openapitools.client.model.TickV3DTO;
import org.openapitools.client.model.TokenHourDataV3DTO;
import org.openapitools.client.model.TokenV3DTO;
import org.openapitools.client.model.TokenV3DayDataDTO;
import org.openapitools.client.model.UniswapDayDataV3DTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UniswapV3Api
 */
@Disabled
public class UniswapV3ApiTest {

    private final UniswapV3Api api = new UniswapV3Api();

    /**
     * GetBundles
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3BundleCurrentGetTest() throws ApiException {
        String chainId = null;
        List<BundleV3DTO> response = api.chainsChainIdDappsUniswapv3BundleCurrentGet(chainId);
        // TODO: test validations
    }

    /**
     * GetBurns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3BurnsCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<BurnV3DTO> response = api.chainsChainIdDappsUniswapv3BurnsCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetFactory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3FactoryCurrentGetTest() throws ApiException {
        String chainId = null;
        List<FactoryV3DTO> response = api.chainsChainIdDappsUniswapv3FactoryCurrentGet(chainId);
        // TODO: test validations
    }

    /**
     * GetMints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3MintsCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<MintV3DTO> response = api.chainsChainIdDappsUniswapv3MintsCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPools
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3PoolsCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<PoolV3DTO> response = api.chainsChainIdDappsUniswapv3PoolsCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPoolsDayData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3PoolsDayDataCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<PoolDayDataV3DTO> response = api.chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPoolsHourData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3PoolsHourDataCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<PoolHourDataV3DTO> response = api.chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPositionSnapshot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<PositionSnapshotV3DTO> response = api.chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetPositions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3PositionsCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<PositionV3DTO> response = api.chainsChainIdDappsUniswapv3PositionsCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetSwaps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3SwapsCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<SwapV3DTO> response = api.chainsChainIdDappsUniswapv3SwapsCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetTicks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3TicksCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<TickV3DTO> response = api.chainsChainIdDappsUniswapv3TicksCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetTicksDayData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3TicksDayDataCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterPoolId = null;
        List<TickDayDataV3DTO> response = api.chainsChainIdDappsUniswapv3TicksDayDataCurrentGet(chainId, filterPoolId);
        // TODO: test validations
    }

    /**
     * GetTokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3TokensCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterTokenId = null;
        List<TokenV3DTO> response = api.chainsChainIdDappsUniswapv3TokensCurrentGet(chainId, filterTokenId);
        // TODO: test validations
    }

    /**
     * GetTokensDayData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3TokensDayDataCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterTokenId = null;
        List<TokenV3DayDataDTO> response = api.chainsChainIdDappsUniswapv3TokensDayDataCurrentGet(chainId, filterTokenId);
        // TODO: test validations
    }

    /**
     * GetTokensHourData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3TokensHourDataCurrentGetTest() throws ApiException {
        String chainId = null;
        String filterTokenId = null;
        List<TokenHourDataV3DTO> response = api.chainsChainIdDappsUniswapv3TokensHourDataCurrentGet(chainId, filterTokenId);
        // TODO: test validations
    }

    /**
     * GetUniswapDayData
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chainsChainIdDappsUniswapv3UniswapDayDataCurrentGetTest() throws ApiException {
        String chainId = null;
        List<UniswapDayDataV3DTO> response = api.chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet(chainId);
        // TODO: test validations
    }

}
