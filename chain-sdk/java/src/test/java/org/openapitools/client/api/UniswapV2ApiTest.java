/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UniswapV2BundleV2DTO;
import org.openapitools.client.model.UniswapV2BurnV2DTO;
import org.openapitools.client.model.UniswapV2LiquidityPositionSnapshotV2DTO;
import org.openapitools.client.model.UniswapV2LiquidityPositionV2DTO;
import org.openapitools.client.model.UniswapV2MintV2DTO;
import org.openapitools.client.model.UniswapV2PairDayDataV2DTO;
import org.openapitools.client.model.UniswapV2PairHourDataV2DTO;
import org.openapitools.client.model.UniswapV2PairV2DTO;
import org.openapitools.client.model.UniswapV2SwapV2DTO;
import org.openapitools.client.model.UniswapV2TokenDayDataV2DTO;
import org.openapitools.client.model.UniswapV2TokenV2DTO;
import org.openapitools.client.model.UniswapV2TransactionV2DTO;
import org.openapitools.client.model.UniswapV2UniswapDayDataV2DTO;
import org.openapitools.client.model.UniswapV2UniswapFactoryV2DTO;
import org.openapitools.client.model.UniswapV2UserV2DTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UniswapV2Api
 */
@Disabled
public class UniswapV2ApiTest {

    private final UniswapV2Api api = new UniswapV2Api();

    /**
     * BundleV2s (historical) ðŸ”¥
     *
     * Gets bundlev2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetBundleV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV2BundleV2DTO> response = api.uniswapV2GetBundleV2sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * BurnV2s (historical) ðŸ”¥
     *
     * Gets burnv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetBurnV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pair = null;
        List<UniswapV2BurnV2DTO> response = api.uniswapV2GetBurnV2sHistorical(startBlock, endBlock, startDate, endDate, id, pair);
        // TODO: test validations
    }

    /**
     * LiquidityPositionSnapshotV2s (historical) ðŸ”¥
     *
     * Gets liquiditypositionsnapshotv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetLiquidityPositionSnapshotV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String user = null;
        String pair = null;
        List<UniswapV2LiquidityPositionSnapshotV2DTO> response = api.uniswapV2GetLiquidityPositionSnapshotV2sHistorical(startBlock, endBlock, startDate, endDate, id, user, pair);
        // TODO: test validations
    }

    /**
     * LiquidityPositionV2s (historical) ðŸ”¥
     *
     * Gets liquiditypositionv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetLiquidityPositionV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String user = null;
        String pair = null;
        List<UniswapV2LiquidityPositionV2DTO> response = api.uniswapV2GetLiquidityPositionV2sHistorical(startBlock, endBlock, startDate, endDate, id, user, pair);
        // TODO: test validations
    }

    /**
     * MintV2s (historical) ðŸ”¥
     *
     * Gets mintv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetMintV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pair = null;
        List<UniswapV2MintV2DTO> response = api.uniswapV2GetMintV2sHistorical(startBlock, endBlock, startDate, endDate, id, pair);
        // TODO: test validations
    }

    /**
     * PairDayDataV2s (historical) ðŸ”¥
     *
     * Gets pairdaydatav2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPairDayDataV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String token0 = null;
        String token1 = null;
        List<UniswapV2PairDayDataV2DTO> response = api.uniswapV2GetPairDayDataV2sHistorical(startBlock, endBlock, startDate, endDate, id, token0, token1);
        // TODO: test validations
    }

    /**
     * PairHourDataV2s (historical) ðŸ”¥
     *
     * Gets pairhourdatav2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPairHourDataV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pair = null;
        List<UniswapV2PairHourDataV2DTO> response = api.uniswapV2GetPairHourDataV2sHistorical(startBlock, endBlock, startDate, endDate, id, pair);
        // TODO: test validations
    }

    /**
     * PairV2s (historical) ðŸ”¥
     *
     * Gets pairv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPairV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String token0 = null;
        String token1 = null;
        List<UniswapV2PairV2DTO> response = api.uniswapV2GetPairV2sHistorical(startBlock, endBlock, startDate, endDate, id, token0, token1);
        // TODO: test validations
    }

    /**
     * Pools (current) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPoolsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV2PairV2DTO> response = api.uniswapV2GetPoolsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * SwapV2s (historical) ðŸ”¥
     *
     * Gets swapv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetSwapV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String pair = null;
        List<UniswapV2SwapV2DTO> response = api.uniswapV2GetSwapV2sHistorical(startBlock, endBlock, startDate, endDate, id, pair);
        // TODO: test validations
    }

    /**
     * Swaps (current) ðŸ”¥
     *
     * Gets swaps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetSwapsCurrentTest() throws ApiException {
        List<UniswapV2SwapV2DTO> response = api.uniswapV2GetSwapsCurrent();
        // TODO: test validations
    }

    /**
     * TokenDayDataV2s (historical) ðŸ”¥
     *
     * Gets tokendaydatav2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTokenDayDataV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV2TokenDayDataV2DTO> response = api.uniswapV2GetTokenDayDataV2sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * TokenV2s (historical) ðŸ”¥
     *
     * Gets tokenv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTokenV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        String symbol = null;
        String name = null;
        List<UniswapV2TokenV2DTO> response = api.uniswapV2GetTokenV2sHistorical(startBlock, endBlock, startDate, endDate, id, symbol, name);
        // TODO: test validations
    }

    /**
     * Tokens (current) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTokensCurrentTest() throws ApiException {
        List<UniswapV2TokenV2DTO> response = api.uniswapV2GetTokensCurrent();
        // TODO: test validations
    }

    /**
     * TransactionV2s (historical) ðŸ”¥
     *
     * Gets transactionv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTransactionV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV2TransactionV2DTO> response = api.uniswapV2GetTransactionV2sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * UniswapDayDataV2s (historical) ðŸ”¥
     *
     * Gets uniswapdaydatav2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetUniswapDayDataV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV2UniswapDayDataV2DTO> response = api.uniswapV2GetUniswapDayDataV2sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * UniswapFactoryV2s (historical) ðŸ”¥
     *
     * Gets uniswapfactoryv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetUniswapFactoryV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV2UniswapFactoryV2DTO> response = api.uniswapV2GetUniswapFactoryV2sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

    /**
     * UserV2s (historical) ðŸ”¥
     *
     * Gets userv2s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetUserV2sHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String id = null;
        List<UniswapV2UserV2DTO> response = api.uniswapV2GetUserV2sHistorical(startBlock, endBlock, startDate, endDate, id);
        // TODO: test validations
    }

}
