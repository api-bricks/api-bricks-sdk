/*
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.UniswapV2BundleV2DTO;
import org.openapitools.client.model.UniswapV2BurnV2DTO;
import org.openapitools.client.model.UniswapV2LiquidityPositionSnapshotV2DTO;
import org.openapitools.client.model.UniswapV2LiquidityPositionV2DTO;
import org.openapitools.client.model.UniswapV2MintV2DTO;
import org.openapitools.client.model.UniswapV2PairDayDataV2DTO;
import org.openapitools.client.model.UniswapV2PairHourDataV2DTO;
import org.openapitools.client.model.UniswapV2PairV2DTO;
import org.openapitools.client.model.UniswapV2SwapV2DTO;
import org.openapitools.client.model.UniswapV2TokenDayDataV2DTO;
import org.openapitools.client.model.UniswapV2TokenV2DTO;
import org.openapitools.client.model.UniswapV2TransactionV2DTO;
import org.openapitools.client.model.UniswapV2UniswapDayDataV2DTO;
import org.openapitools.client.model.UniswapV2UniswapFactoryV2DTO;
import org.openapitools.client.model.UniswapV2UserV2DTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UniswapV2Api
 */
@Disabled
public class UniswapV2ApiTest {

    private final UniswapV2Api api = new UniswapV2Api();

    /**
     * BundleV2DTOs (historical) ðŸ”¥
     *
     * Gets BundleV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetBundleV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2BundleV2DTO> response = api.uniswapV2GetBundleV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Bundles (historical)
     *
     * Gets bundles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetBundlesHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<UniswapV2BundleV2DTO> response = api.uniswapV2GetBundlesHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * BurnV2DTOs (historical) ðŸ”¥
     *
     * Gets BurnV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetBurnV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2BurnV2DTO> response = api.uniswapV2GetBurnV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Burns (historical)
     *
     * Gets burns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetBurnsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2BurnV2DTO> response = api.uniswapV2GetBurnsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * DayData (historical)
     *
     * Gets uniswapv2 day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<UniswapV2UniswapDayDataV2DTO> response = api.uniswapV2GetDayDataHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * Factory (historical)
     *
     * Gets factory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetFactoryHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<UniswapV2UniswapFactoryV2DTO> response = api.uniswapV2GetFactoryHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * LiquidityPositionSnapshotV2DTOs (historical) ðŸ”¥
     *
     * Gets LiquidityPositionSnapshotV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetLiquidityPositionSnapshotV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2LiquidityPositionSnapshotV2DTO> response = api.uniswapV2GetLiquidityPositionSnapshotV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * LiquidityPositionV2DTOs (historical) ðŸ”¥
     *
     * Gets LiquidityPositionV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetLiquidityPositionV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2LiquidityPositionV2DTO> response = api.uniswapV2GetLiquidityPositionV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * LiquidityPositions (historical)
     *
     * Gets liquidity positions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetLiquidityPositionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2LiquidityPositionV2DTO> response = api.uniswapV2GetLiquidityPositionsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * LiquidityPositionsSnapshots (historical)
     *
     * Gets liquidity positions snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetLiquidityPositionsSnapshotsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2LiquidityPositionSnapshotV2DTO> response = api.uniswapV2GetLiquidityPositionsSnapshotsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * MintV2DTOs (historical) ðŸ”¥
     *
     * Gets MintV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetMintV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2MintV2DTO> response = api.uniswapV2GetMintV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Mints (historical)
     *
     * Gets mints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetMintsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2MintV2DTO> response = api.uniswapV2GetMintsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * PairDayDataV2DTOs (historical) ðŸ”¥
     *
     * Gets PairDayDataV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPairDayDataV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2PairDayDataV2DTO> response = api.uniswapV2GetPairDayDataV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * PairHourDataV2DTOs (historical) ðŸ”¥
     *
     * Gets PairHourDataV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPairHourDataV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2PairHourDataV2DTO> response = api.uniswapV2GetPairHourDataV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * PairV2DTOs (historical) ðŸ”¥
     *
     * Gets PairV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPairV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2PairV2DTO> response = api.uniswapV2GetPairV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Pools (current) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPoolsCurrentTest() throws ApiException {
        String filterPoolId = null;
        List<UniswapV2PairV2DTO> response = api.uniswapV2GetPoolsCurrent(filterPoolId);
        // TODO: test validations
    }

    /**
     * PoolsDayData (historical)
     *
     * Gets pools day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPoolsDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2PairDayDataV2DTO> response = api.uniswapV2GetPoolsDayDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Pools (historical) ðŸ”¥
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPoolsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2PairV2DTO> response = api.uniswapV2GetPoolsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * PoolsHourData (historical)
     *
     * Gets pools tracked each our.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetPoolsHourDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2PairHourDataV2DTO> response = api.uniswapV2GetPoolsHourDataHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * SwapV2DTOs (historical) ðŸ”¥
     *
     * Gets SwapV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetSwapV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2SwapV2DTO> response = api.uniswapV2GetSwapV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Swaps (current) ðŸ”¥
     *
     * Gets swaps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetSwapsCurrentTest() throws ApiException {
        List<UniswapV2SwapV2DTO> response = api.uniswapV2GetSwapsCurrent();
        // TODO: test validations
    }

    /**
     * Swaps (historical) ðŸ”¥
     *
     * Gets swaps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetSwapsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2SwapV2DTO> response = api.uniswapV2GetSwapsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * TokenDayDataV2DTOs (historical) ðŸ”¥
     *
     * Gets TokenDayDataV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTokenDayDataV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2TokenDayDataV2DTO> response = api.uniswapV2GetTokenDayDataV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * TokenV2DTOs (historical) ðŸ”¥
     *
     * Gets TokenV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTokenV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2TokenV2DTO> response = api.uniswapV2GetTokenV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Tokens (current) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTokensCurrentTest() throws ApiException {
        List<UniswapV2TokenV2DTO> response = api.uniswapV2GetTokensCurrent();
        // TODO: test validations
    }

    /**
     * TokensDayData (historical)
     *
     * Gets tokens day data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTokensDayDataHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<UniswapV2TokenDayDataV2DTO> response = api.uniswapV2GetTokensDayDataHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * Tokens (historical) ðŸ”¥
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTokensHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String tokenId = null;
        List<UniswapV2TokenV2DTO> response = api.uniswapV2GetTokensHistorical(startBlock, endBlock, startDate, endDate, tokenId);
        // TODO: test validations
    }

    /**
     * TransactionV2DTOs (historical) ðŸ”¥
     *
     * Gets TransactionV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTransactionV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2TransactionV2DTO> response = api.uniswapV2GetTransactionV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Transactions (historical)
     *
     * Gets transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetTransactionsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<UniswapV2TransactionV2DTO> response = api.uniswapV2GetTransactionsHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

    /**
     * UniswapDayDataV2DTOs (historical) ðŸ”¥
     *
     * Gets UniswapDayDataV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetUniswapDayDataV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2UniswapDayDataV2DTO> response = api.uniswapV2GetUniswapDayDataV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * UniswapFactoryV2DTOs (historical) ðŸ”¥
     *
     * Gets UniswapFactoryV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetUniswapFactoryV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2UniswapFactoryV2DTO> response = api.uniswapV2GetUniswapFactoryV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * UserV2DTOs (historical) ðŸ”¥
     *
     * Gets UserV2DTOs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetUserV2DTOsHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String poolId = null;
        List<UniswapV2UserV2DTO> response = api.uniswapV2GetUserV2DTOsHistorical(startBlock, endBlock, startDate, endDate, poolId);
        // TODO: test validations
    }

    /**
     * Users (historical)
     *
     * Gets users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV2GetUsersHistoricalTest() throws ApiException {
        Long startBlock = null;
        Long endBlock = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        List<UniswapV2UserV2DTO> response = api.uniswapV2GetUsersHistorical(startBlock, endBlock, startDate, endDate);
        // TODO: test validations
    }

}
