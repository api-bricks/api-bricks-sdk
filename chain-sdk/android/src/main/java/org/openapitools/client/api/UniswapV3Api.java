/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BundleV3DTO;
import org.openapitools.client.model.BurnV3DTO;
import org.openapitools.client.model.FactoryV3DTO;
import org.openapitools.client.model.MintV3DTO;
import org.openapitools.client.model.PoolDayDataV3DTO;
import org.openapitools.client.model.PoolHourDataV3DTO;
import org.openapitools.client.model.PoolV3DTO;
import org.openapitools.client.model.PositionSnapshotV3DTO;
import org.openapitools.client.model.PositionV3DTO;
import org.openapitools.client.model.SwapV3DTO;
import org.openapitools.client.model.TickDayDataV3DTO;
import org.openapitools.client.model.TickV3DTO;
import org.openapitools.client.model.TokenHourDataV3DTO;
import org.openapitools.client.model.TokenV3DTO;
import org.openapitools.client.model.TokenV3DayDataDTO;
import org.openapitools.client.model.UniswapDayDataV3DTO;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class UniswapV3Api {
  String basePath = "https://onchain.coinapi.io";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * GetBundles
  * 
   * @param chainId Chain id
   * @return List<BundleV3DTO>
  */
  public List<BundleV3DTO> chainsChainIdDappsUniswapv3BundleCurrentGet (String chainId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BundleCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BundleCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/bundle/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<BundleV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", BundleV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetBundles
   * 
   * @param chainId Chain id
  */
  public void chainsChainIdDappsUniswapv3BundleCurrentGet (String chainId, final Response.Listener<List<BundleV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BundleCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BundleCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/bundle/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<BundleV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", BundleV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetBurns
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<BurnV3DTO>
  */
  public List<BurnV3DTO> chainsChainIdDappsUniswapv3BurnsCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BurnsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BurnsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/burns/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<BurnV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", BurnV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetBurns
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3BurnsCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<BurnV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BurnsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3BurnsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/burns/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<BurnV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", BurnV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetFactory
  * 
   * @param chainId Chain id
   * @return List<FactoryV3DTO>
  */
  public List<FactoryV3DTO> chainsChainIdDappsUniswapv3FactoryCurrentGet (String chainId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3FactoryCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3FactoryCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/factory/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<FactoryV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", FactoryV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetFactory
   * 
   * @param chainId Chain id
  */
  public void chainsChainIdDappsUniswapv3FactoryCurrentGet (String chainId, final Response.Listener<List<FactoryV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3FactoryCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3FactoryCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/factory/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<FactoryV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", FactoryV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetMints
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<MintV3DTO>
  */
  public List<MintV3DTO> chainsChainIdDappsUniswapv3MintsCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3MintsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3MintsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/mints/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<MintV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", MintV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetMints
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3MintsCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<MintV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3MintsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3MintsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/mints/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<MintV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", MintV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetPools
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<PoolV3DTO>
  */
  public List<PoolV3DTO> chainsChainIdDappsUniswapv3PoolsCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/pools/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PoolV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", PoolV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetPools
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3PoolsCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<PoolV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/pools/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PoolV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", PoolV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetPoolsDayData
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<PoolDayDataV3DTO>
  */
  public List<PoolDayDataV3DTO> chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/poolsDayData/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PoolDayDataV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", PoolDayDataV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetPoolsDayData
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<PoolDayDataV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/poolsDayData/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PoolDayDataV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", PoolDayDataV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetPoolsHourData
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<PoolHourDataV3DTO>
  */
  public List<PoolHourDataV3DTO> chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/poolsHourData/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PoolHourDataV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", PoolHourDataV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetPoolsHourData
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<PoolHourDataV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/poolsHourData/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PoolHourDataV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", PoolHourDataV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetPositionSnapshot
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<PositionSnapshotV3DTO>
  */
  public List<PositionSnapshotV3DTO> chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/positionSnapshots/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PositionSnapshotV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", PositionSnapshotV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetPositionSnapshot
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<PositionSnapshotV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/positionSnapshots/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PositionSnapshotV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", PositionSnapshotV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetPositions
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<PositionV3DTO>
  */
  public List<PositionV3DTO> chainsChainIdDappsUniswapv3PositionsCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/positions/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PositionV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", PositionV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetPositions
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3PositionsCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<PositionV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3PositionsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/positions/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PositionV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", PositionV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetSwaps
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<SwapV3DTO>
  */
  public List<SwapV3DTO> chainsChainIdDappsUniswapv3SwapsCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3SwapsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3SwapsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/swaps/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<SwapV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", SwapV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetSwaps
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3SwapsCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<SwapV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3SwapsCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3SwapsCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/swaps/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<SwapV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", SwapV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetTicks
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<TickV3DTO>
  */
  public List<TickV3DTO> chainsChainIdDappsUniswapv3TicksCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/ticks/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<TickV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", TickV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetTicks
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3TicksCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<TickV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/ticks/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<TickV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", TickV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetTicksDayData
  * 
   * @param chainId Chain id
   * @param filterPoolId Filter pool id
   * @return List<TickDayDataV3DTO>
  */
  public List<TickDayDataV3DTO> chainsChainIdDappsUniswapv3TicksDayDataCurrentGet (String chainId, String filterPoolId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksDayDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksDayDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/ticksDayData/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<TickDayDataV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", TickDayDataV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetTicksDayData
   * 
   * @param chainId Chain id   * @param filterPoolId Filter pool id
  */
  public void chainsChainIdDappsUniswapv3TicksDayDataCurrentGet (String chainId, String filterPoolId, final Response.Listener<List<TickDayDataV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksDayDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TicksDayDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/ticksDayData/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_pool_id", filterPoolId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<TickDayDataV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", TickDayDataV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetTokens
  * 
   * @param chainId Chain id
   * @param filterTokenId 
   * @return List<TokenV3DTO>
  */
  public List<TokenV3DTO> chainsChainIdDappsUniswapv3TokensCurrentGet (String chainId, String filterTokenId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/tokens/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_token_id", filterTokenId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<TokenV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", TokenV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetTokens
   * 
   * @param chainId Chain id   * @param filterTokenId 
  */
  public void chainsChainIdDappsUniswapv3TokensCurrentGet (String chainId, String filterTokenId, final Response.Listener<List<TokenV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/tokens/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_token_id", filterTokenId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<TokenV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", TokenV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetTokensDayData
  * 
   * @param chainId Chain id
   * @param filterTokenId 
   * @return List<TokenV3DayDataDTO>
  */
  public List<TokenV3DayDataDTO> chainsChainIdDappsUniswapv3TokensDayDataCurrentGet (String chainId, String filterTokenId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensDayDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensDayDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/tokensDayData/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_token_id", filterTokenId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<TokenV3DayDataDTO>) ApiInvoker.deserialize(localVarResponse, "array", TokenV3DayDataDTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetTokensDayData
   * 
   * @param chainId Chain id   * @param filterTokenId 
  */
  public void chainsChainIdDappsUniswapv3TokensDayDataCurrentGet (String chainId, String filterTokenId, final Response.Listener<List<TokenV3DayDataDTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensDayDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensDayDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/tokensDayData/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_token_id", filterTokenId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<TokenV3DayDataDTO>) ApiInvoker.deserialize(localVarResponse,  "array", TokenV3DayDataDTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetTokensHourData
  * 
   * @param chainId Chain id
   * @param filterTokenId 
   * @return List<TokenHourDataV3DTO>
  */
  public List<TokenHourDataV3DTO> chainsChainIdDappsUniswapv3TokensHourDataCurrentGet (String chainId, String filterTokenId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensHourDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensHourDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/tokensHourData/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_token_id", filterTokenId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<TokenHourDataV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", TokenHourDataV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetTokensHourData
   * 
   * @param chainId Chain id   * @param filterTokenId 
  */
  public void chainsChainIdDappsUniswapv3TokensHourDataCurrentGet (String chainId, String filterTokenId, final Response.Listener<List<TokenHourDataV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensHourDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3TokensHourDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/tokensHourData/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter_token_id", filterTokenId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<TokenHourDataV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", TokenHourDataV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * GetUniswapDayData
  * 
   * @param chainId Chain id
   * @return List<UniswapDayDataV3DTO>
  */
  public List<UniswapDayDataV3DTO> chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet (String chainId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/uniswapDayData/current".replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<UniswapDayDataV3DTO>) ApiInvoker.deserialize(localVarResponse, "array", UniswapDayDataV3DTO.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * GetUniswapDayData
   * 
   * @param chainId Chain id
  */
  public void chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet (String chainId, final Response.Listener<List<UniswapDayDataV3DTO>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chainId' is set
    if (chainId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet",
        new ApiException(400, "Missing the required parameter 'chainId' when calling chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet"));
    }

    // create path and map variables
    String path = "/chains/{chain_id}/dapps/uniswapv3/uniswapDayData/current".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chain_id" + "\\}", apiInvoker.escapeString(chainId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<UniswapDayDataV3DTO>) ApiInvoker.deserialize(localVarResponse,  "array", UniswapDayDataV3DTO.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
