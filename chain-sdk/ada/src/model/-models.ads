--  OnChain API
--   This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
--
--  The version of the OpenAPI document: v1
--  Contact: support@coinapi.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 6.2.1.
--  https://openapi-generator.tech
--  Do not edit the class manually.

with Swagger.Streams;
with Ada.Containers.Vectors;
package .Models is
   pragma Style_Checks ("-mr");



   type UniswapV3PositionSnapshotV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Owner : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Position : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Liquidity : Swagger.Nullable_UString;
       Deposited_Token_0 : Swagger.Nullable_UString;
       Deposited_Token_1 : Swagger.Nullable_UString;
       Withdrawn_Token_0 : Swagger.Nullable_UString;
       Withdrawn_Token_1 : Swagger.Nullable_UString;
       Collected_Fees_Token_0 : Swagger.Nullable_UString;
       Collected_Fees_Token_1 : Swagger.Nullable_UString;
       Transaction : Swagger.Nullable_UString;
       Fee_Growth_Inside_0_Last_X_128 : Swagger.Nullable_UString;
       Fee_Growth_Inside_1_Last_X_128 : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3PositionSnapshotV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3PositionSnapshotV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PositionSnapshotV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PositionSnapshotV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PositionSnapshotV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PositionSnapshotV3DTO_Type_Vectors.Vector);




   type UniswapV3PoolHourDataV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Period_Start_Unix : Swagger.Nullable_Integer;
       Pool : Swagger.Nullable_UString;
       Liquidity : Swagger.Nullable_UString;
       Sqrt_Price : Swagger.Nullable_UString;
       Token_0_Price : Swagger.Nullable_UString;
       Token_1_Price : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Fee_Growth_Global_0x_128 : Swagger.Nullable_UString;
       Fee_Growth_Global_1x_128 : Swagger.Nullable_UString;
       Tvl_Usd : Swagger.Nullable_UString;
       Volume_Token_0 : Swagger.Nullable_UString;
       Volume_Token_1 : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Fees_Usd : Swagger.Nullable_UString;
       Tx_Count : Swagger.Nullable_UString;
       Open : Swagger.Nullable_UString;
       High : Swagger.Nullable_UString;
       Low : Swagger.Nullable_UString;
       Close : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3PoolHourDataV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3PoolHourDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolHourDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolHourDataV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolHourDataV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolHourDataV3DTO_Type_Vectors.Vector);




   type UniswapV3MintV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Transaction : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Token_0 : Swagger.Nullable_UString;
       Token_1 : Swagger.Nullable_UString;
       Owner : Swagger.Nullable_UString;
       Sender : Swagger.Nullable_UString;
       Origin : Swagger.Nullable_UString;
       Amount : Swagger.Nullable_UString;
       Amount_0 : Swagger.Nullable_UString;
       Amount_1 : Swagger.Nullable_UString;
       Amount_Usd : Swagger.Nullable_UString;
       Tick_Lower : Swagger.Nullable_UString;
       Tick_Upper : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3MintV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3MintV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3MintV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3MintV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3MintV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3MintV3DTO_Type_Vectors.Vector);




   type UniswapV3BurnV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Transaction : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Token_0 : Swagger.Nullable_UString;
       Token_1 : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Owner : Swagger.Nullable_UString;
       Origin : Swagger.Nullable_UString;
       Amount : Swagger.Nullable_UString;
       Amount_0 : Swagger.Nullable_UString;
       Amount_1 : Swagger.Nullable_UString;
       Amount_Usd : Swagger.Nullable_UString;
       Tick_Lower : Swagger.Nullable_UString;
       Tick_Upper : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3BurnV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3BurnV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3BurnV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3BurnV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3BurnV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3BurnV3DTO_Type_Vectors.Vector);




   type SushiswapTokenDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Factory : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Decimals : Swagger.Nullable_UString;
       Total_Supply : Swagger.Nullable_UString;
       Volume : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Tx_Count : Swagger.Nullable_UString;
       Liquidity : Swagger.Nullable_UString;
       Derived_Eth : Swagger.Nullable_UString;
       Whitelist_Pairs : Swagger.UString_Vectors.Vector;
       Vid : Swagger.Nullable_Long;
       Token_Symbol : Swagger.Nullable_UString;
     end record;

   package SushiswapTokenDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => SushiswapTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapTokenDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapTokenDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapTokenDTO_Type_Vectors.Vector);




   type SushiswapPairDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Factory : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Token_0 : Swagger.Nullable_UString;
       Token_1 : Swagger.Nullable_UString;
       Reserve_0 : Swagger.Nullable_UString;
       Reserve_1 : Swagger.Nullable_UString;
       Total_Supply : Swagger.Nullable_UString;
       Reserve_Eth : Swagger.Nullable_UString;
       Reserve_Usd : Swagger.Nullable_UString;
       Tracked_Reserve_Eth : Swagger.Nullable_UString;
       Token_0_Price : Swagger.Nullable_UString;
       Token_1_Price : Swagger.Nullable_UString;
       Volume_Token_0 : Swagger.Nullable_UString;
       Volume_Token_1 : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Tx_Count : Swagger.Nullable_UString;
       Liquidity_Provider_Count : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Block : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
       Evaluated_Ask : double;
     end record;

   package SushiswapPairDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => SushiswapPairDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapPairDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapPairDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapPairDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapPairDTO_Type_Vectors.Vector);




   type NumericsBigInteger_Type is
     record
       Is_Power_Of_Two : Swagger.Nullable_Boolean;
       Is_Zero : Swagger.Nullable_Boolean;
       Is_One : Swagger.Nullable_Boolean;
       Is_Even : Swagger.Nullable_Boolean;
       Sign : Swagger.Nullable_Integer;
     end record;

   package NumericsBigInteger_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => NumericsBigInteger_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NumericsBigInteger_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NumericsBigInteger_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NumericsBigInteger_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NumericsBigInteger_Type_Vectors.Vector);




   type UniswapV3UniswapDayDataV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Date : Swagger.Nullable_Integer;
       Volume_Eth : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Volume_Usd_Untracked : Swagger.Nullable_UString;
       Fees_Usd : Swagger.Nullable_UString;
       Tx_Count : .Models.NumericsBigInteger_Type;
       Tvl_Usd : Swagger.Nullable_UString;
     end record;

   package UniswapV3UniswapDayDataV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3UniswapDayDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3UniswapDayDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3UniswapDayDataV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3UniswapDayDataV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3UniswapDayDataV3DTO_Type_Vectors.Vector);




   type UniswapV3TokenV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Decimals : Swagger.Nullable_Integer;
       Total_Supply : .Models.NumericsBigInteger_Type;
       Volume : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Fees_Usd : Swagger.Nullable_UString;
       Tx_Count : .Models.NumericsBigInteger_Type;
       Pool_Count : .Models.NumericsBigInteger_Type;
       Total_Value_Locked : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Value_Locked_Usd_Untracked : Swagger.Nullable_UString;
       Derived_Eth : Swagger.Nullable_UString;
       Whitelist_Pools : Swagger.UString_Vectors.Vector;
       Token_Symbol : Swagger.Nullable_UString;
     end record;

   package UniswapV3TokenV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3TokenV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenV3DTO_Type_Vectors.Vector);




   type UniswapV3TickV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Pool_Address : Swagger.Nullable_UString;
       Tick_Idx : .Models.NumericsBigInteger_Type;
       Pool : Swagger.Nullable_UString;
       Liquidity_Gross : .Models.NumericsBigInteger_Type;
       Liquidity_Net : .Models.NumericsBigInteger_Type;
       Price_0 : Swagger.Nullable_UString;
       Price_1 : Swagger.Nullable_UString;
       Volume_Token_0 : Swagger.Nullable_UString;
       Volume_Token_1 : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Fees_Usd : Swagger.Nullable_UString;
       Collected_Fees_Token_0 : Swagger.Nullable_UString;
       Collected_Fees_Token_1 : Swagger.Nullable_UString;
       Collected_Fees_Usd : Swagger.Nullable_UString;
       Created_At_Timestamp : Swagger.Nullable_Date;
       Liquidity_Provider_Count : .Models.NumericsBigInteger_Type;
       Fee_Growth_Outside_0x_128 : .Models.NumericsBigInteger_Type;
       Fee_Growth_Outside_1x_128 : .Models.NumericsBigInteger_Type;
     end record;

   package UniswapV3TickV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3TickV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TickV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TickV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TickV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TickV3DTO_Type_Vectors.Vector);




   type UniswapV2TokenV2DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Decimals : Swagger.Nullable_Integer;
       Total_Supply : .Models.NumericsBigInteger_Type;
       Trade_Volume : Swagger.Nullable_UString;
       Trade_Volume_Usd : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Tx_Count : .Models.NumericsBigInteger_Type;
       Total_Liquidity : Swagger.Nullable_UString;
       Derived_Eth : Swagger.Nullable_UString;
       Token_Symbol : Swagger.Nullable_UString;
     end record;

   package UniswapV2TokenV2DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV2TokenV2DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2TokenV2DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2TokenV2DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2TokenV2DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2TokenV2DTO_Type_Vectors.Vector);




   type UniswapV2PairV2DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Token_0 : Swagger.Nullable_UString;
       Token_1 : Swagger.Nullable_UString;
       Reserve_0 : Swagger.Nullable_UString;
       Reserve_1 : Swagger.Nullable_UString;
       Total_Supply : Swagger.Nullable_UString;
       Reserve_Eth : Swagger.Nullable_UString;
       Reserve_Usd : Swagger.Nullable_UString;
       Tracked_Reserve_Eth : Swagger.Nullable_UString;
       Token_0_Price : Swagger.Nullable_UString;
       Token_1_Price : Swagger.Nullable_UString;
       Volume_Token_0 : Swagger.Nullable_UString;
       Volume_Token_1 : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Tx_Count : .Models.NumericsBigInteger_Type;
       Created_At_Timestamp : Swagger.Nullable_Date;
       Liquidity_Provider_Count : Swagger.Nullable_UString;
       Evaluated_Ask : double;
     end record;

   package UniswapV2PairV2DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV2PairV2DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2PairV2DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2PairV2DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2PairV2DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2PairV2DTO_Type_Vectors.Vector);




   type UniswapV3PoolV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Created_At_Timestamp : Swagger.Nullable_Date;
       Token_0 : Swagger.Nullable_UString;
       Token_1 : Swagger.Nullable_UString;
       Fee_Tier : .Models.NumericsBigInteger_Type;
       Liquidity : .Models.NumericsBigInteger_Type;
       Sqrt_Price : .Models.NumericsBigInteger_Type;
       Fee_Growth_Global_0x_128 : .Models.NumericsBigInteger_Type;
       Fee_Growth_Global_1x_128 : .Models.NumericsBigInteger_Type;
       Token_0_Price : Swagger.Nullable_UString;
       Token_1_Price : Swagger.Nullable_UString;
       Tick : .Models.NumericsBigInteger_Type;
       Observation_Index : .Models.NumericsBigInteger_Type;
       Volume_Token_0 : Swagger.Nullable_UString;
       Volume_Token_1 : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Fees_Usd : Swagger.Nullable_UString;
       Tx_Count : .Models.NumericsBigInteger_Type;
       Collected_Fees_Token_0 : Swagger.Nullable_UString;
       Collected_Fees_Token_1 : Swagger.Nullable_UString;
       Collected_Fees_Usd : Swagger.Nullable_UString;
       Total_Value_Locked_Token_0 : Swagger.Nullable_UString;
       Total_Value_Locked_Token_1 : Swagger.Nullable_UString;
       Total_Value_Locked_Eth : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Value_Locked_Usd_Untracked : Swagger.Nullable_UString;
       Liquidity_Provider_Count : Swagger.Nullable_UString;
       Evaluated_Ask : double;
     end record;

   package UniswapV3PoolV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3PoolV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolV3DTO_Type_Vectors.Vector);




   type TransactionsETradeAggressiveSide_Type is
     record
     end record;

   package TransactionsETradeAggressiveSide_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => TransactionsETradeAggressiveSide_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TransactionsETradeAggressiveSide_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TransactionsETradeAggressiveSide_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out TransactionsETradeAggressiveSide_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out TransactionsETradeAggressiveSide_Type_Vectors.Vector);




   type UniswapV3SwapV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Transaction : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_Date;
       Pool : Swagger.Nullable_UString;
       Token_0 : Swagger.Nullable_UString;
       Token_1 : Swagger.Nullable_UString;
       Sender : Swagger.Nullable_UString;
       Recipient : Swagger.Nullable_UString;
       Origin : Swagger.Nullable_UString;
       Amount_0 : Swagger.Nullable_UString;
       Amount_1 : Swagger.Nullable_UString;
       Amount_Usd : Swagger.Nullable_UString;
       Sqrt_Price_X_96 : .Models.NumericsBigInteger_Type;
       Tick : .Models.NumericsBigInteger_Type;
       Log_Index : .Models.NumericsBigInteger_Type;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
     end record;

   package UniswapV3SwapV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3SwapV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3SwapV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3SwapV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3SwapV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3SwapV3DTO_Type_Vectors.Vector);




   type UniswapV2SwapV2DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Transaction : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_Date;
       Pair : Swagger.Nullable_UString;
       Sender : Swagger.Nullable_UString;
       From : Swagger.Nullable_UString;
       Amount_0_In : Swagger.Nullable_UString;
       Amount_1_In : Swagger.Nullable_UString;
       Amount_0_Out : Swagger.Nullable_UString;
       Amount_1_Out : Swagger.Nullable_UString;
       To : Swagger.Nullable_UString;
       Log_Index : .Models.NumericsBigInteger_Type;
       Amount_Usd : Swagger.Nullable_UString;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
     end record;

   package UniswapV2SwapV2DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV2SwapV2DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2SwapV2DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2SwapV2DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2SwapV2DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2SwapV2DTO_Type_Vectors.Vector);




   type CurveExchangeDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Buyer : Swagger.Nullable_UString;
       Receiver : Swagger.Nullable_UString;
       Token_Sold : Swagger.Nullable_UString;
       Token_Bought : Swagger.Nullable_UString;
       Amount_Sold : Swagger.Nullable_UString;
       Amount_Bought : Swagger.Nullable_UString;
       Block : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Transaction : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
     end record;

   package CurveExchangeDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CurveExchangeDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CurveExchangeDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CurveExchangeDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CurveExchangeDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CurveExchangeDTO_Type_Vectors.Vector);




   type DexTradeDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Order : Swagger.Nullable_UString;
       Owner : Swagger.Nullable_UString;
       Sell_Volume : Swagger.Nullable_UString;
       Buy_Volume : Swagger.Nullable_UString;
       Trade_Batch_Id : Swagger.Nullable_UString;
       Trade_Epoch : Swagger.Nullable_UString;
       Buy_Token : Swagger.Nullable_UString;
       Sell_Token : Swagger.Nullable_UString;
       Create_Epoch : Swagger.Nullable_UString;
       Revert_Epoch : Swagger.Nullable_UString;
       Tx_Hash : Swagger.Nullable_UString;
       Tx_Log_Index : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
     end record;

   package DexTradeDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => DexTradeDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DexTradeDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DexTradeDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out DexTradeDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out DexTradeDTO_Type_Vectors.Vector);




   type SushiswapSwapDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Transaction : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Pair : Swagger.Nullable_UString;
       Sender : Swagger.Nullable_UString;
       Amount_0_In : Swagger.Nullable_UString;
       Amount_1_In : Swagger.Nullable_UString;
       Amount_0_Out : Swagger.Nullable_UString;
       Amount_1_Out : Swagger.Nullable_UString;
       To : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_UString;
       Amount_Usd : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
     end record;

   package SushiswapSwapDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => SushiswapSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapSwapDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapSwapDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapSwapDTO_Type_Vectors.Vector);




   type UniswapV3BundleV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Eth_Price_Usd : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3BundleV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3BundleV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3BundleV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3BundleV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3BundleV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3BundleV3DTO_Type_Vectors.Vector);




   type UniswapV3FactoryV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Pool_Count : Swagger.Nullable_UString;
       Tx_Count : Swagger.Nullable_UString;
       Total_Volume_Usd : Swagger.Nullable_UString;
       Total_Volume_Eth : Swagger.Nullable_UString;
       Total_Fees_Usd : Swagger.Nullable_UString;
       Total_Fees_Eth : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Value_Locked_Eth : Swagger.Nullable_UString;
       Total_Value_Locked_Usd_Untracked : Swagger.Nullable_UString;
       Total_Value_Locked_Eth_Untracked : Swagger.Nullable_UString;
       Owner : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3FactoryV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3FactoryV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3FactoryV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3FactoryV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3FactoryV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3FactoryV3DTO_Type_Vectors.Vector);




   type UniswapV3PoolDayDataV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Date : Swagger.Nullable_Integer;
       Pool : Swagger.Nullable_UString;
       Liquidity : Swagger.Nullable_UString;
       Sqrt_Price : Swagger.Nullable_UString;
       Token_0_Price : Swagger.Nullable_UString;
       Token_1_Price : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Fee_Growth_Global_0x_128 : Swagger.Nullable_UString;
       Fee_Growth_Global_1x_128 : Swagger.Nullable_UString;
       Tvl_Usd : Swagger.Nullable_UString;
       Volume_Token_0 : Swagger.Nullable_UString;
       Volume_Token_1 : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Fees_Usd : Swagger.Nullable_UString;
       Tx_Count : Swagger.Nullable_UString;
       Open : Swagger.Nullable_UString;
       High : Swagger.Nullable_UString;
       Low : Swagger.Nullable_UString;
       Close : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3PoolDayDataV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3PoolDayDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolDayDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolDayDataV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolDayDataV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolDayDataV3DTO_Type_Vectors.Vector);




   type UniswapV3PositionV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Owner : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Token_0 : Swagger.Nullable_UString;
       Token_1 : Swagger.Nullable_UString;
       Tick_Lower : Swagger.Nullable_UString;
       Tick_Upper : Swagger.Nullable_UString;
       Liquidity : Swagger.Nullable_UString;
       Deposited_Token_0 : Swagger.Nullable_UString;
       Deposited_Token_1 : Swagger.Nullable_UString;
       Withdrawn_Token_0 : Swagger.Nullable_UString;
       Withdrawn_Token_1 : Swagger.Nullable_UString;
       Collected_Fees_Token_0 : Swagger.Nullable_UString;
       Collected_Fees_Token_1 : Swagger.Nullable_UString;
       Transaction : Swagger.Nullable_UString;
       Fee_Growth_Inside_0_Last_X_128 : Swagger.Nullable_UString;
       Fee_Growth_Inside_1_Last_X_128 : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3PositionV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3PositionV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PositionV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PositionV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PositionV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PositionV3DTO_Type_Vectors.Vector);




   type UniswapV3TickDayDataV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Date : Swagger.Nullable_Integer;
       Pool : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Liquidity_Gross : Swagger.Nullable_UString;
       Liquidity_Net : Swagger.Nullable_UString;
       Volume_Token_0 : Swagger.Nullable_UString;
       Volume_Token_1 : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Fees_Usd : Swagger.Nullable_UString;
       Fee_Growth_Outside_0x_128 : Swagger.Nullable_UString;
       Fee_Growth_Outside_1x_128 : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3TickDayDataV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3TickDayDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TickDayDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TickDayDataV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TickDayDataV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TickDayDataV3DTO_Type_Vectors.Vector);




   type UniswapV3TokenHourDataV3DTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Period_Start_Unix : Swagger.Nullable_Integer;
       Token : Swagger.Nullable_UString;
       Volume : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Total_Value_Locked : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Price_Usd : Swagger.Nullable_UString;
       Fees_Usd : Swagger.Nullable_UString;
       Open : Swagger.Nullable_UString;
       High : Swagger.Nullable_UString;
       Low : Swagger.Nullable_UString;
       Close : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
     end record;

   package UniswapV3TokenHourDataV3DTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3TokenHourDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenHourDataV3DTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenHourDataV3DTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenHourDataV3DTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenHourDataV3DTO_Type_Vectors.Vector);




   type UniswapV3TokenV3DayDataDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Date : Swagger.Nullable_Integer;
       Token : Swagger.Nullable_UString;
       Volume : Swagger.Nullable_UString;
       Volume_Usd : Swagger.Nullable_UString;
       Untracked_Volume_Usd : Swagger.Nullable_UString;
       Total_Value_Locked : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Price_Usd : Swagger.Nullable_UString;
       Fees_Usd : Swagger.Nullable_UString;
       Open : Swagger.Nullable_UString;
       High : Swagger.Nullable_UString;
       Low : Swagger.Nullable_UString;
       Close : Swagger.Nullable_UString;
     end record;

   package UniswapV3TokenV3DayDataDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UniswapV3TokenV3DayDataDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenV3DayDataDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenV3DayDataDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenV3DayDataDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenV3DayDataDTO_Type_Vectors.Vector);



end .Models;
