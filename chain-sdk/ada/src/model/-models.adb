--  OnChain API
--   This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
--
--  The version of the OpenAPI document: v1
--  Contact: support@coinapi.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 6.2.1.
--  https://openapi-generator.tech
--  Do not edit the class manually.


package body .Models is
   pragma Style_Checks ("-mr");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;



   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PositionSnapshotV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("owner", Value.Owner);
      Into.Write_Entity ("pool", Value.Pool);
      Into.Write_Entity ("position", Value.Position);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("liquidity", Value.Liquidity);
      Into.Write_Entity ("deposited_token_0", Value.Deposited_Token_0);
      Into.Write_Entity ("deposited_token_1", Value.Deposited_Token_1);
      Into.Write_Entity ("withdrawn_token_0", Value.Withdrawn_Token_0);
      Into.Write_Entity ("withdrawn_token_1", Value.Withdrawn_Token_1);
      Into.Write_Entity ("collected_fees_token_0", Value.Collected_Fees_Token_0);
      Into.Write_Entity ("collected_fees_token_1", Value.Collected_Fees_Token_1);
      Into.Write_Entity ("transaction", Value.Transaction);
      Into.Write_Entity ("fee_growth_inside_0_last_x128", Value.Fee_Growth_Inside_0_Last_X_128);
      Into.Write_Entity ("fee_growth_inside_1_last_x128", Value.Fee_Growth_Inside_1_Last_X_128);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PositionSnapshotV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PositionSnapshotV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "owner", Value.Owner);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Swagger.Streams.Deserialize (Object, "position", Value.Position);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "liquidity", Value.Liquidity);
      Swagger.Streams.Deserialize (Object, "deposited_token_0", Value.Deposited_Token_0);
      Swagger.Streams.Deserialize (Object, "deposited_token_1", Value.Deposited_Token_1);
      Swagger.Streams.Deserialize (Object, "withdrawn_token_0", Value.Withdrawn_Token_0);
      Swagger.Streams.Deserialize (Object, "withdrawn_token_1", Value.Withdrawn_Token_1);
      Swagger.Streams.Deserialize (Object, "collected_fees_token_0", Value.Collected_Fees_Token_0);
      Swagger.Streams.Deserialize (Object, "collected_fees_token_1", Value.Collected_Fees_Token_1);
      Swagger.Streams.Deserialize (Object, "transaction", Value.Transaction);
      Swagger.Streams.Deserialize (Object, "fee_growth_inside_0_last_x128", Value.Fee_Growth_Inside_0_Last_X_128);
      Swagger.Streams.Deserialize (Object, "fee_growth_inside_1_last_x128", Value.Fee_Growth_Inside_1_Last_X_128);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PositionSnapshotV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3PositionSnapshotV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolHourDataV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("period_start_unix", Value.Period_Start_Unix);
      Into.Write_Entity ("pool", Value.Pool);
      Into.Write_Entity ("liquidity", Value.Liquidity);
      Into.Write_Entity ("sqrt_price", Value.Sqrt_Price);
      Into.Write_Entity ("token_0_price", Value.Token_0_Price);
      Into.Write_Entity ("token_1_price", Value.Token_1_Price);
      Into.Write_Entity ("tick", Value.Tick);
      Into.Write_Entity ("fee_growth_global_0x128", Value.Fee_Growth_Global_0x_128);
      Into.Write_Entity ("fee_growth_global_1x128", Value.Fee_Growth_Global_1x_128);
      Into.Write_Entity ("tvl_usd", Value.Tvl_Usd);
      Into.Write_Entity ("volume_token_0", Value.Volume_Token_0);
      Into.Write_Entity ("volume_token_1", Value.Volume_Token_1);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("fees_usd", Value.Fees_Usd);
      Into.Write_Entity ("tx_count", Value.Tx_Count);
      Into.Write_Entity ("open", Value.Open);
      Into.Write_Entity ("high", Value.High);
      Into.Write_Entity ("low", Value.Low);
      Into.Write_Entity ("close", Value.Close);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolHourDataV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolHourDataV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "period_start_unix", Value.Period_Start_Unix);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Swagger.Streams.Deserialize (Object, "liquidity", Value.Liquidity);
      Swagger.Streams.Deserialize (Object, "sqrt_price", Value.Sqrt_Price);
      Swagger.Streams.Deserialize (Object, "token_0_price", Value.Token_0_Price);
      Swagger.Streams.Deserialize (Object, "token_1_price", Value.Token_1_Price);
      Swagger.Streams.Deserialize (Object, "tick", Value.Tick);
      Swagger.Streams.Deserialize (Object, "fee_growth_global_0x128", Value.Fee_Growth_Global_0x_128);
      Swagger.Streams.Deserialize (Object, "fee_growth_global_1x128", Value.Fee_Growth_Global_1x_128);
      Swagger.Streams.Deserialize (Object, "tvl_usd", Value.Tvl_Usd);
      Swagger.Streams.Deserialize (Object, "volume_token_0", Value.Volume_Token_0);
      Swagger.Streams.Deserialize (Object, "volume_token_1", Value.Volume_Token_1);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "fees_usd", Value.Fees_Usd);
      Swagger.Streams.Deserialize (Object, "tx_count", Value.Tx_Count);
      Swagger.Streams.Deserialize (Object, "open", Value.Open);
      Swagger.Streams.Deserialize (Object, "high", Value.High);
      Swagger.Streams.Deserialize (Object, "low", Value.Low);
      Swagger.Streams.Deserialize (Object, "close", Value.Close);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolHourDataV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3PoolHourDataV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3MintV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("transaction", Value.Transaction);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("pool", Value.Pool);
      Into.Write_Entity ("token_0", Value.Token_0);
      Into.Write_Entity ("token_1", Value.Token_1);
      Into.Write_Entity ("owner", Value.Owner);
      Into.Write_Entity ("sender", Value.Sender);
      Into.Write_Entity ("origin", Value.Origin);
      Into.Write_Entity ("amount", Value.Amount);
      Into.Write_Entity ("amount_0", Value.Amount_0);
      Into.Write_Entity ("amount_1", Value.Amount_1);
      Into.Write_Entity ("amount_usd", Value.Amount_Usd);
      Into.Write_Entity ("tick_lower", Value.Tick_Lower);
      Into.Write_Entity ("tick_upper", Value.Tick_Upper);
      Into.Write_Entity ("log_index", Value.Log_Index);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3MintV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3MintV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "transaction", Value.Transaction);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Swagger.Streams.Deserialize (Object, "token_0", Value.Token_0);
      Swagger.Streams.Deserialize (Object, "token_1", Value.Token_1);
      Swagger.Streams.Deserialize (Object, "owner", Value.Owner);
      Swagger.Streams.Deserialize (Object, "sender", Value.Sender);
      Swagger.Streams.Deserialize (Object, "origin", Value.Origin);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
      Swagger.Streams.Deserialize (Object, "amount_0", Value.Amount_0);
      Swagger.Streams.Deserialize (Object, "amount_1", Value.Amount_1);
      Swagger.Streams.Deserialize (Object, "amount_usd", Value.Amount_Usd);
      Swagger.Streams.Deserialize (Object, "tick_lower", Value.Tick_Lower);
      Swagger.Streams.Deserialize (Object, "tick_upper", Value.Tick_Upper);
      Swagger.Streams.Deserialize (Object, "log_index", Value.Log_Index);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3MintV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3MintV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3BurnV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("transaction", Value.Transaction);
      Into.Write_Entity ("pool", Value.Pool);
      Into.Write_Entity ("token_0", Value.Token_0);
      Into.Write_Entity ("token_1", Value.Token_1);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("owner", Value.Owner);
      Into.Write_Entity ("origin", Value.Origin);
      Into.Write_Entity ("amount", Value.Amount);
      Into.Write_Entity ("amount_0", Value.Amount_0);
      Into.Write_Entity ("amount_1", Value.Amount_1);
      Into.Write_Entity ("amount_usd", Value.Amount_Usd);
      Into.Write_Entity ("tick_lower", Value.Tick_Lower);
      Into.Write_Entity ("tick_upper", Value.Tick_Upper);
      Into.Write_Entity ("log_index", Value.Log_Index);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3BurnV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3BurnV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "transaction", Value.Transaction);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Swagger.Streams.Deserialize (Object, "token_0", Value.Token_0);
      Swagger.Streams.Deserialize (Object, "token_1", Value.Token_1);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "owner", Value.Owner);
      Swagger.Streams.Deserialize (Object, "origin", Value.Origin);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
      Swagger.Streams.Deserialize (Object, "amount_0", Value.Amount_0);
      Swagger.Streams.Deserialize (Object, "amount_1", Value.Amount_1);
      Swagger.Streams.Deserialize (Object, "amount_usd", Value.Amount_Usd);
      Swagger.Streams.Deserialize (Object, "tick_lower", Value.Tick_Lower);
      Swagger.Streams.Deserialize (Object, "tick_upper", Value.Tick_Upper);
      Swagger.Streams.Deserialize (Object, "log_index", Value.Log_Index);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3BurnV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3BurnV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapTokenDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("factory", Value.Factory);
      Into.Write_Entity ("symbol", Value.Symbol);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("decimals", Value.Decimals);
      Into.Write_Entity ("total_supply", Value.Total_Supply);
      Into.Write_Entity ("volume", Value.Volume);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Into.Write_Entity ("tx_count", Value.Tx_Count);
      Into.Write_Entity ("liquidity", Value.Liquidity);
      Into.Write_Entity ("derived_eth", Value.Derived_Eth);
      Serialize (Into, "whitelist_pairs", Value.Whitelist_Pairs);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("token_symbol", Value.Token_Symbol);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapTokenDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapTokenDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "factory", Value.Factory);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "decimals", Value.Decimals);
      Swagger.Streams.Deserialize (Object, "total_supply", Value.Total_Supply);
      Swagger.Streams.Deserialize (Object, "volume", Value.Volume);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "tx_count", Value.Tx_Count);
      Swagger.Streams.Deserialize (Object, "liquidity", Value.Liquidity);
      Swagger.Streams.Deserialize (Object, "derived_eth", Value.Derived_Eth);
      Swagger.Streams.Deserialize (Object, "whitelist_pairs", Value.Whitelist_Pairs);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "token_symbol", Value.Token_Symbol);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapTokenDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : SushiswapTokenDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapPairDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("factory", Value.Factory);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("token_0", Value.Token_0);
      Into.Write_Entity ("token_1", Value.Token_1);
      Into.Write_Entity ("reserve_0", Value.Reserve_0);
      Into.Write_Entity ("reserve_1", Value.Reserve_1);
      Into.Write_Entity ("total_supply", Value.Total_Supply);
      Into.Write_Entity ("reserve_eth", Value.Reserve_Eth);
      Into.Write_Entity ("reserve_usd", Value.Reserve_Usd);
      Into.Write_Entity ("tracked_reserve_eth", Value.Tracked_Reserve_Eth);
      Into.Write_Entity ("token_0_price", Value.Token_0_Price);
      Into.Write_Entity ("token_1_price", Value.Token_1_Price);
      Into.Write_Entity ("volume_token_0", Value.Volume_Token_0);
      Into.Write_Entity ("volume_token_1", Value.Volume_Token_1);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Into.Write_Entity ("tx_count", Value.Tx_Count);
      Into.Write_Entity ("liquidity_provider_count", Value.Liquidity_Provider_Count);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("block", Value.Block);
      Into.Write_Entity ("vid", Value.Vid);
      Serialize (Into, "evaluated_ask", Value.Evaluated_Ask);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapPairDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapPairDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "factory", Value.Factory);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "token_0", Value.Token_0);
      Swagger.Streams.Deserialize (Object, "token_1", Value.Token_1);
      Swagger.Streams.Deserialize (Object, "reserve_0", Value.Reserve_0);
      Swagger.Streams.Deserialize (Object, "reserve_1", Value.Reserve_1);
      Swagger.Streams.Deserialize (Object, "total_supply", Value.Total_Supply);
      Swagger.Streams.Deserialize (Object, "reserve_eth", Value.Reserve_Eth);
      Swagger.Streams.Deserialize (Object, "reserve_usd", Value.Reserve_Usd);
      Swagger.Streams.Deserialize (Object, "tracked_reserve_eth", Value.Tracked_Reserve_Eth);
      Swagger.Streams.Deserialize (Object, "token_0_price", Value.Token_0_Price);
      Swagger.Streams.Deserialize (Object, "token_1_price", Value.Token_1_Price);
      Swagger.Streams.Deserialize (Object, "volume_token_0", Value.Volume_Token_0);
      Swagger.Streams.Deserialize (Object, "volume_token_1", Value.Volume_Token_1);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "tx_count", Value.Tx_Count);
      Swagger.Streams.Deserialize (Object, "liquidity_provider_count", Value.Liquidity_Provider_Count);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "block", Value.Block);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "evaluated_ask", Value.Evaluated_Ask);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapPairDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : SushiswapPairDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NumericsBigInteger_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("is_power_of_two", Value.Is_Power_Of_Two);
      Into.Write_Entity ("is_zero", Value.Is_Zero);
      Into.Write_Entity ("is_one", Value.Is_One);
      Into.Write_Entity ("is_even", Value.Is_Even);
      Into.Write_Entity ("sign", Value.Sign);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NumericsBigInteger_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NumericsBigInteger_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "is_power_of_two", Value.Is_Power_Of_Two);
      Swagger.Streams.Deserialize (Object, "is_zero", Value.Is_Zero);
      Swagger.Streams.Deserialize (Object, "is_one", Value.Is_One);
      Swagger.Streams.Deserialize (Object, "is_even", Value.Is_Even);
      Swagger.Streams.Deserialize (Object, "sign", Value.Sign);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NumericsBigInteger_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : NumericsBigInteger_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3UniswapDayDataV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("date", Value.Date);
      Into.Write_Entity ("volume_eth", Value.Volume_Eth);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("volume_usd_untracked", Value.Volume_Usd_Untracked);
      Into.Write_Entity ("fees_usd", Value.Fees_Usd);
      Serialize (Into, "tx_count", Value.Tx_Count);
      Into.Write_Entity ("tvl_usd", Value.Tvl_Usd);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3UniswapDayDataV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3UniswapDayDataV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "volume_eth", Value.Volume_Eth);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "volume_usd_untracked", Value.Volume_Usd_Untracked);
      Swagger.Streams.Deserialize (Object, "fees_usd", Value.Fees_Usd);
      Deserialize (Object, "tx_count", Value.Tx_Count);
      Swagger.Streams.Deserialize (Object, "tvl_usd", Value.Tvl_Usd);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3UniswapDayDataV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3UniswapDayDataV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("symbol", Value.Symbol);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("decimals", Value.Decimals);
      Serialize (Into, "total_supply", Value.Total_Supply);
      Into.Write_Entity ("volume", Value.Volume);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Into.Write_Entity ("fees_usd", Value.Fees_Usd);
      Serialize (Into, "tx_count", Value.Tx_Count);
      Serialize (Into, "pool_count", Value.Pool_Count);
      Into.Write_Entity ("total_value_locked", Value.Total_Value_Locked);
      Into.Write_Entity ("total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Into.Write_Entity ("total_value_locked_usd_untracked", Value.Total_Value_Locked_Usd_Untracked);
      Into.Write_Entity ("derived_eth", Value.Derived_Eth);
      Serialize (Into, "whitelist_pools", Value.Whitelist_Pools);
      Into.Write_Entity ("token_symbol", Value.Token_Symbol);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "decimals", Value.Decimals);
      Deserialize (Object, "total_supply", Value.Total_Supply);
      Swagger.Streams.Deserialize (Object, "volume", Value.Volume);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "fees_usd", Value.Fees_Usd);
      Deserialize (Object, "tx_count", Value.Tx_Count);
      Deserialize (Object, "pool_count", Value.Pool_Count);
      Swagger.Streams.Deserialize (Object, "total_value_locked", Value.Total_Value_Locked);
      Swagger.Streams.Deserialize (Object, "total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Swagger.Streams.Deserialize (Object, "total_value_locked_usd_untracked", Value.Total_Value_Locked_Usd_Untracked);
      Swagger.Streams.Deserialize (Object, "derived_eth", Value.Derived_Eth);
      Swagger.Streams.Deserialize (Object, "whitelist_pools", Value.Whitelist_Pools);
      Swagger.Streams.Deserialize (Object, "token_symbol", Value.Token_Symbol);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3TokenV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TickV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("pool_address", Value.Pool_Address);
      Serialize (Into, "tick_idx", Value.Tick_Idx);
      Into.Write_Entity ("pool", Value.Pool);
      Serialize (Into, "liquidity_gross", Value.Liquidity_Gross);
      Serialize (Into, "liquidity_net", Value.Liquidity_Net);
      Into.Write_Entity ("price_0", Value.Price_0);
      Into.Write_Entity ("price_1", Value.Price_1);
      Into.Write_Entity ("volume_token_0", Value.Volume_Token_0);
      Into.Write_Entity ("volume_token_1", Value.Volume_Token_1);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Into.Write_Entity ("fees_usd", Value.Fees_Usd);
      Into.Write_Entity ("collected_fees_token_0", Value.Collected_Fees_Token_0);
      Into.Write_Entity ("collected_fees_token_1", Value.Collected_Fees_Token_1);
      Into.Write_Entity ("collected_fees_usd", Value.Collected_Fees_Usd);
      Into.Write_Entity ("created_at_timestamp", Value.Created_At_Timestamp);
      Serialize (Into, "liquidity_provider_count", Value.Liquidity_Provider_Count);
      Serialize (Into, "fee_growth_outside_0x128", Value.Fee_Growth_Outside_0x_128);
      Serialize (Into, "fee_growth_outside_1x128", Value.Fee_Growth_Outside_1x_128);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TickV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TickV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "pool_address", Value.Pool_Address);
      Deserialize (Object, "tick_idx", Value.Tick_Idx);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Deserialize (Object, "liquidity_gross", Value.Liquidity_Gross);
      Deserialize (Object, "liquidity_net", Value.Liquidity_Net);
      Swagger.Streams.Deserialize (Object, "price_0", Value.Price_0);
      Swagger.Streams.Deserialize (Object, "price_1", Value.Price_1);
      Swagger.Streams.Deserialize (Object, "volume_token_0", Value.Volume_Token_0);
      Swagger.Streams.Deserialize (Object, "volume_token_1", Value.Volume_Token_1);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "fees_usd", Value.Fees_Usd);
      Swagger.Streams.Deserialize (Object, "collected_fees_token_0", Value.Collected_Fees_Token_0);
      Swagger.Streams.Deserialize (Object, "collected_fees_token_1", Value.Collected_Fees_Token_1);
      Swagger.Streams.Deserialize (Object, "collected_fees_usd", Value.Collected_Fees_Usd);
      Swagger.Streams.Deserialize (Object, "created_at_timestamp", Value.Created_At_Timestamp);
      Deserialize (Object, "liquidity_provider_count", Value.Liquidity_Provider_Count);
      Deserialize (Object, "fee_growth_outside_0x128", Value.Fee_Growth_Outside_0x_128);
      Deserialize (Object, "fee_growth_outside_1x128", Value.Fee_Growth_Outside_1x_128);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TickV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3TickV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2TokenV2DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("symbol", Value.Symbol);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("decimals", Value.Decimals);
      Serialize (Into, "total_supply", Value.Total_Supply);
      Into.Write_Entity ("trade_volume", Value.Trade_Volume);
      Into.Write_Entity ("trade_volume_usd", Value.Trade_Volume_Usd);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Serialize (Into, "tx_count", Value.Tx_Count);
      Into.Write_Entity ("total_liquidity", Value.Total_Liquidity);
      Into.Write_Entity ("derived_eth", Value.Derived_Eth);
      Into.Write_Entity ("token_symbol", Value.Token_Symbol);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2TokenV2DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2TokenV2DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "symbol", Value.Symbol);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "decimals", Value.Decimals);
      Deserialize (Object, "total_supply", Value.Total_Supply);
      Swagger.Streams.Deserialize (Object, "trade_volume", Value.Trade_Volume);
      Swagger.Streams.Deserialize (Object, "trade_volume_usd", Value.Trade_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Deserialize (Object, "tx_count", Value.Tx_Count);
      Swagger.Streams.Deserialize (Object, "total_liquidity", Value.Total_Liquidity);
      Swagger.Streams.Deserialize (Object, "derived_eth", Value.Derived_Eth);
      Swagger.Streams.Deserialize (Object, "token_symbol", Value.Token_Symbol);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2TokenV2DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV2TokenV2DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2PairV2DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("token_0", Value.Token_0);
      Into.Write_Entity ("token_1", Value.Token_1);
      Into.Write_Entity ("reserve_0", Value.Reserve_0);
      Into.Write_Entity ("reserve_1", Value.Reserve_1);
      Into.Write_Entity ("total_supply", Value.Total_Supply);
      Into.Write_Entity ("reserve_eth", Value.Reserve_Eth);
      Into.Write_Entity ("reserve_usd", Value.Reserve_Usd);
      Into.Write_Entity ("tracked_reserve_eth", Value.Tracked_Reserve_Eth);
      Into.Write_Entity ("token_0_price", Value.Token_0_Price);
      Into.Write_Entity ("token_1_price", Value.Token_1_Price);
      Into.Write_Entity ("volume_token_0", Value.Volume_Token_0);
      Into.Write_Entity ("volume_token_1", Value.Volume_Token_1);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Serialize (Into, "tx_count", Value.Tx_Count);
      Into.Write_Entity ("created_at_timestamp", Value.Created_At_Timestamp);
      Into.Write_Entity ("liquidity_provider_count", Value.Liquidity_Provider_Count);
      Serialize (Into, "evaluated_ask", Value.Evaluated_Ask);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2PairV2DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2PairV2DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "token_0", Value.Token_0);
      Swagger.Streams.Deserialize (Object, "token_1", Value.Token_1);
      Swagger.Streams.Deserialize (Object, "reserve_0", Value.Reserve_0);
      Swagger.Streams.Deserialize (Object, "reserve_1", Value.Reserve_1);
      Swagger.Streams.Deserialize (Object, "total_supply", Value.Total_Supply);
      Swagger.Streams.Deserialize (Object, "reserve_eth", Value.Reserve_Eth);
      Swagger.Streams.Deserialize (Object, "reserve_usd", Value.Reserve_Usd);
      Swagger.Streams.Deserialize (Object, "tracked_reserve_eth", Value.Tracked_Reserve_Eth);
      Swagger.Streams.Deserialize (Object, "token_0_price", Value.Token_0_Price);
      Swagger.Streams.Deserialize (Object, "token_1_price", Value.Token_1_Price);
      Swagger.Streams.Deserialize (Object, "volume_token_0", Value.Volume_Token_0);
      Swagger.Streams.Deserialize (Object, "volume_token_1", Value.Volume_Token_1);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Deserialize (Object, "tx_count", Value.Tx_Count);
      Swagger.Streams.Deserialize (Object, "created_at_timestamp", Value.Created_At_Timestamp);
      Swagger.Streams.Deserialize (Object, "liquidity_provider_count", Value.Liquidity_Provider_Count);
      Swagger.Streams.Deserialize (Object, "evaluated_ask", Value.Evaluated_Ask);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2PairV2DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV2PairV2DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("created_at_timestamp", Value.Created_At_Timestamp);
      Into.Write_Entity ("token_0", Value.Token_0);
      Into.Write_Entity ("token_1", Value.Token_1);
      Serialize (Into, "fee_tier", Value.Fee_Tier);
      Serialize (Into, "liquidity", Value.Liquidity);
      Serialize (Into, "sqrt_price", Value.Sqrt_Price);
      Serialize (Into, "fee_growth_global_0x128", Value.Fee_Growth_Global_0x_128);
      Serialize (Into, "fee_growth_global_1x128", Value.Fee_Growth_Global_1x_128);
      Into.Write_Entity ("token_0_price", Value.Token_0_Price);
      Into.Write_Entity ("token_1_price", Value.Token_1_Price);
      Serialize (Into, "tick", Value.Tick);
      Serialize (Into, "observation_index", Value.Observation_Index);
      Into.Write_Entity ("volume_token_0", Value.Volume_Token_0);
      Into.Write_Entity ("volume_token_1", Value.Volume_Token_1);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Into.Write_Entity ("fees_usd", Value.Fees_Usd);
      Serialize (Into, "tx_count", Value.Tx_Count);
      Into.Write_Entity ("collected_fees_token_0", Value.Collected_Fees_Token_0);
      Into.Write_Entity ("collected_fees_token_1", Value.Collected_Fees_Token_1);
      Into.Write_Entity ("collected_fees_usd", Value.Collected_Fees_Usd);
      Into.Write_Entity ("total_value_locked_token_0", Value.Total_Value_Locked_Token_0);
      Into.Write_Entity ("total_value_locked_token_1", Value.Total_Value_Locked_Token_1);
      Into.Write_Entity ("total_value_locked_eth", Value.Total_Value_Locked_Eth);
      Into.Write_Entity ("total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Into.Write_Entity ("total_value_locked_usd_untracked", Value.Total_Value_Locked_Usd_Untracked);
      Into.Write_Entity ("liquidity_provider_count", Value.Liquidity_Provider_Count);
      Serialize (Into, "evaluated_ask", Value.Evaluated_Ask);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "created_at_timestamp", Value.Created_At_Timestamp);
      Swagger.Streams.Deserialize (Object, "token_0", Value.Token_0);
      Swagger.Streams.Deserialize (Object, "token_1", Value.Token_1);
      Deserialize (Object, "fee_tier", Value.Fee_Tier);
      Deserialize (Object, "liquidity", Value.Liquidity);
      Deserialize (Object, "sqrt_price", Value.Sqrt_Price);
      Deserialize (Object, "fee_growth_global_0x128", Value.Fee_Growth_Global_0x_128);
      Deserialize (Object, "fee_growth_global_1x128", Value.Fee_Growth_Global_1x_128);
      Swagger.Streams.Deserialize (Object, "token_0_price", Value.Token_0_Price);
      Swagger.Streams.Deserialize (Object, "token_1_price", Value.Token_1_Price);
      Deserialize (Object, "tick", Value.Tick);
      Deserialize (Object, "observation_index", Value.Observation_Index);
      Swagger.Streams.Deserialize (Object, "volume_token_0", Value.Volume_Token_0);
      Swagger.Streams.Deserialize (Object, "volume_token_1", Value.Volume_Token_1);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "fees_usd", Value.Fees_Usd);
      Deserialize (Object, "tx_count", Value.Tx_Count);
      Swagger.Streams.Deserialize (Object, "collected_fees_token_0", Value.Collected_Fees_Token_0);
      Swagger.Streams.Deserialize (Object, "collected_fees_token_1", Value.Collected_Fees_Token_1);
      Swagger.Streams.Deserialize (Object, "collected_fees_usd", Value.Collected_Fees_Usd);
      Swagger.Streams.Deserialize (Object, "total_value_locked_token_0", Value.Total_Value_Locked_Token_0);
      Swagger.Streams.Deserialize (Object, "total_value_locked_token_1", Value.Total_Value_Locked_Token_1);
      Swagger.Streams.Deserialize (Object, "total_value_locked_eth", Value.Total_Value_Locked_Eth);
      Swagger.Streams.Deserialize (Object, "total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Swagger.Streams.Deserialize (Object, "total_value_locked_usd_untracked", Value.Total_Value_Locked_Usd_Untracked);
      Swagger.Streams.Deserialize (Object, "liquidity_provider_count", Value.Liquidity_Provider_Count);
      Swagger.Streams.Deserialize (Object, "evaluated_ask", Value.Evaluated_Ask);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3PoolV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TransactionsETradeAggressiveSide_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TransactionsETradeAggressiveSide_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out TransactionsETradeAggressiveSide_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out TransactionsETradeAggressiveSide_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : TransactionsETradeAggressiveSide_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3SwapV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("transaction", Value.Transaction);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("pool", Value.Pool);
      Into.Write_Entity ("token_0", Value.Token_0);
      Into.Write_Entity ("token_1", Value.Token_1);
      Into.Write_Entity ("sender", Value.Sender);
      Into.Write_Entity ("recipient", Value.Recipient);
      Into.Write_Entity ("origin", Value.Origin);
      Into.Write_Entity ("amount_0", Value.Amount_0);
      Into.Write_Entity ("amount_1", Value.Amount_1);
      Into.Write_Entity ("amount_usd", Value.Amount_Usd);
      Serialize (Into, "sqrt_price_x96", Value.Sqrt_Price_X_96);
      Serialize (Into, "tick", Value.Tick);
      Serialize (Into, "log_index", Value.Log_Index);
      Serialize (Into, "evaluated_price", Value.Evaluated_Price);
      Serialize (Into, "evaluated_amount", Value.Evaluated_Amount);
      Serialize (Into, "evaluated_aggressor", Value.Evaluated_Aggressor);
      Into.Write_Entity ("pool_id", Value.Pool_Id);
      Into.Write_Entity ("transaction_id", Value.Transaction_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3SwapV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3SwapV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "transaction", Value.Transaction);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Swagger.Streams.Deserialize (Object, "token_0", Value.Token_0);
      Swagger.Streams.Deserialize (Object, "token_1", Value.Token_1);
      Swagger.Streams.Deserialize (Object, "sender", Value.Sender);
      Swagger.Streams.Deserialize (Object, "recipient", Value.Recipient);
      Swagger.Streams.Deserialize (Object, "origin", Value.Origin);
      Swagger.Streams.Deserialize (Object, "amount_0", Value.Amount_0);
      Swagger.Streams.Deserialize (Object, "amount_1", Value.Amount_1);
      Swagger.Streams.Deserialize (Object, "amount_usd", Value.Amount_Usd);
      Deserialize (Object, "sqrt_price_x96", Value.Sqrt_Price_X_96);
      Deserialize (Object, "tick", Value.Tick);
      Deserialize (Object, "log_index", Value.Log_Index);
      Swagger.Streams.Deserialize (Object, "evaluated_price", Value.Evaluated_Price);
      Swagger.Streams.Deserialize (Object, "evaluated_amount", Value.Evaluated_Amount);
      Deserialize (Object, "evaluated_aggressor", Value.Evaluated_Aggressor);
      Swagger.Streams.Deserialize (Object, "pool_id", Value.Pool_Id);
      Swagger.Streams.Deserialize (Object, "transaction_id", Value.Transaction_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3SwapV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3SwapV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2SwapV2DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("transaction", Value.Transaction);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("pair", Value.Pair);
      Into.Write_Entity ("sender", Value.Sender);
      Into.Write_Entity ("from", Value.From);
      Into.Write_Entity ("amount_0_in", Value.Amount_0_In);
      Into.Write_Entity ("amount_1_in", Value.Amount_1_In);
      Into.Write_Entity ("amount_0_out", Value.Amount_0_Out);
      Into.Write_Entity ("amount_1_out", Value.Amount_1_Out);
      Into.Write_Entity ("to", Value.To);
      Serialize (Into, "log_index", Value.Log_Index);
      Into.Write_Entity ("amount_usd", Value.Amount_Usd);
      Serialize (Into, "evaluated_price", Value.Evaluated_Price);
      Serialize (Into, "evaluated_amount", Value.Evaluated_Amount);
      Serialize (Into, "evaluated_aggressor", Value.Evaluated_Aggressor);
      Into.Write_Entity ("pool_id", Value.Pool_Id);
      Into.Write_Entity ("transaction_id", Value.Transaction_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV2SwapV2DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2SwapV2DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "transaction", Value.Transaction);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "pair", Value.Pair);
      Swagger.Streams.Deserialize (Object, "sender", Value.Sender);
      Swagger.Streams.Deserialize (Object, "from", Value.From);
      Swagger.Streams.Deserialize (Object, "amount_0_in", Value.Amount_0_In);
      Swagger.Streams.Deserialize (Object, "amount_1_in", Value.Amount_1_In);
      Swagger.Streams.Deserialize (Object, "amount_0_out", Value.Amount_0_Out);
      Swagger.Streams.Deserialize (Object, "amount_1_out", Value.Amount_1_Out);
      Swagger.Streams.Deserialize (Object, "to", Value.To);
      Deserialize (Object, "log_index", Value.Log_Index);
      Swagger.Streams.Deserialize (Object, "amount_usd", Value.Amount_Usd);
      Swagger.Streams.Deserialize (Object, "evaluated_price", Value.Evaluated_Price);
      Swagger.Streams.Deserialize (Object, "evaluated_amount", Value.Evaluated_Amount);
      Deserialize (Object, "evaluated_aggressor", Value.Evaluated_Aggressor);
      Swagger.Streams.Deserialize (Object, "pool_id", Value.Pool_Id);
      Swagger.Streams.Deserialize (Object, "transaction_id", Value.Transaction_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV2SwapV2DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV2SwapV2DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CurveExchangeDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("pool", Value.Pool);
      Into.Write_Entity ("buyer", Value.Buyer);
      Into.Write_Entity ("receiver", Value.Receiver);
      Into.Write_Entity ("token_sold", Value.Token_Sold);
      Into.Write_Entity ("token_bought", Value.Token_Bought);
      Into.Write_Entity ("amount_sold", Value.Amount_Sold);
      Into.Write_Entity ("amount_bought", Value.Amount_Bought);
      Into.Write_Entity ("block", Value.Block);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("transaction", Value.Transaction);
      Into.Write_Entity ("vid", Value.Vid);
      Serialize (Into, "evaluated_price", Value.Evaluated_Price);
      Serialize (Into, "evaluated_amount", Value.Evaluated_Amount);
      Serialize (Into, "evaluated_aggressor", Value.Evaluated_Aggressor);
      Into.Write_Entity ("pool_id", Value.Pool_Id);
      Into.Write_Entity ("transaction_id", Value.Transaction_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CurveExchangeDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CurveExchangeDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Swagger.Streams.Deserialize (Object, "buyer", Value.Buyer);
      Swagger.Streams.Deserialize (Object, "receiver", Value.Receiver);
      Swagger.Streams.Deserialize (Object, "token_sold", Value.Token_Sold);
      Swagger.Streams.Deserialize (Object, "token_bought", Value.Token_Bought);
      Swagger.Streams.Deserialize (Object, "amount_sold", Value.Amount_Sold);
      Swagger.Streams.Deserialize (Object, "amount_bought", Value.Amount_Bought);
      Swagger.Streams.Deserialize (Object, "block", Value.Block);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "transaction", Value.Transaction);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "evaluated_price", Value.Evaluated_Price);
      Swagger.Streams.Deserialize (Object, "evaluated_amount", Value.Evaluated_Amount);
      Deserialize (Object, "evaluated_aggressor", Value.Evaluated_Aggressor);
      Swagger.Streams.Deserialize (Object, "pool_id", Value.Pool_Id);
      Swagger.Streams.Deserialize (Object, "transaction_id", Value.Transaction_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CurveExchangeDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : CurveExchangeDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DexTradeDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("order", Value.Order);
      Into.Write_Entity ("owner", Value.Owner);
      Into.Write_Entity ("sell_volume", Value.Sell_Volume);
      Into.Write_Entity ("buy_volume", Value.Buy_Volume);
      Into.Write_Entity ("trade_batch_id", Value.Trade_Batch_Id);
      Into.Write_Entity ("trade_epoch", Value.Trade_Epoch);
      Into.Write_Entity ("buy_token", Value.Buy_Token);
      Into.Write_Entity ("sell_token", Value.Sell_Token);
      Into.Write_Entity ("create_epoch", Value.Create_Epoch);
      Into.Write_Entity ("revert_epoch", Value.Revert_Epoch);
      Into.Write_Entity ("tx_hash", Value.Tx_Hash);
      Into.Write_Entity ("tx_log_index", Value.Tx_Log_Index);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("pool_id", Value.Pool_Id);
      Into.Write_Entity ("transaction_id", Value.Transaction_Id);
      Serialize (Into, "evaluated_price", Value.Evaluated_Price);
      Serialize (Into, "evaluated_amount", Value.Evaluated_Amount);
      Serialize (Into, "evaluated_aggressor", Value.Evaluated_Aggressor);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DexTradeDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out DexTradeDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "order", Value.Order);
      Swagger.Streams.Deserialize (Object, "owner", Value.Owner);
      Swagger.Streams.Deserialize (Object, "sell_volume", Value.Sell_Volume);
      Swagger.Streams.Deserialize (Object, "buy_volume", Value.Buy_Volume);
      Swagger.Streams.Deserialize (Object, "trade_batch_id", Value.Trade_Batch_Id);
      Swagger.Streams.Deserialize (Object, "trade_epoch", Value.Trade_Epoch);
      Swagger.Streams.Deserialize (Object, "buy_token", Value.Buy_Token);
      Swagger.Streams.Deserialize (Object, "sell_token", Value.Sell_Token);
      Swagger.Streams.Deserialize (Object, "create_epoch", Value.Create_Epoch);
      Swagger.Streams.Deserialize (Object, "revert_epoch", Value.Revert_Epoch);
      Swagger.Streams.Deserialize (Object, "tx_hash", Value.Tx_Hash);
      Swagger.Streams.Deserialize (Object, "tx_log_index", Value.Tx_Log_Index);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "pool_id", Value.Pool_Id);
      Swagger.Streams.Deserialize (Object, "transaction_id", Value.Transaction_Id);
      Swagger.Streams.Deserialize (Object, "evaluated_price", Value.Evaluated_Price);
      Swagger.Streams.Deserialize (Object, "evaluated_amount", Value.Evaluated_Amount);
      Deserialize (Object, "evaluated_aggressor", Value.Evaluated_Aggressor);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out DexTradeDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : DexTradeDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapSwapDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("transaction", Value.Transaction);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("pair", Value.Pair);
      Into.Write_Entity ("sender", Value.Sender);
      Into.Write_Entity ("amount_0_in", Value.Amount_0_In);
      Into.Write_Entity ("amount_1_in", Value.Amount_1_In);
      Into.Write_Entity ("amount_0_out", Value.Amount_0_Out);
      Into.Write_Entity ("amount_1_out", Value.Amount_1_Out);
      Into.Write_Entity ("to", Value.To);
      Into.Write_Entity ("log_index", Value.Log_Index);
      Into.Write_Entity ("amount_usd", Value.Amount_Usd);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("pool_id", Value.Pool_Id);
      Into.Write_Entity ("transaction_id", Value.Transaction_Id);
      Serialize (Into, "evaluated_price", Value.Evaluated_Price);
      Serialize (Into, "evaluated_amount", Value.Evaluated_Amount);
      Serialize (Into, "evaluated_aggressor", Value.Evaluated_Aggressor);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SushiswapSwapDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapSwapDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "transaction", Value.Transaction);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "pair", Value.Pair);
      Swagger.Streams.Deserialize (Object, "sender", Value.Sender);
      Swagger.Streams.Deserialize (Object, "amount_0_in", Value.Amount_0_In);
      Swagger.Streams.Deserialize (Object, "amount_1_in", Value.Amount_1_In);
      Swagger.Streams.Deserialize (Object, "amount_0_out", Value.Amount_0_Out);
      Swagger.Streams.Deserialize (Object, "amount_1_out", Value.Amount_1_Out);
      Swagger.Streams.Deserialize (Object, "to", Value.To);
      Swagger.Streams.Deserialize (Object, "log_index", Value.Log_Index);
      Swagger.Streams.Deserialize (Object, "amount_usd", Value.Amount_Usd);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "pool_id", Value.Pool_Id);
      Swagger.Streams.Deserialize (Object, "transaction_id", Value.Transaction_Id);
      Swagger.Streams.Deserialize (Object, "evaluated_price", Value.Evaluated_Price);
      Swagger.Streams.Deserialize (Object, "evaluated_amount", Value.Evaluated_Amount);
      Deserialize (Object, "evaluated_aggressor", Value.Evaluated_Aggressor);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SushiswapSwapDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : SushiswapSwapDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3BundleV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("eth_price_usd", Value.Eth_Price_Usd);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3BundleV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3BundleV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "eth_price_usd", Value.Eth_Price_Usd);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3BundleV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3BundleV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3FactoryV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("pool_count", Value.Pool_Count);
      Into.Write_Entity ("tx_count", Value.Tx_Count);
      Into.Write_Entity ("total_volume_usd", Value.Total_Volume_Usd);
      Into.Write_Entity ("total_volume_eth", Value.Total_Volume_Eth);
      Into.Write_Entity ("total_fees_usd", Value.Total_Fees_Usd);
      Into.Write_Entity ("total_fees_eth", Value.Total_Fees_Eth);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Into.Write_Entity ("total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Into.Write_Entity ("total_value_locked_eth", Value.Total_Value_Locked_Eth);
      Into.Write_Entity ("total_value_locked_usd_untracked", Value.Total_Value_Locked_Usd_Untracked);
      Into.Write_Entity ("total_value_locked_eth_untracked", Value.Total_Value_Locked_Eth_Untracked);
      Into.Write_Entity ("owner", Value.Owner);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3FactoryV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3FactoryV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "pool_count", Value.Pool_Count);
      Swagger.Streams.Deserialize (Object, "tx_count", Value.Tx_Count);
      Swagger.Streams.Deserialize (Object, "total_volume_usd", Value.Total_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "total_volume_eth", Value.Total_Volume_Eth);
      Swagger.Streams.Deserialize (Object, "total_fees_usd", Value.Total_Fees_Usd);
      Swagger.Streams.Deserialize (Object, "total_fees_eth", Value.Total_Fees_Eth);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Swagger.Streams.Deserialize (Object, "total_value_locked_eth", Value.Total_Value_Locked_Eth);
      Swagger.Streams.Deserialize (Object, "total_value_locked_usd_untracked", Value.Total_Value_Locked_Usd_Untracked);
      Swagger.Streams.Deserialize (Object, "total_value_locked_eth_untracked", Value.Total_Value_Locked_Eth_Untracked);
      Swagger.Streams.Deserialize (Object, "owner", Value.Owner);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3FactoryV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3FactoryV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolDayDataV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("date", Value.Date);
      Into.Write_Entity ("pool", Value.Pool);
      Into.Write_Entity ("liquidity", Value.Liquidity);
      Into.Write_Entity ("sqrt_price", Value.Sqrt_Price);
      Into.Write_Entity ("token_0_price", Value.Token_0_Price);
      Into.Write_Entity ("token_1_price", Value.Token_1_Price);
      Into.Write_Entity ("tick", Value.Tick);
      Into.Write_Entity ("fee_growth_global_0x128", Value.Fee_Growth_Global_0x_128);
      Into.Write_Entity ("fee_growth_global_1x128", Value.Fee_Growth_Global_1x_128);
      Into.Write_Entity ("tvl_usd", Value.Tvl_Usd);
      Into.Write_Entity ("volume_token_0", Value.Volume_Token_0);
      Into.Write_Entity ("volume_token_1", Value.Volume_Token_1);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("fees_usd", Value.Fees_Usd);
      Into.Write_Entity ("tx_count", Value.Tx_Count);
      Into.Write_Entity ("open", Value.Open);
      Into.Write_Entity ("high", Value.High);
      Into.Write_Entity ("low", Value.Low);
      Into.Write_Entity ("close", Value.Close);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PoolDayDataV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolDayDataV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Swagger.Streams.Deserialize (Object, "liquidity", Value.Liquidity);
      Swagger.Streams.Deserialize (Object, "sqrt_price", Value.Sqrt_Price);
      Swagger.Streams.Deserialize (Object, "token_0_price", Value.Token_0_Price);
      Swagger.Streams.Deserialize (Object, "token_1_price", Value.Token_1_Price);
      Swagger.Streams.Deserialize (Object, "tick", Value.Tick);
      Swagger.Streams.Deserialize (Object, "fee_growth_global_0x128", Value.Fee_Growth_Global_0x_128);
      Swagger.Streams.Deserialize (Object, "fee_growth_global_1x128", Value.Fee_Growth_Global_1x_128);
      Swagger.Streams.Deserialize (Object, "tvl_usd", Value.Tvl_Usd);
      Swagger.Streams.Deserialize (Object, "volume_token_0", Value.Volume_Token_0);
      Swagger.Streams.Deserialize (Object, "volume_token_1", Value.Volume_Token_1);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "fees_usd", Value.Fees_Usd);
      Swagger.Streams.Deserialize (Object, "tx_count", Value.Tx_Count);
      Swagger.Streams.Deserialize (Object, "open", Value.Open);
      Swagger.Streams.Deserialize (Object, "high", Value.High);
      Swagger.Streams.Deserialize (Object, "low", Value.Low);
      Swagger.Streams.Deserialize (Object, "close", Value.Close);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PoolDayDataV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3PoolDayDataV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PositionV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("owner", Value.Owner);
      Into.Write_Entity ("pool", Value.Pool);
      Into.Write_Entity ("token_0", Value.Token_0);
      Into.Write_Entity ("token_1", Value.Token_1);
      Into.Write_Entity ("tick_lower", Value.Tick_Lower);
      Into.Write_Entity ("tick_upper", Value.Tick_Upper);
      Into.Write_Entity ("liquidity", Value.Liquidity);
      Into.Write_Entity ("deposited_token_0", Value.Deposited_Token_0);
      Into.Write_Entity ("deposited_token_1", Value.Deposited_Token_1);
      Into.Write_Entity ("withdrawn_token_0", Value.Withdrawn_Token_0);
      Into.Write_Entity ("withdrawn_token_1", Value.Withdrawn_Token_1);
      Into.Write_Entity ("collected_fees_token_0", Value.Collected_Fees_Token_0);
      Into.Write_Entity ("collected_fees_token_1", Value.Collected_Fees_Token_1);
      Into.Write_Entity ("transaction", Value.Transaction);
      Into.Write_Entity ("fee_growth_inside_0_last_x128", Value.Fee_Growth_Inside_0_Last_X_128);
      Into.Write_Entity ("fee_growth_inside_1_last_x128", Value.Fee_Growth_Inside_1_Last_X_128);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3PositionV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PositionV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "owner", Value.Owner);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Swagger.Streams.Deserialize (Object, "token_0", Value.Token_0);
      Swagger.Streams.Deserialize (Object, "token_1", Value.Token_1);
      Swagger.Streams.Deserialize (Object, "tick_lower", Value.Tick_Lower);
      Swagger.Streams.Deserialize (Object, "tick_upper", Value.Tick_Upper);
      Swagger.Streams.Deserialize (Object, "liquidity", Value.Liquidity);
      Swagger.Streams.Deserialize (Object, "deposited_token_0", Value.Deposited_Token_0);
      Swagger.Streams.Deserialize (Object, "deposited_token_1", Value.Deposited_Token_1);
      Swagger.Streams.Deserialize (Object, "withdrawn_token_0", Value.Withdrawn_Token_0);
      Swagger.Streams.Deserialize (Object, "withdrawn_token_1", Value.Withdrawn_Token_1);
      Swagger.Streams.Deserialize (Object, "collected_fees_token_0", Value.Collected_Fees_Token_0);
      Swagger.Streams.Deserialize (Object, "collected_fees_token_1", Value.Collected_Fees_Token_1);
      Swagger.Streams.Deserialize (Object, "transaction", Value.Transaction);
      Swagger.Streams.Deserialize (Object, "fee_growth_inside_0_last_x128", Value.Fee_Growth_Inside_0_Last_X_128);
      Swagger.Streams.Deserialize (Object, "fee_growth_inside_1_last_x128", Value.Fee_Growth_Inside_1_Last_X_128);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3PositionV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3PositionV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TickDayDataV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("date", Value.Date);
      Into.Write_Entity ("pool", Value.Pool);
      Into.Write_Entity ("tick", Value.Tick);
      Into.Write_Entity ("liquidity_gross", Value.Liquidity_Gross);
      Into.Write_Entity ("liquidity_net", Value.Liquidity_Net);
      Into.Write_Entity ("volume_token_0", Value.Volume_Token_0);
      Into.Write_Entity ("volume_token_1", Value.Volume_Token_1);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("fees_usd", Value.Fees_Usd);
      Into.Write_Entity ("fee_growth_outside_0x128", Value.Fee_Growth_Outside_0x_128);
      Into.Write_Entity ("fee_growth_outside_1x128", Value.Fee_Growth_Outside_1x_128);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TickDayDataV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TickDayDataV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "pool", Value.Pool);
      Swagger.Streams.Deserialize (Object, "tick", Value.Tick);
      Swagger.Streams.Deserialize (Object, "liquidity_gross", Value.Liquidity_Gross);
      Swagger.Streams.Deserialize (Object, "liquidity_net", Value.Liquidity_Net);
      Swagger.Streams.Deserialize (Object, "volume_token_0", Value.Volume_Token_0);
      Swagger.Streams.Deserialize (Object, "volume_token_1", Value.Volume_Token_1);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "fees_usd", Value.Fees_Usd);
      Swagger.Streams.Deserialize (Object, "fee_growth_outside_0x128", Value.Fee_Growth_Outside_0x_128);
      Swagger.Streams.Deserialize (Object, "fee_growth_outside_1x128", Value.Fee_Growth_Outside_1x_128);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TickDayDataV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3TickDayDataV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenHourDataV3DTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("period_start_unix", Value.Period_Start_Unix);
      Into.Write_Entity ("token", Value.Token);
      Into.Write_Entity ("volume", Value.Volume);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Into.Write_Entity ("total_value_locked", Value.Total_Value_Locked);
      Into.Write_Entity ("total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Into.Write_Entity ("price_usd", Value.Price_Usd);
      Into.Write_Entity ("fees_usd", Value.Fees_Usd);
      Into.Write_Entity ("open", Value.Open);
      Into.Write_Entity ("high", Value.High);
      Into.Write_Entity ("low", Value.Low);
      Into.Write_Entity ("close", Value.Close);
      Into.Write_Entity ("vid", Value.Vid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenHourDataV3DTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenHourDataV3DTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "period_start_unix", Value.Period_Start_Unix);
      Swagger.Streams.Deserialize (Object, "token", Value.Token);
      Swagger.Streams.Deserialize (Object, "volume", Value.Volume);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "total_value_locked", Value.Total_Value_Locked);
      Swagger.Streams.Deserialize (Object, "total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Swagger.Streams.Deserialize (Object, "price_usd", Value.Price_Usd);
      Swagger.Streams.Deserialize (Object, "fees_usd", Value.Fees_Usd);
      Swagger.Streams.Deserialize (Object, "open", Value.Open);
      Swagger.Streams.Deserialize (Object, "high", Value.High);
      Swagger.Streams.Deserialize (Object, "low", Value.Low);
      Swagger.Streams.Deserialize (Object, "close", Value.Close);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenHourDataV3DTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3TokenHourDataV3DTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenV3DayDataDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("entry_time", Value.Entry_Time);
      Into.Write_Entity ("recv_time", Value.Recv_Time);
      Into.Write_Entity ("block_number", Value.Block_Number);
      Into.Write_Entity ("vid", Value.Vid);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("date", Value.Date);
      Into.Write_Entity ("token", Value.Token);
      Into.Write_Entity ("volume", Value.Volume);
      Into.Write_Entity ("volume_usd", Value.Volume_Usd);
      Into.Write_Entity ("untracked_volume_usd", Value.Untracked_Volume_Usd);
      Into.Write_Entity ("total_value_locked", Value.Total_Value_Locked);
      Into.Write_Entity ("total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Into.Write_Entity ("price_usd", Value.Price_Usd);
      Into.Write_Entity ("fees_usd", Value.Fees_Usd);
      Into.Write_Entity ("open", Value.Open);
      Into.Write_Entity ("high", Value.High);
      Into.Write_Entity ("low", Value.Low);
      Into.Write_Entity ("close", Value.Close);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UniswapV3TokenV3DayDataDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenV3DayDataDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "entry_time", Value.Entry_Time);
      Swagger.Streams.Deserialize (Object, "recv_time", Value.Recv_Time);
      Swagger.Streams.Deserialize (Object, "block_number", Value.Block_Number);
      Swagger.Streams.Deserialize (Object, "vid", Value.Vid);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Swagger.Streams.Deserialize (Object, "token", Value.Token);
      Swagger.Streams.Deserialize (Object, "volume", Value.Volume);
      Swagger.Streams.Deserialize (Object, "volume_usd", Value.Volume_Usd);
      Swagger.Streams.Deserialize (Object, "untracked_volume_usd", Value.Untracked_Volume_Usd);
      Swagger.Streams.Deserialize (Object, "total_value_locked", Value.Total_Value_Locked);
      Swagger.Streams.Deserialize (Object, "total_value_locked_usd", Value.Total_Value_Locked_Usd);
      Swagger.Streams.Deserialize (Object, "price_usd", Value.Price_Usd);
      Swagger.Streams.Deserialize (Object, "fees_usd", Value.Fees_Usd);
      Swagger.Streams.Deserialize (Object, "open", Value.Open);
      Swagger.Streams.Deserialize (Object, "high", Value.High);
      Swagger.Streams.Deserialize (Object, "low", Value.Low);
      Swagger.Streams.Deserialize (Object, "close", Value.Close);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UniswapV3TokenV3DayDataDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UniswapV3TokenV3DayDataDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;



end .Models;
