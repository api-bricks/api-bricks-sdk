--  On Chain Dapps _ REST API
--   This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
--
--  The version of the OpenAPI document: v1
--  Contact: support@coinapi.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 6.6.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
package body .Clients is
   pragma Style_Checks ("-mr");

   --  Bids (current)
   --  Gets bids.
   procedure C_RYPTOPUNKS_Bids__current
      (Client : in out Client_Type;
       Result : out .Models.CRYPTOPUNKSBidDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cryptopunks/bids/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Bids__current;

   --  CollectionDailySnapshots (current)
   --  Gets collectionDailySnapshots.
   procedure C_RYPTOPUNKS_Collection_Daily_Snapshots__current
      (Client : in out Client_Type;
       Result : out .Models.CRYPTOPUNKSCollectionDailySnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cryptopunks/collectionDailySnapshots/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Collection_Daily_Snapshots__current;

   --  Collections (current)
   --  Gets collections.
   procedure C_RYPTOPUNKS_Collections__current
      (Client : in out Client_Type;
       Result : out .Models.CRYPTOPUNKSCollectionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cryptopunks/collections/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Collections__current;

   --  DataSources (current)
   --  Gets dataSources.
   procedure C_RYPTOPUNKS_Data_Sources__current
      (Client : in out Client_Type;
       Result : out .Models.CRYPTOPUNKSDataSourcesDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cryptopunks/dataSources/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Data_Sources__current;

   --  Bids (historical)
   --  Gets bids.
   procedure C_RYPTOPUNKS_Get_Bids__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CRYPTOPUNKSBidDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/cryptopunks/bids/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Get_Bids__historical;

   --  CollectionDailySnapshots (historical)
   --  Gets collectionDailySnapshots.
   procedure C_RYPTOPUNKS_Get_Collection_Daily_Snapshots__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Result : out .Models.CRYPTOPUNKSCollectionDailySnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Set_Path ("/dapps/cryptopunks/collectionDailySnapshots/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Get_Collection_Daily_Snapshots__historical;

   --  Collections (historical)
   --  Gets collections.
   procedure C_RYPTOPUNKS_Get_Collections__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CRYPTOPUNKSCollectionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/cryptopunks/collections/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Get_Collections__historical;

   --  DataSources (historical)
   --  Gets dataSources.
   procedure C_RYPTOPUNKS_Get_Data_Sources__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CRYPTOPUNKSDataSourcesDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/cryptopunks/dataSources/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Get_Data_Sources__historical;

   --  Items (historical)
   --  Gets items.
   procedure C_RYPTOPUNKS_Get_Items__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Result : out .Models.CRYPTOPUNKSItemDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Set_Path ("/dapps/cryptopunks/items/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Get_Items__historical;

   --  MarketPlaces (historical)
   --  Gets marketPlaces.
   procedure C_RYPTOPUNKS_Get_Market_Places__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CRYPTOPUNKSMarketPlaceDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/cryptopunks/marketPlaces/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Get_Market_Places__historical;

   --  MarketplaceDailySnapshots (historical)
   --  Gets marketplaceDailySnapshots.
   procedure C_RYPTOPUNKS_Get_Marketplace_Daily_Snapshots__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CRYPTOPUNKSMarketplaceDailySnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/cryptopunks/marketplaceDailySnapshots/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Get_Marketplace_Daily_Snapshots__historical;

   --  Trades (historical)
   --  Gets trades.
   procedure C_RYPTOPUNKS_Get_Trades__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CRYPTOPUNKSTradeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/cryptopunks/trades/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Get_Trades__historical;

   --  Users (historical)
   --  Gets users.
   procedure C_RYPTOPUNKS_Get_Users__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CRYPTOPUNKSUserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/cryptopunks/users/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Get_Users__historical;

   --  Items (current)
   --  Gets items.
   procedure C_RYPTOPUNKS_Items__current
      (Client : in out Client_Type;
       Result : out .Models.CRYPTOPUNKSItemDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cryptopunks/items/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Items__current;

   --  MarketPlaces (current)
   --  Gets marketPlaces.
   procedure C_RYPTOPUNKS_Market_Places__current
      (Client : in out Client_Type;
       Result : out .Models.CRYPTOPUNKSMarketPlaceDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cryptopunks/marketPlaces/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Market_Places__current;

   --  MarketplaceDailySnapshots (current)
   --  Gets marketplaceDailySnapshots.
   procedure C_RYPTOPUNKS_Marketplace_Daily_Snapshots__current
      (Client : in out Client_Type;
       Result : out .Models.CRYPTOPUNKSMarketplaceDailySnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cryptopunks/marketplaceDailySnapshots/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Marketplace_Daily_Snapshots__current;

   --  Trades (current)
   --  Gets trades.
   procedure C_RYPTOPUNKS_Trades__current
      (Client : in out Client_Type;
       Result : out .Models.CRYPTOPUNKSTradeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cryptopunks/trades/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Trades__current;

   --  Users (current)
   --  Gets users.
   procedure C_RYPTOPUNKS_Users__current
      (Client : in out Client_Type;
       Result : out .Models.CRYPTOPUNKSUserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cryptopunks/users/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end C_RYPTOPUNKS_Users__current;

   --  Orders (historical)
   --  Gets orders.
   procedure Cow_Get_Orders__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CowOrderDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/cow/orders/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Get_Orders__historical;

   --  Settlements (historical)
   --  Gets settlements.
   procedure Cow_Get_Settlements__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CowSettlementDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/cow/settlements/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Get_Settlements__historical;

   --  Tokens (historical)
   --  Gets tokens.
   procedure Cow_Get_Tokens__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Address : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Symbol : in Swagger.Nullable_UString;
       Result : out .Models.CowTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("address", Address);
      URI.Add_Param ("name", Name);
      URI.Add_Param ("symbol", Symbol);
      URI.Set_Path ("/dapps/cow/tokens/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Get_Tokens__historical;

   --  Trades (historical)
   --  Gets trades.
   procedure Cow_Get_Trades__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Sell_Token : in Swagger.Nullable_UString;
       Buy_Token : in Swagger.Nullable_UString;
       Result : out .Models.CowTradeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("sell_token", Sell_Token);
      URI.Add_Param ("buy_token", Buy_Token);
      URI.Set_Path ("/dapps/cow/trades/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Get_Trades__historical;

   --  Users (historical)
   --  Gets users.
   procedure Cow_Get_Users__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Address : in Swagger.Nullable_UString;
       Result : out .Models.CowUserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("address", Address);
      URI.Set_Path ("/dapps/cow/users/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Get_Users__historical;

   --  Orders (current)
   --  Gets orders.
   procedure Cow_Orders__current
      (Client : in out Client_Type;
       Result : out .Models.CowOrderDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cow/orders/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Orders__current;

   --  Settlements (current)
   --  Gets settlements.
   procedure Cow_Settlements__current
      (Client : in out Client_Type;
       Result : out .Models.CowSettlementDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cow/settlements/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Settlements__current;

   --  Tokens (current)
   --  Gets tokens.
   procedure Cow_Tokens__current
      (Client : in out Client_Type;
       Result : out .Models.CowTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cow/tokens/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Tokens__current;

   --  Trades (current)
   --  Gets trades.
   procedure Cow_Trades__current
      (Client : in out Client_Type;
       Result : out .Models.CowTradeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cow/trades/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Trades__current;

   --  Users (current)
   --  Gets users.
   procedure Cow_Users__current
      (Client : in out Client_Type;
       Result : out .Models.CowUserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/cow/users/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Cow_Users__current;

   --  Accounts (current)
   --  Gets accounts.
   procedure Curve_Accounts__current
      (Client : in out Client_Type;
       Result : out .Models.CurveAccountDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/accounts/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Accounts__current;

   --  AddLiquidityEvents (current)
   --  Gets addLiquidityEvents.
   procedure Curve_Add_Liquidity_Events__current
      (Client : in out Client_Type;
       Result : out .Models.CurveAddLiquidityEventDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/addLiquidityEvents/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Add_Liquidity_Events__current;

   --  AdminFeeChangeLogs (current)
   --  Gets adminFeeChangeLogs.
   procedure Curve_Admin_Fee_Change_Logs__current
      (Client : in out Client_Type;
       Result : out .Models.CurveAdminFeeChangeLogDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/adminFeeChangeLogs/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Admin_Fee_Change_Logs__current;

   --  AmplificationCoeffChangeLogs (current)
   --  Gets amplificationCoeffChangeLogs.
   procedure Curve_Amplification_Coeff_Change_Logs__current
      (Client : in out Client_Type;
       Result : out .Models.CurveAmplificationCoeffChangeLogDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/amplificationCoeffChangeLogs/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Amplification_Coeff_Change_Logs__current;

   --  Coins (current)
   --  Gets coins.
   procedure Curve_Coins__current
      (Client : in out Client_Type;
       Result : out .Models.CurveCoinDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/coins/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Coins__current;

   --  ContractVersions (current)
   --  Gets contractVersions.
   procedure Curve_Contract_Versions__current
      (Client : in out Client_Type;
       Result : out .Models.CurveContractVersionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/contractVersions/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Contract_Versions__current;

   --  Contracts (current)
   --  Gets contracts.
   procedure Curve_Contracts__current
      (Client : in out Client_Type;
       Result : out .Models.CurveContractDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/contracts/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Contracts__current;

   --  DailyVolumes (current)
   --  Gets dailyVolumes.
   procedure Curve_Daily_Volumes__current
      (Client : in out Client_Type;
       Result : out .Models.CurveDailyVolumeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/dailyVolumes/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Daily_Volumes__current;

   --  Exchanges (current)
   --  Gets exchanges.
   procedure Curve_Exchanges__current
      (Client : in out Client_Type;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveExchangeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/exchanges/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Exchanges__current;

   --  FeeChangeLogs (current)
   --  Gets feeChangeLogs.
   procedure Curve_Fee_Change_Logs__current
      (Client : in out Client_Type;
       Result : out .Models.CurveFeeChangeLogDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/feeChangeLogs/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Fee_Change_Logs__current;

   --  GaugeDeposits (current)
   --  Gets gaugeDeposits.
   procedure Curve_Gauge_Deposits__current
      (Client : in out Client_Type;
       Result : out .Models.CurveGaugeDepositDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/gaugeDeposits/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Gauge_Deposits__current;

   --  GaugeLiquidities (current)
   --  Gets gaugeLiquidities.
   procedure Curve_Gauge_Liquidities__current
      (Client : in out Client_Type;
       Result : out .Models.CurveGaugeLiquidityDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/gaugeLiquidities/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Gauge_Liquidities__current;

   --  GaugeTotalWeights (current)
   --  Gets gaugeTotalWeights.
   procedure Curve_Gauge_Total_Weights__current
      (Client : in out Client_Type;
       Result : out .Models.CurveGaugeTotalWeightDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/gaugeTotalWeights/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Gauge_Total_Weights__current;

   --  GaugeTypeWeights (current)
   --  Gets gaugeTypeWeights.
   procedure Curve_Gauge_Type_Weights__current
      (Client : in out Client_Type;
       Result : out .Models.CurveGaugeTypeWeightDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/gaugeTypeWeights/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Gauge_Type_Weights__current;

   --  GaugeTypes (current)
   --  Gets gaugeTypes.
   procedure Curve_Gauge_Types__current
      (Client : in out Client_Type;
       Result : out .Models.CurveGaugeTypeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/gaugeTypes/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Gauge_Types__current;

   --  GaugeWeightVotes (current)
   --  Gets gaugeWeightVotes.
   procedure Curve_Gauge_Weight_Votes__current
      (Client : in out Client_Type;
       Result : out .Models.CurveGaugeWeightVoteDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/gaugeWeightVotes/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Gauge_Weight_Votes__current;

   --  GaugeWeights (current)
   --  Gets gaugeWeights.
   procedure Curve_Gauge_Weights__current
      (Client : in out Client_Type;
       Result : out .Models.CurveGaugeWeightDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/gaugeWeights/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Gauge_Weights__current;

   --  GaugeWithdraws (current)
   --  Gets gaugeWithdraws.
   procedure Curve_Gauge_Withdraws__current
      (Client : in out Client_Type;
       Result : out .Models.CurveGaugeWithdrawDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/gaugeWithdraws/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Gauge_Withdraws__current;

   --  Gauges (current)
   --  Gets gauges.
   procedure Curve_Gauges__current
      (Client : in out Client_Type;
       Result : out .Models.CurveGaugeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/gauges/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Gauges__current;

   --  Accounts (historical)
   --  Gets accounts.
   procedure Curve_Get_Accounts__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Address : in Swagger.Nullable_UString;
       Result : out .Models.CurveAccountDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("address", Address);
      URI.Set_Path ("/dapps/curve/accounts/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Accounts__historical;

   --  AddLiquidityEvents (historical)
   --  Gets addLiquidityEvents.
   procedure Curve_Get_Add_Liquidity_Events__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveAddLiquidityEventDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/addLiquidityEvents/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Add_Liquidity_Events__historical;

   --  AdminFeeChangeLogs (historical)
   --  Gets adminFeeChangeLogs.
   procedure Curve_Get_Admin_Fee_Change_Logs__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveAdminFeeChangeLogDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/adminFeeChangeLogs/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Admin_Fee_Change_Logs__historical;

   --  AmplificationCoeffChangeLogs (historical)
   --  Gets amplificationCoeffChangeLogs.
   procedure Curve_Get_Amplification_Coeff_Change_Logs__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveAmplificationCoeffChangeLogDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/amplificationCoeffChangeLogs/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Amplification_Coeff_Change_Logs__historical;

   --  Coins (historical)
   --  Gets coins.
   procedure Curve_Get_Coins__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveCoinDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/coins/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Coins__historical;

   --  ContractVersions (historical)
   --  Gets contractVersions.
   procedure Curve_Get_Contract_Versions__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Address : in Swagger.Nullable_UString;
       Result : out .Models.CurveContractVersionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("address", Address);
      URI.Set_Path ("/dapps/curve/contractVersions/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Contract_Versions__historical;

   --  Contracts (historical)
   --  Gets contracts.
   procedure Curve_Get_Contracts__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurveContractDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/contracts/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Contracts__historical;

   --  DailyVolumes (historical)
   --  Gets dailyVolumes.
   procedure Curve_Get_Daily_Volumes__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveDailyVolumeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/dailyVolumes/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Daily_Volumes__historical;

   --  Exchanges (historical)
   --  Gets exchanges.
   procedure Curve_Get_Exchanges__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveExchangeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/exchanges/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Exchanges__historical;

   --  FeeChangeLogs (historical)
   --  Gets feeChangeLogs.
   procedure Curve_Get_Fee_Change_Logs__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveFeeChangeLogDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/feeChangeLogs/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Fee_Change_Logs__historical;

   --  GaugeDeposits (historical)
   --  Gets gaugeDeposits.
   procedure Curve_Get_Gauge_Deposits__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurveGaugeDepositDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/gaugeDeposits/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Gauge_Deposits__historical;

   --  GaugeLiquidities (historical)
   --  Gets gaugeLiquidities.
   procedure Curve_Get_Gauge_Liquidities__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       User : in Swagger.Nullable_UString;
       Result : out .Models.CurveGaugeLiquidityDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("user", User);
      URI.Set_Path ("/dapps/curve/gaugeLiquidities/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Gauge_Liquidities__historical;

   --  GaugeTotalWeights (historical)
   --  Gets gaugeTotalWeights.
   procedure Curve_Get_Gauge_Total_Weights__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurveGaugeTotalWeightDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/gaugeTotalWeights/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Gauge_Total_Weights__historical;

   --  GaugeTypeWeights (historical)
   --  Gets gaugeTypeWeights.
   procedure Curve_Get_Gauge_Type_Weights__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurveGaugeTypeWeightDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/gaugeTypeWeights/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Gauge_Type_Weights__historical;

   --  GaugeTypes (historical)
   --  Gets gaugeTypes.
   procedure Curve_Get_Gauge_Types__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Result : out .Models.CurveGaugeTypeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("name", Name);
      URI.Set_Path ("/dapps/curve/gaugeTypes/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Gauge_Types__historical;

   --  GaugeWeightVotes (historical)
   --  Gets gaugeWeightVotes.
   procedure Curve_Get_Gauge_Weight_Votes__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       User : in Swagger.Nullable_UString;
       Result : out .Models.CurveGaugeWeightVoteDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("user", User);
      URI.Set_Path ("/dapps/curve/gaugeWeightVotes/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Gauge_Weight_Votes__historical;

   --  GaugeWeights (historical)
   --  Gets gaugeWeights.
   procedure Curve_Get_Gauge_Weights__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurveGaugeWeightDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/gaugeWeights/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Gauge_Weights__historical;

   --  GaugeWithdraws (historical)
   --  Gets gaugeWithdraws.
   procedure Curve_Get_Gauge_Withdraws__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurveGaugeWithdrawDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/gaugeWithdraws/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Gauge_Withdraws__historical;

   --  Gauges (historical)
   --  Gets gauges.
   procedure Curve_Get_Gauges__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Address : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveGaugeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("address", Address);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/gauges/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Gauges__historical;

   --  HourlyVolumes (historical)
   --  Gets hourlyVolumes.
   procedure Curve_Get_Hourly_Volumes__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveHourlyVolumeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/hourlyVolumes/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Hourly_Volumes__historical;

   --  LpTokens (historical)
   --  Gets lpTokens.
   procedure Curve_Get_Lp_Tokens__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Address : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Symbol : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveLpTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("address", Address);
      URI.Add_Param ("name", Name);
      URI.Add_Param ("symbol", Symbol);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/lpTokens/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Lp_Tokens__historical;

   --  Pools (historical)
   --  Gets pools.
   procedure Curve_Get_Pools__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Result : out .Models.CurvePoolDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("name", Name);
      URI.Set_Path ("/dapps/curve/pools/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Pools__historical;

   --  ProposalVotes (historical)
   --  Gets proposalVotes.
   procedure Curve_Get_Proposal_Votes__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurveProposalVoteDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/proposalVotes/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Proposal_Votes__historical;

   --  Proposals (historical)
   --  Gets proposals.
   procedure Curve_Get_Proposals__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurveProposalDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/proposals/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Proposals__historical;

   --  RemoveLiquidityEvents (historical)
   --  Gets removeLiquidityEvents.
   procedure Curve_Get_Remove_Liquidity_Events__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveRemoveLiquidityEventDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/removeLiquidityEvents/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Remove_Liquidity_Events__historical;

   --  RemoveLiquidityOneEvents (historical)
   --  Gets removeLiquidityOneEvents.
   procedure Curve_Get_Remove_Liquidity_One_Events__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveRemoveLiquidityOneEventDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/removeLiquidityOneEvents/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Remove_Liquidity_One_Events__historical;

   --  SystemStates (historical)
   --  Gets systemStates.
   procedure Curve_Get_System_States__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurveSystemStateDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/systemStates/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_System_States__historical;

   --  Tokens (historical)
   --  Gets tokens.
   procedure Curve_Get_Tokens__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Address : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Symbol : in Swagger.Nullable_UString;
       Result : out .Models.CurveTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("address", Address);
      URI.Add_Param ("name", Name);
      URI.Add_Param ("symbol", Symbol);
      URI.Set_Path ("/dapps/curve/tokens/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Tokens__historical;

   --  TransferOwnershipEvents (historical)
   --  Gets transferOwnershipEvents.
   procedure Curve_Get_Transfer_Ownership_Events__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveTransferOwnershipEventDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/transferOwnershipEvents/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Transfer_Ownership_Events__historical;

   --  UnderlyingCoins (historical)
   --  Gets underlyingCoins.
   procedure Curve_Get_Underlying_Coins__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveUnderlyingCoinDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/underlyingCoins/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Underlying_Coins__historical;

   --  VotingApps (historical)
   --  Gets votingApps.
   procedure Curve_Get_Voting_Apps__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Address : in Swagger.Nullable_UString;
       Result : out .Models.CurveVotingAppDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("address", Address);
      URI.Set_Path ("/dapps/curve/votingApps/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Voting_Apps__historical;

   --  WeeklyVolumes (historical)
   --  Gets weeklyVolumes.
   procedure Curve_Get_Weekly_Volumes__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.CurveWeeklyVolumeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/curve/weeklyVolumes/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Get_Weekly_Volumes__historical;

   --  HourlyVolumes (current)
   --  Gets hourlyVolumes.
   procedure Curve_Hourly_Volumes__current
      (Client : in out Client_Type;
       Result : out .Models.CurveHourlyVolumeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/hourlyVolumes/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Hourly_Volumes__current;

   --  LpTokens (current)
   --  Gets lpTokens.
   procedure Curve_Lp_Tokens__current
      (Client : in out Client_Type;
       Result : out .Models.CurveLpTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/lpTokens/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Lp_Tokens__current;

   --  Pools (current)
   --  Gets pools.
   procedure Curve_Pools__current
      (Client : in out Client_Type;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.CurvePoolDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/curve/pools/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Pools__current;

   --  ProposalVotes (current)
   --  Gets proposalVotes.
   procedure Curve_Proposal_Votes__current
      (Client : in out Client_Type;
       Result : out .Models.CurveProposalVoteDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/proposalVotes/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Proposal_Votes__current;

   --  Proposals (current)
   --  Gets proposals.
   procedure Curve_Proposals__current
      (Client : in out Client_Type;
       Result : out .Models.CurveProposalDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/proposals/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Proposals__current;

   --  RemoveLiquidityEvents (current)
   --  Gets removeLiquidityEvents.
   procedure Curve_Remove_Liquidity_Events__current
      (Client : in out Client_Type;
       Result : out .Models.CurveRemoveLiquidityEventDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/removeLiquidityEvents/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Remove_Liquidity_Events__current;

   --  RemoveLiquidityOneEvents (current)
   --  Gets removeLiquidityOneEvents.
   procedure Curve_Remove_Liquidity_One_Events__current
      (Client : in out Client_Type;
       Result : out .Models.CurveRemoveLiquidityOneEventDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/removeLiquidityOneEvents/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Remove_Liquidity_One_Events__current;

   --  SystemStates (current)
   --  Gets systemStates.
   procedure Curve_System_States__current
      (Client : in out Client_Type;
       Result : out .Models.CurveSystemStateDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/systemStates/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_System_States__current;

   --  Tokens (current)
   --  Gets tokens.
   procedure Curve_Tokens__current
      (Client : in out Client_Type;
       Result : out .Models.CurveTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/tokens/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Tokens__current;

   --  TransferOwnershipEvents (current)
   --  Gets transferOwnershipEvents.
   procedure Curve_Transfer_Ownership_Events__current
      (Client : in out Client_Type;
       Result : out .Models.CurveTransferOwnershipEventDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/transferOwnershipEvents/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Transfer_Ownership_Events__current;

   --  UnderlyingCoins (current)
   --  Gets underlyingCoins.
   procedure Curve_Underlying_Coins__current
      (Client : in out Client_Type;
       Result : out .Models.CurveUnderlyingCoinDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/underlyingCoins/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Underlying_Coins__current;

   --  VotingApps (current)
   --  Gets votingApps.
   procedure Curve_Voting_Apps__current
      (Client : in out Client_Type;
       Result : out .Models.CurveVotingAppDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/votingApps/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Voting_Apps__current;

   --  WeeklyVolumes (current)
   --  Gets weeklyVolumes.
   procedure Curve_Weekly_Volumes__current
      (Client : in out Client_Type;
       Result : out .Models.CurveWeeklyVolumeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/curve/weeklyVolumes/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Curve_Weekly_Volumes__current;

   --  Batches (current)
   --  Gets batches.
   procedure Dex_Batches__current
      (Client : in out Client_Type;
       Result : out .Models.DexBatchDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/batches/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Batches__current;

   --  Deposits (current)
   --  Gets deposits.
   procedure Dex_Deposits__current
      (Client : in out Client_Type;
       Result : out .Models.DexDepositDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/deposits/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Deposits__current;

   --  Batches (historical)
   --  Gets batches.
   procedure Dex_Get_Batches__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.DexBatchDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/dex/batches/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Batches__historical;

   --  Deposits (historical)
   --  Gets deposits.
   procedure Dex_Get_Deposits__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       User : in Swagger.Nullable_UString;
       Result : out .Models.DexDepositDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("user", User);
      URI.Set_Path ("/dapps/dex/deposits/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Deposits__historical;

   --  Orders (historical)
   --  Gets orders.
   procedure Dex_Get_Orders__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Buy_Token : in Swagger.Nullable_UString;
       Sell_Token : in Swagger.Nullable_UString;
       Result : out .Models.DexOrderDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("buy_token", Buy_Token);
      URI.Add_Param ("sell_token", Sell_Token);
      URI.Set_Path ("/dapps/dex/orders/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Orders__historical;

   --  Prices (historical)
   --  Gets prices.
   procedure Dex_Get_Prices__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.DexPriceDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/dex/prices/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Prices__historical;

   --  Solutions (historical)
   --  Gets solutions.
   procedure Dex_Get_Solutions__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.DexSolutionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/dex/solutions/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Solutions__historical;

   --  Stats (historical)
   --  Gets stats.
   procedure Dex_Get_Stats__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.DexStatsDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/dex/stats/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Stats__historical;

   --  Tokens (historical)
   --  Gets tokens.
   procedure Dex_Get_Tokens__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Address : in Swagger.Nullable_UString;
       Symbol : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Result : out .Models.DexTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("address", Address);
      URI.Add_Param ("symbol", Symbol);
      URI.Add_Param ("name", Name);
      URI.Set_Path ("/dapps/dex/tokens/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Tokens__historical;

   --  Trades (historical)
   --  Gets trades.
   procedure Dex_Get_Trades__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Buy_Token : in Swagger.Nullable_UString;
       Sell_Token : in Swagger.Nullable_UString;
       Result : out .Models.DexTradeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("buy_token", Buy_Token);
      URI.Add_Param ("sell_token", Sell_Token);
      URI.Set_Path ("/dapps/dex/trades/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Trades__historical;

   --  Users (historical)
   --  Gets users.
   procedure Dex_Get_Users__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.DexUserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/dex/users/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Users__historical;

   --  WithdrawRequests (historical)
   --  Gets withdrawRequests.
   procedure Dex_Get_Withdraw_Requests__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       User : in Swagger.Nullable_UString;
       Result : out .Models.DexWithdrawRequestDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("user", User);
      URI.Set_Path ("/dapps/dex/withdrawRequests/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Withdraw_Requests__historical;

   --  Withdraws (historical)
   --  Gets withdraws.
   procedure Dex_Get_Withdraws__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       User : in Swagger.Nullable_UString;
       Result : out .Models.DexWithdrawDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("user", User);
      URI.Set_Path ("/dapps/dex/withdraws/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Get_Withdraws__historical;

   --  Orders (current)
   --  Gets orders.
   procedure Dex_Orders__current
      (Client : in out Client_Type;
       Result : out .Models.DexOrderDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/orders/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Orders__current;

   --  Prices (current)
   --  Gets prices.
   procedure Dex_Prices__current
      (Client : in out Client_Type;
       Result : out .Models.DexPriceDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/prices/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Prices__current;

   --  Solutions (current)
   --  Gets solutions.
   procedure Dex_Solutions__current
      (Client : in out Client_Type;
       Result : out .Models.DexSolutionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/solutions/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Solutions__current;

   --  Stats (current)
   --  Gets stats.
   procedure Dex_Stats__current
      (Client : in out Client_Type;
       Result : out .Models.DexStatsDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/stats/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Stats__current;

   --  Tokens (current)
   --  Gets tokens.
   procedure Dex_Tokens__current
      (Client : in out Client_Type;
       Result : out .Models.DexTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/tokens/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Tokens__current;

   --  Trades (current)
   --  Gets trades.
   procedure Dex_Trades__current
      (Client : in out Client_Type;
       Result : out .Models.DexTradeDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/trades/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Trades__current;

   --  Users (current)
   --  Gets users.
   procedure Dex_Users__current
      (Client : in out Client_Type;
       Result : out .Models.DexUserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/users/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Users__current;

   --  WithdrawRequests (current)
   --  Gets withdrawRequests.
   procedure Dex_Withdraw_Requests__current
      (Client : in out Client_Type;
       Result : out .Models.DexWithdrawRequestDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/withdrawRequests/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Withdraw_Requests__current;

   --  Withdraws (current)
   --  Gets withdraws.
   procedure Dex_Withdraws__current
      (Client : in out Client_Type;
       Result : out .Models.DexWithdrawDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/dex/withdraws/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Dex_Withdraws__current;

   --  List all chains.
   procedure Metadata_Chains_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/metadata/chains");
      Client.Call (Swagger.Clients.GET, URI);
   end Metadata_Chains_Get;

   --  Gets dapp by name.
   procedure Metadata_Dapps_Dapp_Name_Get
      (Client : in out Client_Type;
       Dapp_Name : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/metadata/dapps/{dappName}");
      URI.Set_Path_Param ("dappName", Dapp_Name);
      Client.Call (Swagger.Clients.GET, URI);
   end Metadata_Dapps_Dapp_Name_Get;

   --  List all decentralized applications.
   procedure Metadata_Dapps_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/metadata/dapps");
      Client.Call (Swagger.Clients.GET, URI);
   end Metadata_Dapps_Get;

   --  Bundles (current)
   --  Gets bundles.
   procedure Sushiswap_Bundles__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapBundleDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/bundles/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Bundles__current;

   --  Burns (current)
   --  Gets burns.
   procedure Sushiswap_Burns__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapBurnDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/burns/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Burns__current;

   --  DayData (current)
   --  Gets dayData.
   procedure Sushiswap_Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/dayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Day_Data__current;

   --  Factories (current)
   --  Gets factories.
   procedure Sushiswap_Factories__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapFactoryDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/factories/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Factories__current;

   --  Bundles (historical)
   --  Gets bundles.
   procedure Sushiswap_Get_Bundles__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapBundleDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/sushiswap/bundles/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Bundles__historical;

   --  Burns (historical)
   --  Gets burns.
   procedure Sushiswap_Get_Burns__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapBurnDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/sushiswap/burns/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Burns__historical;

   --  DayData (historical)
   --  Gets dayData.
   procedure Sushiswap_Get_Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/sushiswap/dayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Day_Data__historical;

   --  Factories (historical)
   --  Gets factories.
   procedure Sushiswap_Get_Factories__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapFactoryDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/sushiswap/factories/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Factories__historical;

   --  HourData (historical)
   --  Gets hourData.
   procedure Sushiswap_Get_Hour_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/sushiswap/hourData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Hour_Data__historical;

   --  LiquidityPositionSnapshots (historical)
   --  Gets liquidityPositionSnapshots.
   procedure Sushiswap_Get_Liquidity_Position_Snapshots__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       User : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapLiquidityPositionSnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("user", User);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/sushiswap/liquidityPositionSnapshots/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Liquidity_Position_Snapshots__historical;

   --  LiquidityPositions (historical)
   --  Gets liquidityPositions.
   procedure Sushiswap_Get_Liquidity_Positions__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       User : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapLiquidityPositionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("user", User);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/sushiswap/liquidityPositions/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Liquidity_Positions__historical;

   --  Mints (historical)
   --  Gets mints.
   procedure Sushiswap_Get_Mints__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapMintDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/sushiswap/mints/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Mints__historical;

   --  PairDayData (historical)
   --  Gets pairDayData.
   procedure Sushiswap_Get_Pair_Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Token_0 : in Swagger.Nullable_UString;
       Token_1 : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapPairDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pair", Pair);
      URI.Add_Param ("token_0", Token_0);
      URI.Add_Param ("token_1", Token_1);
      URI.Set_Path ("/dapps/sushiswap/pairDayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Pair_Day_Data__historical;

   --  PairHourData (historical)
   --  Gets pairHourData.
   procedure Sushiswap_Get_Pair_Hour_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapPairHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/sushiswap/pairHourData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Pair_Hour_Data__historical;

   --  Pairs (historical)
   --  Gets pairs.
   procedure Sushiswap_Get_Pairs__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Token_0 : in Swagger.Nullable_UString;
       Token_1 : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapPairDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("name", Name);
      URI.Add_Param ("token_0", Token_0);
      URI.Add_Param ("token_1", Token_1);
      URI.Set_Path ("/dapps/sushiswap/pairs/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Pairs__historical;

   --  Swaps (historical)
   --  Gets swaps.
   procedure Sushiswap_Get_Swaps__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapSwapDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/sushiswap/swaps/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Swaps__historical;

   --  TokenDayData (historical)
   --  Gets tokenDayData.
   procedure Sushiswap_Get_Token_Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapTokenDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/sushiswap/tokenDayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Token_Day_Data__historical;

   --  Tokens (historical)
   --  Gets tokens.
   procedure Sushiswap_Get_Tokens__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Symbol : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("symbol", Symbol);
      URI.Add_Param ("name", Name);
      URI.Set_Path ("/dapps/sushiswap/tokens/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Tokens__historical;

   --  Transactions (historical)
   --  Gets transactions.
   procedure Sushiswap_Get_Transactions__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapTransactionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/sushiswap/transactions/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Transactions__historical;

   --  Users (historical)
   --  Gets users.
   procedure Sushiswap_Get_Users__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapUserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/sushiswap/users/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Get_Users__historical;

   --  HourData (current)
   --  Gets hourData.
   procedure Sushiswap_Hour_Data__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/hourData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Hour_Data__current;

   --  LiquidityPositionSnapshots (current)
   --  Gets liquidityPositionSnapshots.
   procedure Sushiswap_Liquidity_Position_Snapshots__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapLiquidityPositionSnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/liquidityPositionSnapshots/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Liquidity_Position_Snapshots__current;

   --  LiquidityPositions (current)
   --  Gets liquidityPositions.
   procedure Sushiswap_Liquidity_Positions__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapLiquidityPositionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/liquidityPositions/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Liquidity_Positions__current;

   --  Mints (current)
   --  Gets mints.
   procedure Sushiswap_Mints__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapMintDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/mints/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Mints__current;

   --  PairDayData (current)
   --  Gets pairDayData.
   procedure Sushiswap_Pair_Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapPairDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/pairDayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Pair_Day_Data__current;

   --  PairHourData (current)
   --  Gets pairHourData.
   procedure Sushiswap_Pair_Hour_Data__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapPairHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/pairHourData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Pair_Hour_Data__current;

   --  Pairs (current)
   --  Gets pairs.
   procedure Sushiswap_Pairs__current
      (Client : in out Client_Type;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapPairDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/sushiswap/pairs/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Pairs__current;

   --  Swaps (current)
   --  Gets swaps.
   procedure Sushiswap_Swaps__current
      (Client : in out Client_Type;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.SushiswapSwapDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/sushiswap/swaps/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Swaps__current;

   --  TokenDayData (current)
   --  Gets tokenDayData.
   procedure Sushiswap_Token_Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapTokenDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/tokenDayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Token_Day_Data__current;

   --  Tokens (current)
   --  Gets tokens.
   procedure Sushiswap_Tokens__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapTokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/tokens/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Tokens__current;

   --  Transactions (current)
   --  Gets transactions.
   procedure Sushiswap_Transactions__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapTransactionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/transactions/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Transactions__current;

   --  Users (current)
   --  Gets users.
   procedure Sushiswap_Users__current
      (Client : in out Client_Type;
       Result : out .Models.SushiswapUserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/sushiswap/users/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Sushiswap_Users__current;

   --  Bundles (current)
   --  Gets bundles.
   procedure Uniswap_V2_Bundles__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2BundleDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/bundles/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Bundles__current;

   --  Burns (current)
   --  Gets burns.
   procedure Uniswap_V2_Burns__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2BurnDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/burns/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Burns__current;

   --  Bundles (historical)
   --  Gets bundles.
   procedure Uniswap_V2_Get_Bundles__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2BundleDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv2/bundles/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Bundles__historical;

   --  Burns (historical)
   --  Gets burns.
   procedure Uniswap_V2_Get_Burns__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2BurnDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/uniswapv2/burns/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Burns__historical;

   --  LiquidityPositionSnapshots (historical)
   --  Gets liquidityPositionSnapshots.
   procedure Uniswap_V2_Get_Liquidity_Position_Snapshots__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       User : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2LiquidityPositionSnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("user", User);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/uniswapv2/liquidityPositionSnapshots/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Liquidity_Position_Snapshots__historical;

   --  LiquidityPositions (historical)
   --  Gets liquidityPositions.
   procedure Uniswap_V2_Get_Liquidity_Positions__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       User : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2LiquidityPositionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("user", User);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/uniswapv2/liquidityPositions/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Liquidity_Positions__historical;

   --  Mints (historical)
   --  Gets mints.
   procedure Uniswap_V2_Get_Mints__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2MintDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/uniswapv2/mints/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Mints__historical;

   --  PairDayData (historical)
   --  Gets pairDayData.
   procedure Uniswap_V2_Get_Pair_Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Token_0 : in Swagger.Nullable_UString;
       Token_1 : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2PairDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("token_0", Token_0);
      URI.Add_Param ("token_1", Token_1);
      URI.Set_Path ("/dapps/uniswapv2/pairDayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Pair_Day_Data__historical;

   --  PairHourData (historical)
   --  Gets pairHourData.
   procedure Uniswap_V2_Get_Pair_Hour_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2PairHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/uniswapv2/pairHourData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Pair_Hour_Data__historical;

   --  Pairs (historical)
   --  Gets pairs.
   procedure Uniswap_V2_Get_Pairs__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Token_0 : in Swagger.Nullable_UString;
       Token_1 : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2PairDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("token_0", Token_0);
      URI.Add_Param ("token_1", Token_1);
      URI.Set_Path ("/dapps/uniswapv2/pairs/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Pairs__historical;

   --  Swaps (historical)
   --  Gets swaps.
   procedure Uniswap_V2_Get_Swaps__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2SwapDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/uniswapv2/swaps/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Swaps__historical;

   --  TokenDayData (historical)
   --  Gets tokenDayData.
   procedure Uniswap_V2_Get_Token_Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2TokenDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv2/tokenDayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Token_Day_Data__historical;

   --  Tokens (historical)
   --  Gets tokens.
   procedure Uniswap_V2_Get_Tokens__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Symbol : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2TokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("symbol", Symbol);
      URI.Add_Param ("name", Name);
      URI.Set_Path ("/dapps/uniswapv2/tokens/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Tokens__historical;

   --  Transactions (historical)
   --  Gets transactions.
   procedure Uniswap_V2_Get_Transactions__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2TransactionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv2/transactions/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Transactions__historical;

   --  UniswapDayData (historical)
   --  Gets uniswapDayData.
   procedure Uniswap_V2_Get_Uniswap_Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2UniswapDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv2/uniswapDayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Uniswap_Day_Data__historical;

   --  UniswapFactories (historical)
   --  Gets uniswapFactories.
   procedure Uniswap_V2_Get_Uniswap_Factories__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2UniswapFactoryDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv2/uniswapFactories/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Uniswap_Factories__historical;

   --  Users (historical)
   --  Gets users.
   procedure Uniswap_V2_Get_Users__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2UserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv2/users/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Get_Users__historical;

   --  LiquidityPositionSnapshots (current)
   --  Gets liquidityPositionSnapshots.
   procedure Uniswap_V2_Liquidity_Position_Snapshots__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2LiquidityPositionSnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/liquidityPositionSnapshots/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Liquidity_Position_Snapshots__current;

   --  LiquidityPositions (current)
   --  Gets liquidityPositions.
   procedure Uniswap_V2_Liquidity_Positions__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2LiquidityPositionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/liquidityPositions/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Liquidity_Positions__current;

   --  Mints (current)
   --  Gets mints.
   procedure Uniswap_V2_Mints__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2MintDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/mints/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Mints__current;

   --  PairDayData (current)
   --  Gets pairDayData.
   procedure Uniswap_V2_Pair_Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2PairDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/pairDayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Pair_Day_Data__current;

   --  PairHourData (current)
   --  Gets pairHourData.
   procedure Uniswap_V2_Pair_Hour_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2PairHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/pairHourData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Pair_Hour_Data__current;

   --  Pairs (current)
   --  Gets pairs.
   procedure Uniswap_V2_Pairs__current
      (Client : in out Client_Type;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2PairDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv2/pairs/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Pairs__current;

   --  Swaps (current)
   --  Gets swaps.
   procedure Uniswap_V2_Swaps__current
      (Client : in out Client_Type;
       Pair : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV2SwapDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("pair", Pair);
      URI.Set_Path ("/dapps/uniswapv2/swaps/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Swaps__current;

   --  TokenDayData (current)
   --  Gets tokenDayData.
   procedure Uniswap_V2_Token_Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2TokenDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/tokenDayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Token_Day_Data__current;

   --  Tokens (current)
   --  Gets tokens.
   procedure Uniswap_V2_Tokens__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2TokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/tokens/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Tokens__current;

   --  Transactions (current)
   --  Gets transactions.
   procedure Uniswap_V2_Transactions__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2TransactionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/transactions/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Transactions__current;

   --  UniswapDayData (current)
   --  Gets uniswapDayData.
   procedure Uniswap_V2_Uniswap_Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2UniswapDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/uniswapDayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Uniswap_Day_Data__current;

   --  UniswapFactories (current)
   --  Gets uniswapFactories.
   procedure Uniswap_V2_Uniswap_Factories__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2UniswapFactoryDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/uniswapFactories/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Uniswap_Factories__current;

   --  Users (current)
   --  Gets users.
   procedure Uniswap_V2_Users__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV2UserDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv2/users/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V2_Users__current;

   --  Bundles (current)
   --  Gets bundles.
   procedure Uniswap_V3_Bundles__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3BundleDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/bundles/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Bundles__current;

   --  Burns (current)
   --  Gets burns.
   procedure Uniswap_V3_Burns__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3BurnDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/burns/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Burns__current;

   --  Factories (current)
   --  Gets factories.
   procedure Uniswap_V3_Factories__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3FactoryDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/factories/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Factories__current;

   --  Bundles (historical)
   --  Gets bundles.
   procedure Uniswap_V3_Get_Bundles__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3BundleDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv3/bundles/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Bundles__historical;

   --  Burns (historical)
   --  Gets burns.
   procedure Uniswap_V3_Get_Burns__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Token_0 : in Swagger.Nullable_UString;
       Token_1 : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3BurnDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Add_Param ("token_0", Token_0);
      URI.Add_Param ("token_1", Token_1);
      URI.Set_Path ("/dapps/uniswapv3/burns/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Burns__historical;

   --  Factories (historical)
   --  Gets factories.
   procedure Uniswap_V3_Get_Factories__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3FactoryDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv3/factories/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Factories__historical;

   --  Mints (historical)
   --  Gets mints.
   procedure Uniswap_V3_Get_Mints__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Token_0 : in Swagger.Nullable_UString;
       Token_1 : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3MintDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Add_Param ("token_0", Token_0);
      URI.Add_Param ("token_1", Token_1);
      URI.Set_Path ("/dapps/uniswapv3/mints/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Mints__historical;

   --  PoolDayData (historical)
   --  Gets poolDayData.
   procedure Uniswap_V3_Get_Pool_Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3PoolDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/uniswapv3/poolDayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Pool_Day_Data__historical;

   --  PoolHourData (historical)
   --  Gets poolHourData.
   procedure Uniswap_V3_Get_Pool_Hour_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3PoolHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/uniswapv3/poolHourData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Pool_Hour_Data__historical;

   --  Pools (historical)
   --  Gets pools.
   procedure Uniswap_V3_Get_Pools__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Token_0 : in Swagger.Nullable_UString;
       Token_1 : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3PoolDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("token_0", Token_0);
      URI.Add_Param ("token_1", Token_1);
      URI.Set_Path ("/dapps/uniswapv3/pools/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Pools__historical;

   --  PositionSnapshots (historical)
   --  Gets positionSnapshots.
   procedure Uniswap_V3_Get_Position_Snapshots__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3PositionSnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/uniswapv3/positionSnapshots/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Position_Snapshots__historical;

   --  Positions (historical)
   --  Gets positions.
   procedure Uniswap_V3_Get_Positions__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Token_0 : in Swagger.Nullable_UString;
       Token_1 : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3PositionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Add_Param ("token_0", Token_0);
      URI.Add_Param ("token_1", Token_1);
      URI.Set_Path ("/dapps/uniswapv3/positions/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Positions__historical;

   --  Swaps (historical)
   --  Gets swaps.
   procedure Uniswap_V3_Get_Swaps__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Token_0 : in Swagger.Nullable_UString;
       Token_1 : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3SwapDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Add_Param ("token_0", Token_0);
      URI.Add_Param ("token_1", Token_1);
      URI.Set_Path ("/dapps/uniswapv3/swaps/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Swaps__historical;

   --  TickDayData (historical)
   --  Gets tickDayData.
   procedure Uniswap_V3_Get_Tick_Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3TickDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/uniswapv3/tickDayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Tick_Day_Data__historical;

   --  Ticks (historical)
   --  Gets ticks.
   procedure Uniswap_V3_Get_Ticks__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3TickDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/uniswapv3/ticks/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Ticks__historical;

   --  TokenHourData (historical)
   --  Gets tokenHourData.
   procedure Uniswap_V3_Get_Token_Hour_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3TokenHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv3/tokenHourData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Token_Hour_Data__historical;

   --  TokenV3DayData (historical)
   --  Gets tokenV3DayData.
   procedure Uniswap_V3_Get_Token_V3Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3TokenV3DayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv3/tokenV3DayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Token_V3Day_Data__historical;

   --  Tokens (historical)
   --  Gets tokens.
   procedure Uniswap_V3_Get_Tokens__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Symbol : in Swagger.Nullable_UString;
       Name : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3TokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Add_Param ("symbol", Symbol);
      URI.Add_Param ("name", Name);
      URI.Set_Path ("/dapps/uniswapv3/tokens/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Tokens__historical;

   --  Transactions (historical)
   --  Gets transactions.
   procedure Uniswap_V3_Get_Transactions__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3TransactionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv3/transactions/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Transactions__historical;

   --  UniswapDayData (historical)
   --  Gets uniswapDayData.
   procedure Uniswap_V3_Get_Uniswap_Day_Data__historical
      (Client : in out Client_Type;
       Start_Block : in Swagger.Nullable_Long;
       End_Block : in Swagger.Nullable_Long;
       Start_Date : in Swagger.Nullable_Date;
       End_Date : in Swagger.Nullable_Date;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3UniswapDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("startBlock", Start_Block);
      URI.Add_Param ("endBlock", End_Block);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("startDate", Start_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("endDate", End_Date);
      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv3/uniswapDayData/historical");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Get_Uniswap_Day_Data__historical;

   --  Mints (current)
   --  Gets mints.
   procedure Uniswap_V3_Mints__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3MintDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/mints/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Mints__current;

   --  PoolDayData (current)
   --  Gets poolDayData.
   procedure Uniswap_V3_Pool_Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3PoolDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/poolDayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Pool_Day_Data__current;

   --  PoolHourData (current)
   --  Gets poolHourData.
   procedure Uniswap_V3_Pool_Hour_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3PoolHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/poolHourData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Pool_Hour_Data__current;

   --  Pools (current)
   --  Gets pools.
   procedure Uniswap_V3_Pools__current
      (Client : in out Client_Type;
       Id : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3PoolDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("id", Id);
      URI.Set_Path ("/dapps/uniswapv3/pools/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Pools__current;

   --  PositionSnapshots (current)
   --  Gets positionSnapshots.
   procedure Uniswap_V3_Position_Snapshots__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3PositionSnapshotDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/positionSnapshots/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Position_Snapshots__current;

   --  Positions (current)
   --  Gets positions.
   procedure Uniswap_V3_Positions__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3PositionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/positions/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Positions__current;

   --  Swaps (current)
   --  Gets swaps.
   procedure Uniswap_V3_Swaps__current
      (Client : in out Client_Type;
       Pool : in Swagger.Nullable_UString;
       Result : out .Models.UniswapV3SwapDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Add_Param ("pool", Pool);
      URI.Set_Path ("/dapps/uniswapv3/swaps/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Swaps__current;

   --  TickDayData (current)
   --  Gets tickDayData.
   procedure Uniswap_V3_Tick_Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3TickDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/tickDayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Tick_Day_Data__current;

   --  Ticks (current)
   --  Gets ticks.
   procedure Uniswap_V3_Ticks__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3TickDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/ticks/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Ticks__current;

   --  TokenHourData (current)
   --  Gets tokenHourData.
   procedure Uniswap_V3_Token_Hour_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3TokenHourDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/tokenHourData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Token_Hour_Data__current;

   --  TokenV3DayData (current)
   --  Gets tokenV3DayData.
   procedure Uniswap_V3_Token_V3Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3TokenV3DayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/tokenV3DayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Token_V3Day_Data__current;

   --  Tokens (current)
   --  Gets tokens.
   procedure Uniswap_V3_Tokens__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3TokenDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/tokens/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Tokens__current;

   --  Transactions (current)
   --  Gets transactions.
   procedure Uniswap_V3_Transactions__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3TransactionDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/transactions/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Transactions__current;

   --  UniswapDayData (current)
   --  Gets uniswapDayData.
   procedure Uniswap_V3_Uniswap_Day_Data__current
      (Client : in out Client_Type;
       Result : out .Models.UniswapV3UniswapDayDataDTO_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.TEXT_PLAIN,
                          Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.TEXT_JSON));

      URI.Set_Path ("/dapps/uniswapv3/uniswapDayData/current");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Uniswap_V3_Uniswap_Day_Data__current;
end .Clients;
