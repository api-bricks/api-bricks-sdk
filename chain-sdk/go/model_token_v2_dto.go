/*
OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TokenV2DTO Stores aggregated information for a specific token across all pairs that token is included in.
type TokenV2DTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// 
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
	// token address
	Id NullableString `json:"id,omitempty"`
	// token symbol
	Symbol NullableString `json:"symbol,omitempty"`
	// token name
	Name NullableString `json:"name,omitempty"`
	// token decimals
	Decimals *int32 `json:"decimals,omitempty"`
	TotalSupply *BigInteger `json:"total_supply,omitempty"`
	// amount of token traded all time across all pairs
	TradeVolume NullableString `json:"trade_volume,omitempty"`
	// amount of token in USD traded all time across pairs (only for tokens with liquidity above minimum threshold)
	TradeVolumeUsd NullableString `json:"trade_volume_usd,omitempty"`
	// amount of token in USD traded all time across pairs (no minimum liquidity threshold)
	UntrackedVolumeUsd NullableString `json:"untracked_volume_usd,omitempty"`
	TxCount *BigInteger `json:"tx_count,omitempty"`
	// total amount of token provided as liquidity across all pairs
	TotalLiquidity NullableString `json:"total_liquidity,omitempty"`
	// ETH per token
	DerivedEth NullableString `json:"derived_eth,omitempty"`
	TokenSymbol NullableString `json:"token_symbol,omitempty"`
}

// NewTokenV2DTO instantiates a new TokenV2DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenV2DTO() *TokenV2DTO {
	this := TokenV2DTO{}
	return &this
}

// NewTokenV2DTOWithDefaults instantiates a new TokenV2DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenV2DTOWithDefaults() *TokenV2DTO {
	this := TokenV2DTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *TokenV2DTO) GetEntryTime() time.Time {
	if o == nil || o.EntryTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenV2DTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || o.EntryTime == nil {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *TokenV2DTO) HasEntryTime() bool {
	if o != nil && o.EntryTime != nil {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *TokenV2DTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *TokenV2DTO) GetRecvTime() time.Time {
	if o == nil || o.RecvTime == nil {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenV2DTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || o.RecvTime == nil {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *TokenV2DTO) HasRecvTime() bool {
	if o != nil && o.RecvTime != nil {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *TokenV2DTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *TokenV2DTO) GetBlockNumber() int64 {
	if o == nil || o.BlockNumber == nil {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenV2DTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || o.BlockNumber == nil {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *TokenV2DTO) HasBlockNumber() bool {
	if o != nil && o.BlockNumber != nil {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *TokenV2DTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *TokenV2DTO) GetVid() int64 {
	if o == nil || o.Vid == nil {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenV2DTO) GetVidOk() (*int64, bool) {
	if o == nil || o.Vid == nil {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *TokenV2DTO) HasVid() bool {
	if o != nil && o.Vid != nil {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *TokenV2DTO) SetVid(v int64) {
	o.Vid = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenV2DTO) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenV2DTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TokenV2DTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TokenV2DTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TokenV2DTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TokenV2DTO) UnsetId() {
	o.Id.Unset()
}

// GetSymbol returns the Symbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenV2DTO) GetSymbol() string {
	if o == nil || o.Symbol.Get() == nil {
		var ret string
		return ret
	}
	return *o.Symbol.Get()
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenV2DTO) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Symbol.Get(), o.Symbol.IsSet()
}

// HasSymbol returns a boolean if a field has been set.
func (o *TokenV2DTO) HasSymbol() bool {
	if o != nil && o.Symbol.IsSet() {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given NullableString and assigns it to the Symbol field.
func (o *TokenV2DTO) SetSymbol(v string) {
	o.Symbol.Set(&v)
}
// SetSymbolNil sets the value for Symbol to be an explicit nil
func (o *TokenV2DTO) SetSymbolNil() {
	o.Symbol.Set(nil)
}

// UnsetSymbol ensures that no value is present for Symbol, not even an explicit nil
func (o *TokenV2DTO) UnsetSymbol() {
	o.Symbol.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenV2DTO) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenV2DTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TokenV2DTO) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TokenV2DTO) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TokenV2DTO) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TokenV2DTO) UnsetName() {
	o.Name.Unset()
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *TokenV2DTO) GetDecimals() int32 {
	if o == nil || o.Decimals == nil {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenV2DTO) GetDecimalsOk() (*int32, bool) {
	if o == nil || o.Decimals == nil {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *TokenV2DTO) HasDecimals() bool {
	if o != nil && o.Decimals != nil {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *TokenV2DTO) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetTotalSupply returns the TotalSupply field value if set, zero value otherwise.
func (o *TokenV2DTO) GetTotalSupply() BigInteger {
	if o == nil || o.TotalSupply == nil {
		var ret BigInteger
		return ret
	}
	return *o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenV2DTO) GetTotalSupplyOk() (*BigInteger, bool) {
	if o == nil || o.TotalSupply == nil {
		return nil, false
	}
	return o.TotalSupply, true
}

// HasTotalSupply returns a boolean if a field has been set.
func (o *TokenV2DTO) HasTotalSupply() bool {
	if o != nil && o.TotalSupply != nil {
		return true
	}

	return false
}

// SetTotalSupply gets a reference to the given BigInteger and assigns it to the TotalSupply field.
func (o *TokenV2DTO) SetTotalSupply(v BigInteger) {
	o.TotalSupply = &v
}

// GetTradeVolume returns the TradeVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenV2DTO) GetTradeVolume() string {
	if o == nil || o.TradeVolume.Get() == nil {
		var ret string
		return ret
	}
	return *o.TradeVolume.Get()
}

// GetTradeVolumeOk returns a tuple with the TradeVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenV2DTO) GetTradeVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TradeVolume.Get(), o.TradeVolume.IsSet()
}

// HasTradeVolume returns a boolean if a field has been set.
func (o *TokenV2DTO) HasTradeVolume() bool {
	if o != nil && o.TradeVolume.IsSet() {
		return true
	}

	return false
}

// SetTradeVolume gets a reference to the given NullableString and assigns it to the TradeVolume field.
func (o *TokenV2DTO) SetTradeVolume(v string) {
	o.TradeVolume.Set(&v)
}
// SetTradeVolumeNil sets the value for TradeVolume to be an explicit nil
func (o *TokenV2DTO) SetTradeVolumeNil() {
	o.TradeVolume.Set(nil)
}

// UnsetTradeVolume ensures that no value is present for TradeVolume, not even an explicit nil
func (o *TokenV2DTO) UnsetTradeVolume() {
	o.TradeVolume.Unset()
}

// GetTradeVolumeUsd returns the TradeVolumeUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenV2DTO) GetTradeVolumeUsd() string {
	if o == nil || o.TradeVolumeUsd.Get() == nil {
		var ret string
		return ret
	}
	return *o.TradeVolumeUsd.Get()
}

// GetTradeVolumeUsdOk returns a tuple with the TradeVolumeUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenV2DTO) GetTradeVolumeUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TradeVolumeUsd.Get(), o.TradeVolumeUsd.IsSet()
}

// HasTradeVolumeUsd returns a boolean if a field has been set.
func (o *TokenV2DTO) HasTradeVolumeUsd() bool {
	if o != nil && o.TradeVolumeUsd.IsSet() {
		return true
	}

	return false
}

// SetTradeVolumeUsd gets a reference to the given NullableString and assigns it to the TradeVolumeUsd field.
func (o *TokenV2DTO) SetTradeVolumeUsd(v string) {
	o.TradeVolumeUsd.Set(&v)
}
// SetTradeVolumeUsdNil sets the value for TradeVolumeUsd to be an explicit nil
func (o *TokenV2DTO) SetTradeVolumeUsdNil() {
	o.TradeVolumeUsd.Set(nil)
}

// UnsetTradeVolumeUsd ensures that no value is present for TradeVolumeUsd, not even an explicit nil
func (o *TokenV2DTO) UnsetTradeVolumeUsd() {
	o.TradeVolumeUsd.Unset()
}

// GetUntrackedVolumeUsd returns the UntrackedVolumeUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenV2DTO) GetUntrackedVolumeUsd() string {
	if o == nil || o.UntrackedVolumeUsd.Get() == nil {
		var ret string
		return ret
	}
	return *o.UntrackedVolumeUsd.Get()
}

// GetUntrackedVolumeUsdOk returns a tuple with the UntrackedVolumeUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenV2DTO) GetUntrackedVolumeUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UntrackedVolumeUsd.Get(), o.UntrackedVolumeUsd.IsSet()
}

// HasUntrackedVolumeUsd returns a boolean if a field has been set.
func (o *TokenV2DTO) HasUntrackedVolumeUsd() bool {
	if o != nil && o.UntrackedVolumeUsd.IsSet() {
		return true
	}

	return false
}

// SetUntrackedVolumeUsd gets a reference to the given NullableString and assigns it to the UntrackedVolumeUsd field.
func (o *TokenV2DTO) SetUntrackedVolumeUsd(v string) {
	o.UntrackedVolumeUsd.Set(&v)
}
// SetUntrackedVolumeUsdNil sets the value for UntrackedVolumeUsd to be an explicit nil
func (o *TokenV2DTO) SetUntrackedVolumeUsdNil() {
	o.UntrackedVolumeUsd.Set(nil)
}

// UnsetUntrackedVolumeUsd ensures that no value is present for UntrackedVolumeUsd, not even an explicit nil
func (o *TokenV2DTO) UnsetUntrackedVolumeUsd() {
	o.UntrackedVolumeUsd.Unset()
}

// GetTxCount returns the TxCount field value if set, zero value otherwise.
func (o *TokenV2DTO) GetTxCount() BigInteger {
	if o == nil || o.TxCount == nil {
		var ret BigInteger
		return ret
	}
	return *o.TxCount
}

// GetTxCountOk returns a tuple with the TxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenV2DTO) GetTxCountOk() (*BigInteger, bool) {
	if o == nil || o.TxCount == nil {
		return nil, false
	}
	return o.TxCount, true
}

// HasTxCount returns a boolean if a field has been set.
func (o *TokenV2DTO) HasTxCount() bool {
	if o != nil && o.TxCount != nil {
		return true
	}

	return false
}

// SetTxCount gets a reference to the given BigInteger and assigns it to the TxCount field.
func (o *TokenV2DTO) SetTxCount(v BigInteger) {
	o.TxCount = &v
}

// GetTotalLiquidity returns the TotalLiquidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenV2DTO) GetTotalLiquidity() string {
	if o == nil || o.TotalLiquidity.Get() == nil {
		var ret string
		return ret
	}
	return *o.TotalLiquidity.Get()
}

// GetTotalLiquidityOk returns a tuple with the TotalLiquidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenV2DTO) GetTotalLiquidityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalLiquidity.Get(), o.TotalLiquidity.IsSet()
}

// HasTotalLiquidity returns a boolean if a field has been set.
func (o *TokenV2DTO) HasTotalLiquidity() bool {
	if o != nil && o.TotalLiquidity.IsSet() {
		return true
	}

	return false
}

// SetTotalLiquidity gets a reference to the given NullableString and assigns it to the TotalLiquidity field.
func (o *TokenV2DTO) SetTotalLiquidity(v string) {
	o.TotalLiquidity.Set(&v)
}
// SetTotalLiquidityNil sets the value for TotalLiquidity to be an explicit nil
func (o *TokenV2DTO) SetTotalLiquidityNil() {
	o.TotalLiquidity.Set(nil)
}

// UnsetTotalLiquidity ensures that no value is present for TotalLiquidity, not even an explicit nil
func (o *TokenV2DTO) UnsetTotalLiquidity() {
	o.TotalLiquidity.Unset()
}

// GetDerivedEth returns the DerivedEth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenV2DTO) GetDerivedEth() string {
	if o == nil || o.DerivedEth.Get() == nil {
		var ret string
		return ret
	}
	return *o.DerivedEth.Get()
}

// GetDerivedEthOk returns a tuple with the DerivedEth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenV2DTO) GetDerivedEthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DerivedEth.Get(), o.DerivedEth.IsSet()
}

// HasDerivedEth returns a boolean if a field has been set.
func (o *TokenV2DTO) HasDerivedEth() bool {
	if o != nil && o.DerivedEth.IsSet() {
		return true
	}

	return false
}

// SetDerivedEth gets a reference to the given NullableString and assigns it to the DerivedEth field.
func (o *TokenV2DTO) SetDerivedEth(v string) {
	o.DerivedEth.Set(&v)
}
// SetDerivedEthNil sets the value for DerivedEth to be an explicit nil
func (o *TokenV2DTO) SetDerivedEthNil() {
	o.DerivedEth.Set(nil)
}

// UnsetDerivedEth ensures that no value is present for DerivedEth, not even an explicit nil
func (o *TokenV2DTO) UnsetDerivedEth() {
	o.DerivedEth.Unset()
}

// GetTokenSymbol returns the TokenSymbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TokenV2DTO) GetTokenSymbol() string {
	if o == nil || o.TokenSymbol.Get() == nil {
		var ret string
		return ret
	}
	return *o.TokenSymbol.Get()
}

// GetTokenSymbolOk returns a tuple with the TokenSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TokenV2DTO) GetTokenSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenSymbol.Get(), o.TokenSymbol.IsSet()
}

// HasTokenSymbol returns a boolean if a field has been set.
func (o *TokenV2DTO) HasTokenSymbol() bool {
	if o != nil && o.TokenSymbol.IsSet() {
		return true
	}

	return false
}

// SetTokenSymbol gets a reference to the given NullableString and assigns it to the TokenSymbol field.
func (o *TokenV2DTO) SetTokenSymbol(v string) {
	o.TokenSymbol.Set(&v)
}
// SetTokenSymbolNil sets the value for TokenSymbol to be an explicit nil
func (o *TokenV2DTO) SetTokenSymbolNil() {
	o.TokenSymbol.Set(nil)
}

// UnsetTokenSymbol ensures that no value is present for TokenSymbol, not even an explicit nil
func (o *TokenV2DTO) UnsetTokenSymbol() {
	o.TokenSymbol.Unset()
}

func (o TokenV2DTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntryTime != nil {
		toSerialize["entry_time"] = o.EntryTime
	}
	if o.RecvTime != nil {
		toSerialize["recv_time"] = o.RecvTime
	}
	if o.BlockNumber != nil {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Vid != nil {
		toSerialize["vid"] = o.Vid
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Symbol.IsSet() {
		toSerialize["symbol"] = o.Symbol.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Decimals != nil {
		toSerialize["decimals"] = o.Decimals
	}
	if o.TotalSupply != nil {
		toSerialize["total_supply"] = o.TotalSupply
	}
	if o.TradeVolume.IsSet() {
		toSerialize["trade_volume"] = o.TradeVolume.Get()
	}
	if o.TradeVolumeUsd.IsSet() {
		toSerialize["trade_volume_usd"] = o.TradeVolumeUsd.Get()
	}
	if o.UntrackedVolumeUsd.IsSet() {
		toSerialize["untracked_volume_usd"] = o.UntrackedVolumeUsd.Get()
	}
	if o.TxCount != nil {
		toSerialize["tx_count"] = o.TxCount
	}
	if o.TotalLiquidity.IsSet() {
		toSerialize["total_liquidity"] = o.TotalLiquidity.Get()
	}
	if o.DerivedEth.IsSet() {
		toSerialize["derived_eth"] = o.DerivedEth.Get()
	}
	if o.TokenSymbol.IsSet() {
		toSerialize["token_symbol"] = o.TokenSymbol.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTokenV2DTO struct {
	value *TokenV2DTO
	isSet bool
}

func (v NullableTokenV2DTO) Get() *TokenV2DTO {
	return v.value
}

func (v *NullableTokenV2DTO) Set(val *TokenV2DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenV2DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenV2DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenV2DTO(val *TokenV2DTO) *NullableTokenV2DTO {
	return &NullableTokenV2DTO{value: val, isSet: true}
}

func (v NullableTokenV2DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenV2DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


