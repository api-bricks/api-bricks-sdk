/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DexStatsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DexStatsDTO{}

// DexStatsDTO A type collecting global stats about this instance of Gnosis Protocol.
type DexStatsDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	Id NullableString `json:"id,omitempty"`
	// The total volume denominated in OWL (all sell amounts combined).
	VolumeInOwl NullableString `json:"volume_in_owl,omitempty"`
	// The total trader surplus in OWL.
	UtilityInOwl NullableString `json:"utility_in_owl,omitempty"`
	// The total amount of OWL burnt (equivalent to fees rewarded to solvers).
	OwlBurnt NullableString `json:"owl_burnt,omitempty"`
	// The total number of settled batches.
	SettledBatchCount *int32 `json:"settled_batch_count,omitempty"`
	// The total number of settled trades.
	SettledTradeCount *int32 `json:"settled_trade_count,omitempty"`
	// The number of listed tokens.
	ListedTokens *int32 `json:"listed_tokens,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
}

// NewDexStatsDTO instantiates a new DexStatsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDexStatsDTO() *DexStatsDTO {
	this := DexStatsDTO{}
	return &this
}

// NewDexStatsDTOWithDefaults instantiates a new DexStatsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDexStatsDTOWithDefaults() *DexStatsDTO {
	this := DexStatsDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *DexStatsDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexStatsDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *DexStatsDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *DexStatsDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *DexStatsDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexStatsDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *DexStatsDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *DexStatsDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *DexStatsDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexStatsDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *DexStatsDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *DexStatsDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexStatsDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexStatsDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DexStatsDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DexStatsDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DexStatsDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DexStatsDTO) UnsetId() {
	o.Id.Unset()
}

// GetVolumeInOwl returns the VolumeInOwl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexStatsDTO) GetVolumeInOwl() string {
	if o == nil || IsNil(o.VolumeInOwl.Get()) {
		var ret string
		return ret
	}
	return *o.VolumeInOwl.Get()
}

// GetVolumeInOwlOk returns a tuple with the VolumeInOwl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexStatsDTO) GetVolumeInOwlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeInOwl.Get(), o.VolumeInOwl.IsSet()
}

// HasVolumeInOwl returns a boolean if a field has been set.
func (o *DexStatsDTO) HasVolumeInOwl() bool {
	if o != nil && o.VolumeInOwl.IsSet() {
		return true
	}

	return false
}

// SetVolumeInOwl gets a reference to the given NullableString and assigns it to the VolumeInOwl field.
func (o *DexStatsDTO) SetVolumeInOwl(v string) {
	o.VolumeInOwl.Set(&v)
}
// SetVolumeInOwlNil sets the value for VolumeInOwl to be an explicit nil
func (o *DexStatsDTO) SetVolumeInOwlNil() {
	o.VolumeInOwl.Set(nil)
}

// UnsetVolumeInOwl ensures that no value is present for VolumeInOwl, not even an explicit nil
func (o *DexStatsDTO) UnsetVolumeInOwl() {
	o.VolumeInOwl.Unset()
}

// GetUtilityInOwl returns the UtilityInOwl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexStatsDTO) GetUtilityInOwl() string {
	if o == nil || IsNil(o.UtilityInOwl.Get()) {
		var ret string
		return ret
	}
	return *o.UtilityInOwl.Get()
}

// GetUtilityInOwlOk returns a tuple with the UtilityInOwl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexStatsDTO) GetUtilityInOwlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UtilityInOwl.Get(), o.UtilityInOwl.IsSet()
}

// HasUtilityInOwl returns a boolean if a field has been set.
func (o *DexStatsDTO) HasUtilityInOwl() bool {
	if o != nil && o.UtilityInOwl.IsSet() {
		return true
	}

	return false
}

// SetUtilityInOwl gets a reference to the given NullableString and assigns it to the UtilityInOwl field.
func (o *DexStatsDTO) SetUtilityInOwl(v string) {
	o.UtilityInOwl.Set(&v)
}
// SetUtilityInOwlNil sets the value for UtilityInOwl to be an explicit nil
func (o *DexStatsDTO) SetUtilityInOwlNil() {
	o.UtilityInOwl.Set(nil)
}

// UnsetUtilityInOwl ensures that no value is present for UtilityInOwl, not even an explicit nil
func (o *DexStatsDTO) UnsetUtilityInOwl() {
	o.UtilityInOwl.Unset()
}

// GetOwlBurnt returns the OwlBurnt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexStatsDTO) GetOwlBurnt() string {
	if o == nil || IsNil(o.OwlBurnt.Get()) {
		var ret string
		return ret
	}
	return *o.OwlBurnt.Get()
}

// GetOwlBurntOk returns a tuple with the OwlBurnt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexStatsDTO) GetOwlBurntOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwlBurnt.Get(), o.OwlBurnt.IsSet()
}

// HasOwlBurnt returns a boolean if a field has been set.
func (o *DexStatsDTO) HasOwlBurnt() bool {
	if o != nil && o.OwlBurnt.IsSet() {
		return true
	}

	return false
}

// SetOwlBurnt gets a reference to the given NullableString and assigns it to the OwlBurnt field.
func (o *DexStatsDTO) SetOwlBurnt(v string) {
	o.OwlBurnt.Set(&v)
}
// SetOwlBurntNil sets the value for OwlBurnt to be an explicit nil
func (o *DexStatsDTO) SetOwlBurntNil() {
	o.OwlBurnt.Set(nil)
}

// UnsetOwlBurnt ensures that no value is present for OwlBurnt, not even an explicit nil
func (o *DexStatsDTO) UnsetOwlBurnt() {
	o.OwlBurnt.Unset()
}

// GetSettledBatchCount returns the SettledBatchCount field value if set, zero value otherwise.
func (o *DexStatsDTO) GetSettledBatchCount() int32 {
	if o == nil || IsNil(o.SettledBatchCount) {
		var ret int32
		return ret
	}
	return *o.SettledBatchCount
}

// GetSettledBatchCountOk returns a tuple with the SettledBatchCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexStatsDTO) GetSettledBatchCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SettledBatchCount) {
		return nil, false
	}
	return o.SettledBatchCount, true
}

// HasSettledBatchCount returns a boolean if a field has been set.
func (o *DexStatsDTO) HasSettledBatchCount() bool {
	if o != nil && !IsNil(o.SettledBatchCount) {
		return true
	}

	return false
}

// SetSettledBatchCount gets a reference to the given int32 and assigns it to the SettledBatchCount field.
func (o *DexStatsDTO) SetSettledBatchCount(v int32) {
	o.SettledBatchCount = &v
}

// GetSettledTradeCount returns the SettledTradeCount field value if set, zero value otherwise.
func (o *DexStatsDTO) GetSettledTradeCount() int32 {
	if o == nil || IsNil(o.SettledTradeCount) {
		var ret int32
		return ret
	}
	return *o.SettledTradeCount
}

// GetSettledTradeCountOk returns a tuple with the SettledTradeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexStatsDTO) GetSettledTradeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SettledTradeCount) {
		return nil, false
	}
	return o.SettledTradeCount, true
}

// HasSettledTradeCount returns a boolean if a field has been set.
func (o *DexStatsDTO) HasSettledTradeCount() bool {
	if o != nil && !IsNil(o.SettledTradeCount) {
		return true
	}

	return false
}

// SetSettledTradeCount gets a reference to the given int32 and assigns it to the SettledTradeCount field.
func (o *DexStatsDTO) SetSettledTradeCount(v int32) {
	o.SettledTradeCount = &v
}

// GetListedTokens returns the ListedTokens field value if set, zero value otherwise.
func (o *DexStatsDTO) GetListedTokens() int32 {
	if o == nil || IsNil(o.ListedTokens) {
		var ret int32
		return ret
	}
	return *o.ListedTokens
}

// GetListedTokensOk returns a tuple with the ListedTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexStatsDTO) GetListedTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.ListedTokens) {
		return nil, false
	}
	return o.ListedTokens, true
}

// HasListedTokens returns a boolean if a field has been set.
func (o *DexStatsDTO) HasListedTokens() bool {
	if o != nil && !IsNil(o.ListedTokens) {
		return true
	}

	return false
}

// SetListedTokens gets a reference to the given int32 and assigns it to the ListedTokens field.
func (o *DexStatsDTO) SetListedTokens(v int32) {
	o.ListedTokens = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *DexStatsDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexStatsDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *DexStatsDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *DexStatsDTO) SetVid(v int64) {
	o.Vid = &v
}

func (o DexStatsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DexStatsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.VolumeInOwl.IsSet() {
		toSerialize["volume_in_owl"] = o.VolumeInOwl.Get()
	}
	if o.UtilityInOwl.IsSet() {
		toSerialize["utility_in_owl"] = o.UtilityInOwl.Get()
	}
	if o.OwlBurnt.IsSet() {
		toSerialize["owl_burnt"] = o.OwlBurnt.Get()
	}
	if !IsNil(o.SettledBatchCount) {
		toSerialize["settled_batch_count"] = o.SettledBatchCount
	}
	if !IsNil(o.SettledTradeCount) {
		toSerialize["settled_trade_count"] = o.SettledTradeCount
	}
	if !IsNil(o.ListedTokens) {
		toSerialize["listed_tokens"] = o.ListedTokens
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	return toSerialize, nil
}

type NullableDexStatsDTO struct {
	value *DexStatsDTO
	isSet bool
}

func (v NullableDexStatsDTO) Get() *DexStatsDTO {
	return v.value
}

func (v *NullableDexStatsDTO) Set(val *DexStatsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDexStatsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDexStatsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDexStatsDTO(val *DexStatsDTO) *NullableDexStatsDTO {
	return &NullableDexStatsDTO{value: val, isSet: true}
}

func (v NullableDexStatsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDexStatsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


