/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CurveGaugeLiquidityDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurveGaugeLiquidityDTO{}

// CurveGaugeLiquidityDTO struct for CurveGaugeLiquidityDTO
type CurveGaugeLiquidityDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	Id NullableString `json:"id,omitempty"`
	// 
	User NullableString `json:"user,omitempty"`
	// 
	Gauge NullableString `json:"gauge,omitempty"`
	// 
	OriginalBalance NullableString `json:"original_balance,omitempty"`
	// 
	OriginalSupply NullableString `json:"original_supply,omitempty"`
	// 
	WorkingBalance NullableString `json:"working_balance,omitempty"`
	// 
	WorkingSupply NullableString `json:"working_supply,omitempty"`
	// 
	Timestamp NullableString `json:"timestamp,omitempty"`
	// 
	Block NullableString `json:"block,omitempty"`
	// 
	Transaction NullableString `json:"transaction,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
}

// NewCurveGaugeLiquidityDTO instantiates a new CurveGaugeLiquidityDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurveGaugeLiquidityDTO() *CurveGaugeLiquidityDTO {
	this := CurveGaugeLiquidityDTO{}
	return &this
}

// NewCurveGaugeLiquidityDTOWithDefaults instantiates a new CurveGaugeLiquidityDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurveGaugeLiquidityDTOWithDefaults() *CurveGaugeLiquidityDTO {
	this := CurveGaugeLiquidityDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *CurveGaugeLiquidityDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurveGaugeLiquidityDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *CurveGaugeLiquidityDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *CurveGaugeLiquidityDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurveGaugeLiquidityDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *CurveGaugeLiquidityDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *CurveGaugeLiquidityDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurveGaugeLiquidityDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *CurveGaugeLiquidityDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CurveGaugeLiquidityDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetId() {
	o.Id.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *CurveGaugeLiquidityDTO) SetUser(v string) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetUser() {
	o.User.Unset()
}

// GetGauge returns the Gauge field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetGauge() string {
	if o == nil || IsNil(o.Gauge.Get()) {
		var ret string
		return ret
	}
	return *o.Gauge.Get()
}

// GetGaugeOk returns a tuple with the Gauge field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetGaugeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gauge.Get(), o.Gauge.IsSet()
}

// HasGauge returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasGauge() bool {
	if o != nil && o.Gauge.IsSet() {
		return true
	}

	return false
}

// SetGauge gets a reference to the given NullableString and assigns it to the Gauge field.
func (o *CurveGaugeLiquidityDTO) SetGauge(v string) {
	o.Gauge.Set(&v)
}
// SetGaugeNil sets the value for Gauge to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetGaugeNil() {
	o.Gauge.Set(nil)
}

// UnsetGauge ensures that no value is present for Gauge, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetGauge() {
	o.Gauge.Unset()
}

// GetOriginalBalance returns the OriginalBalance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetOriginalBalance() string {
	if o == nil || IsNil(o.OriginalBalance.Get()) {
		var ret string
		return ret
	}
	return *o.OriginalBalance.Get()
}

// GetOriginalBalanceOk returns a tuple with the OriginalBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetOriginalBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalBalance.Get(), o.OriginalBalance.IsSet()
}

// HasOriginalBalance returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasOriginalBalance() bool {
	if o != nil && o.OriginalBalance.IsSet() {
		return true
	}

	return false
}

// SetOriginalBalance gets a reference to the given NullableString and assigns it to the OriginalBalance field.
func (o *CurveGaugeLiquidityDTO) SetOriginalBalance(v string) {
	o.OriginalBalance.Set(&v)
}
// SetOriginalBalanceNil sets the value for OriginalBalance to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetOriginalBalanceNil() {
	o.OriginalBalance.Set(nil)
}

// UnsetOriginalBalance ensures that no value is present for OriginalBalance, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetOriginalBalance() {
	o.OriginalBalance.Unset()
}

// GetOriginalSupply returns the OriginalSupply field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetOriginalSupply() string {
	if o == nil || IsNil(o.OriginalSupply.Get()) {
		var ret string
		return ret
	}
	return *o.OriginalSupply.Get()
}

// GetOriginalSupplyOk returns a tuple with the OriginalSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetOriginalSupplyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalSupply.Get(), o.OriginalSupply.IsSet()
}

// HasOriginalSupply returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasOriginalSupply() bool {
	if o != nil && o.OriginalSupply.IsSet() {
		return true
	}

	return false
}

// SetOriginalSupply gets a reference to the given NullableString and assigns it to the OriginalSupply field.
func (o *CurveGaugeLiquidityDTO) SetOriginalSupply(v string) {
	o.OriginalSupply.Set(&v)
}
// SetOriginalSupplyNil sets the value for OriginalSupply to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetOriginalSupplyNil() {
	o.OriginalSupply.Set(nil)
}

// UnsetOriginalSupply ensures that no value is present for OriginalSupply, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetOriginalSupply() {
	o.OriginalSupply.Unset()
}

// GetWorkingBalance returns the WorkingBalance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetWorkingBalance() string {
	if o == nil || IsNil(o.WorkingBalance.Get()) {
		var ret string
		return ret
	}
	return *o.WorkingBalance.Get()
}

// GetWorkingBalanceOk returns a tuple with the WorkingBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetWorkingBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkingBalance.Get(), o.WorkingBalance.IsSet()
}

// HasWorkingBalance returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasWorkingBalance() bool {
	if o != nil && o.WorkingBalance.IsSet() {
		return true
	}

	return false
}

// SetWorkingBalance gets a reference to the given NullableString and assigns it to the WorkingBalance field.
func (o *CurveGaugeLiquidityDTO) SetWorkingBalance(v string) {
	o.WorkingBalance.Set(&v)
}
// SetWorkingBalanceNil sets the value for WorkingBalance to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetWorkingBalanceNil() {
	o.WorkingBalance.Set(nil)
}

// UnsetWorkingBalance ensures that no value is present for WorkingBalance, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetWorkingBalance() {
	o.WorkingBalance.Unset()
}

// GetWorkingSupply returns the WorkingSupply field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetWorkingSupply() string {
	if o == nil || IsNil(o.WorkingSupply.Get()) {
		var ret string
		return ret
	}
	return *o.WorkingSupply.Get()
}

// GetWorkingSupplyOk returns a tuple with the WorkingSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetWorkingSupplyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkingSupply.Get(), o.WorkingSupply.IsSet()
}

// HasWorkingSupply returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasWorkingSupply() bool {
	if o != nil && o.WorkingSupply.IsSet() {
		return true
	}

	return false
}

// SetWorkingSupply gets a reference to the given NullableString and assigns it to the WorkingSupply field.
func (o *CurveGaugeLiquidityDTO) SetWorkingSupply(v string) {
	o.WorkingSupply.Set(&v)
}
// SetWorkingSupplyNil sets the value for WorkingSupply to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetWorkingSupplyNil() {
	o.WorkingSupply.Set(nil)
}

// UnsetWorkingSupply ensures that no value is present for WorkingSupply, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetWorkingSupply() {
	o.WorkingSupply.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *CurveGaugeLiquidityDTO) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetBlock returns the Block field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetBlock() string {
	if o == nil || IsNil(o.Block.Get()) {
		var ret string
		return ret
	}
	return *o.Block.Get()
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Block.Get(), o.Block.IsSet()
}

// HasBlock returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasBlock() bool {
	if o != nil && o.Block.IsSet() {
		return true
	}

	return false
}

// SetBlock gets a reference to the given NullableString and assigns it to the Block field.
func (o *CurveGaugeLiquidityDTO) SetBlock(v string) {
	o.Block.Set(&v)
}
// SetBlockNil sets the value for Block to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetBlockNil() {
	o.Block.Set(nil)
}

// UnsetBlock ensures that no value is present for Block, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetBlock() {
	o.Block.Unset()
}

// GetTransaction returns the Transaction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurveGaugeLiquidityDTO) GetTransaction() string {
	if o == nil || IsNil(o.Transaction.Get()) {
		var ret string
		return ret
	}
	return *o.Transaction.Get()
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurveGaugeLiquidityDTO) GetTransactionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transaction.Get(), o.Transaction.IsSet()
}

// HasTransaction returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasTransaction() bool {
	if o != nil && o.Transaction.IsSet() {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given NullableString and assigns it to the Transaction field.
func (o *CurveGaugeLiquidityDTO) SetTransaction(v string) {
	o.Transaction.Set(&v)
}
// SetTransactionNil sets the value for Transaction to be an explicit nil
func (o *CurveGaugeLiquidityDTO) SetTransactionNil() {
	o.Transaction.Set(nil)
}

// UnsetTransaction ensures that no value is present for Transaction, not even an explicit nil
func (o *CurveGaugeLiquidityDTO) UnsetTransaction() {
	o.Transaction.Unset()
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *CurveGaugeLiquidityDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurveGaugeLiquidityDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *CurveGaugeLiquidityDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *CurveGaugeLiquidityDTO) SetVid(v int64) {
	o.Vid = &v
}

func (o CurveGaugeLiquidityDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurveGaugeLiquidityDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	if o.Gauge.IsSet() {
		toSerialize["gauge"] = o.Gauge.Get()
	}
	if o.OriginalBalance.IsSet() {
		toSerialize["original_balance"] = o.OriginalBalance.Get()
	}
	if o.OriginalSupply.IsSet() {
		toSerialize["original_supply"] = o.OriginalSupply.Get()
	}
	if o.WorkingBalance.IsSet() {
		toSerialize["working_balance"] = o.WorkingBalance.Get()
	}
	if o.WorkingSupply.IsSet() {
		toSerialize["working_supply"] = o.WorkingSupply.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Block.IsSet() {
		toSerialize["block"] = o.Block.Get()
	}
	if o.Transaction.IsSet() {
		toSerialize["transaction"] = o.Transaction.Get()
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	return toSerialize, nil
}

type NullableCurveGaugeLiquidityDTO struct {
	value *CurveGaugeLiquidityDTO
	isSet bool
}

func (v NullableCurveGaugeLiquidityDTO) Get() *CurveGaugeLiquidityDTO {
	return v.value
}

func (v *NullableCurveGaugeLiquidityDTO) Set(val *CurveGaugeLiquidityDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCurveGaugeLiquidityDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCurveGaugeLiquidityDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurveGaugeLiquidityDTO(val *CurveGaugeLiquidityDTO) *NullableCurveGaugeLiquidityDTO {
	return &NullableCurveGaugeLiquidityDTO{value: val, isSet: true}
}

func (v NullableCurveGaugeLiquidityDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurveGaugeLiquidityDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


