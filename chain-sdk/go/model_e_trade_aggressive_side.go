/*
OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ETradeAggressiveSide the model 'ETradeAggressiveSide'
type ETradeAggressiveSide string

// List of ETradeAggressiveSide
const (
	BUY ETradeAggressiveSide = "Buy"
	SELL ETradeAggressiveSide = "Sell"
	ESTIMATED_BUY ETradeAggressiveSide = "EstimatedBuy"
	ESTIMATED_SELL ETradeAggressiveSide = "EstimatedSell"
	UNKNOWN ETradeAggressiveSide = "Unknown"
)

// All allowed values of ETradeAggressiveSide enum
var AllowedETradeAggressiveSideEnumValues = []ETradeAggressiveSide{
	"Buy",
	"Sell",
	"EstimatedBuy",
	"EstimatedSell",
	"Unknown",
}

func (v *ETradeAggressiveSide) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ETradeAggressiveSide(value)
	for _, existing := range AllowedETradeAggressiveSideEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ETradeAggressiveSide", value)
}

// NewETradeAggressiveSideFromValue returns a pointer to a valid ETradeAggressiveSide
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewETradeAggressiveSideFromValue(v string) (*ETradeAggressiveSide, error) {
	ev := ETradeAggressiveSide(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ETradeAggressiveSide: valid values are %v", v, AllowedETradeAggressiveSideEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ETradeAggressiveSide) IsValid() bool {
	for _, existing := range AllowedETradeAggressiveSideEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ETradeAggressiveSide value
func (v ETradeAggressiveSide) Ptr() *ETradeAggressiveSide {
	return &v
}

type NullableETradeAggressiveSide struct {
	value *ETradeAggressiveSide
	isSet bool
}

func (v NullableETradeAggressiveSide) Get() *ETradeAggressiveSide {
	return v.value
}

func (v *NullableETradeAggressiveSide) Set(val *ETradeAggressiveSide) {
	v.value = val
	v.isSet = true
}

func (v NullableETradeAggressiveSide) IsSet() bool {
	return v.isSet
}

func (v *NullableETradeAggressiveSide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableETradeAggressiveSide(val *ETradeAggressiveSide) *NullableETradeAggressiveSide {
	return &NullableETradeAggressiveSide{value: val, isSet: true}
}

func (v NullableETradeAggressiveSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableETradeAggressiveSide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

