/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UniswapV2PairDayDataDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniswapV2PairDayDataDTO{}

// UniswapV2PairDayDataDTO Tracks pair data across each day.
type UniswapV2PairDayDataDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	Id NullableString `json:"id,omitempty"`
	// Unix timestamp for start of day.
	Date *int32 `json:"date,omitempty"`
	// Address for pair contract.
	PairAddress NullableString `json:"pair_address,omitempty"`
	// Reference to token0.
	Token0 NullableString `json:"token_0,omitempty"`
	// Reference to token1.
	Token1 NullableString `json:"token_1,omitempty"`
	// Reserve of token0 (updated during each transaction on pair).
	Reserve0 NullableString `json:"reserve_0,omitempty"`
	// Reserve of token1 (updated during each transaction on pair).
	Reserve1 NullableString `json:"reserve_1,omitempty"`
	// Total supply of liquidity token distributed to LPs.
	TotalSupply NullableString `json:"total_supply,omitempty"`
	// Reserve of token0 plus token1 stored as a derived USD amount.
	ReserveUsd NullableString `json:"reserve_usd,omitempty"`
	// Total amount of token0 swapped throughout day.
	DailyVolumeToken0 NullableString `json:"daily_volume_token_0,omitempty"`
	// Total amount of token1 swapped throughout day.
	DailyVolumeToken1 NullableString `json:"daily_volume_token_1,omitempty"`
	// Total volume within pair throughout day.
	DailyVolumeUsd NullableString `json:"daily_volume_usd,omitempty"`
	// Amount of transactions on pair throughout day.
	DailyTxns NullableString `json:"daily_txns,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
}

// NewUniswapV2PairDayDataDTO instantiates a new UniswapV2PairDayDataDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniswapV2PairDayDataDTO() *UniswapV2PairDayDataDTO {
	this := UniswapV2PairDayDataDTO{}
	return &this
}

// NewUniswapV2PairDayDataDTOWithDefaults instantiates a new UniswapV2PairDayDataDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniswapV2PairDayDataDTOWithDefaults() *UniswapV2PairDayDataDTO {
	this := UniswapV2PairDayDataDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UniswapV2PairDayDataDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2PairDayDataDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UniswapV2PairDayDataDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UniswapV2PairDayDataDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2PairDayDataDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UniswapV2PairDayDataDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UniswapV2PairDayDataDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2PairDayDataDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UniswapV2PairDayDataDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UniswapV2PairDayDataDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetId() {
	o.Id.Unset()
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *UniswapV2PairDayDataDTO) GetDate() int32 {
	if o == nil || IsNil(o.Date) {
		var ret int32
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2PairDayDataDTO) GetDateOk() (*int32, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given int32 and assigns it to the Date field.
func (o *UniswapV2PairDayDataDTO) SetDate(v int32) {
	o.Date = &v
}

// GetPairAddress returns the PairAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetPairAddress() string {
	if o == nil || IsNil(o.PairAddress.Get()) {
		var ret string
		return ret
	}
	return *o.PairAddress.Get()
}

// GetPairAddressOk returns a tuple with the PairAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetPairAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PairAddress.Get(), o.PairAddress.IsSet()
}

// HasPairAddress returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasPairAddress() bool {
	if o != nil && o.PairAddress.IsSet() {
		return true
	}

	return false
}

// SetPairAddress gets a reference to the given NullableString and assigns it to the PairAddress field.
func (o *UniswapV2PairDayDataDTO) SetPairAddress(v string) {
	o.PairAddress.Set(&v)
}
// SetPairAddressNil sets the value for PairAddress to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetPairAddressNil() {
	o.PairAddress.Set(nil)
}

// UnsetPairAddress ensures that no value is present for PairAddress, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetPairAddress() {
	o.PairAddress.Unset()
}

// GetToken0 returns the Token0 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetToken0() string {
	if o == nil || IsNil(o.Token0.Get()) {
		var ret string
		return ret
	}
	return *o.Token0.Get()
}

// GetToken0Ok returns a tuple with the Token0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetToken0Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Token0.Get(), o.Token0.IsSet()
}

// HasToken0 returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasToken0() bool {
	if o != nil && o.Token0.IsSet() {
		return true
	}

	return false
}

// SetToken0 gets a reference to the given NullableString and assigns it to the Token0 field.
func (o *UniswapV2PairDayDataDTO) SetToken0(v string) {
	o.Token0.Set(&v)
}
// SetToken0Nil sets the value for Token0 to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetToken0Nil() {
	o.Token0.Set(nil)
}

// UnsetToken0 ensures that no value is present for Token0, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetToken0() {
	o.Token0.Unset()
}

// GetToken1 returns the Token1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetToken1() string {
	if o == nil || IsNil(o.Token1.Get()) {
		var ret string
		return ret
	}
	return *o.Token1.Get()
}

// GetToken1Ok returns a tuple with the Token1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetToken1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Token1.Get(), o.Token1.IsSet()
}

// HasToken1 returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasToken1() bool {
	if o != nil && o.Token1.IsSet() {
		return true
	}

	return false
}

// SetToken1 gets a reference to the given NullableString and assigns it to the Token1 field.
func (o *UniswapV2PairDayDataDTO) SetToken1(v string) {
	o.Token1.Set(&v)
}
// SetToken1Nil sets the value for Token1 to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetToken1Nil() {
	o.Token1.Set(nil)
}

// UnsetToken1 ensures that no value is present for Token1, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetToken1() {
	o.Token1.Unset()
}

// GetReserve0 returns the Reserve0 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetReserve0() string {
	if o == nil || IsNil(o.Reserve0.Get()) {
		var ret string
		return ret
	}
	return *o.Reserve0.Get()
}

// GetReserve0Ok returns a tuple with the Reserve0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetReserve0Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reserve0.Get(), o.Reserve0.IsSet()
}

// HasReserve0 returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasReserve0() bool {
	if o != nil && o.Reserve0.IsSet() {
		return true
	}

	return false
}

// SetReserve0 gets a reference to the given NullableString and assigns it to the Reserve0 field.
func (o *UniswapV2PairDayDataDTO) SetReserve0(v string) {
	o.Reserve0.Set(&v)
}
// SetReserve0Nil sets the value for Reserve0 to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetReserve0Nil() {
	o.Reserve0.Set(nil)
}

// UnsetReserve0 ensures that no value is present for Reserve0, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetReserve0() {
	o.Reserve0.Unset()
}

// GetReserve1 returns the Reserve1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetReserve1() string {
	if o == nil || IsNil(o.Reserve1.Get()) {
		var ret string
		return ret
	}
	return *o.Reserve1.Get()
}

// GetReserve1Ok returns a tuple with the Reserve1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetReserve1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reserve1.Get(), o.Reserve1.IsSet()
}

// HasReserve1 returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasReserve1() bool {
	if o != nil && o.Reserve1.IsSet() {
		return true
	}

	return false
}

// SetReserve1 gets a reference to the given NullableString and assigns it to the Reserve1 field.
func (o *UniswapV2PairDayDataDTO) SetReserve1(v string) {
	o.Reserve1.Set(&v)
}
// SetReserve1Nil sets the value for Reserve1 to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetReserve1Nil() {
	o.Reserve1.Set(nil)
}

// UnsetReserve1 ensures that no value is present for Reserve1, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetReserve1() {
	o.Reserve1.Unset()
}

// GetTotalSupply returns the TotalSupply field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetTotalSupply() string {
	if o == nil || IsNil(o.TotalSupply.Get()) {
		var ret string
		return ret
	}
	return *o.TotalSupply.Get()
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetTotalSupplyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalSupply.Get(), o.TotalSupply.IsSet()
}

// HasTotalSupply returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasTotalSupply() bool {
	if o != nil && o.TotalSupply.IsSet() {
		return true
	}

	return false
}

// SetTotalSupply gets a reference to the given NullableString and assigns it to the TotalSupply field.
func (o *UniswapV2PairDayDataDTO) SetTotalSupply(v string) {
	o.TotalSupply.Set(&v)
}
// SetTotalSupplyNil sets the value for TotalSupply to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetTotalSupplyNil() {
	o.TotalSupply.Set(nil)
}

// UnsetTotalSupply ensures that no value is present for TotalSupply, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetTotalSupply() {
	o.TotalSupply.Unset()
}

// GetReserveUsd returns the ReserveUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetReserveUsd() string {
	if o == nil || IsNil(o.ReserveUsd.Get()) {
		var ret string
		return ret
	}
	return *o.ReserveUsd.Get()
}

// GetReserveUsdOk returns a tuple with the ReserveUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetReserveUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReserveUsd.Get(), o.ReserveUsd.IsSet()
}

// HasReserveUsd returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasReserveUsd() bool {
	if o != nil && o.ReserveUsd.IsSet() {
		return true
	}

	return false
}

// SetReserveUsd gets a reference to the given NullableString and assigns it to the ReserveUsd field.
func (o *UniswapV2PairDayDataDTO) SetReserveUsd(v string) {
	o.ReserveUsd.Set(&v)
}
// SetReserveUsdNil sets the value for ReserveUsd to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetReserveUsdNil() {
	o.ReserveUsd.Set(nil)
}

// UnsetReserveUsd ensures that no value is present for ReserveUsd, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetReserveUsd() {
	o.ReserveUsd.Unset()
}

// GetDailyVolumeToken0 returns the DailyVolumeToken0 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetDailyVolumeToken0() string {
	if o == nil || IsNil(o.DailyVolumeToken0.Get()) {
		var ret string
		return ret
	}
	return *o.DailyVolumeToken0.Get()
}

// GetDailyVolumeToken0Ok returns a tuple with the DailyVolumeToken0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetDailyVolumeToken0Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DailyVolumeToken0.Get(), o.DailyVolumeToken0.IsSet()
}

// HasDailyVolumeToken0 returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasDailyVolumeToken0() bool {
	if o != nil && o.DailyVolumeToken0.IsSet() {
		return true
	}

	return false
}

// SetDailyVolumeToken0 gets a reference to the given NullableString and assigns it to the DailyVolumeToken0 field.
func (o *UniswapV2PairDayDataDTO) SetDailyVolumeToken0(v string) {
	o.DailyVolumeToken0.Set(&v)
}
// SetDailyVolumeToken0Nil sets the value for DailyVolumeToken0 to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetDailyVolumeToken0Nil() {
	o.DailyVolumeToken0.Set(nil)
}

// UnsetDailyVolumeToken0 ensures that no value is present for DailyVolumeToken0, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetDailyVolumeToken0() {
	o.DailyVolumeToken0.Unset()
}

// GetDailyVolumeToken1 returns the DailyVolumeToken1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetDailyVolumeToken1() string {
	if o == nil || IsNil(o.DailyVolumeToken1.Get()) {
		var ret string
		return ret
	}
	return *o.DailyVolumeToken1.Get()
}

// GetDailyVolumeToken1Ok returns a tuple with the DailyVolumeToken1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetDailyVolumeToken1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DailyVolumeToken1.Get(), o.DailyVolumeToken1.IsSet()
}

// HasDailyVolumeToken1 returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasDailyVolumeToken1() bool {
	if o != nil && o.DailyVolumeToken1.IsSet() {
		return true
	}

	return false
}

// SetDailyVolumeToken1 gets a reference to the given NullableString and assigns it to the DailyVolumeToken1 field.
func (o *UniswapV2PairDayDataDTO) SetDailyVolumeToken1(v string) {
	o.DailyVolumeToken1.Set(&v)
}
// SetDailyVolumeToken1Nil sets the value for DailyVolumeToken1 to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetDailyVolumeToken1Nil() {
	o.DailyVolumeToken1.Set(nil)
}

// UnsetDailyVolumeToken1 ensures that no value is present for DailyVolumeToken1, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetDailyVolumeToken1() {
	o.DailyVolumeToken1.Unset()
}

// GetDailyVolumeUsd returns the DailyVolumeUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetDailyVolumeUsd() string {
	if o == nil || IsNil(o.DailyVolumeUsd.Get()) {
		var ret string
		return ret
	}
	return *o.DailyVolumeUsd.Get()
}

// GetDailyVolumeUsdOk returns a tuple with the DailyVolumeUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetDailyVolumeUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DailyVolumeUsd.Get(), o.DailyVolumeUsd.IsSet()
}

// HasDailyVolumeUsd returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasDailyVolumeUsd() bool {
	if o != nil && o.DailyVolumeUsd.IsSet() {
		return true
	}

	return false
}

// SetDailyVolumeUsd gets a reference to the given NullableString and assigns it to the DailyVolumeUsd field.
func (o *UniswapV2PairDayDataDTO) SetDailyVolumeUsd(v string) {
	o.DailyVolumeUsd.Set(&v)
}
// SetDailyVolumeUsdNil sets the value for DailyVolumeUsd to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetDailyVolumeUsdNil() {
	o.DailyVolumeUsd.Set(nil)
}

// UnsetDailyVolumeUsd ensures that no value is present for DailyVolumeUsd, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetDailyVolumeUsd() {
	o.DailyVolumeUsd.Unset()
}

// GetDailyTxns returns the DailyTxns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2PairDayDataDTO) GetDailyTxns() string {
	if o == nil || IsNil(o.DailyTxns.Get()) {
		var ret string
		return ret
	}
	return *o.DailyTxns.Get()
}

// GetDailyTxnsOk returns a tuple with the DailyTxns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2PairDayDataDTO) GetDailyTxnsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DailyTxns.Get(), o.DailyTxns.IsSet()
}

// HasDailyTxns returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasDailyTxns() bool {
	if o != nil && o.DailyTxns.IsSet() {
		return true
	}

	return false
}

// SetDailyTxns gets a reference to the given NullableString and assigns it to the DailyTxns field.
func (o *UniswapV2PairDayDataDTO) SetDailyTxns(v string) {
	o.DailyTxns.Set(&v)
}
// SetDailyTxnsNil sets the value for DailyTxns to be an explicit nil
func (o *UniswapV2PairDayDataDTO) SetDailyTxnsNil() {
	o.DailyTxns.Set(nil)
}

// UnsetDailyTxns ensures that no value is present for DailyTxns, not even an explicit nil
func (o *UniswapV2PairDayDataDTO) UnsetDailyTxns() {
	o.DailyTxns.Unset()
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *UniswapV2PairDayDataDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2PairDayDataDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *UniswapV2PairDayDataDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *UniswapV2PairDayDataDTO) SetVid(v int64) {
	o.Vid = &v
}

func (o UniswapV2PairDayDataDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniswapV2PairDayDataDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if o.PairAddress.IsSet() {
		toSerialize["pair_address"] = o.PairAddress.Get()
	}
	if o.Token0.IsSet() {
		toSerialize["token_0"] = o.Token0.Get()
	}
	if o.Token1.IsSet() {
		toSerialize["token_1"] = o.Token1.Get()
	}
	if o.Reserve0.IsSet() {
		toSerialize["reserve_0"] = o.Reserve0.Get()
	}
	if o.Reserve1.IsSet() {
		toSerialize["reserve_1"] = o.Reserve1.Get()
	}
	if o.TotalSupply.IsSet() {
		toSerialize["total_supply"] = o.TotalSupply.Get()
	}
	if o.ReserveUsd.IsSet() {
		toSerialize["reserve_usd"] = o.ReserveUsd.Get()
	}
	if o.DailyVolumeToken0.IsSet() {
		toSerialize["daily_volume_token_0"] = o.DailyVolumeToken0.Get()
	}
	if o.DailyVolumeToken1.IsSet() {
		toSerialize["daily_volume_token_1"] = o.DailyVolumeToken1.Get()
	}
	if o.DailyVolumeUsd.IsSet() {
		toSerialize["daily_volume_usd"] = o.DailyVolumeUsd.Get()
	}
	if o.DailyTxns.IsSet() {
		toSerialize["daily_txns"] = o.DailyTxns.Get()
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	return toSerialize, nil
}

type NullableUniswapV2PairDayDataDTO struct {
	value *UniswapV2PairDayDataDTO
	isSet bool
}

func (v NullableUniswapV2PairDayDataDTO) Get() *UniswapV2PairDayDataDTO {
	return v.value
}

func (v *NullableUniswapV2PairDayDataDTO) Set(val *UniswapV2PairDayDataDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUniswapV2PairDayDataDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUniswapV2PairDayDataDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniswapV2PairDayDataDTO(val *UniswapV2PairDayDataDTO) *NullableUniswapV2PairDayDataDTO {
	return &NullableUniswapV2PairDayDataDTO{value: val, isSet: true}
}

func (v NullableUniswapV2PairDayDataDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniswapV2PairDayDataDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


