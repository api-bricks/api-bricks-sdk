/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DexBatchDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DexBatchDTO{}

// DexBatchDTO Batch executed. Every batch will contain at least solution with the a set of trades that are executed in it
type DexBatchDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// Identifier.
	Id NullableString `json:"id,omitempty"`
	// Start epoch.
	StartEpoch NullableString `json:"start_epoch,omitempty"`
	// End epoch.
	EndEpoch NullableString `json:"end_epoch,omitempty"`
	// Reference to solution.
	Solution NullableString `json:"solution,omitempty"`
	// First solution epoch.
	FirstSolutionEpoch NullableString `json:"first_solution_epoch,omitempty"`
	// Last revert epoch.
	LastRevertEpoch NullableString `json:"last_revert_epoch,omitempty"`
	// Transaction hash.
	TxHash NullableString `json:"tx_hash,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
}

// NewDexBatchDTO instantiates a new DexBatchDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDexBatchDTO() *DexBatchDTO {
	this := DexBatchDTO{}
	return &this
}

// NewDexBatchDTOWithDefaults instantiates a new DexBatchDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDexBatchDTOWithDefaults() *DexBatchDTO {
	this := DexBatchDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *DexBatchDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexBatchDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *DexBatchDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *DexBatchDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *DexBatchDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexBatchDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *DexBatchDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *DexBatchDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *DexBatchDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexBatchDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *DexBatchDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *DexBatchDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexBatchDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexBatchDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DexBatchDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DexBatchDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DexBatchDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DexBatchDTO) UnsetId() {
	o.Id.Unset()
}

// GetStartEpoch returns the StartEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexBatchDTO) GetStartEpoch() string {
	if o == nil || IsNil(o.StartEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.StartEpoch.Get()
}

// GetStartEpochOk returns a tuple with the StartEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexBatchDTO) GetStartEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartEpoch.Get(), o.StartEpoch.IsSet()
}

// HasStartEpoch returns a boolean if a field has been set.
func (o *DexBatchDTO) HasStartEpoch() bool {
	if o != nil && o.StartEpoch.IsSet() {
		return true
	}

	return false
}

// SetStartEpoch gets a reference to the given NullableString and assigns it to the StartEpoch field.
func (o *DexBatchDTO) SetStartEpoch(v string) {
	o.StartEpoch.Set(&v)
}
// SetStartEpochNil sets the value for StartEpoch to be an explicit nil
func (o *DexBatchDTO) SetStartEpochNil() {
	o.StartEpoch.Set(nil)
}

// UnsetStartEpoch ensures that no value is present for StartEpoch, not even an explicit nil
func (o *DexBatchDTO) UnsetStartEpoch() {
	o.StartEpoch.Unset()
}

// GetEndEpoch returns the EndEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexBatchDTO) GetEndEpoch() string {
	if o == nil || IsNil(o.EndEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.EndEpoch.Get()
}

// GetEndEpochOk returns a tuple with the EndEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexBatchDTO) GetEndEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndEpoch.Get(), o.EndEpoch.IsSet()
}

// HasEndEpoch returns a boolean if a field has been set.
func (o *DexBatchDTO) HasEndEpoch() bool {
	if o != nil && o.EndEpoch.IsSet() {
		return true
	}

	return false
}

// SetEndEpoch gets a reference to the given NullableString and assigns it to the EndEpoch field.
func (o *DexBatchDTO) SetEndEpoch(v string) {
	o.EndEpoch.Set(&v)
}
// SetEndEpochNil sets the value for EndEpoch to be an explicit nil
func (o *DexBatchDTO) SetEndEpochNil() {
	o.EndEpoch.Set(nil)
}

// UnsetEndEpoch ensures that no value is present for EndEpoch, not even an explicit nil
func (o *DexBatchDTO) UnsetEndEpoch() {
	o.EndEpoch.Unset()
}

// GetSolution returns the Solution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexBatchDTO) GetSolution() string {
	if o == nil || IsNil(o.Solution.Get()) {
		var ret string
		return ret
	}
	return *o.Solution.Get()
}

// GetSolutionOk returns a tuple with the Solution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexBatchDTO) GetSolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Solution.Get(), o.Solution.IsSet()
}

// HasSolution returns a boolean if a field has been set.
func (o *DexBatchDTO) HasSolution() bool {
	if o != nil && o.Solution.IsSet() {
		return true
	}

	return false
}

// SetSolution gets a reference to the given NullableString and assigns it to the Solution field.
func (o *DexBatchDTO) SetSolution(v string) {
	o.Solution.Set(&v)
}
// SetSolutionNil sets the value for Solution to be an explicit nil
func (o *DexBatchDTO) SetSolutionNil() {
	o.Solution.Set(nil)
}

// UnsetSolution ensures that no value is present for Solution, not even an explicit nil
func (o *DexBatchDTO) UnsetSolution() {
	o.Solution.Unset()
}

// GetFirstSolutionEpoch returns the FirstSolutionEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexBatchDTO) GetFirstSolutionEpoch() string {
	if o == nil || IsNil(o.FirstSolutionEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.FirstSolutionEpoch.Get()
}

// GetFirstSolutionEpochOk returns a tuple with the FirstSolutionEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexBatchDTO) GetFirstSolutionEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstSolutionEpoch.Get(), o.FirstSolutionEpoch.IsSet()
}

// HasFirstSolutionEpoch returns a boolean if a field has been set.
func (o *DexBatchDTO) HasFirstSolutionEpoch() bool {
	if o != nil && o.FirstSolutionEpoch.IsSet() {
		return true
	}

	return false
}

// SetFirstSolutionEpoch gets a reference to the given NullableString and assigns it to the FirstSolutionEpoch field.
func (o *DexBatchDTO) SetFirstSolutionEpoch(v string) {
	o.FirstSolutionEpoch.Set(&v)
}
// SetFirstSolutionEpochNil sets the value for FirstSolutionEpoch to be an explicit nil
func (o *DexBatchDTO) SetFirstSolutionEpochNil() {
	o.FirstSolutionEpoch.Set(nil)
}

// UnsetFirstSolutionEpoch ensures that no value is present for FirstSolutionEpoch, not even an explicit nil
func (o *DexBatchDTO) UnsetFirstSolutionEpoch() {
	o.FirstSolutionEpoch.Unset()
}

// GetLastRevertEpoch returns the LastRevertEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexBatchDTO) GetLastRevertEpoch() string {
	if o == nil || IsNil(o.LastRevertEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.LastRevertEpoch.Get()
}

// GetLastRevertEpochOk returns a tuple with the LastRevertEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexBatchDTO) GetLastRevertEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastRevertEpoch.Get(), o.LastRevertEpoch.IsSet()
}

// HasLastRevertEpoch returns a boolean if a field has been set.
func (o *DexBatchDTO) HasLastRevertEpoch() bool {
	if o != nil && o.LastRevertEpoch.IsSet() {
		return true
	}

	return false
}

// SetLastRevertEpoch gets a reference to the given NullableString and assigns it to the LastRevertEpoch field.
func (o *DexBatchDTO) SetLastRevertEpoch(v string) {
	o.LastRevertEpoch.Set(&v)
}
// SetLastRevertEpochNil sets the value for LastRevertEpoch to be an explicit nil
func (o *DexBatchDTO) SetLastRevertEpochNil() {
	o.LastRevertEpoch.Set(nil)
}

// UnsetLastRevertEpoch ensures that no value is present for LastRevertEpoch, not even an explicit nil
func (o *DexBatchDTO) UnsetLastRevertEpoch() {
	o.LastRevertEpoch.Unset()
}

// GetTxHash returns the TxHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexBatchDTO) GetTxHash() string {
	if o == nil || IsNil(o.TxHash.Get()) {
		var ret string
		return ret
	}
	return *o.TxHash.Get()
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexBatchDTO) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxHash.Get(), o.TxHash.IsSet()
}

// HasTxHash returns a boolean if a field has been set.
func (o *DexBatchDTO) HasTxHash() bool {
	if o != nil && o.TxHash.IsSet() {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given NullableString and assigns it to the TxHash field.
func (o *DexBatchDTO) SetTxHash(v string) {
	o.TxHash.Set(&v)
}
// SetTxHashNil sets the value for TxHash to be an explicit nil
func (o *DexBatchDTO) SetTxHashNil() {
	o.TxHash.Set(nil)
}

// UnsetTxHash ensures that no value is present for TxHash, not even an explicit nil
func (o *DexBatchDTO) UnsetTxHash() {
	o.TxHash.Unset()
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *DexBatchDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexBatchDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *DexBatchDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *DexBatchDTO) SetVid(v int64) {
	o.Vid = &v
}

func (o DexBatchDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DexBatchDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.StartEpoch.IsSet() {
		toSerialize["start_epoch"] = o.StartEpoch.Get()
	}
	if o.EndEpoch.IsSet() {
		toSerialize["end_epoch"] = o.EndEpoch.Get()
	}
	if o.Solution.IsSet() {
		toSerialize["solution"] = o.Solution.Get()
	}
	if o.FirstSolutionEpoch.IsSet() {
		toSerialize["first_solution_epoch"] = o.FirstSolutionEpoch.Get()
	}
	if o.LastRevertEpoch.IsSet() {
		toSerialize["last_revert_epoch"] = o.LastRevertEpoch.Get()
	}
	if o.TxHash.IsSet() {
		toSerialize["tx_hash"] = o.TxHash.Get()
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	return toSerialize, nil
}

type NullableDexBatchDTO struct {
	value *DexBatchDTO
	isSet bool
}

func (v NullableDexBatchDTO) Get() *DexBatchDTO {
	return v.value
}

func (v *NullableDexBatchDTO) Set(val *DexBatchDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDexBatchDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDexBatchDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDexBatchDTO(val *DexBatchDTO) *NullableDexBatchDTO {
	return &NullableDexBatchDTO{value: val, isSet: true}
}

func (v NullableDexBatchDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDexBatchDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


