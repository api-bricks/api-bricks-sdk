/*
OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)


// CowApiService CowApi service
type CowApiService service

type ApiCowGetOrderDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiCowGetOrderDTOsHistoricalRequest) StartBlock(startBlock int64) ApiCowGetOrderDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetOrderDTOsHistoricalRequest) EndBlock(endBlock int64) ApiCowGetOrderDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetOrderDTOsHistoricalRequest) StartDate(startDate time.Time) ApiCowGetOrderDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiCowGetOrderDTOsHistoricalRequest) EndDate(endDate time.Time) ApiCowGetOrderDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiCowGetOrderDTOsHistoricalRequest) PoolId(poolId string) ApiCowGetOrderDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiCowGetOrderDTOsHistoricalRequest) Execute() ([]CowOrderDTO, *http.Response, error) {
	return r.ApiService.CowGetOrderDTOsHistoricalExecute(r)
}

/*
CowGetOrderDTOsHistorical OrderDTOs (historical) ðŸ”¥

Gets OrderDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetOrderDTOsHistoricalRequest
*/
func (a *CowApiService) CowGetOrderDTOsHistorical(ctx context.Context) ApiCowGetOrderDTOsHistoricalRequest {
	return ApiCowGetOrderDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowOrderDTO
func (a *CowApiService) CowGetOrderDTOsHistoricalExecute(r ApiCowGetOrderDTOsHistoricalRequest) ([]CowOrderDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowOrderDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetOrderDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/OrderDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCowGetOrdersHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// 
func (r ApiCowGetOrdersHistoricalRequest) StartBlock(startBlock int64) ApiCowGetOrdersHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetOrdersHistoricalRequest) EndBlock(endBlock int64) ApiCowGetOrdersHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetOrdersHistoricalRequest) StartDate(startDate time.Time) ApiCowGetOrdersHistoricalRequest {
	r.startDate = &startDate
	return r
}

func (r ApiCowGetOrdersHistoricalRequest) EndDate(endDate time.Time) ApiCowGetOrdersHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiCowGetOrdersHistoricalRequest) Execute() ([]CowOrderDTO, *http.Response, error) {
	return r.ApiService.CowGetOrdersHistoricalExecute(r)
}

/*
CowGetOrdersHistorical Orders (historical)

Gets orders.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetOrdersHistoricalRequest
*/
func (a *CowApiService) CowGetOrdersHistorical(ctx context.Context) ApiCowGetOrdersHistoricalRequest {
	return ApiCowGetOrdersHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowOrderDTO
func (a *CowApiService) CowGetOrdersHistoricalExecute(r ApiCowGetOrdersHistoricalRequest) ([]CowOrderDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowOrderDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetOrdersHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/orders/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCowGetSettlementDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiCowGetSettlementDTOsHistoricalRequest) StartBlock(startBlock int64) ApiCowGetSettlementDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetSettlementDTOsHistoricalRequest) EndBlock(endBlock int64) ApiCowGetSettlementDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetSettlementDTOsHistoricalRequest) StartDate(startDate time.Time) ApiCowGetSettlementDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiCowGetSettlementDTOsHistoricalRequest) EndDate(endDate time.Time) ApiCowGetSettlementDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiCowGetSettlementDTOsHistoricalRequest) PoolId(poolId string) ApiCowGetSettlementDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiCowGetSettlementDTOsHistoricalRequest) Execute() ([]CowSettlementDTO, *http.Response, error) {
	return r.ApiService.CowGetSettlementDTOsHistoricalExecute(r)
}

/*
CowGetSettlementDTOsHistorical SettlementDTOs (historical) ðŸ”¥

Gets SettlementDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetSettlementDTOsHistoricalRequest
*/
func (a *CowApiService) CowGetSettlementDTOsHistorical(ctx context.Context) ApiCowGetSettlementDTOsHistoricalRequest {
	return ApiCowGetSettlementDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowSettlementDTO
func (a *CowApiService) CowGetSettlementDTOsHistoricalExecute(r ApiCowGetSettlementDTOsHistoricalRequest) ([]CowSettlementDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowSettlementDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetSettlementDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/SettlementDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCowGetSettlementsHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// 
func (r ApiCowGetSettlementsHistoricalRequest) StartBlock(startBlock int64) ApiCowGetSettlementsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetSettlementsHistoricalRequest) EndBlock(endBlock int64) ApiCowGetSettlementsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetSettlementsHistoricalRequest) StartDate(startDate time.Time) ApiCowGetSettlementsHistoricalRequest {
	r.startDate = &startDate
	return r
}

func (r ApiCowGetSettlementsHistoricalRequest) EndDate(endDate time.Time) ApiCowGetSettlementsHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiCowGetSettlementsHistoricalRequest) Execute() ([]CowSettlementDTO, *http.Response, error) {
	return r.ApiService.CowGetSettlementsHistoricalExecute(r)
}

/*
CowGetSettlementsHistorical Settlements (historical)

Gets settlements.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetSettlementsHistoricalRequest
*/
func (a *CowApiService) CowGetSettlementsHistorical(ctx context.Context) ApiCowGetSettlementsHistoricalRequest {
	return ApiCowGetSettlementsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowSettlementDTO
func (a *CowApiService) CowGetSettlementsHistoricalExecute(r ApiCowGetSettlementsHistoricalRequest) ([]CowSettlementDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowSettlementDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetSettlementsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/settlements/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCowGetTokenDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiCowGetTokenDTOsHistoricalRequest) StartBlock(startBlock int64) ApiCowGetTokenDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetTokenDTOsHistoricalRequest) EndBlock(endBlock int64) ApiCowGetTokenDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetTokenDTOsHistoricalRequest) StartDate(startDate time.Time) ApiCowGetTokenDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiCowGetTokenDTOsHistoricalRequest) EndDate(endDate time.Time) ApiCowGetTokenDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiCowGetTokenDTOsHistoricalRequest) PoolId(poolId string) ApiCowGetTokenDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiCowGetTokenDTOsHistoricalRequest) Execute() ([]CowTokenDTO, *http.Response, error) {
	return r.ApiService.CowGetTokenDTOsHistoricalExecute(r)
}

/*
CowGetTokenDTOsHistorical TokenDTOs (historical) ðŸ”¥

Gets TokenDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetTokenDTOsHistoricalRequest
*/
func (a *CowApiService) CowGetTokenDTOsHistorical(ctx context.Context) ApiCowGetTokenDTOsHistoricalRequest {
	return ApiCowGetTokenDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowTokenDTO
func (a *CowApiService) CowGetTokenDTOsHistoricalExecute(r ApiCowGetTokenDTOsHistoricalRequest) ([]CowTokenDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowTokenDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetTokenDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/TokenDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCowGetTokensHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

// 
func (r ApiCowGetTokensHistoricalRequest) StartBlock(startBlock int64) ApiCowGetTokensHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetTokensHistoricalRequest) EndBlock(endBlock int64) ApiCowGetTokensHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetTokensHistoricalRequest) StartDate(startDate time.Time) ApiCowGetTokensHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiCowGetTokensHistoricalRequest) EndDate(endDate time.Time) ApiCowGetTokensHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiCowGetTokensHistoricalRequest) TokenId(tokenId string) ApiCowGetTokensHistoricalRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiCowGetTokensHistoricalRequest) Execute() ([]CowTokenDTO, *http.Response, error) {
	return r.ApiService.CowGetTokensHistoricalExecute(r)
}

/*
CowGetTokensHistorical Tokens (historical) ðŸ”¥

Gets tokens.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetTokensHistoricalRequest
*/
func (a *CowApiService) CowGetTokensHistorical(ctx context.Context) ApiCowGetTokensHistoricalRequest {
	return ApiCowGetTokensHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowTokenDTO
func (a *CowApiService) CowGetTokensHistoricalExecute(r ApiCowGetTokensHistoricalRequest) ([]CowTokenDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowTokenDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetTokensHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/tokens/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCowGetTradeDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiCowGetTradeDTOsHistoricalRequest) StartBlock(startBlock int64) ApiCowGetTradeDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetTradeDTOsHistoricalRequest) EndBlock(endBlock int64) ApiCowGetTradeDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetTradeDTOsHistoricalRequest) StartDate(startDate time.Time) ApiCowGetTradeDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiCowGetTradeDTOsHistoricalRequest) EndDate(endDate time.Time) ApiCowGetTradeDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiCowGetTradeDTOsHistoricalRequest) PoolId(poolId string) ApiCowGetTradeDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiCowGetTradeDTOsHistoricalRequest) Execute() ([]CowTradeDTO, *http.Response, error) {
	return r.ApiService.CowGetTradeDTOsHistoricalExecute(r)
}

/*
CowGetTradeDTOsHistorical TradeDTOs (historical) ðŸ”¥

Gets TradeDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetTradeDTOsHistoricalRequest
*/
func (a *CowApiService) CowGetTradeDTOsHistorical(ctx context.Context) ApiCowGetTradeDTOsHistoricalRequest {
	return ApiCowGetTradeDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowTradeDTO
func (a *CowApiService) CowGetTradeDTOsHistoricalExecute(r ApiCowGetTradeDTOsHistoricalRequest) ([]CowTradeDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowTradeDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetTradeDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/TradeDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCowGetTradesHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// 
func (r ApiCowGetTradesHistoricalRequest) StartBlock(startBlock int64) ApiCowGetTradesHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetTradesHistoricalRequest) EndBlock(endBlock int64) ApiCowGetTradesHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetTradesHistoricalRequest) StartDate(startDate time.Time) ApiCowGetTradesHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiCowGetTradesHistoricalRequest) EndDate(endDate time.Time) ApiCowGetTradesHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiCowGetTradesHistoricalRequest) Execute() ([]CowTradeDTO, *http.Response, error) {
	return r.ApiService.CowGetTradesHistoricalExecute(r)
}

/*
CowGetTradesHistorical Trades (historical) ðŸ”¥

Gets trades.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetTradesHistoricalRequest
*/
func (a *CowApiService) CowGetTradesHistorical(ctx context.Context) ApiCowGetTradesHistoricalRequest {
	return ApiCowGetTradesHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowTradeDTO
func (a *CowApiService) CowGetTradesHistoricalExecute(r ApiCowGetTradesHistoricalRequest) ([]CowTradeDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowTradeDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetTradesHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/trades/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCowGetUserDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiCowGetUserDTOsHistoricalRequest) StartBlock(startBlock int64) ApiCowGetUserDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetUserDTOsHistoricalRequest) EndBlock(endBlock int64) ApiCowGetUserDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetUserDTOsHistoricalRequest) StartDate(startDate time.Time) ApiCowGetUserDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiCowGetUserDTOsHistoricalRequest) EndDate(endDate time.Time) ApiCowGetUserDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiCowGetUserDTOsHistoricalRequest) PoolId(poolId string) ApiCowGetUserDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiCowGetUserDTOsHistoricalRequest) Execute() ([]CowUserDTO, *http.Response, error) {
	return r.ApiService.CowGetUserDTOsHistoricalExecute(r)
}

/*
CowGetUserDTOsHistorical UserDTOs (historical) ðŸ”¥

Gets UserDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetUserDTOsHistoricalRequest
*/
func (a *CowApiService) CowGetUserDTOsHistorical(ctx context.Context) ApiCowGetUserDTOsHistoricalRequest {
	return ApiCowGetUserDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowUserDTO
func (a *CowApiService) CowGetUserDTOsHistoricalExecute(r ApiCowGetUserDTOsHistoricalRequest) ([]CowUserDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowUserDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetUserDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/UserDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCowGetUsersHistoricalRequest struct {
	ctx context.Context
	ApiService *CowApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// 
func (r ApiCowGetUsersHistoricalRequest) StartBlock(startBlock int64) ApiCowGetUsersHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiCowGetUsersHistoricalRequest) EndBlock(endBlock int64) ApiCowGetUsersHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiCowGetUsersHistoricalRequest) StartDate(startDate time.Time) ApiCowGetUsersHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiCowGetUsersHistoricalRequest) EndDate(endDate time.Time) ApiCowGetUsersHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiCowGetUsersHistoricalRequest) Execute() ([]CowUserDTO, *http.Response, error) {
	return r.ApiService.CowGetUsersHistoricalExecute(r)
}

/*
CowGetUsersHistorical Users (historical)

Gets users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCowGetUsersHistoricalRequest
*/
func (a *CowApiService) CowGetUsersHistorical(ctx context.Context) ApiCowGetUsersHistoricalRequest {
	return ApiCowGetUsersHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CowUserDTO
func (a *CowApiService) CowGetUsersHistoricalExecute(r ApiCowGetUsersHistoricalRequest) ([]CowUserDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CowUserDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CowApiService.CowGetUsersHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/cow/users/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
