/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CurvePoolDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurvePoolDTO{}

// CurvePoolDTO struct for CurvePoolDTO
type CurvePoolDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// Pool address.
	Id NullableString `json:"id,omitempty"`
	// Pool's human-readable name.
	Name NullableString `json:"name,omitempty"`
	// Identify whether pool is a metapool.
	IsMeta *bool `json:"is_meta,omitempty"`
	// Registry contract address from where this pool was registered.
	RegistryAddress NullableString `json:"registry_address,omitempty"`
	// Swap contract address.
	SwapAddress NullableString `json:"swap_address,omitempty"`
	// Address of the token representing LP share.
	LpToken NullableString `json:"lp_token,omitempty"`
	// Number of coins composing the pool.
	CoinCount NullableString `json:"coin_count,omitempty"`
	// Number of underlying coins composing the pool.
	UnderlyingCount NullableString `json:"underlying_count,omitempty"`
	// Amplification coefficient multiplied by n * (n - 1).
	A NullableString `json:"a,omitempty"`
	// Fee to charge for exchanges.
	Fee NullableString `json:"fee,omitempty"`
	// Admin fee is represented as a percentage of the total fee collected on a swap.
	AdminFee NullableString `json:"admin_fee,omitempty"`
	// Admin address.
	Owner NullableString `json:"owner,omitempty"`
	// Average dollar value of pool token.
	VirtualPrice NullableString `json:"virtual_price,omitempty"`
	// 
	Locked NullableString `json:"locked,omitempty"`
	// 
	AddedAt *time.Time `json:"added_at,omitempty"`
	// 
	AddedAtBlock NullableString `json:"added_at_block,omitempty"`
	// 
	AddedAtTransaction NullableString `json:"added_at_transaction,omitempty"`
	// 
	RemovedAt NullableString `json:"removed_at,omitempty"`
	// 
	RemovedAtBlock NullableString `json:"removed_at_block,omitempty"`
	// 
	RemovedAtTransaction NullableString `json:"removed_at_transaction,omitempty"`
	// 
	ExchangeCount NullableString `json:"exchange_count,omitempty"`
	// 
	GaugeCount NullableString `json:"gauge_count,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
	EvaluatedAsk *float64 `json:"evaluated_ask,omitempty"`
}

// NewCurvePoolDTO instantiates a new CurvePoolDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurvePoolDTO() *CurvePoolDTO {
	this := CurvePoolDTO{}
	return &this
}

// NewCurvePoolDTOWithDefaults instantiates a new CurvePoolDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurvePoolDTOWithDefaults() *CurvePoolDTO {
	this := CurvePoolDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *CurvePoolDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurvePoolDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *CurvePoolDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *CurvePoolDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurvePoolDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *CurvePoolDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *CurvePoolDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurvePoolDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *CurvePoolDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CurvePoolDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CurvePoolDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CurvePoolDTO) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CurvePoolDTO) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CurvePoolDTO) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CurvePoolDTO) UnsetName() {
	o.Name.Unset()
}

// GetIsMeta returns the IsMeta field value if set, zero value otherwise.
func (o *CurvePoolDTO) GetIsMeta() bool {
	if o == nil || IsNil(o.IsMeta) {
		var ret bool
		return ret
	}
	return *o.IsMeta
}

// GetIsMetaOk returns a tuple with the IsMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurvePoolDTO) GetIsMetaOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMeta) {
		return nil, false
	}
	return o.IsMeta, true
}

// HasIsMeta returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasIsMeta() bool {
	if o != nil && !IsNil(o.IsMeta) {
		return true
	}

	return false
}

// SetIsMeta gets a reference to the given bool and assigns it to the IsMeta field.
func (o *CurvePoolDTO) SetIsMeta(v bool) {
	o.IsMeta = &v
}

// GetRegistryAddress returns the RegistryAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetRegistryAddress() string {
	if o == nil || IsNil(o.RegistryAddress.Get()) {
		var ret string
		return ret
	}
	return *o.RegistryAddress.Get()
}

// GetRegistryAddressOk returns a tuple with the RegistryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetRegistryAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistryAddress.Get(), o.RegistryAddress.IsSet()
}

// HasRegistryAddress returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasRegistryAddress() bool {
	if o != nil && o.RegistryAddress.IsSet() {
		return true
	}

	return false
}

// SetRegistryAddress gets a reference to the given NullableString and assigns it to the RegistryAddress field.
func (o *CurvePoolDTO) SetRegistryAddress(v string) {
	o.RegistryAddress.Set(&v)
}
// SetRegistryAddressNil sets the value for RegistryAddress to be an explicit nil
func (o *CurvePoolDTO) SetRegistryAddressNil() {
	o.RegistryAddress.Set(nil)
}

// UnsetRegistryAddress ensures that no value is present for RegistryAddress, not even an explicit nil
func (o *CurvePoolDTO) UnsetRegistryAddress() {
	o.RegistryAddress.Unset()
}

// GetSwapAddress returns the SwapAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetSwapAddress() string {
	if o == nil || IsNil(o.SwapAddress.Get()) {
		var ret string
		return ret
	}
	return *o.SwapAddress.Get()
}

// GetSwapAddressOk returns a tuple with the SwapAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetSwapAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwapAddress.Get(), o.SwapAddress.IsSet()
}

// HasSwapAddress returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasSwapAddress() bool {
	if o != nil && o.SwapAddress.IsSet() {
		return true
	}

	return false
}

// SetSwapAddress gets a reference to the given NullableString and assigns it to the SwapAddress field.
func (o *CurvePoolDTO) SetSwapAddress(v string) {
	o.SwapAddress.Set(&v)
}
// SetSwapAddressNil sets the value for SwapAddress to be an explicit nil
func (o *CurvePoolDTO) SetSwapAddressNil() {
	o.SwapAddress.Set(nil)
}

// UnsetSwapAddress ensures that no value is present for SwapAddress, not even an explicit nil
func (o *CurvePoolDTO) UnsetSwapAddress() {
	o.SwapAddress.Unset()
}

// GetLpToken returns the LpToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetLpToken() string {
	if o == nil || IsNil(o.LpToken.Get()) {
		var ret string
		return ret
	}
	return *o.LpToken.Get()
}

// GetLpTokenOk returns a tuple with the LpToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetLpTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LpToken.Get(), o.LpToken.IsSet()
}

// HasLpToken returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasLpToken() bool {
	if o != nil && o.LpToken.IsSet() {
		return true
	}

	return false
}

// SetLpToken gets a reference to the given NullableString and assigns it to the LpToken field.
func (o *CurvePoolDTO) SetLpToken(v string) {
	o.LpToken.Set(&v)
}
// SetLpTokenNil sets the value for LpToken to be an explicit nil
func (o *CurvePoolDTO) SetLpTokenNil() {
	o.LpToken.Set(nil)
}

// UnsetLpToken ensures that no value is present for LpToken, not even an explicit nil
func (o *CurvePoolDTO) UnsetLpToken() {
	o.LpToken.Unset()
}

// GetCoinCount returns the CoinCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetCoinCount() string {
	if o == nil || IsNil(o.CoinCount.Get()) {
		var ret string
		return ret
	}
	return *o.CoinCount.Get()
}

// GetCoinCountOk returns a tuple with the CoinCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetCoinCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoinCount.Get(), o.CoinCount.IsSet()
}

// HasCoinCount returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasCoinCount() bool {
	if o != nil && o.CoinCount.IsSet() {
		return true
	}

	return false
}

// SetCoinCount gets a reference to the given NullableString and assigns it to the CoinCount field.
func (o *CurvePoolDTO) SetCoinCount(v string) {
	o.CoinCount.Set(&v)
}
// SetCoinCountNil sets the value for CoinCount to be an explicit nil
func (o *CurvePoolDTO) SetCoinCountNil() {
	o.CoinCount.Set(nil)
}

// UnsetCoinCount ensures that no value is present for CoinCount, not even an explicit nil
func (o *CurvePoolDTO) UnsetCoinCount() {
	o.CoinCount.Unset()
}

// GetUnderlyingCount returns the UnderlyingCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetUnderlyingCount() string {
	if o == nil || IsNil(o.UnderlyingCount.Get()) {
		var ret string
		return ret
	}
	return *o.UnderlyingCount.Get()
}

// GetUnderlyingCountOk returns a tuple with the UnderlyingCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetUnderlyingCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnderlyingCount.Get(), o.UnderlyingCount.IsSet()
}

// HasUnderlyingCount returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasUnderlyingCount() bool {
	if o != nil && o.UnderlyingCount.IsSet() {
		return true
	}

	return false
}

// SetUnderlyingCount gets a reference to the given NullableString and assigns it to the UnderlyingCount field.
func (o *CurvePoolDTO) SetUnderlyingCount(v string) {
	o.UnderlyingCount.Set(&v)
}
// SetUnderlyingCountNil sets the value for UnderlyingCount to be an explicit nil
func (o *CurvePoolDTO) SetUnderlyingCountNil() {
	o.UnderlyingCount.Set(nil)
}

// UnsetUnderlyingCount ensures that no value is present for UnderlyingCount, not even an explicit nil
func (o *CurvePoolDTO) UnsetUnderlyingCount() {
	o.UnderlyingCount.Unset()
}

// GetA returns the A field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetA() string {
	if o == nil || IsNil(o.A.Get()) {
		var ret string
		return ret
	}
	return *o.A.Get()
}

// GetAOk returns a tuple with the A field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetAOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.A.Get(), o.A.IsSet()
}

// HasA returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasA() bool {
	if o != nil && o.A.IsSet() {
		return true
	}

	return false
}

// SetA gets a reference to the given NullableString and assigns it to the A field.
func (o *CurvePoolDTO) SetA(v string) {
	o.A.Set(&v)
}
// SetANil sets the value for A to be an explicit nil
func (o *CurvePoolDTO) SetANil() {
	o.A.Set(nil)
}

// UnsetA ensures that no value is present for A, not even an explicit nil
func (o *CurvePoolDTO) UnsetA() {
	o.A.Unset()
}

// GetFee returns the Fee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetFee() string {
	if o == nil || IsNil(o.Fee.Get()) {
		var ret string
		return ret
	}
	return *o.Fee.Get()
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fee.Get(), o.Fee.IsSet()
}

// HasFee returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasFee() bool {
	if o != nil && o.Fee.IsSet() {
		return true
	}

	return false
}

// SetFee gets a reference to the given NullableString and assigns it to the Fee field.
func (o *CurvePoolDTO) SetFee(v string) {
	o.Fee.Set(&v)
}
// SetFeeNil sets the value for Fee to be an explicit nil
func (o *CurvePoolDTO) SetFeeNil() {
	o.Fee.Set(nil)
}

// UnsetFee ensures that no value is present for Fee, not even an explicit nil
func (o *CurvePoolDTO) UnsetFee() {
	o.Fee.Unset()
}

// GetAdminFee returns the AdminFee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetAdminFee() string {
	if o == nil || IsNil(o.AdminFee.Get()) {
		var ret string
		return ret
	}
	return *o.AdminFee.Get()
}

// GetAdminFeeOk returns a tuple with the AdminFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetAdminFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminFee.Get(), o.AdminFee.IsSet()
}

// HasAdminFee returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasAdminFee() bool {
	if o != nil && o.AdminFee.IsSet() {
		return true
	}

	return false
}

// SetAdminFee gets a reference to the given NullableString and assigns it to the AdminFee field.
func (o *CurvePoolDTO) SetAdminFee(v string) {
	o.AdminFee.Set(&v)
}
// SetAdminFeeNil sets the value for AdminFee to be an explicit nil
func (o *CurvePoolDTO) SetAdminFeeNil() {
	o.AdminFee.Set(nil)
}

// UnsetAdminFee ensures that no value is present for AdminFee, not even an explicit nil
func (o *CurvePoolDTO) UnsetAdminFee() {
	o.AdminFee.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetOwner() string {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret string
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableString and assigns it to the Owner field.
func (o *CurvePoolDTO) SetOwner(v string) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *CurvePoolDTO) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *CurvePoolDTO) UnsetOwner() {
	o.Owner.Unset()
}

// GetVirtualPrice returns the VirtualPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetVirtualPrice() string {
	if o == nil || IsNil(o.VirtualPrice.Get()) {
		var ret string
		return ret
	}
	return *o.VirtualPrice.Get()
}

// GetVirtualPriceOk returns a tuple with the VirtualPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetVirtualPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VirtualPrice.Get(), o.VirtualPrice.IsSet()
}

// HasVirtualPrice returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasVirtualPrice() bool {
	if o != nil && o.VirtualPrice.IsSet() {
		return true
	}

	return false
}

// SetVirtualPrice gets a reference to the given NullableString and assigns it to the VirtualPrice field.
func (o *CurvePoolDTO) SetVirtualPrice(v string) {
	o.VirtualPrice.Set(&v)
}
// SetVirtualPriceNil sets the value for VirtualPrice to be an explicit nil
func (o *CurvePoolDTO) SetVirtualPriceNil() {
	o.VirtualPrice.Set(nil)
}

// UnsetVirtualPrice ensures that no value is present for VirtualPrice, not even an explicit nil
func (o *CurvePoolDTO) UnsetVirtualPrice() {
	o.VirtualPrice.Unset()
}

// GetLocked returns the Locked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetLocked() string {
	if o == nil || IsNil(o.Locked.Get()) {
		var ret string
		return ret
	}
	return *o.Locked.Get()
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetLockedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locked.Get(), o.Locked.IsSet()
}

// HasLocked returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasLocked() bool {
	if o != nil && o.Locked.IsSet() {
		return true
	}

	return false
}

// SetLocked gets a reference to the given NullableString and assigns it to the Locked field.
func (o *CurvePoolDTO) SetLocked(v string) {
	o.Locked.Set(&v)
}
// SetLockedNil sets the value for Locked to be an explicit nil
func (o *CurvePoolDTO) SetLockedNil() {
	o.Locked.Set(nil)
}

// UnsetLocked ensures that no value is present for Locked, not even an explicit nil
func (o *CurvePoolDTO) UnsetLocked() {
	o.Locked.Unset()
}

// GetAddedAt returns the AddedAt field value if set, zero value otherwise.
func (o *CurvePoolDTO) GetAddedAt() time.Time {
	if o == nil || IsNil(o.AddedAt) {
		var ret time.Time
		return ret
	}
	return *o.AddedAt
}

// GetAddedAtOk returns a tuple with the AddedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurvePoolDTO) GetAddedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AddedAt) {
		return nil, false
	}
	return o.AddedAt, true
}

// HasAddedAt returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasAddedAt() bool {
	if o != nil && !IsNil(o.AddedAt) {
		return true
	}

	return false
}

// SetAddedAt gets a reference to the given time.Time and assigns it to the AddedAt field.
func (o *CurvePoolDTO) SetAddedAt(v time.Time) {
	o.AddedAt = &v
}

// GetAddedAtBlock returns the AddedAtBlock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetAddedAtBlock() string {
	if o == nil || IsNil(o.AddedAtBlock.Get()) {
		var ret string
		return ret
	}
	return *o.AddedAtBlock.Get()
}

// GetAddedAtBlockOk returns a tuple with the AddedAtBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetAddedAtBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddedAtBlock.Get(), o.AddedAtBlock.IsSet()
}

// HasAddedAtBlock returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasAddedAtBlock() bool {
	if o != nil && o.AddedAtBlock.IsSet() {
		return true
	}

	return false
}

// SetAddedAtBlock gets a reference to the given NullableString and assigns it to the AddedAtBlock field.
func (o *CurvePoolDTO) SetAddedAtBlock(v string) {
	o.AddedAtBlock.Set(&v)
}
// SetAddedAtBlockNil sets the value for AddedAtBlock to be an explicit nil
func (o *CurvePoolDTO) SetAddedAtBlockNil() {
	o.AddedAtBlock.Set(nil)
}

// UnsetAddedAtBlock ensures that no value is present for AddedAtBlock, not even an explicit nil
func (o *CurvePoolDTO) UnsetAddedAtBlock() {
	o.AddedAtBlock.Unset()
}

// GetAddedAtTransaction returns the AddedAtTransaction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetAddedAtTransaction() string {
	if o == nil || IsNil(o.AddedAtTransaction.Get()) {
		var ret string
		return ret
	}
	return *o.AddedAtTransaction.Get()
}

// GetAddedAtTransactionOk returns a tuple with the AddedAtTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetAddedAtTransactionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddedAtTransaction.Get(), o.AddedAtTransaction.IsSet()
}

// HasAddedAtTransaction returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasAddedAtTransaction() bool {
	if o != nil && o.AddedAtTransaction.IsSet() {
		return true
	}

	return false
}

// SetAddedAtTransaction gets a reference to the given NullableString and assigns it to the AddedAtTransaction field.
func (o *CurvePoolDTO) SetAddedAtTransaction(v string) {
	o.AddedAtTransaction.Set(&v)
}
// SetAddedAtTransactionNil sets the value for AddedAtTransaction to be an explicit nil
func (o *CurvePoolDTO) SetAddedAtTransactionNil() {
	o.AddedAtTransaction.Set(nil)
}

// UnsetAddedAtTransaction ensures that no value is present for AddedAtTransaction, not even an explicit nil
func (o *CurvePoolDTO) UnsetAddedAtTransaction() {
	o.AddedAtTransaction.Unset()
}

// GetRemovedAt returns the RemovedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetRemovedAt() string {
	if o == nil || IsNil(o.RemovedAt.Get()) {
		var ret string
		return ret
	}
	return *o.RemovedAt.Get()
}

// GetRemovedAtOk returns a tuple with the RemovedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetRemovedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovedAt.Get(), o.RemovedAt.IsSet()
}

// HasRemovedAt returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasRemovedAt() bool {
	if o != nil && o.RemovedAt.IsSet() {
		return true
	}

	return false
}

// SetRemovedAt gets a reference to the given NullableString and assigns it to the RemovedAt field.
func (o *CurvePoolDTO) SetRemovedAt(v string) {
	o.RemovedAt.Set(&v)
}
// SetRemovedAtNil sets the value for RemovedAt to be an explicit nil
func (o *CurvePoolDTO) SetRemovedAtNil() {
	o.RemovedAt.Set(nil)
}

// UnsetRemovedAt ensures that no value is present for RemovedAt, not even an explicit nil
func (o *CurvePoolDTO) UnsetRemovedAt() {
	o.RemovedAt.Unset()
}

// GetRemovedAtBlock returns the RemovedAtBlock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetRemovedAtBlock() string {
	if o == nil || IsNil(o.RemovedAtBlock.Get()) {
		var ret string
		return ret
	}
	return *o.RemovedAtBlock.Get()
}

// GetRemovedAtBlockOk returns a tuple with the RemovedAtBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetRemovedAtBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovedAtBlock.Get(), o.RemovedAtBlock.IsSet()
}

// HasRemovedAtBlock returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasRemovedAtBlock() bool {
	if o != nil && o.RemovedAtBlock.IsSet() {
		return true
	}

	return false
}

// SetRemovedAtBlock gets a reference to the given NullableString and assigns it to the RemovedAtBlock field.
func (o *CurvePoolDTO) SetRemovedAtBlock(v string) {
	o.RemovedAtBlock.Set(&v)
}
// SetRemovedAtBlockNil sets the value for RemovedAtBlock to be an explicit nil
func (o *CurvePoolDTO) SetRemovedAtBlockNil() {
	o.RemovedAtBlock.Set(nil)
}

// UnsetRemovedAtBlock ensures that no value is present for RemovedAtBlock, not even an explicit nil
func (o *CurvePoolDTO) UnsetRemovedAtBlock() {
	o.RemovedAtBlock.Unset()
}

// GetRemovedAtTransaction returns the RemovedAtTransaction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetRemovedAtTransaction() string {
	if o == nil || IsNil(o.RemovedAtTransaction.Get()) {
		var ret string
		return ret
	}
	return *o.RemovedAtTransaction.Get()
}

// GetRemovedAtTransactionOk returns a tuple with the RemovedAtTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetRemovedAtTransactionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovedAtTransaction.Get(), o.RemovedAtTransaction.IsSet()
}

// HasRemovedAtTransaction returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasRemovedAtTransaction() bool {
	if o != nil && o.RemovedAtTransaction.IsSet() {
		return true
	}

	return false
}

// SetRemovedAtTransaction gets a reference to the given NullableString and assigns it to the RemovedAtTransaction field.
func (o *CurvePoolDTO) SetRemovedAtTransaction(v string) {
	o.RemovedAtTransaction.Set(&v)
}
// SetRemovedAtTransactionNil sets the value for RemovedAtTransaction to be an explicit nil
func (o *CurvePoolDTO) SetRemovedAtTransactionNil() {
	o.RemovedAtTransaction.Set(nil)
}

// UnsetRemovedAtTransaction ensures that no value is present for RemovedAtTransaction, not even an explicit nil
func (o *CurvePoolDTO) UnsetRemovedAtTransaction() {
	o.RemovedAtTransaction.Unset()
}

// GetExchangeCount returns the ExchangeCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetExchangeCount() string {
	if o == nil || IsNil(o.ExchangeCount.Get()) {
		var ret string
		return ret
	}
	return *o.ExchangeCount.Get()
}

// GetExchangeCountOk returns a tuple with the ExchangeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetExchangeCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExchangeCount.Get(), o.ExchangeCount.IsSet()
}

// HasExchangeCount returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasExchangeCount() bool {
	if o != nil && o.ExchangeCount.IsSet() {
		return true
	}

	return false
}

// SetExchangeCount gets a reference to the given NullableString and assigns it to the ExchangeCount field.
func (o *CurvePoolDTO) SetExchangeCount(v string) {
	o.ExchangeCount.Set(&v)
}
// SetExchangeCountNil sets the value for ExchangeCount to be an explicit nil
func (o *CurvePoolDTO) SetExchangeCountNil() {
	o.ExchangeCount.Set(nil)
}

// UnsetExchangeCount ensures that no value is present for ExchangeCount, not even an explicit nil
func (o *CurvePoolDTO) UnsetExchangeCount() {
	o.ExchangeCount.Unset()
}

// GetGaugeCount returns the GaugeCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurvePoolDTO) GetGaugeCount() string {
	if o == nil || IsNil(o.GaugeCount.Get()) {
		var ret string
		return ret
	}
	return *o.GaugeCount.Get()
}

// GetGaugeCountOk returns a tuple with the GaugeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurvePoolDTO) GetGaugeCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GaugeCount.Get(), o.GaugeCount.IsSet()
}

// HasGaugeCount returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasGaugeCount() bool {
	if o != nil && o.GaugeCount.IsSet() {
		return true
	}

	return false
}

// SetGaugeCount gets a reference to the given NullableString and assigns it to the GaugeCount field.
func (o *CurvePoolDTO) SetGaugeCount(v string) {
	o.GaugeCount.Set(&v)
}
// SetGaugeCountNil sets the value for GaugeCount to be an explicit nil
func (o *CurvePoolDTO) SetGaugeCountNil() {
	o.GaugeCount.Set(nil)
}

// UnsetGaugeCount ensures that no value is present for GaugeCount, not even an explicit nil
func (o *CurvePoolDTO) UnsetGaugeCount() {
	o.GaugeCount.Unset()
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *CurvePoolDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurvePoolDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *CurvePoolDTO) SetVid(v int64) {
	o.Vid = &v
}

// GetEvaluatedAsk returns the EvaluatedAsk field value if set, zero value otherwise.
func (o *CurvePoolDTO) GetEvaluatedAsk() float64 {
	if o == nil || IsNil(o.EvaluatedAsk) {
		var ret float64
		return ret
	}
	return *o.EvaluatedAsk
}

// GetEvaluatedAskOk returns a tuple with the EvaluatedAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurvePoolDTO) GetEvaluatedAskOk() (*float64, bool) {
	if o == nil || IsNil(o.EvaluatedAsk) {
		return nil, false
	}
	return o.EvaluatedAsk, true
}

// HasEvaluatedAsk returns a boolean if a field has been set.
func (o *CurvePoolDTO) HasEvaluatedAsk() bool {
	if o != nil && !IsNil(o.EvaluatedAsk) {
		return true
	}

	return false
}

// SetEvaluatedAsk gets a reference to the given float64 and assigns it to the EvaluatedAsk field.
func (o *CurvePoolDTO) SetEvaluatedAsk(v float64) {
	o.EvaluatedAsk = &v
}

func (o CurvePoolDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurvePoolDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.IsMeta) {
		toSerialize["is_meta"] = o.IsMeta
	}
	if o.RegistryAddress.IsSet() {
		toSerialize["registry_address"] = o.RegistryAddress.Get()
	}
	if o.SwapAddress.IsSet() {
		toSerialize["swap_address"] = o.SwapAddress.Get()
	}
	if o.LpToken.IsSet() {
		toSerialize["lp_token"] = o.LpToken.Get()
	}
	if o.CoinCount.IsSet() {
		toSerialize["coin_count"] = o.CoinCount.Get()
	}
	if o.UnderlyingCount.IsSet() {
		toSerialize["underlying_count"] = o.UnderlyingCount.Get()
	}
	if o.A.IsSet() {
		toSerialize["a"] = o.A.Get()
	}
	if o.Fee.IsSet() {
		toSerialize["fee"] = o.Fee.Get()
	}
	if o.AdminFee.IsSet() {
		toSerialize["admin_fee"] = o.AdminFee.Get()
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.VirtualPrice.IsSet() {
		toSerialize["virtual_price"] = o.VirtualPrice.Get()
	}
	if o.Locked.IsSet() {
		toSerialize["locked"] = o.Locked.Get()
	}
	if !IsNil(o.AddedAt) {
		toSerialize["added_at"] = o.AddedAt
	}
	if o.AddedAtBlock.IsSet() {
		toSerialize["added_at_block"] = o.AddedAtBlock.Get()
	}
	if o.AddedAtTransaction.IsSet() {
		toSerialize["added_at_transaction"] = o.AddedAtTransaction.Get()
	}
	if o.RemovedAt.IsSet() {
		toSerialize["removed_at"] = o.RemovedAt.Get()
	}
	if o.RemovedAtBlock.IsSet() {
		toSerialize["removed_at_block"] = o.RemovedAtBlock.Get()
	}
	if o.RemovedAtTransaction.IsSet() {
		toSerialize["removed_at_transaction"] = o.RemovedAtTransaction.Get()
	}
	if o.ExchangeCount.IsSet() {
		toSerialize["exchange_count"] = o.ExchangeCount.Get()
	}
	if o.GaugeCount.IsSet() {
		toSerialize["gauge_count"] = o.GaugeCount.Get()
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	// skip: evaluated_ask is readOnly
	return toSerialize, nil
}

type NullableCurvePoolDTO struct {
	value *CurvePoolDTO
	isSet bool
}

func (v NullableCurvePoolDTO) Get() *CurvePoolDTO {
	return v.value
}

func (v *NullableCurvePoolDTO) Set(val *CurvePoolDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCurvePoolDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCurvePoolDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurvePoolDTO(val *CurvePoolDTO) *NullableCurvePoolDTO {
	return &NullableCurvePoolDTO{value: val, isSet: true}
}

func (v NullableCurvePoolDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurvePoolDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


