/*
OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)


// SushiswapApiService SushiswapApi service
type SushiswapApiService service

type ApiCurveGetExchangesCurrentRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
}

func (r ApiCurveGetExchangesCurrentRequest) Execute() ([]CurveExchangeDTO, *http.Response, error) {
	return r.ApiService.CurveGetExchangesCurrentExecute(r)
}

/*
CurveGetExchangesCurrent Exchanges (current) ðŸ”¥

Gets exchanges.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCurveGetExchangesCurrentRequest
*/
func (a *SushiswapApiService) CurveGetExchangesCurrent(ctx context.Context) ApiCurveGetExchangesCurrentRequest {
	return ApiCurveGetExchangesCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CurveExchangeDTO
func (a *SushiswapApiService) CurveGetExchangesCurrentExecute(r ApiCurveGetExchangesCurrentRequest) ([]CurveExchangeDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CurveExchangeDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.CurveGetExchangesCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/exchanges/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDexGetTradesCurrentRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
}

func (r ApiDexGetTradesCurrentRequest) Execute() ([]DexTradeDTO, *http.Response, error) {
	return r.ApiService.DexGetTradesCurrentExecute(r)
}

/*
DexGetTradesCurrent Trades (current) ðŸ”¥

Gets trades.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDexGetTradesCurrentRequest
*/
func (a *SushiswapApiService) DexGetTradesCurrent(ctx context.Context) ApiDexGetTradesCurrentRequest {
	return ApiDexGetTradesCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []DexTradeDTO
func (a *SushiswapApiService) DexGetTradesCurrentExecute(r ApiDexGetTradesCurrentRequest) ([]DexTradeDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DexTradeDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.DexGetTradesCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/trades/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetBundleDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetBundleDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetBundleDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetBundleDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetBundleDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetBundleDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetBundleDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetBundleDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetBundleDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetBundleDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetBundleDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetBundleDTOsHistoricalRequest) Execute() ([]SushiswapBundleDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetBundleDTOsHistoricalExecute(r)
}

/*
SushiswapGetBundleDTOsHistorical BundleDTOs (historical) ðŸ”¥

Gets BundleDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetBundleDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetBundleDTOsHistorical(ctx context.Context) ApiSushiswapGetBundleDTOsHistoricalRequest {
	return ApiSushiswapGetBundleDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapBundleDTO
func (a *SushiswapApiService) SushiswapGetBundleDTOsHistoricalExecute(r ApiSushiswapGetBundleDTOsHistoricalRequest) ([]SushiswapBundleDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapBundleDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetBundleDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/BundleDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetBundlesHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// AAAAAAAAAA
func (r ApiSushiswapGetBundlesHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetBundlesHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// BBBBBBBBBBBB
func (r ApiSushiswapGetBundlesHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetBundlesHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// CCCCCCCCC
func (r ApiSushiswapGetBundlesHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetBundlesHistoricalRequest {
	r.startDate = &startDate
	return r
}

// DDDDDDDDDDD
func (r ApiSushiswapGetBundlesHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetBundlesHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiSushiswapGetBundlesHistoricalRequest) Execute() ([]SushiswapBundleDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetBundlesHistoricalExecute(r)
}

/*
SushiswapGetBundlesHistorical Bundles (historical)

Gets bundles.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetBundlesHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetBundlesHistorical(ctx context.Context) ApiSushiswapGetBundlesHistoricalRequest {
	return ApiSushiswapGetBundlesHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapBundleDTO
func (a *SushiswapApiService) SushiswapGetBundlesHistoricalExecute(r ApiSushiswapGetBundlesHistoricalRequest) ([]SushiswapBundleDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapBundleDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetBundlesHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/bundles/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetBurnDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetBurnDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetBurnDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetBurnDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetBurnDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetBurnDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetBurnDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetBurnDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetBurnDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetBurnDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetBurnDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetBurnDTOsHistoricalRequest) Execute() ([]SushiswapBurnDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetBurnDTOsHistoricalExecute(r)
}

/*
SushiswapGetBurnDTOsHistorical BurnDTOs (historical) ðŸ”¥

Gets BurnDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetBurnDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetBurnDTOsHistorical(ctx context.Context) ApiSushiswapGetBurnDTOsHistoricalRequest {
	return ApiSushiswapGetBurnDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapBurnDTO
func (a *SushiswapApiService) SushiswapGetBurnDTOsHistoricalExecute(r ApiSushiswapGetBurnDTOsHistoricalRequest) ([]SushiswapBurnDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapBurnDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetBurnDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/BurnDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetBurnsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetBurnsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetBurnsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetBurnsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetBurnsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetBurnsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetBurnsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetBurnsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetBurnsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetBurnsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetBurnsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetBurnsHistoricalRequest) Execute() ([]SushiswapBurnDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetBurnsHistoricalExecute(r)
}

/*
SushiswapGetBurnsHistorical Burns (historical)

Gets burns.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetBurnsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetBurnsHistorical(ctx context.Context) ApiSushiswapGetBurnsHistoricalRequest {
	return ApiSushiswapGetBurnsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapBurnDTO
func (a *SushiswapApiService) SushiswapGetBurnsHistoricalExecute(r ApiSushiswapGetBurnsHistoricalRequest) ([]SushiswapBurnDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapBurnDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetBurnsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/burns/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetDayDataDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetDayDataDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetDayDataDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetDayDataDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetDayDataDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetDayDataDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetDayDataDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetDayDataDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetDayDataDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetDayDataDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetDayDataDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetDayDataDTOsHistoricalRequest) Execute() ([]SushiswapDayDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetDayDataDTOsHistoricalExecute(r)
}

/*
SushiswapGetDayDataDTOsHistorical DayDataDTOs (historical) ðŸ”¥

Gets DayDataDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetDayDataDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetDayDataDTOsHistorical(ctx context.Context) ApiSushiswapGetDayDataDTOsHistoricalRequest {
	return ApiSushiswapGetDayDataDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapDayDataDTO
func (a *SushiswapApiService) SushiswapGetDayDataDTOsHistoricalExecute(r ApiSushiswapGetDayDataDTOsHistoricalRequest) ([]SushiswapDayDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapDayDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetDayDataDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/DayDataDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetDayDataHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// 
func (r ApiSushiswapGetDayDataHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetDayDataHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetDayDataHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetDayDataHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetDayDataHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetDayDataHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetDayDataHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetDayDataHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiSushiswapGetDayDataHistoricalRequest) Execute() ([]SushiswapDayDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetDayDataHistoricalExecute(r)
}

/*
SushiswapGetDayDataHistorical DayData (historical)

Gets day data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetDayDataHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetDayDataHistorical(ctx context.Context) ApiSushiswapGetDayDataHistoricalRequest {
	return ApiSushiswapGetDayDataHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapDayDataDTO
func (a *SushiswapApiService) SushiswapGetDayDataHistoricalExecute(r ApiSushiswapGetDayDataHistoricalRequest) ([]SushiswapDayDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapDayDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetDayDataHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/dayData/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetFactoryDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetFactoryDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetFactoryDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetFactoryDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetFactoryDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetFactoryDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetFactoryDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetFactoryDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetFactoryDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetFactoryDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetFactoryDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetFactoryDTOsHistoricalRequest) Execute() ([]SushiswapFactoryDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetFactoryDTOsHistoricalExecute(r)
}

/*
SushiswapGetFactoryDTOsHistorical FactoryDTOs (historical) ðŸ”¥

Gets FactoryDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetFactoryDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetFactoryDTOsHistorical(ctx context.Context) ApiSushiswapGetFactoryDTOsHistoricalRequest {
	return ApiSushiswapGetFactoryDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapFactoryDTO
func (a *SushiswapApiService) SushiswapGetFactoryDTOsHistoricalExecute(r ApiSushiswapGetFactoryDTOsHistoricalRequest) ([]SushiswapFactoryDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapFactoryDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetFactoryDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/FactoryDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetFactoryHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// 
func (r ApiSushiswapGetFactoryHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetFactoryHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetFactoryHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetFactoryHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetFactoryHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetFactoryHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetFactoryHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetFactoryHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiSushiswapGetFactoryHistoricalRequest) Execute() ([]SushiswapFactoryDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetFactoryHistoricalExecute(r)
}

/*
SushiswapGetFactoryHistorical Factory (historical)

Gets factory.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetFactoryHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetFactoryHistorical(ctx context.Context) ApiSushiswapGetFactoryHistoricalRequest {
	return ApiSushiswapGetFactoryHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapFactoryDTO
func (a *SushiswapApiService) SushiswapGetFactoryHistoricalExecute(r ApiSushiswapGetFactoryHistoricalRequest) ([]SushiswapFactoryDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapFactoryDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetFactoryHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/factory/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetHourDataDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetHourDataDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetHourDataDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetHourDataDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetHourDataDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetHourDataDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetHourDataDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetHourDataDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetHourDataDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetHourDataDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetHourDataDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetHourDataDTOsHistoricalRequest) Execute() ([]SushiswapHourDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetHourDataDTOsHistoricalExecute(r)
}

/*
SushiswapGetHourDataDTOsHistorical HourDataDTOs (historical) ðŸ”¥

Gets HourDataDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetHourDataDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetHourDataDTOsHistorical(ctx context.Context) ApiSushiswapGetHourDataDTOsHistoricalRequest {
	return ApiSushiswapGetHourDataDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapHourDataDTO
func (a *SushiswapApiService) SushiswapGetHourDataDTOsHistoricalExecute(r ApiSushiswapGetHourDataDTOsHistoricalRequest) ([]SushiswapHourDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapHourDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetHourDataDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/HourDataDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetHourDataHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// 
func (r ApiSushiswapGetHourDataHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetHourDataHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetHourDataHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetHourDataHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetHourDataHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetHourDataHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetHourDataHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetHourDataHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiSushiswapGetHourDataHistoricalRequest) Execute() ([]SushiswapHourDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetHourDataHistoricalExecute(r)
}

/*
SushiswapGetHourDataHistorical HourData (historical)

Gets hour data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetHourDataHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetHourDataHistorical(ctx context.Context) ApiSushiswapGetHourDataHistoricalRequest {
	return ApiSushiswapGetHourDataHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapHourDataDTO
func (a *SushiswapApiService) SushiswapGetHourDataHistoricalExecute(r ApiSushiswapGetHourDataHistoricalRequest) ([]SushiswapHourDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapHourDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetHourDataHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/hourData/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest) Execute() ([]SushiswapLiquidityPositionDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetLiquidityPositionDTOsHistoricalExecute(r)
}

/*
SushiswapGetLiquidityPositionDTOsHistorical LiquidityPositionDTOs (historical) ðŸ”¥

Gets LiquidityPositionDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetLiquidityPositionDTOsHistorical(ctx context.Context) ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest {
	return ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapLiquidityPositionDTO
func (a *SushiswapApiService) SushiswapGetLiquidityPositionDTOsHistoricalExecute(r ApiSushiswapGetLiquidityPositionDTOsHistoricalRequest) ([]SushiswapLiquidityPositionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapLiquidityPositionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetLiquidityPositionDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/LiquidityPositionDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetLiquidityPositionHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetLiquidityPositionHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetLiquidityPositionHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetLiquidityPositionHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetLiquidityPositionHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetLiquidityPositionHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionHistoricalRequest) PoolId(poolId string) ApiSushiswapGetLiquidityPositionHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetLiquidityPositionHistoricalRequest) Execute() ([]SushiswapLiquidityPositionDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetLiquidityPositionHistoricalExecute(r)
}

/*
SushiswapGetLiquidityPositionHistorical LiquidityPosition (historical)

Gets liquidity position.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetLiquidityPositionHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetLiquidityPositionHistorical(ctx context.Context) ApiSushiswapGetLiquidityPositionHistoricalRequest {
	return ApiSushiswapGetLiquidityPositionHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapLiquidityPositionDTO
func (a *SushiswapApiService) SushiswapGetLiquidityPositionHistoricalExecute(r ApiSushiswapGetLiquidityPositionHistoricalRequest) ([]SushiswapLiquidityPositionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapLiquidityPositionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetLiquidityPositionHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/liquidityPosition/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest) Execute() ([]SushiswapLiquidityPositionSnapshotDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetLiquidityPositionSnapshotDTOsHistoricalExecute(r)
}

/*
SushiswapGetLiquidityPositionSnapshotDTOsHistorical LiquidityPositionSnapshotDTOs (historical) ðŸ”¥

Gets LiquidityPositionSnapshotDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetLiquidityPositionSnapshotDTOsHistorical(ctx context.Context) ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest {
	return ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapLiquidityPositionSnapshotDTO
func (a *SushiswapApiService) SushiswapGetLiquidityPositionSnapshotDTOsHistoricalExecute(r ApiSushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest) ([]SushiswapLiquidityPositionSnapshotDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapLiquidityPositionSnapshotDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetLiquidityPositionSnapshotDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/LiquidityPositionSnapshotDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest) PoolId(poolId string) ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest) Execute() ([]SushiswapLiquidityPositionSnapshotDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetLiquidityPositionSnapshotHistoricalExecute(r)
}

/*
SushiswapGetLiquidityPositionSnapshotHistorical LiquidityPositionSnapshot (historical)

Gets liquidity position snapshot.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetLiquidityPositionSnapshotHistorical(ctx context.Context) ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest {
	return ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapLiquidityPositionSnapshotDTO
func (a *SushiswapApiService) SushiswapGetLiquidityPositionSnapshotHistoricalExecute(r ApiSushiswapGetLiquidityPositionSnapshotHistoricalRequest) ([]SushiswapLiquidityPositionSnapshotDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapLiquidityPositionSnapshotDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetLiquidityPositionSnapshotHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/liquidityPositionSnapshots/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetMintDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetMintDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetMintDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetMintDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetMintDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetMintDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetMintDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetMintDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetMintDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetMintDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetMintDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetMintDTOsHistoricalRequest) Execute() ([]SushiswapMintDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetMintDTOsHistoricalExecute(r)
}

/*
SushiswapGetMintDTOsHistorical MintDTOs (historical) ðŸ”¥

Gets MintDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetMintDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetMintDTOsHistorical(ctx context.Context) ApiSushiswapGetMintDTOsHistoricalRequest {
	return ApiSushiswapGetMintDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapMintDTO
func (a *SushiswapApiService) SushiswapGetMintDTOsHistoricalExecute(r ApiSushiswapGetMintDTOsHistoricalRequest) ([]SushiswapMintDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapMintDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetMintDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/MintDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetMintsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetMintsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetMintsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetMintsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetMintsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetMintsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetMintsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetMintsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetMintsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetMintsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetMintsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetMintsHistoricalRequest) Execute() ([]SushiswapMintDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetMintsHistoricalExecute(r)
}

/*
SushiswapGetMintsHistorical Mints (historical)

Gets mints.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetMintsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetMintsHistorical(ctx context.Context) ApiSushiswapGetMintsHistoricalRequest {
	return ApiSushiswapGetMintsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapMintDTO
func (a *SushiswapApiService) SushiswapGetMintsHistoricalExecute(r ApiSushiswapGetMintsHistoricalRequest) ([]SushiswapMintDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapMintDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetMintsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/mints/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetPairDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetPairDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetPairDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetPairDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetPairDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetPairDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetPairDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetPairDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetPairDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetPairDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetPairDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetPairDTOsHistoricalRequest) Execute() ([]SushiswapPairDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetPairDTOsHistoricalExecute(r)
}

/*
SushiswapGetPairDTOsHistorical PairDTOs (historical) ðŸ”¥

Gets PairDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetPairDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetPairDTOsHistorical(ctx context.Context) ApiSushiswapGetPairDTOsHistoricalRequest {
	return ApiSushiswapGetPairDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapPairDTO
func (a *SushiswapApiService) SushiswapGetPairDTOsHistoricalExecute(r ApiSushiswapGetPairDTOsHistoricalRequest) ([]SushiswapPairDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapPairDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetPairDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/PairDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetPairDayDataDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetPairDayDataDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetPairDayDataDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetPairDayDataDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetPairDayDataDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetPairDayDataDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetPairDayDataDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetPairDayDataDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetPairDayDataDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetPairDayDataDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetPairDayDataDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetPairDayDataDTOsHistoricalRequest) Execute() ([]SushiswapPairDayDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetPairDayDataDTOsHistoricalExecute(r)
}

/*
SushiswapGetPairDayDataDTOsHistorical PairDayDataDTOs (historical) ðŸ”¥

Gets PairDayDataDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetPairDayDataDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetPairDayDataDTOsHistorical(ctx context.Context) ApiSushiswapGetPairDayDataDTOsHistoricalRequest {
	return ApiSushiswapGetPairDayDataDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapPairDayDataDTO
func (a *SushiswapApiService) SushiswapGetPairDayDataDTOsHistoricalExecute(r ApiSushiswapGetPairDayDataDTOsHistoricalRequest) ([]SushiswapPairDayDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapPairDayDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetPairDayDataDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/PairDayDataDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetPairHourDataDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetPairHourDataDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetPairHourDataDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetPairHourDataDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetPairHourDataDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetPairHourDataDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetPairHourDataDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetPairHourDataDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetPairHourDataDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetPairHourDataDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetPairHourDataDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetPairHourDataDTOsHistoricalRequest) Execute() ([]SushiswapPairHourDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetPairHourDataDTOsHistoricalExecute(r)
}

/*
SushiswapGetPairHourDataDTOsHistorical PairHourDataDTOs (historical) ðŸ”¥

Gets PairHourDataDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetPairHourDataDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetPairHourDataDTOsHistorical(ctx context.Context) ApiSushiswapGetPairHourDataDTOsHistoricalRequest {
	return ApiSushiswapGetPairHourDataDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapPairHourDataDTO
func (a *SushiswapApiService) SushiswapGetPairHourDataDTOsHistoricalExecute(r ApiSushiswapGetPairHourDataDTOsHistoricalRequest) ([]SushiswapPairHourDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapPairHourDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetPairHourDataDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/PairHourDataDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetPoolsCurrentRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
}

func (r ApiSushiswapGetPoolsCurrentRequest) Execute() ([]SushiswapPairDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetPoolsCurrentExecute(r)
}

/*
SushiswapGetPoolsCurrent Pools (current) ðŸ”¥

Gets pools.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetPoolsCurrentRequest
*/
func (a *SushiswapApiService) SushiswapGetPoolsCurrent(ctx context.Context) ApiSushiswapGetPoolsCurrentRequest {
	return ApiSushiswapGetPoolsCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapPairDTO
func (a *SushiswapApiService) SushiswapGetPoolsCurrentExecute(r ApiSushiswapGetPoolsCurrentRequest) ([]SushiswapPairDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapPairDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetPoolsCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/pools/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetPoolsDayDataHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetPoolsDayDataHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetPoolsDayDataHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetPoolsDayDataHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetPoolsDayDataHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetPoolsDayDataHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetPoolsDayDataHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetPoolsDayDataHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetPoolsDayDataHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetPoolsDayDataHistoricalRequest) PoolId(poolId string) ApiSushiswapGetPoolsDayDataHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetPoolsDayDataHistoricalRequest) Execute() ([]SushiswapPairDayDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetPoolsDayDataHistoricalExecute(r)
}

/*
SushiswapGetPoolsDayDataHistorical PoolsDayData (historical)

Gets pools day data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetPoolsDayDataHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetPoolsDayDataHistorical(ctx context.Context) ApiSushiswapGetPoolsDayDataHistoricalRequest {
	return ApiSushiswapGetPoolsDayDataHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapPairDayDataDTO
func (a *SushiswapApiService) SushiswapGetPoolsDayDataHistoricalExecute(r ApiSushiswapGetPoolsDayDataHistoricalRequest) ([]SushiswapPairDayDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapPairDayDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetPoolsDayDataHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/poolsDayData/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetPoolsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
func (r ApiSushiswapGetPoolsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetPoolsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
func (r ApiSushiswapGetPoolsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetPoolsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
func (r ApiSushiswapGetPoolsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetPoolsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// The end date of timeframe
func (r ApiSushiswapGetPoolsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetPoolsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// The pool address.
func (r ApiSushiswapGetPoolsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetPoolsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetPoolsHistoricalRequest) Execute() ([]SushiswapPairDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetPoolsHistoricalExecute(r)
}

/*
SushiswapGetPoolsHistorical Pools (historical) ðŸ”¥

Gets list of pools for given filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetPoolsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetPoolsHistorical(ctx context.Context) ApiSushiswapGetPoolsHistoricalRequest {
	return ApiSushiswapGetPoolsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapPairDTO
func (a *SushiswapApiService) SushiswapGetPoolsHistoricalExecute(r ApiSushiswapGetPoolsHistoricalRequest) ([]SushiswapPairDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapPairDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetPoolsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/pools/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetPoolsHourDataHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetPoolsHourDataHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetPoolsHourDataHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetPoolsHourDataHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetPoolsHourDataHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetPoolsHourDataHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetPoolsHourDataHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetPoolsHourDataHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetPoolsHourDataHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetPoolsHourDataHistoricalRequest) PoolId(poolId string) ApiSushiswapGetPoolsHourDataHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetPoolsHourDataHistoricalRequest) Execute() ([]SushiswapPairHourDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetPoolsHourDataHistoricalExecute(r)
}

/*
SushiswapGetPoolsHourDataHistorical PoolsHourData (historical)

Gets pools tracked each our.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetPoolsHourDataHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetPoolsHourDataHistorical(ctx context.Context) ApiSushiswapGetPoolsHourDataHistoricalRequest {
	return ApiSushiswapGetPoolsHourDataHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapPairHourDataDTO
func (a *SushiswapApiService) SushiswapGetPoolsHourDataHistoricalExecute(r ApiSushiswapGetPoolsHourDataHistoricalRequest) ([]SushiswapPairHourDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapPairHourDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetPoolsHourDataHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/poolsHourData/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetSwapDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetSwapDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetSwapDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetSwapDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetSwapDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetSwapDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetSwapDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetSwapDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetSwapDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetSwapDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetSwapDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetSwapDTOsHistoricalRequest) Execute() ([]SushiswapSwapDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetSwapDTOsHistoricalExecute(r)
}

/*
SushiswapGetSwapDTOsHistorical SwapDTOs (historical) ðŸ”¥

Gets SwapDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetSwapDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetSwapDTOsHistorical(ctx context.Context) ApiSushiswapGetSwapDTOsHistoricalRequest {
	return ApiSushiswapGetSwapDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapSwapDTO
func (a *SushiswapApiService) SushiswapGetSwapDTOsHistoricalExecute(r ApiSushiswapGetSwapDTOsHistoricalRequest) ([]SushiswapSwapDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapSwapDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetSwapDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/SwapDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetSwapsCurrentRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
}

func (r ApiSushiswapGetSwapsCurrentRequest) Execute() ([]SushiswapSwapDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetSwapsCurrentExecute(r)
}

/*
SushiswapGetSwapsCurrent Swaps (current) ðŸ”¥

Gets swaps.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetSwapsCurrentRequest
*/
func (a *SushiswapApiService) SushiswapGetSwapsCurrent(ctx context.Context) ApiSushiswapGetSwapsCurrentRequest {
	return ApiSushiswapGetSwapsCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapSwapDTO
func (a *SushiswapApiService) SushiswapGetSwapsCurrentExecute(r ApiSushiswapGetSwapsCurrentRequest) ([]SushiswapSwapDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapSwapDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetSwapsCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/swaps/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetSwapsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
func (r ApiSushiswapGetSwapsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetSwapsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
func (r ApiSushiswapGetSwapsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetSwapsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
func (r ApiSushiswapGetSwapsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetSwapsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// The end date of timeframe
func (r ApiSushiswapGetSwapsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetSwapsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// The pool address.
func (r ApiSushiswapGetSwapsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetSwapsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetSwapsHistoricalRequest) Execute() ([]SushiswapSwapDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetSwapsHistoricalExecute(r)
}

/*
SushiswapGetSwapsHistorical Swaps (historical) ðŸ”¥

Gets list of swaps for given filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetSwapsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetSwapsHistorical(ctx context.Context) ApiSushiswapGetSwapsHistoricalRequest {
	return ApiSushiswapGetSwapsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapSwapDTO
func (a *SushiswapApiService) SushiswapGetSwapsHistoricalExecute(r ApiSushiswapGetSwapsHistoricalRequest) ([]SushiswapSwapDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapSwapDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetSwapsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/swaps/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetTokenDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetTokenDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetTokenDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetTokenDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetTokenDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetTokenDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetTokenDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetTokenDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetTokenDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetTokenDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetTokenDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetTokenDTOsHistoricalRequest) Execute() ([]SushiswapTokenDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetTokenDTOsHistoricalExecute(r)
}

/*
SushiswapGetTokenDTOsHistorical TokenDTOs (historical) ðŸ”¥

Gets TokenDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetTokenDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetTokenDTOsHistorical(ctx context.Context) ApiSushiswapGetTokenDTOsHistoricalRequest {
	return ApiSushiswapGetTokenDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapTokenDTO
func (a *SushiswapApiService) SushiswapGetTokenDTOsHistoricalExecute(r ApiSushiswapGetTokenDTOsHistoricalRequest) ([]SushiswapTokenDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapTokenDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetTokenDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/TokenDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetTokenDayDataDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetTokenDayDataDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetTokenDayDataDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetTokenDayDataDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetTokenDayDataDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetTokenDayDataDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetTokenDayDataDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetTokenDayDataDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetTokenDayDataDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetTokenDayDataDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetTokenDayDataDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetTokenDayDataDTOsHistoricalRequest) Execute() ([]SushiswapTokenDayDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetTokenDayDataDTOsHistoricalExecute(r)
}

/*
SushiswapGetTokenDayDataDTOsHistorical TokenDayDataDTOs (historical) ðŸ”¥

Gets TokenDayDataDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetTokenDayDataDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetTokenDayDataDTOsHistorical(ctx context.Context) ApiSushiswapGetTokenDayDataDTOsHistoricalRequest {
	return ApiSushiswapGetTokenDayDataDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapTokenDayDataDTO
func (a *SushiswapApiService) SushiswapGetTokenDayDataDTOsHistoricalExecute(r ApiSushiswapGetTokenDayDataDTOsHistoricalRequest) ([]SushiswapTokenDayDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapTokenDayDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetTokenDayDataDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/TokenDayDataDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetTokensCurrentRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
}

func (r ApiSushiswapGetTokensCurrentRequest) Execute() ([]SushiswapTokenDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetTokensCurrentExecute(r)
}

/*
SushiswapGetTokensCurrent Tokens (current) ðŸ”¥

Gets tokens.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetTokensCurrentRequest
*/
func (a *SushiswapApiService) SushiswapGetTokensCurrent(ctx context.Context) ApiSushiswapGetTokensCurrentRequest {
	return ApiSushiswapGetTokensCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapTokenDTO
func (a *SushiswapApiService) SushiswapGetTokensCurrentExecute(r ApiSushiswapGetTokensCurrentRequest) ([]SushiswapTokenDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapTokenDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetTokensCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/tokens/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetTokensDayDataHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

// 
func (r ApiSushiswapGetTokensDayDataHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetTokensDayDataHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetTokensDayDataHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetTokensDayDataHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetTokensDayDataHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetTokensDayDataHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetTokensDayDataHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetTokensDayDataHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetTokensDayDataHistoricalRequest) TokenId(tokenId string) ApiSushiswapGetTokensDayDataHistoricalRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiSushiswapGetTokensDayDataHistoricalRequest) Execute() ([]SushiswapTokenDayDataDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetTokensDayDataHistoricalExecute(r)
}

/*
SushiswapGetTokensDayDataHistorical TokensDayData (historical)

Gets tokens day data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetTokensDayDataHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetTokensDayDataHistorical(ctx context.Context) ApiSushiswapGetTokensDayDataHistoricalRequest {
	return ApiSushiswapGetTokensDayDataHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapTokenDayDataDTO
func (a *SushiswapApiService) SushiswapGetTokensDayDataHistoricalExecute(r ApiSushiswapGetTokensDayDataHistoricalRequest) ([]SushiswapTokenDayDataDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapTokenDayDataDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetTokensDayDataHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/tokensDayData/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetTokensHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

// The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
func (r ApiSushiswapGetTokensHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetTokensHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
func (r ApiSushiswapGetTokensHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetTokensHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
func (r ApiSushiswapGetTokensHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetTokensHistoricalRequest {
	r.startDate = &startDate
	return r
}

// The end date of timeframe
func (r ApiSushiswapGetTokensHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetTokensHistoricalRequest {
	r.endDate = &endDate
	return r
}

// The token address.
func (r ApiSushiswapGetTokensHistoricalRequest) TokenId(tokenId string) ApiSushiswapGetTokensHistoricalRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiSushiswapGetTokensHistoricalRequest) Execute() ([]SushiswapTokenDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetTokensHistoricalExecute(r)
}

/*
SushiswapGetTokensHistorical Tokens (historical) ðŸ”¥

Gets list of tokens for given filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetTokensHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetTokensHistorical(ctx context.Context) ApiSushiswapGetTokensHistoricalRequest {
	return ApiSushiswapGetTokensHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapTokenDTO
func (a *SushiswapApiService) SushiswapGetTokensHistoricalExecute(r ApiSushiswapGetTokensHistoricalRequest) ([]SushiswapTokenDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapTokenDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetTokensHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/tokens/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetTransactionDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetTransactionDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetTransactionDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetTransactionDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetTransactionDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetTransactionDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetTransactionDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetTransactionDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetTransactionDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetTransactionDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetTransactionDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetTransactionDTOsHistoricalRequest) Execute() ([]SushiswapTransactionDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetTransactionDTOsHistoricalExecute(r)
}

/*
SushiswapGetTransactionDTOsHistorical TransactionDTOs (historical) ðŸ”¥

Gets TransactionDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetTransactionDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetTransactionDTOsHistorical(ctx context.Context) ApiSushiswapGetTransactionDTOsHistoricalRequest {
	return ApiSushiswapGetTransactionDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapTransactionDTO
func (a *SushiswapApiService) SushiswapGetTransactionDTOsHistoricalExecute(r ApiSushiswapGetTransactionDTOsHistoricalRequest) ([]SushiswapTransactionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapTransactionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetTransactionDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/TransactionDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetTransactionsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// 
func (r ApiSushiswapGetTransactionsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetTransactionsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetTransactionsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetTransactionsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetTransactionsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetTransactionsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetTransactionsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetTransactionsHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiSushiswapGetTransactionsHistoricalRequest) Execute() ([]SushiswapTransactionDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetTransactionsHistoricalExecute(r)
}

/*
SushiswapGetTransactionsHistorical Transactions (historical)

Gets transactions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetTransactionsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetTransactionsHistorical(ctx context.Context) ApiSushiswapGetTransactionsHistoricalRequest {
	return ApiSushiswapGetTransactionsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapTransactionDTO
func (a *SushiswapApiService) SushiswapGetTransactionsHistoricalExecute(r ApiSushiswapGetTransactionsHistoricalRequest) ([]SushiswapTransactionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapTransactionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetTransactionsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/transactions/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetUserDTOsHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

// 
func (r ApiSushiswapGetUserDTOsHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetUserDTOsHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetUserDTOsHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetUserDTOsHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetUserDTOsHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetUserDTOsHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetUserDTOsHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetUserDTOsHistoricalRequest {
	r.endDate = &endDate
	return r
}

// 
func (r ApiSushiswapGetUserDTOsHistoricalRequest) PoolId(poolId string) ApiSushiswapGetUserDTOsHistoricalRequest {
	r.poolId = &poolId
	return r
}

func (r ApiSushiswapGetUserDTOsHistoricalRequest) Execute() ([]SushiswapUserDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetUserDTOsHistoricalExecute(r)
}

/*
SushiswapGetUserDTOsHistorical UserDTOs (historical) ðŸ”¥

Gets UserDTOs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetUserDTOsHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetUserDTOsHistorical(ctx context.Context) ApiSushiswapGetUserDTOsHistoricalRequest {
	return ApiSushiswapGetUserDTOsHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapUserDTO
func (a *SushiswapApiService) SushiswapGetUserDTOsHistoricalExecute(r ApiSushiswapGetUserDTOsHistoricalRequest) ([]SushiswapUserDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapUserDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetUserDTOsHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/UserDTOs/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSushiswapGetUsersHistoricalRequest struct {
	ctx context.Context
	ApiService *SushiswapApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

// 
func (r ApiSushiswapGetUsersHistoricalRequest) StartBlock(startBlock int64) ApiSushiswapGetUsersHistoricalRequest {
	r.startBlock = &startBlock
	return r
}

// 
func (r ApiSushiswapGetUsersHistoricalRequest) EndBlock(endBlock int64) ApiSushiswapGetUsersHistoricalRequest {
	r.endBlock = &endBlock
	return r
}

// 
func (r ApiSushiswapGetUsersHistoricalRequest) StartDate(startDate time.Time) ApiSushiswapGetUsersHistoricalRequest {
	r.startDate = &startDate
	return r
}

// 
func (r ApiSushiswapGetUsersHistoricalRequest) EndDate(endDate time.Time) ApiSushiswapGetUsersHistoricalRequest {
	r.endDate = &endDate
	return r
}

func (r ApiSushiswapGetUsersHistoricalRequest) Execute() ([]SushiswapUserDTO, *http.Response, error) {
	return r.ApiService.SushiswapGetUsersHistoricalExecute(r)
}

/*
SushiswapGetUsersHistorical Users (historical)

Gets users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSushiswapGetUsersHistoricalRequest
*/
func (a *SushiswapApiService) SushiswapGetUsersHistorical(ctx context.Context) ApiSushiswapGetUsersHistoricalRequest {
	return ApiSushiswapGetUsersHistoricalRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SushiswapUserDTO
func (a *SushiswapApiService) SushiswapGetUsersHistoricalExecute(r ApiSushiswapGetUsersHistoricalRequest) ([]SushiswapUserDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SushiswapUserDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SushiswapApiService.SushiswapGetUsersHistorical")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/sushiswap/users/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
