/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UniswapV2LiquidityPositionSnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UniswapV2LiquidityPositionSnapshotDTO{}

// UniswapV2LiquidityPositionSnapshotDTO This entity is used to store data about a user's liquidity position over time. This information, along with information from the pair itself can be used to provide position sizes, token deposits, and more. It gets created and never updated.
type UniswapV2LiquidityPositionSnapshotDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// Identifier, format: (pair address)-(user address)
	Id NullableString `json:"id,omitempty"`
	// Reference to LP identifier.
	LiquidityPosition NullableString `json:"liquidity_position,omitempty"`
	// Creation time.
	Timestamp *int32 `json:"timestamp,omitempty"`
	// Number of block in which LP snapshot was recorded.
	Block *int32 `json:"block,omitempty"`
	// Reference to user.
	User NullableString `json:"user,omitempty"`
	// Reference to the pair liquidity is being provided on.
	Pair NullableString `json:"pair,omitempty"`
	// Snapshot of token0 price.
	Token0PriceUsd NullableString `json:"token_0_price_usd,omitempty"`
	// Snapshot of token0 price.
	Token1PriceUsd NullableString `json:"token_1_price_usd,omitempty"`
	// Snapshot of pair token0 reserves.
	Reserve0 NullableString `json:"reserve_0,omitempty"`
	// Snapshot of pair token1 reserves.
	Reserve1 NullableString `json:"reserve_1,omitempty"`
	// Snapshot of pair reserves in USD.
	ReserveUsd NullableString `json:"reserve_usd,omitempty"`
	// Snapshot of pool token supply.
	LiquidityTokenTotalSupply NullableString `json:"liquidity_token_total_supply,omitempty"`
	// Snapshot of users pool token balance.
	LiquidityTokenBalance NullableString `json:"liquidity_token_balance,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
}

// NewUniswapV2LiquidityPositionSnapshotDTO instantiates a new UniswapV2LiquidityPositionSnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniswapV2LiquidityPositionSnapshotDTO() *UniswapV2LiquidityPositionSnapshotDTO {
	this := UniswapV2LiquidityPositionSnapshotDTO{}
	return &this
}

// NewUniswapV2LiquidityPositionSnapshotDTOWithDefaults instantiates a new UniswapV2LiquidityPositionSnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniswapV2LiquidityPositionSnapshotDTOWithDefaults() *UniswapV2LiquidityPositionSnapshotDTO {
	this := UniswapV2LiquidityPositionSnapshotDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetId() {
	o.Id.Unset()
}

// GetLiquidityPosition returns the LiquidityPosition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetLiquidityPosition() string {
	if o == nil || IsNil(o.LiquidityPosition.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityPosition.Get()
}

// GetLiquidityPositionOk returns a tuple with the LiquidityPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetLiquidityPositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityPosition.Get(), o.LiquidityPosition.IsSet()
}

// HasLiquidityPosition returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasLiquidityPosition() bool {
	if o != nil && o.LiquidityPosition.IsSet() {
		return true
	}

	return false
}

// SetLiquidityPosition gets a reference to the given NullableString and assigns it to the LiquidityPosition field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetLiquidityPosition(v string) {
	o.LiquidityPosition.Set(&v)
}
// SetLiquidityPositionNil sets the value for LiquidityPosition to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetLiquidityPositionNil() {
	o.LiquidityPosition.Set(nil)
}

// UnsetLiquidityPosition ensures that no value is present for LiquidityPosition, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetLiquidityPosition() {
	o.LiquidityPosition.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetTimestamp() int32 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetBlock() int32 {
	if o == nil || IsNil(o.Block) {
		var ret int32
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetBlockOk() (*int32, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given int32 and assigns it to the Block field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetBlock(v int32) {
	o.Block = &v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetUser(v string) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetUser() {
	o.User.Unset()
}

// GetPair returns the Pair field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetPair() string {
	if o == nil || IsNil(o.Pair.Get()) {
		var ret string
		return ret
	}
	return *o.Pair.Get()
}

// GetPairOk returns a tuple with the Pair field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetPairOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pair.Get(), o.Pair.IsSet()
}

// HasPair returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasPair() bool {
	if o != nil && o.Pair.IsSet() {
		return true
	}

	return false
}

// SetPair gets a reference to the given NullableString and assigns it to the Pair field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetPair(v string) {
	o.Pair.Set(&v)
}
// SetPairNil sets the value for Pair to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetPairNil() {
	o.Pair.Set(nil)
}

// UnsetPair ensures that no value is present for Pair, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetPair() {
	o.Pair.Unset()
}

// GetToken0PriceUsd returns the Token0PriceUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetToken0PriceUsd() string {
	if o == nil || IsNil(o.Token0PriceUsd.Get()) {
		var ret string
		return ret
	}
	return *o.Token0PriceUsd.Get()
}

// GetToken0PriceUsdOk returns a tuple with the Token0PriceUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetToken0PriceUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Token0PriceUsd.Get(), o.Token0PriceUsd.IsSet()
}

// HasToken0PriceUsd returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasToken0PriceUsd() bool {
	if o != nil && o.Token0PriceUsd.IsSet() {
		return true
	}

	return false
}

// SetToken0PriceUsd gets a reference to the given NullableString and assigns it to the Token0PriceUsd field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetToken0PriceUsd(v string) {
	o.Token0PriceUsd.Set(&v)
}
// SetToken0PriceUsdNil sets the value for Token0PriceUsd to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetToken0PriceUsdNil() {
	o.Token0PriceUsd.Set(nil)
}

// UnsetToken0PriceUsd ensures that no value is present for Token0PriceUsd, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetToken0PriceUsd() {
	o.Token0PriceUsd.Unset()
}

// GetToken1PriceUsd returns the Token1PriceUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetToken1PriceUsd() string {
	if o == nil || IsNil(o.Token1PriceUsd.Get()) {
		var ret string
		return ret
	}
	return *o.Token1PriceUsd.Get()
}

// GetToken1PriceUsdOk returns a tuple with the Token1PriceUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetToken1PriceUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Token1PriceUsd.Get(), o.Token1PriceUsd.IsSet()
}

// HasToken1PriceUsd returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasToken1PriceUsd() bool {
	if o != nil && o.Token1PriceUsd.IsSet() {
		return true
	}

	return false
}

// SetToken1PriceUsd gets a reference to the given NullableString and assigns it to the Token1PriceUsd field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetToken1PriceUsd(v string) {
	o.Token1PriceUsd.Set(&v)
}
// SetToken1PriceUsdNil sets the value for Token1PriceUsd to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetToken1PriceUsdNil() {
	o.Token1PriceUsd.Set(nil)
}

// UnsetToken1PriceUsd ensures that no value is present for Token1PriceUsd, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetToken1PriceUsd() {
	o.Token1PriceUsd.Unset()
}

// GetReserve0 returns the Reserve0 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetReserve0() string {
	if o == nil || IsNil(o.Reserve0.Get()) {
		var ret string
		return ret
	}
	return *o.Reserve0.Get()
}

// GetReserve0Ok returns a tuple with the Reserve0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetReserve0Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reserve0.Get(), o.Reserve0.IsSet()
}

// HasReserve0 returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasReserve0() bool {
	if o != nil && o.Reserve0.IsSet() {
		return true
	}

	return false
}

// SetReserve0 gets a reference to the given NullableString and assigns it to the Reserve0 field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetReserve0(v string) {
	o.Reserve0.Set(&v)
}
// SetReserve0Nil sets the value for Reserve0 to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetReserve0Nil() {
	o.Reserve0.Set(nil)
}

// UnsetReserve0 ensures that no value is present for Reserve0, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetReserve0() {
	o.Reserve0.Unset()
}

// GetReserve1 returns the Reserve1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetReserve1() string {
	if o == nil || IsNil(o.Reserve1.Get()) {
		var ret string
		return ret
	}
	return *o.Reserve1.Get()
}

// GetReserve1Ok returns a tuple with the Reserve1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetReserve1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reserve1.Get(), o.Reserve1.IsSet()
}

// HasReserve1 returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasReserve1() bool {
	if o != nil && o.Reserve1.IsSet() {
		return true
	}

	return false
}

// SetReserve1 gets a reference to the given NullableString and assigns it to the Reserve1 field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetReserve1(v string) {
	o.Reserve1.Set(&v)
}
// SetReserve1Nil sets the value for Reserve1 to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetReserve1Nil() {
	o.Reserve1.Set(nil)
}

// UnsetReserve1 ensures that no value is present for Reserve1, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetReserve1() {
	o.Reserve1.Unset()
}

// GetReserveUsd returns the ReserveUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetReserveUsd() string {
	if o == nil || IsNil(o.ReserveUsd.Get()) {
		var ret string
		return ret
	}
	return *o.ReserveUsd.Get()
}

// GetReserveUsdOk returns a tuple with the ReserveUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetReserveUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReserveUsd.Get(), o.ReserveUsd.IsSet()
}

// HasReserveUsd returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasReserveUsd() bool {
	if o != nil && o.ReserveUsd.IsSet() {
		return true
	}

	return false
}

// SetReserveUsd gets a reference to the given NullableString and assigns it to the ReserveUsd field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetReserveUsd(v string) {
	o.ReserveUsd.Set(&v)
}
// SetReserveUsdNil sets the value for ReserveUsd to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetReserveUsdNil() {
	o.ReserveUsd.Set(nil)
}

// UnsetReserveUsd ensures that no value is present for ReserveUsd, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetReserveUsd() {
	o.ReserveUsd.Unset()
}

// GetLiquidityTokenTotalSupply returns the LiquidityTokenTotalSupply field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetLiquidityTokenTotalSupply() string {
	if o == nil || IsNil(o.LiquidityTokenTotalSupply.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityTokenTotalSupply.Get()
}

// GetLiquidityTokenTotalSupplyOk returns a tuple with the LiquidityTokenTotalSupply field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetLiquidityTokenTotalSupplyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityTokenTotalSupply.Get(), o.LiquidityTokenTotalSupply.IsSet()
}

// HasLiquidityTokenTotalSupply returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasLiquidityTokenTotalSupply() bool {
	if o != nil && o.LiquidityTokenTotalSupply.IsSet() {
		return true
	}

	return false
}

// SetLiquidityTokenTotalSupply gets a reference to the given NullableString and assigns it to the LiquidityTokenTotalSupply field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetLiquidityTokenTotalSupply(v string) {
	o.LiquidityTokenTotalSupply.Set(&v)
}
// SetLiquidityTokenTotalSupplyNil sets the value for LiquidityTokenTotalSupply to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetLiquidityTokenTotalSupplyNil() {
	o.LiquidityTokenTotalSupply.Set(nil)
}

// UnsetLiquidityTokenTotalSupply ensures that no value is present for LiquidityTokenTotalSupply, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetLiquidityTokenTotalSupply() {
	o.LiquidityTokenTotalSupply.Unset()
}

// GetLiquidityTokenBalance returns the LiquidityTokenBalance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetLiquidityTokenBalance() string {
	if o == nil || IsNil(o.LiquidityTokenBalance.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityTokenBalance.Get()
}

// GetLiquidityTokenBalanceOk returns a tuple with the LiquidityTokenBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetLiquidityTokenBalanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityTokenBalance.Get(), o.LiquidityTokenBalance.IsSet()
}

// HasLiquidityTokenBalance returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasLiquidityTokenBalance() bool {
	if o != nil && o.LiquidityTokenBalance.IsSet() {
		return true
	}

	return false
}

// SetLiquidityTokenBalance gets a reference to the given NullableString and assigns it to the LiquidityTokenBalance field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetLiquidityTokenBalance(v string) {
	o.LiquidityTokenBalance.Set(&v)
}
// SetLiquidityTokenBalanceNil sets the value for LiquidityTokenBalance to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetLiquidityTokenBalanceNil() {
	o.LiquidityTokenBalance.Set(nil)
}

// UnsetLiquidityTokenBalance ensures that no value is present for LiquidityTokenBalance, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetLiquidityTokenBalance() {
	o.LiquidityTokenBalance.Unset()
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetVid(v int64) {
	o.Vid = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniswapV2LiquidityPositionSnapshotDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *UniswapV2LiquidityPositionSnapshotDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *UniswapV2LiquidityPositionSnapshotDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

func (o UniswapV2LiquidityPositionSnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UniswapV2LiquidityPositionSnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.LiquidityPosition.IsSet() {
		toSerialize["liquidity_position"] = o.LiquidityPosition.Get()
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	if o.Pair.IsSet() {
		toSerialize["pair"] = o.Pair.Get()
	}
	if o.Token0PriceUsd.IsSet() {
		toSerialize["token_0_price_usd"] = o.Token0PriceUsd.Get()
	}
	if o.Token1PriceUsd.IsSet() {
		toSerialize["token_1_price_usd"] = o.Token1PriceUsd.Get()
	}
	if o.Reserve0.IsSet() {
		toSerialize["reserve_0"] = o.Reserve0.Get()
	}
	if o.Reserve1.IsSet() {
		toSerialize["reserve_1"] = o.Reserve1.Get()
	}
	if o.ReserveUsd.IsSet() {
		toSerialize["reserve_usd"] = o.ReserveUsd.Get()
	}
	if o.LiquidityTokenTotalSupply.IsSet() {
		toSerialize["liquidity_token_total_supply"] = o.LiquidityTokenTotalSupply.Get()
	}
	if o.LiquidityTokenBalance.IsSet() {
		toSerialize["liquidity_token_balance"] = o.LiquidityTokenBalance.Get()
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	return toSerialize, nil
}

type NullableUniswapV2LiquidityPositionSnapshotDTO struct {
	value *UniswapV2LiquidityPositionSnapshotDTO
	isSet bool
}

func (v NullableUniswapV2LiquidityPositionSnapshotDTO) Get() *UniswapV2LiquidityPositionSnapshotDTO {
	return v.value
}

func (v *NullableUniswapV2LiquidityPositionSnapshotDTO) Set(val *UniswapV2LiquidityPositionSnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUniswapV2LiquidityPositionSnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUniswapV2LiquidityPositionSnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniswapV2LiquidityPositionSnapshotDTO(val *UniswapV2LiquidityPositionSnapshotDTO) *NullableUniswapV2LiquidityPositionSnapshotDTO {
	return &NullableUniswapV2LiquidityPositionSnapshotDTO{value: val, isSet: true}
}

func (v NullableUniswapV2LiquidityPositionSnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniswapV2LiquidityPositionSnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


