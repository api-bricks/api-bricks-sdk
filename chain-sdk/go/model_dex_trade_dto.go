/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DexTradeDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DexTradeDTO{}

// DexTradeDTO Trade for a single user, as part of a ring trade. It's part of the solution submitted by a solver for a given batch.
type DexTradeDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	Id NullableString `json:"id,omitempty"`
	// 
	Order NullableString `json:"order,omitempty"`
	// 
	Owner NullableString `json:"owner,omitempty"`
	// 
	SellVolume NullableString `json:"sell_volume,omitempty"`
	// 
	BuyVolume NullableString `json:"buy_volume,omitempty"`
	// 
	TradeBatchId NullableString `json:"trade_batch_id,omitempty"`
	// The date of the end of the batch.
	TradeEpoch NullableString `json:"trade_epoch,omitempty"`
	// 
	BuyToken NullableString `json:"buy_token,omitempty"`
	// 
	SellToken NullableString `json:"sell_token,omitempty"`
	// The date where the transaction was mined.
	CreateEpoch NullableString `json:"create_epoch,omitempty"`
	// 
	RevertEpoch NullableString `json:"revert_epoch,omitempty"`
	// 
	TxHash NullableString `json:"tx_hash,omitempty"`
	// 
	TxLogIndex NullableString `json:"tx_log_index,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
	PoolId NullableString `json:"pool_id,omitempty"`
	TransactionId NullableString `json:"transaction_id,omitempty"`
	EvaluatedPrice *float64 `json:"evaluated_price,omitempty"`
	EvaluatedAmount *float64 `json:"evaluated_amount,omitempty"`
	EvaluatedAggressor *TransactionsETradeAggressiveSide `json:"evaluated_aggressor,omitempty"`
}

// NewDexTradeDTO instantiates a new DexTradeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDexTradeDTO() *DexTradeDTO {
	this := DexTradeDTO{}
	return &this
}

// NewDexTradeDTOWithDefaults instantiates a new DexTradeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDexTradeDTOWithDefaults() *DexTradeDTO {
	this := DexTradeDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *DexTradeDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexTradeDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *DexTradeDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *DexTradeDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *DexTradeDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexTradeDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *DexTradeDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *DexTradeDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *DexTradeDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexTradeDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *DexTradeDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *DexTradeDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DexTradeDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DexTradeDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DexTradeDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DexTradeDTO) UnsetId() {
	o.Id.Unset()
}

// GetOrder returns the Order field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetOrder() string {
	if o == nil || IsNil(o.Order.Get()) {
		var ret string
		return ret
	}
	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetOrderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// HasOrder returns a boolean if a field has been set.
func (o *DexTradeDTO) HasOrder() bool {
	if o != nil && o.Order.IsSet() {
		return true
	}

	return false
}

// SetOrder gets a reference to the given NullableString and assigns it to the Order field.
func (o *DexTradeDTO) SetOrder(v string) {
	o.Order.Set(&v)
}
// SetOrderNil sets the value for Order to be an explicit nil
func (o *DexTradeDTO) SetOrderNil() {
	o.Order.Set(nil)
}

// UnsetOrder ensures that no value is present for Order, not even an explicit nil
func (o *DexTradeDTO) UnsetOrder() {
	o.Order.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetOwner() string {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret string
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *DexTradeDTO) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableString and assigns it to the Owner field.
func (o *DexTradeDTO) SetOwner(v string) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *DexTradeDTO) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *DexTradeDTO) UnsetOwner() {
	o.Owner.Unset()
}

// GetSellVolume returns the SellVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetSellVolume() string {
	if o == nil || IsNil(o.SellVolume.Get()) {
		var ret string
		return ret
	}
	return *o.SellVolume.Get()
}

// GetSellVolumeOk returns a tuple with the SellVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetSellVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellVolume.Get(), o.SellVolume.IsSet()
}

// HasSellVolume returns a boolean if a field has been set.
func (o *DexTradeDTO) HasSellVolume() bool {
	if o != nil && o.SellVolume.IsSet() {
		return true
	}

	return false
}

// SetSellVolume gets a reference to the given NullableString and assigns it to the SellVolume field.
func (o *DexTradeDTO) SetSellVolume(v string) {
	o.SellVolume.Set(&v)
}
// SetSellVolumeNil sets the value for SellVolume to be an explicit nil
func (o *DexTradeDTO) SetSellVolumeNil() {
	o.SellVolume.Set(nil)
}

// UnsetSellVolume ensures that no value is present for SellVolume, not even an explicit nil
func (o *DexTradeDTO) UnsetSellVolume() {
	o.SellVolume.Unset()
}

// GetBuyVolume returns the BuyVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetBuyVolume() string {
	if o == nil || IsNil(o.BuyVolume.Get()) {
		var ret string
		return ret
	}
	return *o.BuyVolume.Get()
}

// GetBuyVolumeOk returns a tuple with the BuyVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetBuyVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuyVolume.Get(), o.BuyVolume.IsSet()
}

// HasBuyVolume returns a boolean if a field has been set.
func (o *DexTradeDTO) HasBuyVolume() bool {
	if o != nil && o.BuyVolume.IsSet() {
		return true
	}

	return false
}

// SetBuyVolume gets a reference to the given NullableString and assigns it to the BuyVolume field.
func (o *DexTradeDTO) SetBuyVolume(v string) {
	o.BuyVolume.Set(&v)
}
// SetBuyVolumeNil sets the value for BuyVolume to be an explicit nil
func (o *DexTradeDTO) SetBuyVolumeNil() {
	o.BuyVolume.Set(nil)
}

// UnsetBuyVolume ensures that no value is present for BuyVolume, not even an explicit nil
func (o *DexTradeDTO) UnsetBuyVolume() {
	o.BuyVolume.Unset()
}

// GetTradeBatchId returns the TradeBatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetTradeBatchId() string {
	if o == nil || IsNil(o.TradeBatchId.Get()) {
		var ret string
		return ret
	}
	return *o.TradeBatchId.Get()
}

// GetTradeBatchIdOk returns a tuple with the TradeBatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetTradeBatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TradeBatchId.Get(), o.TradeBatchId.IsSet()
}

// HasTradeBatchId returns a boolean if a field has been set.
func (o *DexTradeDTO) HasTradeBatchId() bool {
	if o != nil && o.TradeBatchId.IsSet() {
		return true
	}

	return false
}

// SetTradeBatchId gets a reference to the given NullableString and assigns it to the TradeBatchId field.
func (o *DexTradeDTO) SetTradeBatchId(v string) {
	o.TradeBatchId.Set(&v)
}
// SetTradeBatchIdNil sets the value for TradeBatchId to be an explicit nil
func (o *DexTradeDTO) SetTradeBatchIdNil() {
	o.TradeBatchId.Set(nil)
}

// UnsetTradeBatchId ensures that no value is present for TradeBatchId, not even an explicit nil
func (o *DexTradeDTO) UnsetTradeBatchId() {
	o.TradeBatchId.Unset()
}

// GetTradeEpoch returns the TradeEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetTradeEpoch() string {
	if o == nil || IsNil(o.TradeEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.TradeEpoch.Get()
}

// GetTradeEpochOk returns a tuple with the TradeEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetTradeEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TradeEpoch.Get(), o.TradeEpoch.IsSet()
}

// HasTradeEpoch returns a boolean if a field has been set.
func (o *DexTradeDTO) HasTradeEpoch() bool {
	if o != nil && o.TradeEpoch.IsSet() {
		return true
	}

	return false
}

// SetTradeEpoch gets a reference to the given NullableString and assigns it to the TradeEpoch field.
func (o *DexTradeDTO) SetTradeEpoch(v string) {
	o.TradeEpoch.Set(&v)
}
// SetTradeEpochNil sets the value for TradeEpoch to be an explicit nil
func (o *DexTradeDTO) SetTradeEpochNil() {
	o.TradeEpoch.Set(nil)
}

// UnsetTradeEpoch ensures that no value is present for TradeEpoch, not even an explicit nil
func (o *DexTradeDTO) UnsetTradeEpoch() {
	o.TradeEpoch.Unset()
}

// GetBuyToken returns the BuyToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetBuyToken() string {
	if o == nil || IsNil(o.BuyToken.Get()) {
		var ret string
		return ret
	}
	return *o.BuyToken.Get()
}

// GetBuyTokenOk returns a tuple with the BuyToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetBuyTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuyToken.Get(), o.BuyToken.IsSet()
}

// HasBuyToken returns a boolean if a field has been set.
func (o *DexTradeDTO) HasBuyToken() bool {
	if o != nil && o.BuyToken.IsSet() {
		return true
	}

	return false
}

// SetBuyToken gets a reference to the given NullableString and assigns it to the BuyToken field.
func (o *DexTradeDTO) SetBuyToken(v string) {
	o.BuyToken.Set(&v)
}
// SetBuyTokenNil sets the value for BuyToken to be an explicit nil
func (o *DexTradeDTO) SetBuyTokenNil() {
	o.BuyToken.Set(nil)
}

// UnsetBuyToken ensures that no value is present for BuyToken, not even an explicit nil
func (o *DexTradeDTO) UnsetBuyToken() {
	o.BuyToken.Unset()
}

// GetSellToken returns the SellToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetSellToken() string {
	if o == nil || IsNil(o.SellToken.Get()) {
		var ret string
		return ret
	}
	return *o.SellToken.Get()
}

// GetSellTokenOk returns a tuple with the SellToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetSellTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellToken.Get(), o.SellToken.IsSet()
}

// HasSellToken returns a boolean if a field has been set.
func (o *DexTradeDTO) HasSellToken() bool {
	if o != nil && o.SellToken.IsSet() {
		return true
	}

	return false
}

// SetSellToken gets a reference to the given NullableString and assigns it to the SellToken field.
func (o *DexTradeDTO) SetSellToken(v string) {
	o.SellToken.Set(&v)
}
// SetSellTokenNil sets the value for SellToken to be an explicit nil
func (o *DexTradeDTO) SetSellTokenNil() {
	o.SellToken.Set(nil)
}

// UnsetSellToken ensures that no value is present for SellToken, not even an explicit nil
func (o *DexTradeDTO) UnsetSellToken() {
	o.SellToken.Unset()
}

// GetCreateEpoch returns the CreateEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetCreateEpoch() string {
	if o == nil || IsNil(o.CreateEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.CreateEpoch.Get()
}

// GetCreateEpochOk returns a tuple with the CreateEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetCreateEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreateEpoch.Get(), o.CreateEpoch.IsSet()
}

// HasCreateEpoch returns a boolean if a field has been set.
func (o *DexTradeDTO) HasCreateEpoch() bool {
	if o != nil && o.CreateEpoch.IsSet() {
		return true
	}

	return false
}

// SetCreateEpoch gets a reference to the given NullableString and assigns it to the CreateEpoch field.
func (o *DexTradeDTO) SetCreateEpoch(v string) {
	o.CreateEpoch.Set(&v)
}
// SetCreateEpochNil sets the value for CreateEpoch to be an explicit nil
func (o *DexTradeDTO) SetCreateEpochNil() {
	o.CreateEpoch.Set(nil)
}

// UnsetCreateEpoch ensures that no value is present for CreateEpoch, not even an explicit nil
func (o *DexTradeDTO) UnsetCreateEpoch() {
	o.CreateEpoch.Unset()
}

// GetRevertEpoch returns the RevertEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetRevertEpoch() string {
	if o == nil || IsNil(o.RevertEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.RevertEpoch.Get()
}

// GetRevertEpochOk returns a tuple with the RevertEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetRevertEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RevertEpoch.Get(), o.RevertEpoch.IsSet()
}

// HasRevertEpoch returns a boolean if a field has been set.
func (o *DexTradeDTO) HasRevertEpoch() bool {
	if o != nil && o.RevertEpoch.IsSet() {
		return true
	}

	return false
}

// SetRevertEpoch gets a reference to the given NullableString and assigns it to the RevertEpoch field.
func (o *DexTradeDTO) SetRevertEpoch(v string) {
	o.RevertEpoch.Set(&v)
}
// SetRevertEpochNil sets the value for RevertEpoch to be an explicit nil
func (o *DexTradeDTO) SetRevertEpochNil() {
	o.RevertEpoch.Set(nil)
}

// UnsetRevertEpoch ensures that no value is present for RevertEpoch, not even an explicit nil
func (o *DexTradeDTO) UnsetRevertEpoch() {
	o.RevertEpoch.Unset()
}

// GetTxHash returns the TxHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetTxHash() string {
	if o == nil || IsNil(o.TxHash.Get()) {
		var ret string
		return ret
	}
	return *o.TxHash.Get()
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxHash.Get(), o.TxHash.IsSet()
}

// HasTxHash returns a boolean if a field has been set.
func (o *DexTradeDTO) HasTxHash() bool {
	if o != nil && o.TxHash.IsSet() {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given NullableString and assigns it to the TxHash field.
func (o *DexTradeDTO) SetTxHash(v string) {
	o.TxHash.Set(&v)
}
// SetTxHashNil sets the value for TxHash to be an explicit nil
func (o *DexTradeDTO) SetTxHashNil() {
	o.TxHash.Set(nil)
}

// UnsetTxHash ensures that no value is present for TxHash, not even an explicit nil
func (o *DexTradeDTO) UnsetTxHash() {
	o.TxHash.Unset()
}

// GetTxLogIndex returns the TxLogIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetTxLogIndex() string {
	if o == nil || IsNil(o.TxLogIndex.Get()) {
		var ret string
		return ret
	}
	return *o.TxLogIndex.Get()
}

// GetTxLogIndexOk returns a tuple with the TxLogIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetTxLogIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxLogIndex.Get(), o.TxLogIndex.IsSet()
}

// HasTxLogIndex returns a boolean if a field has been set.
func (o *DexTradeDTO) HasTxLogIndex() bool {
	if o != nil && o.TxLogIndex.IsSet() {
		return true
	}

	return false
}

// SetTxLogIndex gets a reference to the given NullableString and assigns it to the TxLogIndex field.
func (o *DexTradeDTO) SetTxLogIndex(v string) {
	o.TxLogIndex.Set(&v)
}
// SetTxLogIndexNil sets the value for TxLogIndex to be an explicit nil
func (o *DexTradeDTO) SetTxLogIndexNil() {
	o.TxLogIndex.Set(nil)
}

// UnsetTxLogIndex ensures that no value is present for TxLogIndex, not even an explicit nil
func (o *DexTradeDTO) UnsetTxLogIndex() {
	o.TxLogIndex.Unset()
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *DexTradeDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexTradeDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *DexTradeDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *DexTradeDTO) SetVid(v int64) {
	o.Vid = &v
}

// GetPoolId returns the PoolId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetPoolId() string {
	if o == nil || IsNil(o.PoolId.Get()) {
		var ret string
		return ret
	}
	return *o.PoolId.Get()
}

// GetPoolIdOk returns a tuple with the PoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetPoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PoolId.Get(), o.PoolId.IsSet()
}

// HasPoolId returns a boolean if a field has been set.
func (o *DexTradeDTO) HasPoolId() bool {
	if o != nil && o.PoolId.IsSet() {
		return true
	}

	return false
}

// SetPoolId gets a reference to the given NullableString and assigns it to the PoolId field.
func (o *DexTradeDTO) SetPoolId(v string) {
	o.PoolId.Set(&v)
}
// SetPoolIdNil sets the value for PoolId to be an explicit nil
func (o *DexTradeDTO) SetPoolIdNil() {
	o.PoolId.Set(nil)
}

// UnsetPoolId ensures that no value is present for PoolId, not even an explicit nil
func (o *DexTradeDTO) UnsetPoolId() {
	o.PoolId.Unset()
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexTradeDTO) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId.Get()) {
		var ret string
		return ret
	}
	return *o.TransactionId.Get()
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexTradeDTO) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionId.Get(), o.TransactionId.IsSet()
}

// HasTransactionId returns a boolean if a field has been set.
func (o *DexTradeDTO) HasTransactionId() bool {
	if o != nil && o.TransactionId.IsSet() {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given NullableString and assigns it to the TransactionId field.
func (o *DexTradeDTO) SetTransactionId(v string) {
	o.TransactionId.Set(&v)
}
// SetTransactionIdNil sets the value for TransactionId to be an explicit nil
func (o *DexTradeDTO) SetTransactionIdNil() {
	o.TransactionId.Set(nil)
}

// UnsetTransactionId ensures that no value is present for TransactionId, not even an explicit nil
func (o *DexTradeDTO) UnsetTransactionId() {
	o.TransactionId.Unset()
}

// GetEvaluatedPrice returns the EvaluatedPrice field value if set, zero value otherwise.
func (o *DexTradeDTO) GetEvaluatedPrice() float64 {
	if o == nil || IsNil(o.EvaluatedPrice) {
		var ret float64
		return ret
	}
	return *o.EvaluatedPrice
}

// GetEvaluatedPriceOk returns a tuple with the EvaluatedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexTradeDTO) GetEvaluatedPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.EvaluatedPrice) {
		return nil, false
	}
	return o.EvaluatedPrice, true
}

// HasEvaluatedPrice returns a boolean if a field has been set.
func (o *DexTradeDTO) HasEvaluatedPrice() bool {
	if o != nil && !IsNil(o.EvaluatedPrice) {
		return true
	}

	return false
}

// SetEvaluatedPrice gets a reference to the given float64 and assigns it to the EvaluatedPrice field.
func (o *DexTradeDTO) SetEvaluatedPrice(v float64) {
	o.EvaluatedPrice = &v
}

// GetEvaluatedAmount returns the EvaluatedAmount field value if set, zero value otherwise.
func (o *DexTradeDTO) GetEvaluatedAmount() float64 {
	if o == nil || IsNil(o.EvaluatedAmount) {
		var ret float64
		return ret
	}
	return *o.EvaluatedAmount
}

// GetEvaluatedAmountOk returns a tuple with the EvaluatedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexTradeDTO) GetEvaluatedAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.EvaluatedAmount) {
		return nil, false
	}
	return o.EvaluatedAmount, true
}

// HasEvaluatedAmount returns a boolean if a field has been set.
func (o *DexTradeDTO) HasEvaluatedAmount() bool {
	if o != nil && !IsNil(o.EvaluatedAmount) {
		return true
	}

	return false
}

// SetEvaluatedAmount gets a reference to the given float64 and assigns it to the EvaluatedAmount field.
func (o *DexTradeDTO) SetEvaluatedAmount(v float64) {
	o.EvaluatedAmount = &v
}

// GetEvaluatedAggressor returns the EvaluatedAggressor field value if set, zero value otherwise.
func (o *DexTradeDTO) GetEvaluatedAggressor() TransactionsETradeAggressiveSide {
	if o == nil || IsNil(o.EvaluatedAggressor) {
		var ret TransactionsETradeAggressiveSide
		return ret
	}
	return *o.EvaluatedAggressor
}

// GetEvaluatedAggressorOk returns a tuple with the EvaluatedAggressor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexTradeDTO) GetEvaluatedAggressorOk() (*TransactionsETradeAggressiveSide, bool) {
	if o == nil || IsNil(o.EvaluatedAggressor) {
		return nil, false
	}
	return o.EvaluatedAggressor, true
}

// HasEvaluatedAggressor returns a boolean if a field has been set.
func (o *DexTradeDTO) HasEvaluatedAggressor() bool {
	if o != nil && !IsNil(o.EvaluatedAggressor) {
		return true
	}

	return false
}

// SetEvaluatedAggressor gets a reference to the given TransactionsETradeAggressiveSide and assigns it to the EvaluatedAggressor field.
func (o *DexTradeDTO) SetEvaluatedAggressor(v TransactionsETradeAggressiveSide) {
	o.EvaluatedAggressor = &v
}

func (o DexTradeDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DexTradeDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Order.IsSet() {
		toSerialize["order"] = o.Order.Get()
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.SellVolume.IsSet() {
		toSerialize["sell_volume"] = o.SellVolume.Get()
	}
	if o.BuyVolume.IsSet() {
		toSerialize["buy_volume"] = o.BuyVolume.Get()
	}
	if o.TradeBatchId.IsSet() {
		toSerialize["trade_batch_id"] = o.TradeBatchId.Get()
	}
	if o.TradeEpoch.IsSet() {
		toSerialize["trade_epoch"] = o.TradeEpoch.Get()
	}
	if o.BuyToken.IsSet() {
		toSerialize["buy_token"] = o.BuyToken.Get()
	}
	if o.SellToken.IsSet() {
		toSerialize["sell_token"] = o.SellToken.Get()
	}
	if o.CreateEpoch.IsSet() {
		toSerialize["create_epoch"] = o.CreateEpoch.Get()
	}
	if o.RevertEpoch.IsSet() {
		toSerialize["revert_epoch"] = o.RevertEpoch.Get()
	}
	if o.TxHash.IsSet() {
		toSerialize["tx_hash"] = o.TxHash.Get()
	}
	if o.TxLogIndex.IsSet() {
		toSerialize["tx_log_index"] = o.TxLogIndex.Get()
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	if o.PoolId.IsSet() {
		toSerialize["pool_id"] = o.PoolId.Get()
	}
	if o.TransactionId.IsSet() {
		toSerialize["transaction_id"] = o.TransactionId.Get()
	}
	// skip: evaluated_price is readOnly
	// skip: evaluated_amount is readOnly
	if !IsNil(o.EvaluatedAggressor) {
		toSerialize["evaluated_aggressor"] = o.EvaluatedAggressor
	}
	return toSerialize, nil
}

type NullableDexTradeDTO struct {
	value *DexTradeDTO
	isSet bool
}

func (v NullableDexTradeDTO) Get() *DexTradeDTO {
	return v.value
}

func (v *NullableDexTradeDTO) Set(val *DexTradeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDexTradeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDexTradeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDexTradeDTO(val *DexTradeDTO) *NullableDexTradeDTO {
	return &NullableDexTradeDTO{value: val, isSet: true}
}

func (v NullableDexTradeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDexTradeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


