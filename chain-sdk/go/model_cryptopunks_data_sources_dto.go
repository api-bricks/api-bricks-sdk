/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CRYPTOPUNKSDataSourcesDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CRYPTOPUNKSDataSourcesDTO{}

// CRYPTOPUNKSDataSourcesDTO struct for CRYPTOPUNKSDataSourcesDTO
type CRYPTOPUNKSDataSourcesDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	Vid *int32 `json:"vid,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
	// 
	CausalityRegion *int32 `json:"causality_region,omitempty"`
	// 
	ManifestIdx *int32 `json:"manifest_idx,omitempty"`
	// 
	Parent NullableInt32 `json:"parent,omitempty"`
	// 
	Id NullableString `json:"id,omitempty"`
	// 
	Param NullableString `json:"param,omitempty"`
	// 
	Context NullableString `json:"context,omitempty"`
	// 
	DoneAt NullableInt32 `json:"done_at,omitempty"`
}

// NewCRYPTOPUNKSDataSourcesDTO instantiates a new CRYPTOPUNKSDataSourcesDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCRYPTOPUNKSDataSourcesDTO() *CRYPTOPUNKSDataSourcesDTO {
	this := CRYPTOPUNKSDataSourcesDTO{}
	return &this
}

// NewCRYPTOPUNKSDataSourcesDTOWithDefaults instantiates a new CRYPTOPUNKSDataSourcesDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCRYPTOPUNKSDataSourcesDTOWithDefaults() *CRYPTOPUNKSDataSourcesDTO {
	this := CRYPTOPUNKSDataSourcesDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *CRYPTOPUNKSDataSourcesDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *CRYPTOPUNKSDataSourcesDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *CRYPTOPUNKSDataSourcesDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *CRYPTOPUNKSDataSourcesDTO) GetVid() int32 {
	if o == nil || IsNil(o.Vid) {
		var ret int32
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) GetVidOk() (*int32, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int32 and assigns it to the Vid field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetVid(v int32) {
	o.Vid = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSDataSourcesDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSDataSourcesDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

// GetCausalityRegion returns the CausalityRegion field value if set, zero value otherwise.
func (o *CRYPTOPUNKSDataSourcesDTO) GetCausalityRegion() int32 {
	if o == nil || IsNil(o.CausalityRegion) {
		var ret int32
		return ret
	}
	return *o.CausalityRegion
}

// GetCausalityRegionOk returns a tuple with the CausalityRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) GetCausalityRegionOk() (*int32, bool) {
	if o == nil || IsNil(o.CausalityRegion) {
		return nil, false
	}
	return o.CausalityRegion, true
}

// HasCausalityRegion returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasCausalityRegion() bool {
	if o != nil && !IsNil(o.CausalityRegion) {
		return true
	}

	return false
}

// SetCausalityRegion gets a reference to the given int32 and assigns it to the CausalityRegion field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetCausalityRegion(v int32) {
	o.CausalityRegion = &v
}

// GetManifestIdx returns the ManifestIdx field value if set, zero value otherwise.
func (o *CRYPTOPUNKSDataSourcesDTO) GetManifestIdx() int32 {
	if o == nil || IsNil(o.ManifestIdx) {
		var ret int32
		return ret
	}
	return *o.ManifestIdx
}

// GetManifestIdxOk returns a tuple with the ManifestIdx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) GetManifestIdxOk() (*int32, bool) {
	if o == nil || IsNil(o.ManifestIdx) {
		return nil, false
	}
	return o.ManifestIdx, true
}

// HasManifestIdx returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasManifestIdx() bool {
	if o != nil && !IsNil(o.ManifestIdx) {
		return true
	}

	return false
}

// SetManifestIdx gets a reference to the given int32 and assigns it to the ManifestIdx field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetManifestIdx(v int32) {
	o.ManifestIdx = &v
}

// GetParent returns the Parent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSDataSourcesDTO) GetParent() int32 {
	if o == nil || IsNil(o.Parent.Get()) {
		var ret int32
		return ret
	}
	return *o.Parent.Get()
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSDataSourcesDTO) GetParentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parent.Get(), o.Parent.IsSet()
}

// HasParent returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasParent() bool {
	if o != nil && o.Parent.IsSet() {
		return true
	}

	return false
}

// SetParent gets a reference to the given NullableInt32 and assigns it to the Parent field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetParent(v int32) {
	o.Parent.Set(&v)
}
// SetParentNil sets the value for Parent to be an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) SetParentNil() {
	o.Parent.Set(nil)
}

// UnsetParent ensures that no value is present for Parent, not even an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) UnsetParent() {
	o.Parent.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSDataSourcesDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSDataSourcesDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) UnsetId() {
	o.Id.Unset()
}

// GetParam returns the Param field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSDataSourcesDTO) GetParam() string {
	if o == nil || IsNil(o.Param.Get()) {
		var ret string
		return ret
	}
	return *o.Param.Get()
}

// GetParamOk returns a tuple with the Param field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSDataSourcesDTO) GetParamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Param.Get(), o.Param.IsSet()
}

// HasParam returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasParam() bool {
	if o != nil && o.Param.IsSet() {
		return true
	}

	return false
}

// SetParam gets a reference to the given NullableString and assigns it to the Param field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetParam(v string) {
	o.Param.Set(&v)
}
// SetParamNil sets the value for Param to be an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) SetParamNil() {
	o.Param.Set(nil)
}

// UnsetParam ensures that no value is present for Param, not even an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) UnsetParam() {
	o.Param.Unset()
}

// GetContext returns the Context field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSDataSourcesDTO) GetContext() string {
	if o == nil || IsNil(o.Context.Get()) {
		var ret string
		return ret
	}
	return *o.Context.Get()
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSDataSourcesDTO) GetContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Context.Get(), o.Context.IsSet()
}

// HasContext returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasContext() bool {
	if o != nil && o.Context.IsSet() {
		return true
	}

	return false
}

// SetContext gets a reference to the given NullableString and assigns it to the Context field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetContext(v string) {
	o.Context.Set(&v)
}
// SetContextNil sets the value for Context to be an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) SetContextNil() {
	o.Context.Set(nil)
}

// UnsetContext ensures that no value is present for Context, not even an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) UnsetContext() {
	o.Context.Unset()
}

// GetDoneAt returns the DoneAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSDataSourcesDTO) GetDoneAt() int32 {
	if o == nil || IsNil(o.DoneAt.Get()) {
		var ret int32
		return ret
	}
	return *o.DoneAt.Get()
}

// GetDoneAtOk returns a tuple with the DoneAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSDataSourcesDTO) GetDoneAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoneAt.Get(), o.DoneAt.IsSet()
}

// HasDoneAt returns a boolean if a field has been set.
func (o *CRYPTOPUNKSDataSourcesDTO) HasDoneAt() bool {
	if o != nil && o.DoneAt.IsSet() {
		return true
	}

	return false
}

// SetDoneAt gets a reference to the given NullableInt32 and assigns it to the DoneAt field.
func (o *CRYPTOPUNKSDataSourcesDTO) SetDoneAt(v int32) {
	o.DoneAt.Set(&v)
}
// SetDoneAtNil sets the value for DoneAt to be an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) SetDoneAtNil() {
	o.DoneAt.Set(nil)
}

// UnsetDoneAt ensures that no value is present for DoneAt, not even an explicit nil
func (o *CRYPTOPUNKSDataSourcesDTO) UnsetDoneAt() {
	o.DoneAt.Unset()
}

func (o CRYPTOPUNKSDataSourcesDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CRYPTOPUNKSDataSourcesDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	if !IsNil(o.CausalityRegion) {
		toSerialize["causality_region"] = o.CausalityRegion
	}
	if !IsNil(o.ManifestIdx) {
		toSerialize["manifest_idx"] = o.ManifestIdx
	}
	if o.Parent.IsSet() {
		toSerialize["parent"] = o.Parent.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Param.IsSet() {
		toSerialize["param"] = o.Param.Get()
	}
	if o.Context.IsSet() {
		toSerialize["context"] = o.Context.Get()
	}
	if o.DoneAt.IsSet() {
		toSerialize["done_at"] = o.DoneAt.Get()
	}
	return toSerialize, nil
}

type NullableCRYPTOPUNKSDataSourcesDTO struct {
	value *CRYPTOPUNKSDataSourcesDTO
	isSet bool
}

func (v NullableCRYPTOPUNKSDataSourcesDTO) Get() *CRYPTOPUNKSDataSourcesDTO {
	return v.value
}

func (v *NullableCRYPTOPUNKSDataSourcesDTO) Set(val *CRYPTOPUNKSDataSourcesDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCRYPTOPUNKSDataSourcesDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCRYPTOPUNKSDataSourcesDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCRYPTOPUNKSDataSourcesDTO(val *CRYPTOPUNKSDataSourcesDTO) *NullableCRYPTOPUNKSDataSourcesDTO {
	return &NullableCRYPTOPUNKSDataSourcesDTO{value: val, isSet: true}
}

func (v NullableCRYPTOPUNKSDataSourcesDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCRYPTOPUNKSDataSourcesDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


