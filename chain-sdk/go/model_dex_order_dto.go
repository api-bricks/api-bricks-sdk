/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the DexOrderDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DexOrderDTO{}

// DexOrderDTO Order submitted by an user. It has a validity (dates) so they can only be executed from/until some given batches. Partial executions of this trades must respect the limit price.
type DexOrderDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// Identifier, format: (owner address)-(order id)
	Id NullableString `json:"id,omitempty"`
	// Reference to owner.
	Owner NullableString `json:"owner,omitempty"`
	// Order id.
	OrderId *int32 `json:"order_id,omitempty"`
	// Batch id from which order became valid.
	FromBatchId NullableString `json:"from_batch_id,omitempty"`
	// Start of epoch in which order was placed and became valid.
	FromEpoch NullableString `json:"from_epoch,omitempty"`
	// Batch id until which trade was still valid.
	UntilBatchId NullableString `json:"until_batch_id,omitempty"`
	// End of epoch in which order was placed.
	UntilEpoch NullableString `json:"until_epoch,omitempty"`
	// Identifier of token that was bought.
	BuyToken NullableString `json:"buy_token,omitempty"`
	// Identifier of token that was sold.
	SellToken NullableString `json:"sell_token,omitempty"`
	// Price enumerator.
	PriceNumerator NullableString `json:"price_numerator,omitempty"`
	// Price denominator.
	PriceDenominator NullableString `json:"price_denominator,omitempty"`
	// Maximum sell amount.
	MaxSellAmount NullableString `json:"max_sell_amount,omitempty"`
	// Minimum receive amount.
	MinReceiveAmount NullableString `json:"min_receive_amount,omitempty"`
	// Sold volume.
	SoldVolume NullableString `json:"sold_volume,omitempty"`
	// Bought volume.
	BoughtVolume NullableString `json:"bought_volume,omitempty"`
	// Epoch in which order was created.
	CreateEpoch NullableString `json:"create_epoch,omitempty"`
	// Epoch in which order was cancelled.
	CancelEpoch NullableString `json:"cancel_epoch,omitempty"`
	// Epoch in which order was deleted.
	DeleteEpoch NullableString `json:"delete_epoch,omitempty"`
	// Transaction hash.
	TxHash NullableString `json:"tx_hash,omitempty"`
	// Event index within transaction.
	TxLogIndex NullableString `json:"tx_log_index,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
}

// NewDexOrderDTO instantiates a new DexOrderDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDexOrderDTO() *DexOrderDTO {
	this := DexOrderDTO{}
	return &this
}

// NewDexOrderDTOWithDefaults instantiates a new DexOrderDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDexOrderDTOWithDefaults() *DexOrderDTO {
	this := DexOrderDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *DexOrderDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexOrderDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *DexOrderDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *DexOrderDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *DexOrderDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexOrderDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *DexOrderDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *DexOrderDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *DexOrderDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexOrderDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *DexOrderDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *DexOrderDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DexOrderDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DexOrderDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DexOrderDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DexOrderDTO) UnsetId() {
	o.Id.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetOwner() string {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret string
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *DexOrderDTO) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableString and assigns it to the Owner field.
func (o *DexOrderDTO) SetOwner(v string) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *DexOrderDTO) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *DexOrderDTO) UnsetOwner() {
	o.Owner.Unset()
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *DexOrderDTO) GetOrderId() int32 {
	if o == nil || IsNil(o.OrderId) {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexOrderDTO) GetOrderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *DexOrderDTO) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *DexOrderDTO) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetFromBatchId returns the FromBatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetFromBatchId() string {
	if o == nil || IsNil(o.FromBatchId.Get()) {
		var ret string
		return ret
	}
	return *o.FromBatchId.Get()
}

// GetFromBatchIdOk returns a tuple with the FromBatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetFromBatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromBatchId.Get(), o.FromBatchId.IsSet()
}

// HasFromBatchId returns a boolean if a field has been set.
func (o *DexOrderDTO) HasFromBatchId() bool {
	if o != nil && o.FromBatchId.IsSet() {
		return true
	}

	return false
}

// SetFromBatchId gets a reference to the given NullableString and assigns it to the FromBatchId field.
func (o *DexOrderDTO) SetFromBatchId(v string) {
	o.FromBatchId.Set(&v)
}
// SetFromBatchIdNil sets the value for FromBatchId to be an explicit nil
func (o *DexOrderDTO) SetFromBatchIdNil() {
	o.FromBatchId.Set(nil)
}

// UnsetFromBatchId ensures that no value is present for FromBatchId, not even an explicit nil
func (o *DexOrderDTO) UnsetFromBatchId() {
	o.FromBatchId.Unset()
}

// GetFromEpoch returns the FromEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetFromEpoch() string {
	if o == nil || IsNil(o.FromEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.FromEpoch.Get()
}

// GetFromEpochOk returns a tuple with the FromEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetFromEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromEpoch.Get(), o.FromEpoch.IsSet()
}

// HasFromEpoch returns a boolean if a field has been set.
func (o *DexOrderDTO) HasFromEpoch() bool {
	if o != nil && o.FromEpoch.IsSet() {
		return true
	}

	return false
}

// SetFromEpoch gets a reference to the given NullableString and assigns it to the FromEpoch field.
func (o *DexOrderDTO) SetFromEpoch(v string) {
	o.FromEpoch.Set(&v)
}
// SetFromEpochNil sets the value for FromEpoch to be an explicit nil
func (o *DexOrderDTO) SetFromEpochNil() {
	o.FromEpoch.Set(nil)
}

// UnsetFromEpoch ensures that no value is present for FromEpoch, not even an explicit nil
func (o *DexOrderDTO) UnsetFromEpoch() {
	o.FromEpoch.Unset()
}

// GetUntilBatchId returns the UntilBatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetUntilBatchId() string {
	if o == nil || IsNil(o.UntilBatchId.Get()) {
		var ret string
		return ret
	}
	return *o.UntilBatchId.Get()
}

// GetUntilBatchIdOk returns a tuple with the UntilBatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetUntilBatchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UntilBatchId.Get(), o.UntilBatchId.IsSet()
}

// HasUntilBatchId returns a boolean if a field has been set.
func (o *DexOrderDTO) HasUntilBatchId() bool {
	if o != nil && o.UntilBatchId.IsSet() {
		return true
	}

	return false
}

// SetUntilBatchId gets a reference to the given NullableString and assigns it to the UntilBatchId field.
func (o *DexOrderDTO) SetUntilBatchId(v string) {
	o.UntilBatchId.Set(&v)
}
// SetUntilBatchIdNil sets the value for UntilBatchId to be an explicit nil
func (o *DexOrderDTO) SetUntilBatchIdNil() {
	o.UntilBatchId.Set(nil)
}

// UnsetUntilBatchId ensures that no value is present for UntilBatchId, not even an explicit nil
func (o *DexOrderDTO) UnsetUntilBatchId() {
	o.UntilBatchId.Unset()
}

// GetUntilEpoch returns the UntilEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetUntilEpoch() string {
	if o == nil || IsNil(o.UntilEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.UntilEpoch.Get()
}

// GetUntilEpochOk returns a tuple with the UntilEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetUntilEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UntilEpoch.Get(), o.UntilEpoch.IsSet()
}

// HasUntilEpoch returns a boolean if a field has been set.
func (o *DexOrderDTO) HasUntilEpoch() bool {
	if o != nil && o.UntilEpoch.IsSet() {
		return true
	}

	return false
}

// SetUntilEpoch gets a reference to the given NullableString and assigns it to the UntilEpoch field.
func (o *DexOrderDTO) SetUntilEpoch(v string) {
	o.UntilEpoch.Set(&v)
}
// SetUntilEpochNil sets the value for UntilEpoch to be an explicit nil
func (o *DexOrderDTO) SetUntilEpochNil() {
	o.UntilEpoch.Set(nil)
}

// UnsetUntilEpoch ensures that no value is present for UntilEpoch, not even an explicit nil
func (o *DexOrderDTO) UnsetUntilEpoch() {
	o.UntilEpoch.Unset()
}

// GetBuyToken returns the BuyToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetBuyToken() string {
	if o == nil || IsNil(o.BuyToken.Get()) {
		var ret string
		return ret
	}
	return *o.BuyToken.Get()
}

// GetBuyTokenOk returns a tuple with the BuyToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetBuyTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuyToken.Get(), o.BuyToken.IsSet()
}

// HasBuyToken returns a boolean if a field has been set.
func (o *DexOrderDTO) HasBuyToken() bool {
	if o != nil && o.BuyToken.IsSet() {
		return true
	}

	return false
}

// SetBuyToken gets a reference to the given NullableString and assigns it to the BuyToken field.
func (o *DexOrderDTO) SetBuyToken(v string) {
	o.BuyToken.Set(&v)
}
// SetBuyTokenNil sets the value for BuyToken to be an explicit nil
func (o *DexOrderDTO) SetBuyTokenNil() {
	o.BuyToken.Set(nil)
}

// UnsetBuyToken ensures that no value is present for BuyToken, not even an explicit nil
func (o *DexOrderDTO) UnsetBuyToken() {
	o.BuyToken.Unset()
}

// GetSellToken returns the SellToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetSellToken() string {
	if o == nil || IsNil(o.SellToken.Get()) {
		var ret string
		return ret
	}
	return *o.SellToken.Get()
}

// GetSellTokenOk returns a tuple with the SellToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetSellTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellToken.Get(), o.SellToken.IsSet()
}

// HasSellToken returns a boolean if a field has been set.
func (o *DexOrderDTO) HasSellToken() bool {
	if o != nil && o.SellToken.IsSet() {
		return true
	}

	return false
}

// SetSellToken gets a reference to the given NullableString and assigns it to the SellToken field.
func (o *DexOrderDTO) SetSellToken(v string) {
	o.SellToken.Set(&v)
}
// SetSellTokenNil sets the value for SellToken to be an explicit nil
func (o *DexOrderDTO) SetSellTokenNil() {
	o.SellToken.Set(nil)
}

// UnsetSellToken ensures that no value is present for SellToken, not even an explicit nil
func (o *DexOrderDTO) UnsetSellToken() {
	o.SellToken.Unset()
}

// GetPriceNumerator returns the PriceNumerator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetPriceNumerator() string {
	if o == nil || IsNil(o.PriceNumerator.Get()) {
		var ret string
		return ret
	}
	return *o.PriceNumerator.Get()
}

// GetPriceNumeratorOk returns a tuple with the PriceNumerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetPriceNumeratorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceNumerator.Get(), o.PriceNumerator.IsSet()
}

// HasPriceNumerator returns a boolean if a field has been set.
func (o *DexOrderDTO) HasPriceNumerator() bool {
	if o != nil && o.PriceNumerator.IsSet() {
		return true
	}

	return false
}

// SetPriceNumerator gets a reference to the given NullableString and assigns it to the PriceNumerator field.
func (o *DexOrderDTO) SetPriceNumerator(v string) {
	o.PriceNumerator.Set(&v)
}
// SetPriceNumeratorNil sets the value for PriceNumerator to be an explicit nil
func (o *DexOrderDTO) SetPriceNumeratorNil() {
	o.PriceNumerator.Set(nil)
}

// UnsetPriceNumerator ensures that no value is present for PriceNumerator, not even an explicit nil
func (o *DexOrderDTO) UnsetPriceNumerator() {
	o.PriceNumerator.Unset()
}

// GetPriceDenominator returns the PriceDenominator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetPriceDenominator() string {
	if o == nil || IsNil(o.PriceDenominator.Get()) {
		var ret string
		return ret
	}
	return *o.PriceDenominator.Get()
}

// GetPriceDenominatorOk returns a tuple with the PriceDenominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetPriceDenominatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceDenominator.Get(), o.PriceDenominator.IsSet()
}

// HasPriceDenominator returns a boolean if a field has been set.
func (o *DexOrderDTO) HasPriceDenominator() bool {
	if o != nil && o.PriceDenominator.IsSet() {
		return true
	}

	return false
}

// SetPriceDenominator gets a reference to the given NullableString and assigns it to the PriceDenominator field.
func (o *DexOrderDTO) SetPriceDenominator(v string) {
	o.PriceDenominator.Set(&v)
}
// SetPriceDenominatorNil sets the value for PriceDenominator to be an explicit nil
func (o *DexOrderDTO) SetPriceDenominatorNil() {
	o.PriceDenominator.Set(nil)
}

// UnsetPriceDenominator ensures that no value is present for PriceDenominator, not even an explicit nil
func (o *DexOrderDTO) UnsetPriceDenominator() {
	o.PriceDenominator.Unset()
}

// GetMaxSellAmount returns the MaxSellAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetMaxSellAmount() string {
	if o == nil || IsNil(o.MaxSellAmount.Get()) {
		var ret string
		return ret
	}
	return *o.MaxSellAmount.Get()
}

// GetMaxSellAmountOk returns a tuple with the MaxSellAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetMaxSellAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSellAmount.Get(), o.MaxSellAmount.IsSet()
}

// HasMaxSellAmount returns a boolean if a field has been set.
func (o *DexOrderDTO) HasMaxSellAmount() bool {
	if o != nil && o.MaxSellAmount.IsSet() {
		return true
	}

	return false
}

// SetMaxSellAmount gets a reference to the given NullableString and assigns it to the MaxSellAmount field.
func (o *DexOrderDTO) SetMaxSellAmount(v string) {
	o.MaxSellAmount.Set(&v)
}
// SetMaxSellAmountNil sets the value for MaxSellAmount to be an explicit nil
func (o *DexOrderDTO) SetMaxSellAmountNil() {
	o.MaxSellAmount.Set(nil)
}

// UnsetMaxSellAmount ensures that no value is present for MaxSellAmount, not even an explicit nil
func (o *DexOrderDTO) UnsetMaxSellAmount() {
	o.MaxSellAmount.Unset()
}

// GetMinReceiveAmount returns the MinReceiveAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetMinReceiveAmount() string {
	if o == nil || IsNil(o.MinReceiveAmount.Get()) {
		var ret string
		return ret
	}
	return *o.MinReceiveAmount.Get()
}

// GetMinReceiveAmountOk returns a tuple with the MinReceiveAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetMinReceiveAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinReceiveAmount.Get(), o.MinReceiveAmount.IsSet()
}

// HasMinReceiveAmount returns a boolean if a field has been set.
func (o *DexOrderDTO) HasMinReceiveAmount() bool {
	if o != nil && o.MinReceiveAmount.IsSet() {
		return true
	}

	return false
}

// SetMinReceiveAmount gets a reference to the given NullableString and assigns it to the MinReceiveAmount field.
func (o *DexOrderDTO) SetMinReceiveAmount(v string) {
	o.MinReceiveAmount.Set(&v)
}
// SetMinReceiveAmountNil sets the value for MinReceiveAmount to be an explicit nil
func (o *DexOrderDTO) SetMinReceiveAmountNil() {
	o.MinReceiveAmount.Set(nil)
}

// UnsetMinReceiveAmount ensures that no value is present for MinReceiveAmount, not even an explicit nil
func (o *DexOrderDTO) UnsetMinReceiveAmount() {
	o.MinReceiveAmount.Unset()
}

// GetSoldVolume returns the SoldVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetSoldVolume() string {
	if o == nil || IsNil(o.SoldVolume.Get()) {
		var ret string
		return ret
	}
	return *o.SoldVolume.Get()
}

// GetSoldVolumeOk returns a tuple with the SoldVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetSoldVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SoldVolume.Get(), o.SoldVolume.IsSet()
}

// HasSoldVolume returns a boolean if a field has been set.
func (o *DexOrderDTO) HasSoldVolume() bool {
	if o != nil && o.SoldVolume.IsSet() {
		return true
	}

	return false
}

// SetSoldVolume gets a reference to the given NullableString and assigns it to the SoldVolume field.
func (o *DexOrderDTO) SetSoldVolume(v string) {
	o.SoldVolume.Set(&v)
}
// SetSoldVolumeNil sets the value for SoldVolume to be an explicit nil
func (o *DexOrderDTO) SetSoldVolumeNil() {
	o.SoldVolume.Set(nil)
}

// UnsetSoldVolume ensures that no value is present for SoldVolume, not even an explicit nil
func (o *DexOrderDTO) UnsetSoldVolume() {
	o.SoldVolume.Unset()
}

// GetBoughtVolume returns the BoughtVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetBoughtVolume() string {
	if o == nil || IsNil(o.BoughtVolume.Get()) {
		var ret string
		return ret
	}
	return *o.BoughtVolume.Get()
}

// GetBoughtVolumeOk returns a tuple with the BoughtVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetBoughtVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoughtVolume.Get(), o.BoughtVolume.IsSet()
}

// HasBoughtVolume returns a boolean if a field has been set.
func (o *DexOrderDTO) HasBoughtVolume() bool {
	if o != nil && o.BoughtVolume.IsSet() {
		return true
	}

	return false
}

// SetBoughtVolume gets a reference to the given NullableString and assigns it to the BoughtVolume field.
func (o *DexOrderDTO) SetBoughtVolume(v string) {
	o.BoughtVolume.Set(&v)
}
// SetBoughtVolumeNil sets the value for BoughtVolume to be an explicit nil
func (o *DexOrderDTO) SetBoughtVolumeNil() {
	o.BoughtVolume.Set(nil)
}

// UnsetBoughtVolume ensures that no value is present for BoughtVolume, not even an explicit nil
func (o *DexOrderDTO) UnsetBoughtVolume() {
	o.BoughtVolume.Unset()
}

// GetCreateEpoch returns the CreateEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetCreateEpoch() string {
	if o == nil || IsNil(o.CreateEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.CreateEpoch.Get()
}

// GetCreateEpochOk returns a tuple with the CreateEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetCreateEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreateEpoch.Get(), o.CreateEpoch.IsSet()
}

// HasCreateEpoch returns a boolean if a field has been set.
func (o *DexOrderDTO) HasCreateEpoch() bool {
	if o != nil && o.CreateEpoch.IsSet() {
		return true
	}

	return false
}

// SetCreateEpoch gets a reference to the given NullableString and assigns it to the CreateEpoch field.
func (o *DexOrderDTO) SetCreateEpoch(v string) {
	o.CreateEpoch.Set(&v)
}
// SetCreateEpochNil sets the value for CreateEpoch to be an explicit nil
func (o *DexOrderDTO) SetCreateEpochNil() {
	o.CreateEpoch.Set(nil)
}

// UnsetCreateEpoch ensures that no value is present for CreateEpoch, not even an explicit nil
func (o *DexOrderDTO) UnsetCreateEpoch() {
	o.CreateEpoch.Unset()
}

// GetCancelEpoch returns the CancelEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetCancelEpoch() string {
	if o == nil || IsNil(o.CancelEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.CancelEpoch.Get()
}

// GetCancelEpochOk returns a tuple with the CancelEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetCancelEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelEpoch.Get(), o.CancelEpoch.IsSet()
}

// HasCancelEpoch returns a boolean if a field has been set.
func (o *DexOrderDTO) HasCancelEpoch() bool {
	if o != nil && o.CancelEpoch.IsSet() {
		return true
	}

	return false
}

// SetCancelEpoch gets a reference to the given NullableString and assigns it to the CancelEpoch field.
func (o *DexOrderDTO) SetCancelEpoch(v string) {
	o.CancelEpoch.Set(&v)
}
// SetCancelEpochNil sets the value for CancelEpoch to be an explicit nil
func (o *DexOrderDTO) SetCancelEpochNil() {
	o.CancelEpoch.Set(nil)
}

// UnsetCancelEpoch ensures that no value is present for CancelEpoch, not even an explicit nil
func (o *DexOrderDTO) UnsetCancelEpoch() {
	o.CancelEpoch.Unset()
}

// GetDeleteEpoch returns the DeleteEpoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetDeleteEpoch() string {
	if o == nil || IsNil(o.DeleteEpoch.Get()) {
		var ret string
		return ret
	}
	return *o.DeleteEpoch.Get()
}

// GetDeleteEpochOk returns a tuple with the DeleteEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetDeleteEpochOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteEpoch.Get(), o.DeleteEpoch.IsSet()
}

// HasDeleteEpoch returns a boolean if a field has been set.
func (o *DexOrderDTO) HasDeleteEpoch() bool {
	if o != nil && o.DeleteEpoch.IsSet() {
		return true
	}

	return false
}

// SetDeleteEpoch gets a reference to the given NullableString and assigns it to the DeleteEpoch field.
func (o *DexOrderDTO) SetDeleteEpoch(v string) {
	o.DeleteEpoch.Set(&v)
}
// SetDeleteEpochNil sets the value for DeleteEpoch to be an explicit nil
func (o *DexOrderDTO) SetDeleteEpochNil() {
	o.DeleteEpoch.Set(nil)
}

// UnsetDeleteEpoch ensures that no value is present for DeleteEpoch, not even an explicit nil
func (o *DexOrderDTO) UnsetDeleteEpoch() {
	o.DeleteEpoch.Unset()
}

// GetTxHash returns the TxHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetTxHash() string {
	if o == nil || IsNil(o.TxHash.Get()) {
		var ret string
		return ret
	}
	return *o.TxHash.Get()
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxHash.Get(), o.TxHash.IsSet()
}

// HasTxHash returns a boolean if a field has been set.
func (o *DexOrderDTO) HasTxHash() bool {
	if o != nil && o.TxHash.IsSet() {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given NullableString and assigns it to the TxHash field.
func (o *DexOrderDTO) SetTxHash(v string) {
	o.TxHash.Set(&v)
}
// SetTxHashNil sets the value for TxHash to be an explicit nil
func (o *DexOrderDTO) SetTxHashNil() {
	o.TxHash.Set(nil)
}

// UnsetTxHash ensures that no value is present for TxHash, not even an explicit nil
func (o *DexOrderDTO) UnsetTxHash() {
	o.TxHash.Unset()
}

// GetTxLogIndex returns the TxLogIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DexOrderDTO) GetTxLogIndex() string {
	if o == nil || IsNil(o.TxLogIndex.Get()) {
		var ret string
		return ret
	}
	return *o.TxLogIndex.Get()
}

// GetTxLogIndexOk returns a tuple with the TxLogIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DexOrderDTO) GetTxLogIndexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxLogIndex.Get(), o.TxLogIndex.IsSet()
}

// HasTxLogIndex returns a boolean if a field has been set.
func (o *DexOrderDTO) HasTxLogIndex() bool {
	if o != nil && o.TxLogIndex.IsSet() {
		return true
	}

	return false
}

// SetTxLogIndex gets a reference to the given NullableString and assigns it to the TxLogIndex field.
func (o *DexOrderDTO) SetTxLogIndex(v string) {
	o.TxLogIndex.Set(&v)
}
// SetTxLogIndexNil sets the value for TxLogIndex to be an explicit nil
func (o *DexOrderDTO) SetTxLogIndexNil() {
	o.TxLogIndex.Set(nil)
}

// UnsetTxLogIndex ensures that no value is present for TxLogIndex, not even an explicit nil
func (o *DexOrderDTO) UnsetTxLogIndex() {
	o.TxLogIndex.Unset()
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *DexOrderDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DexOrderDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *DexOrderDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *DexOrderDTO) SetVid(v int64) {
	o.Vid = &v
}

func (o DexOrderDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DexOrderDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if o.FromBatchId.IsSet() {
		toSerialize["from_batch_id"] = o.FromBatchId.Get()
	}
	if o.FromEpoch.IsSet() {
		toSerialize["from_epoch"] = o.FromEpoch.Get()
	}
	if o.UntilBatchId.IsSet() {
		toSerialize["until_batch_id"] = o.UntilBatchId.Get()
	}
	if o.UntilEpoch.IsSet() {
		toSerialize["until_epoch"] = o.UntilEpoch.Get()
	}
	if o.BuyToken.IsSet() {
		toSerialize["buy_token"] = o.BuyToken.Get()
	}
	if o.SellToken.IsSet() {
		toSerialize["sell_token"] = o.SellToken.Get()
	}
	if o.PriceNumerator.IsSet() {
		toSerialize["price_numerator"] = o.PriceNumerator.Get()
	}
	if o.PriceDenominator.IsSet() {
		toSerialize["price_denominator"] = o.PriceDenominator.Get()
	}
	if o.MaxSellAmount.IsSet() {
		toSerialize["max_sell_amount"] = o.MaxSellAmount.Get()
	}
	if o.MinReceiveAmount.IsSet() {
		toSerialize["min_receive_amount"] = o.MinReceiveAmount.Get()
	}
	if o.SoldVolume.IsSet() {
		toSerialize["sold_volume"] = o.SoldVolume.Get()
	}
	if o.BoughtVolume.IsSet() {
		toSerialize["bought_volume"] = o.BoughtVolume.Get()
	}
	if o.CreateEpoch.IsSet() {
		toSerialize["create_epoch"] = o.CreateEpoch.Get()
	}
	if o.CancelEpoch.IsSet() {
		toSerialize["cancel_epoch"] = o.CancelEpoch.Get()
	}
	if o.DeleteEpoch.IsSet() {
		toSerialize["delete_epoch"] = o.DeleteEpoch.Get()
	}
	if o.TxHash.IsSet() {
		toSerialize["tx_hash"] = o.TxHash.Get()
	}
	if o.TxLogIndex.IsSet() {
		toSerialize["tx_log_index"] = o.TxLogIndex.Get()
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	return toSerialize, nil
}

type NullableDexOrderDTO struct {
	value *DexOrderDTO
	isSet bool
}

func (v NullableDexOrderDTO) Get() *DexOrderDTO {
	return v.value
}

func (v *NullableDexOrderDTO) Set(val *DexOrderDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDexOrderDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDexOrderDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDexOrderDTO(val *DexOrderDTO) *NullableDexOrderDTO {
	return &NullableDexOrderDTO{value: val, isSet: true}
}

func (v NullableDexOrderDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDexOrderDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


