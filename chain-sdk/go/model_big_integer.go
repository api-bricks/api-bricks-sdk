/*
OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BigInteger struct for BigInteger
type BigInteger struct {
	IsPowerOfTwo *bool `json:"is_power_of_two,omitempty"`
	IsZero *bool `json:"is_zero,omitempty"`
	IsOne *bool `json:"is_one,omitempty"`
	IsEven *bool `json:"is_even,omitempty"`
	Sign *int32 `json:"sign,omitempty"`
}

// NewBigInteger instantiates a new BigInteger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBigInteger() *BigInteger {
	this := BigInteger{}
	return &this
}

// NewBigIntegerWithDefaults instantiates a new BigInteger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBigIntegerWithDefaults() *BigInteger {
	this := BigInteger{}
	return &this
}

// GetIsPowerOfTwo returns the IsPowerOfTwo field value if set, zero value otherwise.
func (o *BigInteger) GetIsPowerOfTwo() bool {
	if o == nil || o.IsPowerOfTwo == nil {
		var ret bool
		return ret
	}
	return *o.IsPowerOfTwo
}

// GetIsPowerOfTwoOk returns a tuple with the IsPowerOfTwo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigInteger) GetIsPowerOfTwoOk() (*bool, bool) {
	if o == nil || o.IsPowerOfTwo == nil {
		return nil, false
	}
	return o.IsPowerOfTwo, true
}

// HasIsPowerOfTwo returns a boolean if a field has been set.
func (o *BigInteger) HasIsPowerOfTwo() bool {
	if o != nil && o.IsPowerOfTwo != nil {
		return true
	}

	return false
}

// SetIsPowerOfTwo gets a reference to the given bool and assigns it to the IsPowerOfTwo field.
func (o *BigInteger) SetIsPowerOfTwo(v bool) {
	o.IsPowerOfTwo = &v
}

// GetIsZero returns the IsZero field value if set, zero value otherwise.
func (o *BigInteger) GetIsZero() bool {
	if o == nil || o.IsZero == nil {
		var ret bool
		return ret
	}
	return *o.IsZero
}

// GetIsZeroOk returns a tuple with the IsZero field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigInteger) GetIsZeroOk() (*bool, bool) {
	if o == nil || o.IsZero == nil {
		return nil, false
	}
	return o.IsZero, true
}

// HasIsZero returns a boolean if a field has been set.
func (o *BigInteger) HasIsZero() bool {
	if o != nil && o.IsZero != nil {
		return true
	}

	return false
}

// SetIsZero gets a reference to the given bool and assigns it to the IsZero field.
func (o *BigInteger) SetIsZero(v bool) {
	o.IsZero = &v
}

// GetIsOne returns the IsOne field value if set, zero value otherwise.
func (o *BigInteger) GetIsOne() bool {
	if o == nil || o.IsOne == nil {
		var ret bool
		return ret
	}
	return *o.IsOne
}

// GetIsOneOk returns a tuple with the IsOne field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigInteger) GetIsOneOk() (*bool, bool) {
	if o == nil || o.IsOne == nil {
		return nil, false
	}
	return o.IsOne, true
}

// HasIsOne returns a boolean if a field has been set.
func (o *BigInteger) HasIsOne() bool {
	if o != nil && o.IsOne != nil {
		return true
	}

	return false
}

// SetIsOne gets a reference to the given bool and assigns it to the IsOne field.
func (o *BigInteger) SetIsOne(v bool) {
	o.IsOne = &v
}

// GetIsEven returns the IsEven field value if set, zero value otherwise.
func (o *BigInteger) GetIsEven() bool {
	if o == nil || o.IsEven == nil {
		var ret bool
		return ret
	}
	return *o.IsEven
}

// GetIsEvenOk returns a tuple with the IsEven field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigInteger) GetIsEvenOk() (*bool, bool) {
	if o == nil || o.IsEven == nil {
		return nil, false
	}
	return o.IsEven, true
}

// HasIsEven returns a boolean if a field has been set.
func (o *BigInteger) HasIsEven() bool {
	if o != nil && o.IsEven != nil {
		return true
	}

	return false
}

// SetIsEven gets a reference to the given bool and assigns it to the IsEven field.
func (o *BigInteger) SetIsEven(v bool) {
	o.IsEven = &v
}

// GetSign returns the Sign field value if set, zero value otherwise.
func (o *BigInteger) GetSign() int32 {
	if o == nil || o.Sign == nil {
		var ret int32
		return ret
	}
	return *o.Sign
}

// GetSignOk returns a tuple with the Sign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigInteger) GetSignOk() (*int32, bool) {
	if o == nil || o.Sign == nil {
		return nil, false
	}
	return o.Sign, true
}

// HasSign returns a boolean if a field has been set.
func (o *BigInteger) HasSign() bool {
	if o != nil && o.Sign != nil {
		return true
	}

	return false
}

// SetSign gets a reference to the given int32 and assigns it to the Sign field.
func (o *BigInteger) SetSign(v int32) {
	o.Sign = &v
}

func (o BigInteger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsPowerOfTwo != nil {
		toSerialize["is_power_of_two"] = o.IsPowerOfTwo
	}
	if o.IsZero != nil {
		toSerialize["is_zero"] = o.IsZero
	}
	if o.IsOne != nil {
		toSerialize["is_one"] = o.IsOne
	}
	if o.IsEven != nil {
		toSerialize["is_even"] = o.IsEven
	}
	if o.Sign != nil {
		toSerialize["sign"] = o.Sign
	}
	return json.Marshal(toSerialize)
}

type NullableBigInteger struct {
	value *BigInteger
	isSet bool
}

func (v NullableBigInteger) Get() *BigInteger {
	return v.value
}

func (v *NullableBigInteger) Set(val *BigInteger) {
	v.value = val
	v.isSet = true
}

func (v NullableBigInteger) IsSet() bool {
	return v.isSet
}

func (v *NullableBigInteger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigInteger(val *BigInteger) *NullableBigInteger {
	return &NullableBigInteger{value: val, isSet: true}
}

func (v NullableBigInteger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigInteger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


