/*
OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)


// DexApiService DexApi service
type DexApiService service

type ApiDappsDexBatchHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsDexBatchHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexBatchHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexBatchHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexBatchHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexBatchHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexBatchHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexBatchHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexBatchHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexBatchHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexBatchHistoricalGetExecute(r)
}

/*
DappsDexBatchHistoricalGet Method for DappsDexBatchHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexBatchHistoricalGetRequest
*/
func (a *DexApiService) DappsDexBatchHistoricalGet(ctx context.Context) ApiDappsDexBatchHistoricalGetRequest {
	return ApiDappsDexBatchHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexBatchHistoricalGetExecute(r ApiDappsDexBatchHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexBatchHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/batch/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsDexOrdersHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

func (r ApiDappsDexOrdersHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexOrdersHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexOrdersHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexOrdersHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexOrdersHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexOrdersHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexOrdersHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexOrdersHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexOrdersHistoricalGetRequest) TokenId(tokenId string) ApiDappsDexOrdersHistoricalGetRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiDappsDexOrdersHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexOrdersHistoricalGetExecute(r)
}

/*
DappsDexOrdersHistoricalGet Method for DappsDexOrdersHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexOrdersHistoricalGetRequest
*/
func (a *DexApiService) DappsDexOrdersHistoricalGet(ctx context.Context) ApiDappsDexOrdersHistoricalGetRequest {
	return ApiDappsDexOrdersHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexOrdersHistoricalGetExecute(r ApiDappsDexOrdersHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexOrdersHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/orders/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsDexPricesHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

func (r ApiDappsDexPricesHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexPricesHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexPricesHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexPricesHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexPricesHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexPricesHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexPricesHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexPricesHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexPricesHistoricalGetRequest) TokenId(tokenId string) ApiDappsDexPricesHistoricalGetRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiDappsDexPricesHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexPricesHistoricalGetExecute(r)
}

/*
DappsDexPricesHistoricalGet Method for DappsDexPricesHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexPricesHistoricalGetRequest
*/
func (a *DexApiService) DappsDexPricesHistoricalGet(ctx context.Context) ApiDappsDexPricesHistoricalGetRequest {
	return ApiDappsDexPricesHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexPricesHistoricalGetExecute(r ApiDappsDexPricesHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexPricesHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/prices/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsDexSolutionHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

func (r ApiDappsDexSolutionHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexSolutionHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexSolutionHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexSolutionHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexSolutionHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexSolutionHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexSolutionHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexSolutionHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexSolutionHistoricalGetRequest) TokenId(tokenId string) ApiDappsDexSolutionHistoricalGetRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiDappsDexSolutionHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexSolutionHistoricalGetExecute(r)
}

/*
DappsDexSolutionHistoricalGet Method for DappsDexSolutionHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexSolutionHistoricalGetRequest
*/
func (a *DexApiService) DappsDexSolutionHistoricalGet(ctx context.Context) ApiDappsDexSolutionHistoricalGetRequest {
	return ApiDappsDexSolutionHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexSolutionHistoricalGetExecute(r ApiDappsDexSolutionHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexSolutionHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/solution/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsDexStatsHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsDexStatsHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexStatsHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexStatsHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexStatsHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexStatsHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexStatsHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexStatsHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexStatsHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexStatsHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexStatsHistoricalGetExecute(r)
}

/*
DappsDexStatsHistoricalGet Method for DappsDexStatsHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexStatsHistoricalGetRequest
*/
func (a *DexApiService) DappsDexStatsHistoricalGet(ctx context.Context) ApiDappsDexStatsHistoricalGetRequest {
	return ApiDappsDexStatsHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexStatsHistoricalGetExecute(r ApiDappsDexStatsHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexStatsHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/stats/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsDexTokensHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

func (r ApiDappsDexTokensHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexTokensHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexTokensHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexTokensHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexTokensHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexTokensHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexTokensHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexTokensHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexTokensHistoricalGetRequest) TokenId(tokenId string) ApiDappsDexTokensHistoricalGetRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiDappsDexTokensHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexTokensHistoricalGetExecute(r)
}

/*
DappsDexTokensHistoricalGet Method for DappsDexTokensHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexTokensHistoricalGetRequest
*/
func (a *DexApiService) DappsDexTokensHistoricalGet(ctx context.Context) ApiDappsDexTokensHistoricalGetRequest {
	return ApiDappsDexTokensHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexTokensHistoricalGetExecute(r ApiDappsDexTokensHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexTokensHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/tokens/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsDexTradesHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsDexTradesHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexTradesHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexTradesHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexTradesHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexTradesHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexTradesHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexTradesHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexTradesHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexTradesHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexTradesHistoricalGetExecute(r)
}

/*
DappsDexTradesHistoricalGet Method for DappsDexTradesHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexTradesHistoricalGetRequest
*/
func (a *DexApiService) DappsDexTradesHistoricalGet(ctx context.Context) ApiDappsDexTradesHistoricalGetRequest {
	return ApiDappsDexTradesHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexTradesHistoricalGetExecute(r ApiDappsDexTradesHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexTradesHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/trades/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsDexUsersHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsDexUsersHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexUsersHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexUsersHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexUsersHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexUsersHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexUsersHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexUsersHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexUsersHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexUsersHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexUsersHistoricalGetExecute(r)
}

/*
DappsDexUsersHistoricalGet Method for DappsDexUsersHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexUsersHistoricalGetRequest
*/
func (a *DexApiService) DappsDexUsersHistoricalGet(ctx context.Context) ApiDappsDexUsersHistoricalGetRequest {
	return ApiDappsDexUsersHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexUsersHistoricalGetExecute(r ApiDappsDexUsersHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexUsersHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/users/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsDexWithdrawHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

func (r ApiDappsDexWithdrawHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexWithdrawHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexWithdrawHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexWithdrawHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexWithdrawHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexWithdrawHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexWithdrawHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexWithdrawHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexWithdrawHistoricalGetRequest) TokenId(tokenId string) ApiDappsDexWithdrawHistoricalGetRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiDappsDexWithdrawHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexWithdrawHistoricalGetExecute(r)
}

/*
DappsDexWithdrawHistoricalGet Method for DappsDexWithdrawHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexWithdrawHistoricalGetRequest
*/
func (a *DexApiService) DappsDexWithdrawHistoricalGet(ctx context.Context) ApiDappsDexWithdrawHistoricalGetRequest {
	return ApiDappsDexWithdrawHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexWithdrawHistoricalGetExecute(r ApiDappsDexWithdrawHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexWithdrawHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/withdraw/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsDexWithdrawRequestHistoricalGetRequest struct {
	ctx context.Context
	ApiService *DexApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

func (r ApiDappsDexWithdrawRequestHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsDexWithdrawRequestHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsDexWithdrawRequestHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsDexWithdrawRequestHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsDexWithdrawRequestHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsDexWithdrawRequestHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsDexWithdrawRequestHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsDexWithdrawRequestHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsDexWithdrawRequestHistoricalGetRequest) TokenId(tokenId string) ApiDappsDexWithdrawRequestHistoricalGetRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiDappsDexWithdrawRequestHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsDexWithdrawRequestHistoricalGetExecute(r)
}

/*
DappsDexWithdrawRequestHistoricalGet Method for DappsDexWithdrawRequestHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsDexWithdrawRequestHistoricalGetRequest
*/
func (a *DexApiService) DappsDexWithdrawRequestHistoricalGet(ctx context.Context) ApiDappsDexWithdrawRequestHistoricalGetRequest {
	return ApiDappsDexWithdrawRequestHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DexApiService) DappsDexWithdrawRequestHistoricalGetExecute(r ApiDappsDexWithdrawRequestHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DexApiService.DappsDexWithdrawRequestHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/dex/withdrawRequest/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
