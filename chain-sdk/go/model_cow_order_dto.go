/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CowOrderDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CowOrderDTO{}

// CowOrderDTO struct for CowOrderDTO
type CowOrderDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// User's address.
	Id NullableString `json:"id,omitempty"`
	// User's address.
	Owner NullableString `json:"owner,omitempty"`
	// Block's timestamp on trade event.
	TradesTimestamp NullableString `json:"trades_timestamp,omitempty"`
	// Block's timestamp on invalidate event.
	InvalidateTimestamp NullableString `json:"invalidate_timestamp,omitempty"`
	// Block's timestamp on presign event.
	PresignTimestamp NullableString `json:"presign_timestamp,omitempty"`
	// Determines whether order is signed.
	IsSigned NullableBool `json:"is_signed,omitempty"`
	// Determines whether order is valid.
	IsValid *bool `json:"is_valid,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
}

// NewCowOrderDTO instantiates a new CowOrderDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCowOrderDTO() *CowOrderDTO {
	this := CowOrderDTO{}
	return &this
}

// NewCowOrderDTOWithDefaults instantiates a new CowOrderDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCowOrderDTOWithDefaults() *CowOrderDTO {
	this := CowOrderDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *CowOrderDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowOrderDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *CowOrderDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *CowOrderDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *CowOrderDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowOrderDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *CowOrderDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *CowOrderDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *CowOrderDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowOrderDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *CowOrderDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *CowOrderDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowOrderDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowOrderDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CowOrderDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CowOrderDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CowOrderDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CowOrderDTO) UnsetId() {
	o.Id.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowOrderDTO) GetOwner() string {
	if o == nil || IsNil(o.Owner.Get()) {
		var ret string
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowOrderDTO) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *CowOrderDTO) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableString and assigns it to the Owner field.
func (o *CowOrderDTO) SetOwner(v string) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *CowOrderDTO) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *CowOrderDTO) UnsetOwner() {
	o.Owner.Unset()
}

// GetTradesTimestamp returns the TradesTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowOrderDTO) GetTradesTimestamp() string {
	if o == nil || IsNil(o.TradesTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.TradesTimestamp.Get()
}

// GetTradesTimestampOk returns a tuple with the TradesTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowOrderDTO) GetTradesTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TradesTimestamp.Get(), o.TradesTimestamp.IsSet()
}

// HasTradesTimestamp returns a boolean if a field has been set.
func (o *CowOrderDTO) HasTradesTimestamp() bool {
	if o != nil && o.TradesTimestamp.IsSet() {
		return true
	}

	return false
}

// SetTradesTimestamp gets a reference to the given NullableString and assigns it to the TradesTimestamp field.
func (o *CowOrderDTO) SetTradesTimestamp(v string) {
	o.TradesTimestamp.Set(&v)
}
// SetTradesTimestampNil sets the value for TradesTimestamp to be an explicit nil
func (o *CowOrderDTO) SetTradesTimestampNil() {
	o.TradesTimestamp.Set(nil)
}

// UnsetTradesTimestamp ensures that no value is present for TradesTimestamp, not even an explicit nil
func (o *CowOrderDTO) UnsetTradesTimestamp() {
	o.TradesTimestamp.Unset()
}

// GetInvalidateTimestamp returns the InvalidateTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowOrderDTO) GetInvalidateTimestamp() string {
	if o == nil || IsNil(o.InvalidateTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.InvalidateTimestamp.Get()
}

// GetInvalidateTimestampOk returns a tuple with the InvalidateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowOrderDTO) GetInvalidateTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InvalidateTimestamp.Get(), o.InvalidateTimestamp.IsSet()
}

// HasInvalidateTimestamp returns a boolean if a field has been set.
func (o *CowOrderDTO) HasInvalidateTimestamp() bool {
	if o != nil && o.InvalidateTimestamp.IsSet() {
		return true
	}

	return false
}

// SetInvalidateTimestamp gets a reference to the given NullableString and assigns it to the InvalidateTimestamp field.
func (o *CowOrderDTO) SetInvalidateTimestamp(v string) {
	o.InvalidateTimestamp.Set(&v)
}
// SetInvalidateTimestampNil sets the value for InvalidateTimestamp to be an explicit nil
func (o *CowOrderDTO) SetInvalidateTimestampNil() {
	o.InvalidateTimestamp.Set(nil)
}

// UnsetInvalidateTimestamp ensures that no value is present for InvalidateTimestamp, not even an explicit nil
func (o *CowOrderDTO) UnsetInvalidateTimestamp() {
	o.InvalidateTimestamp.Unset()
}

// GetPresignTimestamp returns the PresignTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowOrderDTO) GetPresignTimestamp() string {
	if o == nil || IsNil(o.PresignTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.PresignTimestamp.Get()
}

// GetPresignTimestampOk returns a tuple with the PresignTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowOrderDTO) GetPresignTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PresignTimestamp.Get(), o.PresignTimestamp.IsSet()
}

// HasPresignTimestamp returns a boolean if a field has been set.
func (o *CowOrderDTO) HasPresignTimestamp() bool {
	if o != nil && o.PresignTimestamp.IsSet() {
		return true
	}

	return false
}

// SetPresignTimestamp gets a reference to the given NullableString and assigns it to the PresignTimestamp field.
func (o *CowOrderDTO) SetPresignTimestamp(v string) {
	o.PresignTimestamp.Set(&v)
}
// SetPresignTimestampNil sets the value for PresignTimestamp to be an explicit nil
func (o *CowOrderDTO) SetPresignTimestampNil() {
	o.PresignTimestamp.Set(nil)
}

// UnsetPresignTimestamp ensures that no value is present for PresignTimestamp, not even an explicit nil
func (o *CowOrderDTO) UnsetPresignTimestamp() {
	o.PresignTimestamp.Unset()
}

// GetIsSigned returns the IsSigned field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowOrderDTO) GetIsSigned() bool {
	if o == nil || IsNil(o.IsSigned.Get()) {
		var ret bool
		return ret
	}
	return *o.IsSigned.Get()
}

// GetIsSignedOk returns a tuple with the IsSigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowOrderDTO) GetIsSignedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSigned.Get(), o.IsSigned.IsSet()
}

// HasIsSigned returns a boolean if a field has been set.
func (o *CowOrderDTO) HasIsSigned() bool {
	if o != nil && o.IsSigned.IsSet() {
		return true
	}

	return false
}

// SetIsSigned gets a reference to the given NullableBool and assigns it to the IsSigned field.
func (o *CowOrderDTO) SetIsSigned(v bool) {
	o.IsSigned.Set(&v)
}
// SetIsSignedNil sets the value for IsSigned to be an explicit nil
func (o *CowOrderDTO) SetIsSignedNil() {
	o.IsSigned.Set(nil)
}

// UnsetIsSigned ensures that no value is present for IsSigned, not even an explicit nil
func (o *CowOrderDTO) UnsetIsSigned() {
	o.IsSigned.Unset()
}

// GetIsValid returns the IsValid field value if set, zero value otherwise.
func (o *CowOrderDTO) GetIsValid() bool {
	if o == nil || IsNil(o.IsValid) {
		var ret bool
		return ret
	}
	return *o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowOrderDTO) GetIsValidOk() (*bool, bool) {
	if o == nil || IsNil(o.IsValid) {
		return nil, false
	}
	return o.IsValid, true
}

// HasIsValid returns a boolean if a field has been set.
func (o *CowOrderDTO) HasIsValid() bool {
	if o != nil && !IsNil(o.IsValid) {
		return true
	}

	return false
}

// SetIsValid gets a reference to the given bool and assigns it to the IsValid field.
func (o *CowOrderDTO) SetIsValid(v bool) {
	o.IsValid = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *CowOrderDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowOrderDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *CowOrderDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *CowOrderDTO) SetVid(v int64) {
	o.Vid = &v
}

func (o CowOrderDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CowOrderDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.TradesTimestamp.IsSet() {
		toSerialize["trades_timestamp"] = o.TradesTimestamp.Get()
	}
	if o.InvalidateTimestamp.IsSet() {
		toSerialize["invalidate_timestamp"] = o.InvalidateTimestamp.Get()
	}
	if o.PresignTimestamp.IsSet() {
		toSerialize["presign_timestamp"] = o.PresignTimestamp.Get()
	}
	if o.IsSigned.IsSet() {
		toSerialize["is_signed"] = o.IsSigned.Get()
	}
	if !IsNil(o.IsValid) {
		toSerialize["is_valid"] = o.IsValid
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	return toSerialize, nil
}

type NullableCowOrderDTO struct {
	value *CowOrderDTO
	isSet bool
}

func (v NullableCowOrderDTO) Get() *CowOrderDTO {
	return v.value
}

func (v *NullableCowOrderDTO) Set(val *CowOrderDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCowOrderDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCowOrderDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCowOrderDTO(val *CowOrderDTO) *NullableCowOrderDTO {
	return &NullableCowOrderDTO{value: val, isSet: true}
}

func (v NullableCowOrderDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCowOrderDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


