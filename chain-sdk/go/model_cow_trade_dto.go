/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CowTradeDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CowTradeDTO{}

// CowTradeDTO Trade entity.
type CowTradeDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// Identifier, format: (order id)|(transaction hash)|(event index).
	Id NullableString `json:"id,omitempty"`
	// Block's timestamp.
	Timestamp NullableString `json:"timestamp,omitempty"`
	// Transaction's gas price.
	GasPrice NullableString `json:"gas_price,omitempty"`
	// Transaction's gas limit.
	GasLimit NullableString `json:"gas_limit,omitempty"`
	// Trade's fee amount.
	FeeAmount NullableString `json:"fee_amount,omitempty"`
	// Trade event transaction hash.
	TxHash NullableString `json:"tx_hash,omitempty"`
	// Reference to settlement.
	Settlement NullableString `json:"settlement,omitempty"`
	// Buy amount.
	BuyAmount NullableString `json:"buy_amount,omitempty"`
	// Sell amount.
	SellAmount NullableString `json:"sell_amount,omitempty"`
	// Address of token that is sold.
	SellToken NullableString `json:"sell_token,omitempty"`
	// Address of token that is bought.
	BuyToken NullableString `json:"buy_token,omitempty"`
	// Reference to order.
	Order NullableString `json:"order,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
	PoolId NullableString `json:"pool_id,omitempty"`
	TransactionId NullableString `json:"transaction_id,omitempty"`
	EvaluatedPrice *float64 `json:"evaluated_price,omitempty"`
	EvaluatedAmount *float64 `json:"evaluated_amount,omitempty"`
	EvaluatedAggressor *TransactionsETradeAggressiveSide `json:"evaluated_aggressor,omitempty"`
}

// NewCowTradeDTO instantiates a new CowTradeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCowTradeDTO() *CowTradeDTO {
	this := CowTradeDTO{}
	return &this
}

// NewCowTradeDTOWithDefaults instantiates a new CowTradeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCowTradeDTOWithDefaults() *CowTradeDTO {
	this := CowTradeDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *CowTradeDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowTradeDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *CowTradeDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *CowTradeDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *CowTradeDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowTradeDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *CowTradeDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *CowTradeDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *CowTradeDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowTradeDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *CowTradeDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *CowTradeDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CowTradeDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CowTradeDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CowTradeDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CowTradeDTO) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CowTradeDTO) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *CowTradeDTO) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *CowTradeDTO) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *CowTradeDTO) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice.Get()) {
		var ret string
		return ret
	}
	return *o.GasPrice.Get()
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetGasPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasPrice.Get(), o.GasPrice.IsSet()
}

// HasGasPrice returns a boolean if a field has been set.
func (o *CowTradeDTO) HasGasPrice() bool {
	if o != nil && o.GasPrice.IsSet() {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given NullableString and assigns it to the GasPrice field.
func (o *CowTradeDTO) SetGasPrice(v string) {
	o.GasPrice.Set(&v)
}
// SetGasPriceNil sets the value for GasPrice to be an explicit nil
func (o *CowTradeDTO) SetGasPriceNil() {
	o.GasPrice.Set(nil)
}

// UnsetGasPrice ensures that no value is present for GasPrice, not even an explicit nil
func (o *CowTradeDTO) UnsetGasPrice() {
	o.GasPrice.Unset()
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetGasLimit() string {
	if o == nil || IsNil(o.GasLimit.Get()) {
		var ret string
		return ret
	}
	return *o.GasLimit.Get()
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetGasLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasLimit.Get(), o.GasLimit.IsSet()
}

// HasGasLimit returns a boolean if a field has been set.
func (o *CowTradeDTO) HasGasLimit() bool {
	if o != nil && o.GasLimit.IsSet() {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given NullableString and assigns it to the GasLimit field.
func (o *CowTradeDTO) SetGasLimit(v string) {
	o.GasLimit.Set(&v)
}
// SetGasLimitNil sets the value for GasLimit to be an explicit nil
func (o *CowTradeDTO) SetGasLimitNil() {
	o.GasLimit.Set(nil)
}

// UnsetGasLimit ensures that no value is present for GasLimit, not even an explicit nil
func (o *CowTradeDTO) UnsetGasLimit() {
	o.GasLimit.Unset()
}

// GetFeeAmount returns the FeeAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetFeeAmount() string {
	if o == nil || IsNil(o.FeeAmount.Get()) {
		var ret string
		return ret
	}
	return *o.FeeAmount.Get()
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetFeeAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FeeAmount.Get(), o.FeeAmount.IsSet()
}

// HasFeeAmount returns a boolean if a field has been set.
func (o *CowTradeDTO) HasFeeAmount() bool {
	if o != nil && o.FeeAmount.IsSet() {
		return true
	}

	return false
}

// SetFeeAmount gets a reference to the given NullableString and assigns it to the FeeAmount field.
func (o *CowTradeDTO) SetFeeAmount(v string) {
	o.FeeAmount.Set(&v)
}
// SetFeeAmountNil sets the value for FeeAmount to be an explicit nil
func (o *CowTradeDTO) SetFeeAmountNil() {
	o.FeeAmount.Set(nil)
}

// UnsetFeeAmount ensures that no value is present for FeeAmount, not even an explicit nil
func (o *CowTradeDTO) UnsetFeeAmount() {
	o.FeeAmount.Unset()
}

// GetTxHash returns the TxHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetTxHash() string {
	if o == nil || IsNil(o.TxHash.Get()) {
		var ret string
		return ret
	}
	return *o.TxHash.Get()
}

// GetTxHashOk returns a tuple with the TxHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetTxHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxHash.Get(), o.TxHash.IsSet()
}

// HasTxHash returns a boolean if a field has been set.
func (o *CowTradeDTO) HasTxHash() bool {
	if o != nil && o.TxHash.IsSet() {
		return true
	}

	return false
}

// SetTxHash gets a reference to the given NullableString and assigns it to the TxHash field.
func (o *CowTradeDTO) SetTxHash(v string) {
	o.TxHash.Set(&v)
}
// SetTxHashNil sets the value for TxHash to be an explicit nil
func (o *CowTradeDTO) SetTxHashNil() {
	o.TxHash.Set(nil)
}

// UnsetTxHash ensures that no value is present for TxHash, not even an explicit nil
func (o *CowTradeDTO) UnsetTxHash() {
	o.TxHash.Unset()
}

// GetSettlement returns the Settlement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetSettlement() string {
	if o == nil || IsNil(o.Settlement.Get()) {
		var ret string
		return ret
	}
	return *o.Settlement.Get()
}

// GetSettlementOk returns a tuple with the Settlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetSettlementOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Settlement.Get(), o.Settlement.IsSet()
}

// HasSettlement returns a boolean if a field has been set.
func (o *CowTradeDTO) HasSettlement() bool {
	if o != nil && o.Settlement.IsSet() {
		return true
	}

	return false
}

// SetSettlement gets a reference to the given NullableString and assigns it to the Settlement field.
func (o *CowTradeDTO) SetSettlement(v string) {
	o.Settlement.Set(&v)
}
// SetSettlementNil sets the value for Settlement to be an explicit nil
func (o *CowTradeDTO) SetSettlementNil() {
	o.Settlement.Set(nil)
}

// UnsetSettlement ensures that no value is present for Settlement, not even an explicit nil
func (o *CowTradeDTO) UnsetSettlement() {
	o.Settlement.Unset()
}

// GetBuyAmount returns the BuyAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetBuyAmount() string {
	if o == nil || IsNil(o.BuyAmount.Get()) {
		var ret string
		return ret
	}
	return *o.BuyAmount.Get()
}

// GetBuyAmountOk returns a tuple with the BuyAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetBuyAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuyAmount.Get(), o.BuyAmount.IsSet()
}

// HasBuyAmount returns a boolean if a field has been set.
func (o *CowTradeDTO) HasBuyAmount() bool {
	if o != nil && o.BuyAmount.IsSet() {
		return true
	}

	return false
}

// SetBuyAmount gets a reference to the given NullableString and assigns it to the BuyAmount field.
func (o *CowTradeDTO) SetBuyAmount(v string) {
	o.BuyAmount.Set(&v)
}
// SetBuyAmountNil sets the value for BuyAmount to be an explicit nil
func (o *CowTradeDTO) SetBuyAmountNil() {
	o.BuyAmount.Set(nil)
}

// UnsetBuyAmount ensures that no value is present for BuyAmount, not even an explicit nil
func (o *CowTradeDTO) UnsetBuyAmount() {
	o.BuyAmount.Unset()
}

// GetSellAmount returns the SellAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetSellAmount() string {
	if o == nil || IsNil(o.SellAmount.Get()) {
		var ret string
		return ret
	}
	return *o.SellAmount.Get()
}

// GetSellAmountOk returns a tuple with the SellAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetSellAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellAmount.Get(), o.SellAmount.IsSet()
}

// HasSellAmount returns a boolean if a field has been set.
func (o *CowTradeDTO) HasSellAmount() bool {
	if o != nil && o.SellAmount.IsSet() {
		return true
	}

	return false
}

// SetSellAmount gets a reference to the given NullableString and assigns it to the SellAmount field.
func (o *CowTradeDTO) SetSellAmount(v string) {
	o.SellAmount.Set(&v)
}
// SetSellAmountNil sets the value for SellAmount to be an explicit nil
func (o *CowTradeDTO) SetSellAmountNil() {
	o.SellAmount.Set(nil)
}

// UnsetSellAmount ensures that no value is present for SellAmount, not even an explicit nil
func (o *CowTradeDTO) UnsetSellAmount() {
	o.SellAmount.Unset()
}

// GetSellToken returns the SellToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetSellToken() string {
	if o == nil || IsNil(o.SellToken.Get()) {
		var ret string
		return ret
	}
	return *o.SellToken.Get()
}

// GetSellTokenOk returns a tuple with the SellToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetSellTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SellToken.Get(), o.SellToken.IsSet()
}

// HasSellToken returns a boolean if a field has been set.
func (o *CowTradeDTO) HasSellToken() bool {
	if o != nil && o.SellToken.IsSet() {
		return true
	}

	return false
}

// SetSellToken gets a reference to the given NullableString and assigns it to the SellToken field.
func (o *CowTradeDTO) SetSellToken(v string) {
	o.SellToken.Set(&v)
}
// SetSellTokenNil sets the value for SellToken to be an explicit nil
func (o *CowTradeDTO) SetSellTokenNil() {
	o.SellToken.Set(nil)
}

// UnsetSellToken ensures that no value is present for SellToken, not even an explicit nil
func (o *CowTradeDTO) UnsetSellToken() {
	o.SellToken.Unset()
}

// GetBuyToken returns the BuyToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetBuyToken() string {
	if o == nil || IsNil(o.BuyToken.Get()) {
		var ret string
		return ret
	}
	return *o.BuyToken.Get()
}

// GetBuyTokenOk returns a tuple with the BuyToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetBuyTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuyToken.Get(), o.BuyToken.IsSet()
}

// HasBuyToken returns a boolean if a field has been set.
func (o *CowTradeDTO) HasBuyToken() bool {
	if o != nil && o.BuyToken.IsSet() {
		return true
	}

	return false
}

// SetBuyToken gets a reference to the given NullableString and assigns it to the BuyToken field.
func (o *CowTradeDTO) SetBuyToken(v string) {
	o.BuyToken.Set(&v)
}
// SetBuyTokenNil sets the value for BuyToken to be an explicit nil
func (o *CowTradeDTO) SetBuyTokenNil() {
	o.BuyToken.Set(nil)
}

// UnsetBuyToken ensures that no value is present for BuyToken, not even an explicit nil
func (o *CowTradeDTO) UnsetBuyToken() {
	o.BuyToken.Unset()
}

// GetOrder returns the Order field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetOrder() string {
	if o == nil || IsNil(o.Order.Get()) {
		var ret string
		return ret
	}
	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetOrderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// HasOrder returns a boolean if a field has been set.
func (o *CowTradeDTO) HasOrder() bool {
	if o != nil && o.Order.IsSet() {
		return true
	}

	return false
}

// SetOrder gets a reference to the given NullableString and assigns it to the Order field.
func (o *CowTradeDTO) SetOrder(v string) {
	o.Order.Set(&v)
}
// SetOrderNil sets the value for Order to be an explicit nil
func (o *CowTradeDTO) SetOrderNil() {
	o.Order.Set(nil)
}

// UnsetOrder ensures that no value is present for Order, not even an explicit nil
func (o *CowTradeDTO) UnsetOrder() {
	o.Order.Unset()
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *CowTradeDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowTradeDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *CowTradeDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *CowTradeDTO) SetVid(v int64) {
	o.Vid = &v
}

// GetPoolId returns the PoolId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetPoolId() string {
	if o == nil || IsNil(o.PoolId.Get()) {
		var ret string
		return ret
	}
	return *o.PoolId.Get()
}

// GetPoolIdOk returns a tuple with the PoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetPoolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PoolId.Get(), o.PoolId.IsSet()
}

// HasPoolId returns a boolean if a field has been set.
func (o *CowTradeDTO) HasPoolId() bool {
	if o != nil && o.PoolId.IsSet() {
		return true
	}

	return false
}

// SetPoolId gets a reference to the given NullableString and assigns it to the PoolId field.
func (o *CowTradeDTO) SetPoolId(v string) {
	o.PoolId.Set(&v)
}
// SetPoolIdNil sets the value for PoolId to be an explicit nil
func (o *CowTradeDTO) SetPoolIdNil() {
	o.PoolId.Set(nil)
}

// UnsetPoolId ensures that no value is present for PoolId, not even an explicit nil
func (o *CowTradeDTO) UnsetPoolId() {
	o.PoolId.Unset()
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CowTradeDTO) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId.Get()) {
		var ret string
		return ret
	}
	return *o.TransactionId.Get()
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CowTradeDTO) GetTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionId.Get(), o.TransactionId.IsSet()
}

// HasTransactionId returns a boolean if a field has been set.
func (o *CowTradeDTO) HasTransactionId() bool {
	if o != nil && o.TransactionId.IsSet() {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given NullableString and assigns it to the TransactionId field.
func (o *CowTradeDTO) SetTransactionId(v string) {
	o.TransactionId.Set(&v)
}
// SetTransactionIdNil sets the value for TransactionId to be an explicit nil
func (o *CowTradeDTO) SetTransactionIdNil() {
	o.TransactionId.Set(nil)
}

// UnsetTransactionId ensures that no value is present for TransactionId, not even an explicit nil
func (o *CowTradeDTO) UnsetTransactionId() {
	o.TransactionId.Unset()
}

// GetEvaluatedPrice returns the EvaluatedPrice field value if set, zero value otherwise.
func (o *CowTradeDTO) GetEvaluatedPrice() float64 {
	if o == nil || IsNil(o.EvaluatedPrice) {
		var ret float64
		return ret
	}
	return *o.EvaluatedPrice
}

// GetEvaluatedPriceOk returns a tuple with the EvaluatedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowTradeDTO) GetEvaluatedPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.EvaluatedPrice) {
		return nil, false
	}
	return o.EvaluatedPrice, true
}

// HasEvaluatedPrice returns a boolean if a field has been set.
func (o *CowTradeDTO) HasEvaluatedPrice() bool {
	if o != nil && !IsNil(o.EvaluatedPrice) {
		return true
	}

	return false
}

// SetEvaluatedPrice gets a reference to the given float64 and assigns it to the EvaluatedPrice field.
func (o *CowTradeDTO) SetEvaluatedPrice(v float64) {
	o.EvaluatedPrice = &v
}

// GetEvaluatedAmount returns the EvaluatedAmount field value if set, zero value otherwise.
func (o *CowTradeDTO) GetEvaluatedAmount() float64 {
	if o == nil || IsNil(o.EvaluatedAmount) {
		var ret float64
		return ret
	}
	return *o.EvaluatedAmount
}

// GetEvaluatedAmountOk returns a tuple with the EvaluatedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowTradeDTO) GetEvaluatedAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.EvaluatedAmount) {
		return nil, false
	}
	return o.EvaluatedAmount, true
}

// HasEvaluatedAmount returns a boolean if a field has been set.
func (o *CowTradeDTO) HasEvaluatedAmount() bool {
	if o != nil && !IsNil(o.EvaluatedAmount) {
		return true
	}

	return false
}

// SetEvaluatedAmount gets a reference to the given float64 and assigns it to the EvaluatedAmount field.
func (o *CowTradeDTO) SetEvaluatedAmount(v float64) {
	o.EvaluatedAmount = &v
}

// GetEvaluatedAggressor returns the EvaluatedAggressor field value if set, zero value otherwise.
func (o *CowTradeDTO) GetEvaluatedAggressor() TransactionsETradeAggressiveSide {
	if o == nil || IsNil(o.EvaluatedAggressor) {
		var ret TransactionsETradeAggressiveSide
		return ret
	}
	return *o.EvaluatedAggressor
}

// GetEvaluatedAggressorOk returns a tuple with the EvaluatedAggressor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CowTradeDTO) GetEvaluatedAggressorOk() (*TransactionsETradeAggressiveSide, bool) {
	if o == nil || IsNil(o.EvaluatedAggressor) {
		return nil, false
	}
	return o.EvaluatedAggressor, true
}

// HasEvaluatedAggressor returns a boolean if a field has been set.
func (o *CowTradeDTO) HasEvaluatedAggressor() bool {
	if o != nil && !IsNil(o.EvaluatedAggressor) {
		return true
	}

	return false
}

// SetEvaluatedAggressor gets a reference to the given TransactionsETradeAggressiveSide and assigns it to the EvaluatedAggressor field.
func (o *CowTradeDTO) SetEvaluatedAggressor(v TransactionsETradeAggressiveSide) {
	o.EvaluatedAggressor = &v
}

func (o CowTradeDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CowTradeDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.GasPrice.IsSet() {
		toSerialize["gas_price"] = o.GasPrice.Get()
	}
	if o.GasLimit.IsSet() {
		toSerialize["gas_limit"] = o.GasLimit.Get()
	}
	if o.FeeAmount.IsSet() {
		toSerialize["fee_amount"] = o.FeeAmount.Get()
	}
	if o.TxHash.IsSet() {
		toSerialize["tx_hash"] = o.TxHash.Get()
	}
	if o.Settlement.IsSet() {
		toSerialize["settlement"] = o.Settlement.Get()
	}
	if o.BuyAmount.IsSet() {
		toSerialize["buy_amount"] = o.BuyAmount.Get()
	}
	if o.SellAmount.IsSet() {
		toSerialize["sell_amount"] = o.SellAmount.Get()
	}
	if o.SellToken.IsSet() {
		toSerialize["sell_token"] = o.SellToken.Get()
	}
	if o.BuyToken.IsSet() {
		toSerialize["buy_token"] = o.BuyToken.Get()
	}
	if o.Order.IsSet() {
		toSerialize["order"] = o.Order.Get()
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	if o.PoolId.IsSet() {
		toSerialize["pool_id"] = o.PoolId.Get()
	}
	if o.TransactionId.IsSet() {
		toSerialize["transaction_id"] = o.TransactionId.Get()
	}
	// skip: evaluated_price is readOnly
	// skip: evaluated_amount is readOnly
	if !IsNil(o.EvaluatedAggressor) {
		toSerialize["evaluated_aggressor"] = o.EvaluatedAggressor
	}
	return toSerialize, nil
}

type NullableCowTradeDTO struct {
	value *CowTradeDTO
	isSet bool
}

func (v NullableCowTradeDTO) Get() *CowTradeDTO {
	return v.value
}

func (v *NullableCowTradeDTO) Set(val *CowTradeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCowTradeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCowTradeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCowTradeDTO(val *CowTradeDTO) *NullableCowTradeDTO {
	return &NullableCowTradeDTO{value: val, isSet: true}
}

func (v NullableCowTradeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCowTradeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


