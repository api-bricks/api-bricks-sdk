/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CRYPTOPUNKSTradeDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CRYPTOPUNKSTradeDTO{}

// CRYPTOPUNKSTradeDTO struct for CRYPTOPUNKSTradeDTO
type CRYPTOPUNKSTradeDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// 
	BlockNumber NullableString `json:"block_number,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
	// 
	Id NullableString `json:"id,omitempty"`
	// 
	TransactionHash NullableString `json:"transaction_hash,omitempty"`
	// 
	LogIndex *int32 `json:"log_index,omitempty"`
	// 
	Timestamp NullableString `json:"timestamp,omitempty"`
	// 
	IsBundle *bool `json:"is_bundle,omitempty"`
	// 
	Collection NullableString `json:"collection,omitempty"`
	// 
	TokenId NullableString `json:"token_id,omitempty"`
	// 
	Amount NullableString `json:"amount,omitempty"`
	// 
	PriceEth NullableString `json:"price_eth,omitempty"`
	// 
	Buyer NullableString `json:"buyer,omitempty"`
	// 
	Seller NullableString `json:"seller,omitempty"`
}

// NewCRYPTOPUNKSTradeDTO instantiates a new CRYPTOPUNKSTradeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCRYPTOPUNKSTradeDTO() *CRYPTOPUNKSTradeDTO {
	this := CRYPTOPUNKSTradeDTO{}
	return &this
}

// NewCRYPTOPUNKSTradeDTOWithDefaults instantiates a new CRYPTOPUNKSTradeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCRYPTOPUNKSTradeDTOWithDefaults() *CRYPTOPUNKSTradeDTO {
	this := CRYPTOPUNKSTradeDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *CRYPTOPUNKSTradeDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSTradeDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *CRYPTOPUNKSTradeDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *CRYPTOPUNKSTradeDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSTradeDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *CRYPTOPUNKSTradeDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetBlockNumber() string {
	if o == nil || IsNil(o.BlockNumber.Get()) {
		var ret string
		return ret
	}
	return *o.BlockNumber.Get()
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetBlockNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockNumber.Get(), o.BlockNumber.IsSet()
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasBlockNumber() bool {
	if o != nil && o.BlockNumber.IsSet() {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given NullableString and assigns it to the BlockNumber field.
func (o *CRYPTOPUNKSTradeDTO) SetBlockNumber(v string) {
	o.BlockNumber.Set(&v)
}
// SetBlockNumberNil sets the value for BlockNumber to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetBlockNumberNil() {
	o.BlockNumber.Set(nil)
}

// UnsetBlockNumber ensures that no value is present for BlockNumber, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetBlockNumber() {
	o.BlockNumber.Unset()
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *CRYPTOPUNKSTradeDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSTradeDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *CRYPTOPUNKSTradeDTO) SetVid(v int64) {
	o.Vid = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *CRYPTOPUNKSTradeDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CRYPTOPUNKSTradeDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetId() {
	o.Id.Unset()
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetTransactionHash() string {
	if o == nil || IsNil(o.TransactionHash.Get()) {
		var ret string
		return ret
	}
	return *o.TransactionHash.Get()
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetTransactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionHash.Get(), o.TransactionHash.IsSet()
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasTransactionHash() bool {
	if o != nil && o.TransactionHash.IsSet() {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given NullableString and assigns it to the TransactionHash field.
func (o *CRYPTOPUNKSTradeDTO) SetTransactionHash(v string) {
	o.TransactionHash.Set(&v)
}
// SetTransactionHashNil sets the value for TransactionHash to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetTransactionHashNil() {
	o.TransactionHash.Set(nil)
}

// UnsetTransactionHash ensures that no value is present for TransactionHash, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetTransactionHash() {
	o.TransactionHash.Unset()
}

// GetLogIndex returns the LogIndex field value if set, zero value otherwise.
func (o *CRYPTOPUNKSTradeDTO) GetLogIndex() int32 {
	if o == nil || IsNil(o.LogIndex) {
		var ret int32
		return ret
	}
	return *o.LogIndex
}

// GetLogIndexOk returns a tuple with the LogIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSTradeDTO) GetLogIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.LogIndex) {
		return nil, false
	}
	return o.LogIndex, true
}

// HasLogIndex returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasLogIndex() bool {
	if o != nil && !IsNil(o.LogIndex) {
		return true
	}

	return false
}

// SetLogIndex gets a reference to the given int32 and assigns it to the LogIndex field.
func (o *CRYPTOPUNKSTradeDTO) SetLogIndex(v int32) {
	o.LogIndex = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *CRYPTOPUNKSTradeDTO) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetIsBundle returns the IsBundle field value if set, zero value otherwise.
func (o *CRYPTOPUNKSTradeDTO) GetIsBundle() bool {
	if o == nil || IsNil(o.IsBundle) {
		var ret bool
		return ret
	}
	return *o.IsBundle
}

// GetIsBundleOk returns a tuple with the IsBundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CRYPTOPUNKSTradeDTO) GetIsBundleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBundle) {
		return nil, false
	}
	return o.IsBundle, true
}

// HasIsBundle returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasIsBundle() bool {
	if o != nil && !IsNil(o.IsBundle) {
		return true
	}

	return false
}

// SetIsBundle gets a reference to the given bool and assigns it to the IsBundle field.
func (o *CRYPTOPUNKSTradeDTO) SetIsBundle(v bool) {
	o.IsBundle = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetCollection() string {
	if o == nil || IsNil(o.Collection.Get()) {
		var ret string
		return ret
	}
	return *o.Collection.Get()
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetCollectionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Collection.Get(), o.Collection.IsSet()
}

// HasCollection returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasCollection() bool {
	if o != nil && o.Collection.IsSet() {
		return true
	}

	return false
}

// SetCollection gets a reference to the given NullableString and assigns it to the Collection field.
func (o *CRYPTOPUNKSTradeDTO) SetCollection(v string) {
	o.Collection.Set(&v)
}
// SetCollectionNil sets the value for Collection to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetCollectionNil() {
	o.Collection.Set(nil)
}

// UnsetCollection ensures that no value is present for Collection, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetCollection() {
	o.Collection.Unset()
}

// GetTokenId returns the TokenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetTokenId() string {
	if o == nil || IsNil(o.TokenId.Get()) {
		var ret string
		return ret
	}
	return *o.TokenId.Get()
}

// GetTokenIdOk returns a tuple with the TokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetTokenIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenId.Get(), o.TokenId.IsSet()
}

// HasTokenId returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasTokenId() bool {
	if o != nil && o.TokenId.IsSet() {
		return true
	}

	return false
}

// SetTokenId gets a reference to the given NullableString and assigns it to the TokenId field.
func (o *CRYPTOPUNKSTradeDTO) SetTokenId(v string) {
	o.TokenId.Set(&v)
}
// SetTokenIdNil sets the value for TokenId to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetTokenIdNil() {
	o.TokenId.Set(nil)
}

// UnsetTokenId ensures that no value is present for TokenId, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetTokenId() {
	o.TokenId.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetAmount() string {
	if o == nil || IsNil(o.Amount.Get()) {
		var ret string
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableString and assigns it to the Amount field.
func (o *CRYPTOPUNKSTradeDTO) SetAmount(v string) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetAmount() {
	o.Amount.Unset()
}

// GetPriceEth returns the PriceEth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetPriceEth() string {
	if o == nil || IsNil(o.PriceEth.Get()) {
		var ret string
		return ret
	}
	return *o.PriceEth.Get()
}

// GetPriceEthOk returns a tuple with the PriceEth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetPriceEthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceEth.Get(), o.PriceEth.IsSet()
}

// HasPriceEth returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasPriceEth() bool {
	if o != nil && o.PriceEth.IsSet() {
		return true
	}

	return false
}

// SetPriceEth gets a reference to the given NullableString and assigns it to the PriceEth field.
func (o *CRYPTOPUNKSTradeDTO) SetPriceEth(v string) {
	o.PriceEth.Set(&v)
}
// SetPriceEthNil sets the value for PriceEth to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetPriceEthNil() {
	o.PriceEth.Set(nil)
}

// UnsetPriceEth ensures that no value is present for PriceEth, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetPriceEth() {
	o.PriceEth.Unset()
}

// GetBuyer returns the Buyer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetBuyer() string {
	if o == nil || IsNil(o.Buyer.Get()) {
		var ret string
		return ret
	}
	return *o.Buyer.Get()
}

// GetBuyerOk returns a tuple with the Buyer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetBuyerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Buyer.Get(), o.Buyer.IsSet()
}

// HasBuyer returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasBuyer() bool {
	if o != nil && o.Buyer.IsSet() {
		return true
	}

	return false
}

// SetBuyer gets a reference to the given NullableString and assigns it to the Buyer field.
func (o *CRYPTOPUNKSTradeDTO) SetBuyer(v string) {
	o.Buyer.Set(&v)
}
// SetBuyerNil sets the value for Buyer to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetBuyerNil() {
	o.Buyer.Set(nil)
}

// UnsetBuyer ensures that no value is present for Buyer, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetBuyer() {
	o.Buyer.Unset()
}

// GetSeller returns the Seller field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CRYPTOPUNKSTradeDTO) GetSeller() string {
	if o == nil || IsNil(o.Seller.Get()) {
		var ret string
		return ret
	}
	return *o.Seller.Get()
}

// GetSellerOk returns a tuple with the Seller field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CRYPTOPUNKSTradeDTO) GetSellerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Seller.Get(), o.Seller.IsSet()
}

// HasSeller returns a boolean if a field has been set.
func (o *CRYPTOPUNKSTradeDTO) HasSeller() bool {
	if o != nil && o.Seller.IsSet() {
		return true
	}

	return false
}

// SetSeller gets a reference to the given NullableString and assigns it to the Seller field.
func (o *CRYPTOPUNKSTradeDTO) SetSeller(v string) {
	o.Seller.Set(&v)
}
// SetSellerNil sets the value for Seller to be an explicit nil
func (o *CRYPTOPUNKSTradeDTO) SetSellerNil() {
	o.Seller.Set(nil)
}

// UnsetSeller ensures that no value is present for Seller, not even an explicit nil
func (o *CRYPTOPUNKSTradeDTO) UnsetSeller() {
	o.Seller.Unset()
}

func (o CRYPTOPUNKSTradeDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CRYPTOPUNKSTradeDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if o.BlockNumber.IsSet() {
		toSerialize["block_number"] = o.BlockNumber.Get()
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.TransactionHash.IsSet() {
		toSerialize["transaction_hash"] = o.TransactionHash.Get()
	}
	if !IsNil(o.LogIndex) {
		toSerialize["log_index"] = o.LogIndex
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if !IsNil(o.IsBundle) {
		toSerialize["is_bundle"] = o.IsBundle
	}
	if o.Collection.IsSet() {
		toSerialize["collection"] = o.Collection.Get()
	}
	if o.TokenId.IsSet() {
		toSerialize["token_id"] = o.TokenId.Get()
	}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if o.PriceEth.IsSet() {
		toSerialize["price_eth"] = o.PriceEth.Get()
	}
	if o.Buyer.IsSet() {
		toSerialize["buyer"] = o.Buyer.Get()
	}
	if o.Seller.IsSet() {
		toSerialize["seller"] = o.Seller.Get()
	}
	return toSerialize, nil
}

type NullableCRYPTOPUNKSTradeDTO struct {
	value *CRYPTOPUNKSTradeDTO
	isSet bool
}

func (v NullableCRYPTOPUNKSTradeDTO) Get() *CRYPTOPUNKSTradeDTO {
	return v.value
}

func (v *NullableCRYPTOPUNKSTradeDTO) Set(val *CRYPTOPUNKSTradeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCRYPTOPUNKSTradeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCRYPTOPUNKSTradeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCRYPTOPUNKSTradeDTO(val *CRYPTOPUNKSTradeDTO) *NullableCRYPTOPUNKSTradeDTO {
	return &NullableCRYPTOPUNKSTradeDTO{value: val, isSet: true}
}

func (v NullableCRYPTOPUNKSTradeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCRYPTOPUNKSTradeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


