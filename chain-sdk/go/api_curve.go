/*
OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)


// CurveApiService CurveApi service
type CurveApiService service

type ApiDappsCurveAccountsHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveAccountsHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveAccountsHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveAccountsHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveAccountsHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveAccountsHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveAccountsHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveAccountsHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveAccountsHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveAccountsHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveAccountsHistoricalGetExecute(r)
}

/*
DappsCurveAccountsHistoricalGet Method for DappsCurveAccountsHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveAccountsHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveAccountsHistoricalGet(ctx context.Context) ApiDappsCurveAccountsHistoricalGetRequest {
	return ApiDappsCurveAccountsHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveAccountsHistoricalGetExecute(r ApiDappsCurveAccountsHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveAccountsHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/accounts/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveAddLiquidityEventHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveAddLiquidityEventHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveAddLiquidityEventHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveAddLiquidityEventHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveAddLiquidityEventHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveAddLiquidityEventHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveAddLiquidityEventHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveAddLiquidityEventHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveAddLiquidityEventHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveAddLiquidityEventHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveAddLiquidityEventHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveAddLiquidityEventHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveAddLiquidityEventHistoricalGetExecute(r)
}

/*
DappsCurveAddLiquidityEventHistoricalGet Method for DappsCurveAddLiquidityEventHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveAddLiquidityEventHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveAddLiquidityEventHistoricalGet(ctx context.Context) ApiDappsCurveAddLiquidityEventHistoricalGetRequest {
	return ApiDappsCurveAddLiquidityEventHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveAddLiquidityEventHistoricalGetExecute(r ApiDappsCurveAddLiquidityEventHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveAddLiquidityEventHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/addLiquidityEvent/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveAdminFeeChangeLogHistoricalGetExecute(r)
}

/*
DappsCurveAdminFeeChangeLogHistoricalGet Method for DappsCurveAdminFeeChangeLogHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveAdminFeeChangeLogHistoricalGet(ctx context.Context) ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest {
	return ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveAdminFeeChangeLogHistoricalGetExecute(r ApiDappsCurveAdminFeeChangeLogHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveAdminFeeChangeLogHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/adminFeeChangeLog/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveAmplificationCoeffChangeLogHistoricalGetExecute(r)
}

/*
DappsCurveAmplificationCoeffChangeLogHistoricalGet Method for DappsCurveAmplificationCoeffChangeLogHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveAmplificationCoeffChangeLogHistoricalGet(ctx context.Context) ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest {
	return ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveAmplificationCoeffChangeLogHistoricalGetExecute(r ApiDappsCurveAmplificationCoeffChangeLogHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveAmplificationCoeffChangeLogHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/amplificationCoeffChangeLog/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveCoinsHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveCoinsHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveCoinsHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveCoinsHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveCoinsHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveCoinsHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveCoinsHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveCoinsHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveCoinsHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveCoinsHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveCoinsHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveCoinsHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveCoinsHistoricalGetExecute(r)
}

/*
DappsCurveCoinsHistoricalGet Method for DappsCurveCoinsHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveCoinsHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveCoinsHistoricalGet(ctx context.Context) ApiDappsCurveCoinsHistoricalGetRequest {
	return ApiDappsCurveCoinsHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveCoinsHistoricalGetExecute(r ApiDappsCurveCoinsHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveCoinsHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/coins/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveContractsHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveContractsHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveContractsHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveContractsHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveContractsHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveContractsHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveContractsHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveContractsHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveContractsHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveContractsHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveContractsHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveContractsHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveContractsHistoricalGetExecute(r)
}

/*
DappsCurveContractsHistoricalGet Method for DappsCurveContractsHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveContractsHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveContractsHistoricalGet(ctx context.Context) ApiDappsCurveContractsHistoricalGetRequest {
	return ApiDappsCurveContractsHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveContractsHistoricalGetExecute(r ApiDappsCurveContractsHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveContractsHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/contracts/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveContractsVersionHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveContractsVersionHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveContractsVersionHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveContractsVersionHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveContractsVersionHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveContractsVersionHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveContractsVersionHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveContractsVersionHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveContractsVersionHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveContractsVersionHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveContractsVersionHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveContractsVersionHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveContractsVersionHistoricalGetExecute(r)
}

/*
DappsCurveContractsVersionHistoricalGet Method for DappsCurveContractsVersionHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveContractsVersionHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveContractsVersionHistoricalGet(ctx context.Context) ApiDappsCurveContractsVersionHistoricalGetRequest {
	return ApiDappsCurveContractsVersionHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveContractsVersionHistoricalGetExecute(r ApiDappsCurveContractsVersionHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveContractsVersionHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/contractsVersion/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveDailyVolumeHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveDailyVolumeHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveDailyVolumeHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveDailyVolumeHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveDailyVolumeHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveDailyVolumeHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveDailyVolumeHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveDailyVolumeHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveDailyVolumeHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveDailyVolumeHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveDailyVolumeHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveDailyVolumeHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveDailyVolumeHistoricalGetExecute(r)
}

/*
DappsCurveDailyVolumeHistoricalGet Method for DappsCurveDailyVolumeHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveDailyVolumeHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveDailyVolumeHistoricalGet(ctx context.Context) ApiDappsCurveDailyVolumeHistoricalGetRequest {
	return ApiDappsCurveDailyVolumeHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveDailyVolumeHistoricalGetExecute(r ApiDappsCurveDailyVolumeHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveDailyVolumeHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/dailyVolume/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveFeeChangeLogHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveFeeChangeLogHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveFeeChangeLogHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveFeeChangeLogHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveFeeChangeLogHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveFeeChangeLogHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveFeeChangeLogHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveFeeChangeLogHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveFeeChangeLogHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveFeeChangeLogHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveFeeChangeLogHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveFeeChangeLogHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveFeeChangeLogHistoricalGetExecute(r)
}

/*
DappsCurveFeeChangeLogHistoricalGet Method for DappsCurveFeeChangeLogHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveFeeChangeLogHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveFeeChangeLogHistoricalGet(ctx context.Context) ApiDappsCurveFeeChangeLogHistoricalGetRequest {
	return ApiDappsCurveFeeChangeLogHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveFeeChangeLogHistoricalGetExecute(r ApiDappsCurveFeeChangeLogHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveFeeChangeLogHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/feeChangeLog/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveGaugeDepositHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveGaugeDepositHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveGaugeDepositHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveGaugeDepositHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveGaugeDepositHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveGaugeDepositHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveGaugeDepositHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveGaugeDepositHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveGaugeDepositHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveGaugeDepositHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveGaugeDepositHistoricalGetExecute(r)
}

/*
DappsCurveGaugeDepositHistoricalGet Method for DappsCurveGaugeDepositHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveGaugeDepositHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveGaugeDepositHistoricalGet(ctx context.Context) ApiDappsCurveGaugeDepositHistoricalGetRequest {
	return ApiDappsCurveGaugeDepositHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveGaugeDepositHistoricalGetExecute(r ApiDappsCurveGaugeDepositHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveGaugeDepositHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/gaugeDeposit/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveGaugeHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveGaugeHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveGaugeHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveGaugeHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveGaugeHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveGaugeHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveGaugeHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveGaugeHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveGaugeHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveGaugeHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveGaugeHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveGaugeHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveGaugeHistoricalGetExecute(r)
}

/*
DappsCurveGaugeHistoricalGet Method for DappsCurveGaugeHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveGaugeHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveGaugeHistoricalGet(ctx context.Context) ApiDappsCurveGaugeHistoricalGetRequest {
	return ApiDappsCurveGaugeHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveGaugeHistoricalGetExecute(r ApiDappsCurveGaugeHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveGaugeHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/gauge/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveGaugeLiquidityHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveGaugeLiquidityHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveGaugeLiquidityHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveGaugeLiquidityHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveGaugeLiquidityHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveGaugeLiquidityHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveGaugeLiquidityHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveGaugeLiquidityHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveGaugeLiquidityHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveGaugeLiquidityHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveGaugeLiquidityHistoricalGetExecute(r)
}

/*
DappsCurveGaugeLiquidityHistoricalGet Method for DappsCurveGaugeLiquidityHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveGaugeLiquidityHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveGaugeLiquidityHistoricalGet(ctx context.Context) ApiDappsCurveGaugeLiquidityHistoricalGetRequest {
	return ApiDappsCurveGaugeLiquidityHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveGaugeLiquidityHistoricalGetExecute(r ApiDappsCurveGaugeLiquidityHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveGaugeLiquidityHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/gaugeLiquidity/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveGaugeTotalWeightHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveGaugeTotalWeightHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveGaugeTotalWeightHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveGaugeTotalWeightHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveGaugeTotalWeightHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveGaugeTotalWeightHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveGaugeTotalWeightHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveGaugeTotalWeightHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveGaugeTotalWeightHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveGaugeTotalWeightHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveGaugeTotalWeightHistoricalGetExecute(r)
}

/*
DappsCurveGaugeTotalWeightHistoricalGet Method for DappsCurveGaugeTotalWeightHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveGaugeTotalWeightHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveGaugeTotalWeightHistoricalGet(ctx context.Context) ApiDappsCurveGaugeTotalWeightHistoricalGetRequest {
	return ApiDappsCurveGaugeTotalWeightHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveGaugeTotalWeightHistoricalGetExecute(r ApiDappsCurveGaugeTotalWeightHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveGaugeTotalWeightHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/gaugeTotalWeight/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveGaugeTypeHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveGaugeTypeHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveGaugeTypeHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveGaugeTypeHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveGaugeTypeHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveGaugeTypeHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveGaugeTypeHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveGaugeTypeHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveGaugeTypeHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveGaugeTypeHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveGaugeTypeHistoricalGetExecute(r)
}

/*
DappsCurveGaugeTypeHistoricalGet Method for DappsCurveGaugeTypeHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveGaugeTypeHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveGaugeTypeHistoricalGet(ctx context.Context) ApiDappsCurveGaugeTypeHistoricalGetRequest {
	return ApiDappsCurveGaugeTypeHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveGaugeTypeHistoricalGetExecute(r ApiDappsCurveGaugeTypeHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveGaugeTypeHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/gaugeType/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveGaugeTypeWeightHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveGaugeTypeWeightHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveGaugeTypeWeightHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveGaugeTypeWeightHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveGaugeTypeWeightHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveGaugeTypeWeightHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveGaugeTypeWeightHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveGaugeTypeWeightHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveGaugeTypeWeightHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveGaugeTypeWeightHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveGaugeTypeWeightHistoricalGetExecute(r)
}

/*
DappsCurveGaugeTypeWeightHistoricalGet Method for DappsCurveGaugeTypeWeightHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveGaugeTypeWeightHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveGaugeTypeWeightHistoricalGet(ctx context.Context) ApiDappsCurveGaugeTypeWeightHistoricalGetRequest {
	return ApiDappsCurveGaugeTypeWeightHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveGaugeTypeWeightHistoricalGetExecute(r ApiDappsCurveGaugeTypeWeightHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveGaugeTypeWeightHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/gaugeTypeWeight/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveGaugeWeightHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveGaugeWeightHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveGaugeWeightHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveGaugeWeightHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveGaugeWeightHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveGaugeWeightHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveGaugeWeightHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveGaugeWeightHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveGaugeWeightHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveGaugeWeightHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveGaugeWeightHistoricalGetExecute(r)
}

/*
DappsCurveGaugeWeightHistoricalGet Method for DappsCurveGaugeWeightHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveGaugeWeightHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveGaugeWeightHistoricalGet(ctx context.Context) ApiDappsCurveGaugeWeightHistoricalGetRequest {
	return ApiDappsCurveGaugeWeightHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveGaugeWeightHistoricalGetExecute(r ApiDappsCurveGaugeWeightHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveGaugeWeightHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/gaugeWeight/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveGaugeWeightVoteHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveGaugeWeightVoteHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveGaugeWeightVoteHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveGaugeWeightVoteHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveGaugeWeightVoteHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveGaugeWeightVoteHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveGaugeWeightVoteHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveGaugeWeightVoteHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveGaugeWeightVoteHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveGaugeWeightVoteHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveGaugeWeightVoteHistoricalGetExecute(r)
}

/*
DappsCurveGaugeWeightVoteHistoricalGet Method for DappsCurveGaugeWeightVoteHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveGaugeWeightVoteHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveGaugeWeightVoteHistoricalGet(ctx context.Context) ApiDappsCurveGaugeWeightVoteHistoricalGetRequest {
	return ApiDappsCurveGaugeWeightVoteHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveGaugeWeightVoteHistoricalGetExecute(r ApiDappsCurveGaugeWeightVoteHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveGaugeWeightVoteHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/gaugeWeightVote/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveGaugeWithdrawHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveGaugeWithdrawHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveGaugeWithdrawHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveGaugeWithdrawHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveGaugeWithdrawHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveGaugeWithdrawHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveGaugeWithdrawHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveGaugeWithdrawHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveGaugeWithdrawHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveGaugeWithdrawHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveGaugeWithdrawHistoricalGetExecute(r)
}

/*
DappsCurveGaugeWithdrawHistoricalGet Method for DappsCurveGaugeWithdrawHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveGaugeWithdrawHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveGaugeWithdrawHistoricalGet(ctx context.Context) ApiDappsCurveGaugeWithdrawHistoricalGetRequest {
	return ApiDappsCurveGaugeWithdrawHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveGaugeWithdrawHistoricalGetExecute(r ApiDappsCurveGaugeWithdrawHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveGaugeWithdrawHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/gaugeWithdraw/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveHourlyVolumeHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveHourlyVolumeHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveHourlyVolumeHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveHourlyVolumeHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveHourlyVolumeHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveHourlyVolumeHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveHourlyVolumeHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveHourlyVolumeHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveHourlyVolumeHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveHourlyVolumeHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveHourlyVolumeHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveHourlyVolumeHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveHourlyVolumeHistoricalGetExecute(r)
}

/*
DappsCurveHourlyVolumeHistoricalGet Method for DappsCurveHourlyVolumeHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveHourlyVolumeHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveHourlyVolumeHistoricalGet(ctx context.Context) ApiDappsCurveHourlyVolumeHistoricalGetRequest {
	return ApiDappsCurveHourlyVolumeHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveHourlyVolumeHistoricalGetExecute(r ApiDappsCurveHourlyVolumeHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveHourlyVolumeHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/hourlyVolume/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveLpTokenHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveLpTokenHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveLpTokenHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveLpTokenHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveLpTokenHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveLpTokenHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveLpTokenHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveLpTokenHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveLpTokenHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveLpTokenHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveLpTokenHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveLpTokenHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveLpTokenHistoricalGetExecute(r)
}

/*
DappsCurveLpTokenHistoricalGet Method for DappsCurveLpTokenHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveLpTokenHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveLpTokenHistoricalGet(ctx context.Context) ApiDappsCurveLpTokenHistoricalGetRequest {
	return ApiDappsCurveLpTokenHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveLpTokenHistoricalGetExecute(r ApiDappsCurveLpTokenHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveLpTokenHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/lpToken/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurvePoolsHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurvePoolsHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurvePoolsHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurvePoolsHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurvePoolsHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurvePoolsHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurvePoolsHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurvePoolsHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurvePoolsHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurvePoolsHistoricalGetRequest) PoolId(poolId string) ApiDappsCurvePoolsHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurvePoolsHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurvePoolsHistoricalGetExecute(r)
}

/*
DappsCurvePoolsHistoricalGet Method for DappsCurvePoolsHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurvePoolsHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurvePoolsHistoricalGet(ctx context.Context) ApiDappsCurvePoolsHistoricalGetRequest {
	return ApiDappsCurvePoolsHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurvePoolsHistoricalGetExecute(r ApiDappsCurvePoolsHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurvePoolsHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/pools/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveProposalsHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveProposalsHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveProposalsHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveProposalsHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveProposalsHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveProposalsHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveProposalsHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveProposalsHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveProposalsHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveProposalsHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveProposalsHistoricalGetExecute(r)
}

/*
DappsCurveProposalsHistoricalGet Method for DappsCurveProposalsHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveProposalsHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveProposalsHistoricalGet(ctx context.Context) ApiDappsCurveProposalsHistoricalGetRequest {
	return ApiDappsCurveProposalsHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveProposalsHistoricalGetExecute(r ApiDappsCurveProposalsHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveProposalsHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/proposals/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveProposalsVoteHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveProposalsVoteHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveProposalsVoteHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveProposalsVoteHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveProposalsVoteHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveProposalsVoteHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveProposalsVoteHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveProposalsVoteHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveProposalsVoteHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveProposalsVoteHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveProposalsVoteHistoricalGetExecute(r)
}

/*
DappsCurveProposalsVoteHistoricalGet Method for DappsCurveProposalsVoteHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveProposalsVoteHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveProposalsVoteHistoricalGet(ctx context.Context) ApiDappsCurveProposalsVoteHistoricalGetRequest {
	return ApiDappsCurveProposalsVoteHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveProposalsVoteHistoricalGetExecute(r ApiDappsCurveProposalsVoteHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveProposalsVoteHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/proposalsVote/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveRemoveLiquidityEventHistoricalGetExecute(r)
}

/*
DappsCurveRemoveLiquidityEventHistoricalGet Method for DappsCurveRemoveLiquidityEventHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveRemoveLiquidityEventHistoricalGet(ctx context.Context) ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest {
	return ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveRemoveLiquidityEventHistoricalGetExecute(r ApiDappsCurveRemoveLiquidityEventHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveRemoveLiquidityEventHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/removeLiquidityEvent/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveRemoveLiquidityOneEventHistoricalGetExecute(r)
}

/*
DappsCurveRemoveLiquidityOneEventHistoricalGet Method for DappsCurveRemoveLiquidityOneEventHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveRemoveLiquidityOneEventHistoricalGet(ctx context.Context) ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest {
	return ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveRemoveLiquidityOneEventHistoricalGetExecute(r ApiDappsCurveRemoveLiquidityOneEventHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveRemoveLiquidityOneEventHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/removeLiquidityOneEvent/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveSwapsHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveSwapsHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveSwapsHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveSwapsHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveSwapsHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveSwapsHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveSwapsHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveSwapsHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveSwapsHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveSwapsHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveSwapsHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveSwapsHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveSwapsHistoricalGetExecute(r)
}

/*
DappsCurveSwapsHistoricalGet Method for DappsCurveSwapsHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveSwapsHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveSwapsHistoricalGet(ctx context.Context) ApiDappsCurveSwapsHistoricalGetRequest {
	return ApiDappsCurveSwapsHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveSwapsHistoricalGetExecute(r ApiDappsCurveSwapsHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveSwapsHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/swaps/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveSystemStateHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveSystemStateHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveSystemStateHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveSystemStateHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveSystemStateHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveSystemStateHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveSystemStateHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveSystemStateHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveSystemStateHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveSystemStateHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveSystemStateHistoricalGetExecute(r)
}

/*
DappsCurveSystemStateHistoricalGet Method for DappsCurveSystemStateHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveSystemStateHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveSystemStateHistoricalGet(ctx context.Context) ApiDappsCurveSystemStateHistoricalGetRequest {
	return ApiDappsCurveSystemStateHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveSystemStateHistoricalGetExecute(r ApiDappsCurveSystemStateHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveSystemStateHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/systemState/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveTokensHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	tokenId *string
}

func (r ApiDappsCurveTokensHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveTokensHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveTokensHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveTokensHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveTokensHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveTokensHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveTokensHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveTokensHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveTokensHistoricalGetRequest) TokenId(tokenId string) ApiDappsCurveTokensHistoricalGetRequest {
	r.tokenId = &tokenId
	return r
}

func (r ApiDappsCurveTokensHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveTokensHistoricalGetExecute(r)
}

/*
DappsCurveTokensHistoricalGet Method for DappsCurveTokensHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveTokensHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveTokensHistoricalGet(ctx context.Context) ApiDappsCurveTokensHistoricalGetRequest {
	return ApiDappsCurveTokensHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveTokensHistoricalGetExecute(r ApiDappsCurveTokensHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveTokensHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/tokens/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.tokenId != nil {
		localVarQueryParams.Add("tokenId", parameterToString(*r.tokenId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveTransferOwnershipEventHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveTransferOwnershipEventHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveTransferOwnershipEventHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveTransferOwnershipEventHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveTransferOwnershipEventHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveTransferOwnershipEventHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveTransferOwnershipEventHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveTransferOwnershipEventHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveTransferOwnershipEventHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveTransferOwnershipEventHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveTransferOwnershipEventHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveTransferOwnershipEventHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveTransferOwnershipEventHistoricalGetExecute(r)
}

/*
DappsCurveTransferOwnershipEventHistoricalGet Method for DappsCurveTransferOwnershipEventHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveTransferOwnershipEventHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveTransferOwnershipEventHistoricalGet(ctx context.Context) ApiDappsCurveTransferOwnershipEventHistoricalGetRequest {
	return ApiDappsCurveTransferOwnershipEventHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveTransferOwnershipEventHistoricalGetExecute(r ApiDappsCurveTransferOwnershipEventHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveTransferOwnershipEventHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/transferOwnershipEvent/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveUnderlyingCoinHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveUnderlyingCoinHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveUnderlyingCoinHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveUnderlyingCoinHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveUnderlyingCoinHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveUnderlyingCoinHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveUnderlyingCoinHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveUnderlyingCoinHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveUnderlyingCoinHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveUnderlyingCoinHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveUnderlyingCoinHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveUnderlyingCoinHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveUnderlyingCoinHistoricalGetExecute(r)
}

/*
DappsCurveUnderlyingCoinHistoricalGet Method for DappsCurveUnderlyingCoinHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveUnderlyingCoinHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveUnderlyingCoinHistoricalGet(ctx context.Context) ApiDappsCurveUnderlyingCoinHistoricalGetRequest {
	return ApiDappsCurveUnderlyingCoinHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveUnderlyingCoinHistoricalGetExecute(r ApiDappsCurveUnderlyingCoinHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveUnderlyingCoinHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/underlyingCoin/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveVotingAppHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
}

func (r ApiDappsCurveVotingAppHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveVotingAppHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveVotingAppHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveVotingAppHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveVotingAppHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveVotingAppHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveVotingAppHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveVotingAppHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveVotingAppHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveVotingAppHistoricalGetExecute(r)
}

/*
DappsCurveVotingAppHistoricalGet Method for DappsCurveVotingAppHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveVotingAppHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveVotingAppHistoricalGet(ctx context.Context) ApiDappsCurveVotingAppHistoricalGetRequest {
	return ApiDappsCurveVotingAppHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveVotingAppHistoricalGetExecute(r ApiDappsCurveVotingAppHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveVotingAppHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/votingApp/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDappsCurveWeeklyVolumeHistoricalGetRequest struct {
	ctx context.Context
	ApiService *CurveApiService
	startBlock *int64
	endBlock *int64
	startDate *time.Time
	endDate *time.Time
	poolId *string
}

func (r ApiDappsCurveWeeklyVolumeHistoricalGetRequest) StartBlock(startBlock int64) ApiDappsCurveWeeklyVolumeHistoricalGetRequest {
	r.startBlock = &startBlock
	return r
}

func (r ApiDappsCurveWeeklyVolumeHistoricalGetRequest) EndBlock(endBlock int64) ApiDappsCurveWeeklyVolumeHistoricalGetRequest {
	r.endBlock = &endBlock
	return r
}

func (r ApiDappsCurveWeeklyVolumeHistoricalGetRequest) StartDate(startDate time.Time) ApiDappsCurveWeeklyVolumeHistoricalGetRequest {
	r.startDate = &startDate
	return r
}

func (r ApiDappsCurveWeeklyVolumeHistoricalGetRequest) EndDate(endDate time.Time) ApiDappsCurveWeeklyVolumeHistoricalGetRequest {
	r.endDate = &endDate
	return r
}

func (r ApiDappsCurveWeeklyVolumeHistoricalGetRequest) PoolId(poolId string) ApiDappsCurveWeeklyVolumeHistoricalGetRequest {
	r.poolId = &poolId
	return r
}

func (r ApiDappsCurveWeeklyVolumeHistoricalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DappsCurveWeeklyVolumeHistoricalGetExecute(r)
}

/*
DappsCurveWeeklyVolumeHistoricalGet Method for DappsCurveWeeklyVolumeHistoricalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDappsCurveWeeklyVolumeHistoricalGetRequest
*/
func (a *CurveApiService) DappsCurveWeeklyVolumeHistoricalGet(ctx context.Context) ApiDappsCurveWeeklyVolumeHistoricalGetRequest {
	return ApiDappsCurveWeeklyVolumeHistoricalGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CurveApiService) DappsCurveWeeklyVolumeHistoricalGetExecute(r ApiDappsCurveWeeklyVolumeHistoricalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurveApiService.DappsCurveWeeklyVolumeHistoricalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dapps/curve/weeklyVolume/historical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startBlock != nil {
		localVarQueryParams.Add("startBlock", parameterToString(*r.startBlock, ""))
	}
	if r.endBlock != nil {
		localVarQueryParams.Add("endBlock", parameterToString(*r.endBlock, ""))
	}
	if r.startDate != nil {
		localVarQueryParams.Add("startDate", parameterToString(*r.startDate, ""))
	}
	if r.endDate != nil {
		localVarQueryParams.Add("endDate", parameterToString(*r.endDate, ""))
	}
	if r.poolId != nil {
		localVarQueryParams.Add("poolId", parameterToString(*r.poolId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
