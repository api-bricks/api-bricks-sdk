/*
OnChain API

Testing UniswapV3ApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_openapi_UniswapV3ApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test UniswapV3ApiService DappsUniswapv3BundleCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3BundleCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3BundlesHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3BundlesHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3BurnsCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3BurnsCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3BurnsHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3BurnsHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3DayDataHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3DayDataHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3FactoryCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var chainId string

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3FactoryCurrentGet(context.Background(), chainId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3FactoryHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3FactoryHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3MintsCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3MintsCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3MintsHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3MintsHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PoolDayDataHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PoolDayDataHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PoolHourDataHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PoolHourDataHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PoolsCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PoolsCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PoolsDayDataCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PoolsDayDataCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PoolsHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PoolsHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PoolsHourDataCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PoolsHourDataCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PositionSnapshotHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PositionSnapshotHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PositionSnapshotsCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PositionSnapshotsCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PositionsCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PositionsCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3PositionsHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3PositionsHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3SwapsCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3SwapsCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3SwapsHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3SwapsHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TickDayDataHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TickDayDataHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TicksCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TicksCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TicksDayDataCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TicksDayDataCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TicksHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TicksHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TokenDayDataHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TokenDayDataHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TokenHourDataHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TokenHourDataHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TokensCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TokensCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TokensDayDataCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TokensDayDataCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TokensHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TokensHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TokensHourDataCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TokensHourDataCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3TransactionsHistoricalGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3TransactionsHistoricalGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test UniswapV3ApiService DappsUniswapv3UniswapDayDataCurrentGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.UniswapV3Api.DappsUniswapv3UniswapDayDataCurrentGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
