=begin comment

On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::DexApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# dex_batches__current
#
# Batches (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_batches__current' } = {
        summary => 'Batches (current)',
        params => $params,
        returns => 'ARRAY[DexBatchDTO]',
        };
}
# @return ARRAY[DexBatchDTO]
#
sub dex_batches__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/batches/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexBatchDTO]', $response);
    return $_response_object;
}

#
# dex_deposits__current
#
# Deposits (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_deposits__current' } = {
        summary => 'Deposits (current)',
        params => $params,
        returns => 'ARRAY[DexDepositDTO]',
        };
}
# @return ARRAY[DexDepositDTO]
#
sub dex_deposits__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/deposits/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexDepositDTO]', $response);
    return $_response_object;
}

#
# dex_get_batches__historical
#
# Batches (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Identifier. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Identifier.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_batches__historical' } = {
        summary => 'Batches (historical)',
        params => $params,
        returns => 'ARRAY[DexBatchDTO]',
        };
}
# @return ARRAY[DexBatchDTO]
#
sub dex_get_batches__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/batches/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexBatchDTO]', $response);
    return $_response_object;
}

#
# dex_get_deposits__historical
#
# Deposits (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Identifier, format: (transaction hash)-(token id). (optional)
# @param string $user User address. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Identifier, format: (transaction hash)-(token id).',
        required => '0',
    },
    'user' => {
        data_type => 'string',
        description => 'User address.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_deposits__historical' } = {
        summary => 'Deposits (historical)',
        params => $params,
        returns => 'ARRAY[DexDepositDTO]',
        };
}
# @return ARRAY[DexDepositDTO]
#
sub dex_get_deposits__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/deposits/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexDepositDTO]', $response);
    return $_response_object;
}

#
# dex_get_orders__historical
#
# Orders (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Identifier, format: (owner address)-(order id) (optional)
# @param string $buy_token Identifier of token that was bought. (optional)
# @param string $sell_token Identifier of token that was sold. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Identifier, format: (owner address)-(order id)',
        required => '0',
    },
    'buy_token' => {
        data_type => 'string',
        description => 'Identifier of token that was bought.',
        required => '0',
    },
    'sell_token' => {
        data_type => 'string',
        description => 'Identifier of token that was sold.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_orders__historical' } = {
        summary => 'Orders (historical)',
        params => $params,
        returns => 'ARRAY[DexOrderDTO]',
        };
}
# @return ARRAY[DexOrderDTO]
#
sub dex_get_orders__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/orders/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'buy_token'}) {
        $query_params->{'buy_token'} = $self->{api_client}->to_query_value($args{'buy_token'});
    }

    # query params
    if ( exists $args{'sell_token'}) {
        $query_params->{'sell_token'} = $self->{api_client}->to_query_value($args{'sell_token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexOrderDTO]', $response);
    return $_response_object;
}

#
# dex_get_prices__historical
#
# Prices (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Identifier, format: (token id)-(batch id). (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Identifier, format: (token id)-(batch id).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_prices__historical' } = {
        summary => 'Prices (historical)',
        params => $params,
        returns => 'ARRAY[DexPriceDTO]',
        };
}
# @return ARRAY[DexPriceDTO]
#
sub dex_get_prices__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/prices/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexPriceDTO]', $response);
    return $_response_object;
}

#
# dex_get_solutions__historical
#
# Solutions (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_solutions__historical' } = {
        summary => 'Solutions (historical)',
        params => $params,
        returns => 'ARRAY[DexSolutionDTO]',
        };
}
# @return ARRAY[DexSolutionDTO]
#
sub dex_get_solutions__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/solutions/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexSolutionDTO]', $response);
    return $_response_object;
}

#
# dex_get_stats__historical
#
# Stats (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_stats__historical' } = {
        summary => 'Stats (historical)',
        params => $params,
        returns => 'ARRAY[DexStatsDTO]',
        };
}
# @return ARRAY[DexStatsDTO]
#
sub dex_get_stats__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/stats/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexStatsDTO]', $response);
    return $_response_object;
}

#
# dex_get_tokens__historical
#
# Tokens (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id  (optional)
# @param string $address  (optional)
# @param string $symbol  (optional)
# @param string $name  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'address' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'symbol' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_tokens__historical' } = {
        summary => 'Tokens (historical)',
        params => $params,
        returns => 'ARRAY[DexTokenDTO]',
        };
}
# @return ARRAY[DexTokenDTO]
#
sub dex_get_tokens__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/tokens/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'address'}) {
        $query_params->{'address'} = $self->{api_client}->to_query_value($args{'address'});
    }

    # query params
    if ( exists $args{'symbol'}) {
        $query_params->{'symbol'} = $self->{api_client}->to_query_value($args{'symbol'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexTokenDTO]', $response);
    return $_response_object;
}

#
# dex_get_trades__historical
#
# Trades (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id  (optional)
# @param string $buy_token  (optional)
# @param string $sell_token  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'buy_token' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'sell_token' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_trades__historical' } = {
        summary => 'Trades (historical)',
        params => $params,
        returns => 'ARRAY[DexTradeDTO]',
        };
}
# @return ARRAY[DexTradeDTO]
#
sub dex_get_trades__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/trades/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'buy_token'}) {
        $query_params->{'buy_token'} = $self->{api_client}->to_query_value($args{'buy_token'});
    }

    # query params
    if ( exists $args{'sell_token'}) {
        $query_params->{'sell_token'} = $self->{api_client}->to_query_value($args{'sell_token'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexTradeDTO]', $response);
    return $_response_object;
}

#
# dex_get_users__historical
#
# Users (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_users__historical' } = {
        summary => 'Users (historical)',
        params => $params,
        returns => 'ARRAY[DexUserDTO]',
        };
}
# @return ARRAY[DexUserDTO]
#
sub dex_get_users__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/users/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexUserDTO]', $response);
    return $_response_object;
}

#
# dex_get_withdraw_requests__historical
#
# WithdrawRequests (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Identifier, format: (transaction hash)-(id). (optional)
# @param string $user  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Identifier, format: (transaction hash)-(id).',
        required => '0',
    },
    'user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_withdraw_requests__historical' } = {
        summary => 'WithdrawRequests (historical)',
        params => $params,
        returns => 'ARRAY[DexWithdrawRequestDTO]',
        };
}
# @return ARRAY[DexWithdrawRequestDTO]
#
sub dex_get_withdraw_requests__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/withdrawRequests/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexWithdrawRequestDTO]', $response);
    return $_response_object;
}

#
# dex_get_withdraws__historical
#
# Withdraws (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Identifier, format: (transaction hash)-(id). (optional)
# @param string $user  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Identifier, format: (transaction hash)-(id).',
        required => '0',
    },
    'user' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'dex_get_withdraws__historical' } = {
        summary => 'Withdraws (historical)',
        params => $params,
        returns => 'ARRAY[DexWithdrawDTO]',
        };
}
# @return ARRAY[DexWithdrawDTO]
#
sub dex_get_withdraws__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/withdraws/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexWithdrawDTO]', $response);
    return $_response_object;
}

#
# dex_orders__current
#
# Orders (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_orders__current' } = {
        summary => 'Orders (current)',
        params => $params,
        returns => 'ARRAY[DexOrderDTO]',
        };
}
# @return ARRAY[DexOrderDTO]
#
sub dex_orders__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/orders/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexOrderDTO]', $response);
    return $_response_object;
}

#
# dex_prices__current
#
# Prices (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_prices__current' } = {
        summary => 'Prices (current)',
        params => $params,
        returns => 'ARRAY[DexPriceDTO]',
        };
}
# @return ARRAY[DexPriceDTO]
#
sub dex_prices__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/prices/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexPriceDTO]', $response);
    return $_response_object;
}

#
# dex_solutions__current
#
# Solutions (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_solutions__current' } = {
        summary => 'Solutions (current)',
        params => $params,
        returns => 'ARRAY[DexSolutionDTO]',
        };
}
# @return ARRAY[DexSolutionDTO]
#
sub dex_solutions__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/solutions/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexSolutionDTO]', $response);
    return $_response_object;
}

#
# dex_stats__current
#
# Stats (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_stats__current' } = {
        summary => 'Stats (current)',
        params => $params,
        returns => 'ARRAY[DexStatsDTO]',
        };
}
# @return ARRAY[DexStatsDTO]
#
sub dex_stats__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/stats/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexStatsDTO]', $response);
    return $_response_object;
}

#
# dex_tokens__current
#
# Tokens (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_tokens__current' } = {
        summary => 'Tokens (current)',
        params => $params,
        returns => 'ARRAY[DexTokenDTO]',
        };
}
# @return ARRAY[DexTokenDTO]
#
sub dex_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/tokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexTokenDTO]', $response);
    return $_response_object;
}

#
# dex_trades__current
#
# Trades (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_trades__current' } = {
        summary => 'Trades (current)',
        params => $params,
        returns => 'ARRAY[DexTradeDTO]',
        };
}
# @return ARRAY[DexTradeDTO]
#
sub dex_trades__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/trades/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexTradeDTO]', $response);
    return $_response_object;
}

#
# dex_users__current
#
# Users (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_users__current' } = {
        summary => 'Users (current)',
        params => $params,
        returns => 'ARRAY[DexUserDTO]',
        };
}
# @return ARRAY[DexUserDTO]
#
sub dex_users__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/users/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexUserDTO]', $response);
    return $_response_object;
}

#
# dex_withdraw_requests__current
#
# WithdrawRequests (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_withdraw_requests__current' } = {
        summary => 'WithdrawRequests (current)',
        params => $params,
        returns => 'ARRAY[DexWithdrawRequestDTO]',
        };
}
# @return ARRAY[DexWithdrawRequestDTO]
#
sub dex_withdraw_requests__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/withdrawRequests/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexWithdrawRequestDTO]', $response);
    return $_response_object;
}

#
# dex_withdraws__current
#
# Withdraws (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_withdraws__current' } = {
        summary => 'Withdraws (current)',
        params => $params,
        returns => 'ARRAY[DexWithdrawDTO]',
        };
}
# @return ARRAY[DexWithdrawDTO]
#
sub dex_withdraws__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/dex/withdraws/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexWithdrawDTO]', $response);
    return $_response_object;
}

1;
