=begin comment

OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::UniswapV2Api;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# uniswap_v2_get_bundle_v2_dtos__historical
#
# BundleV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_bundle_v2_dtos__historical' } = {
        summary => 'BundleV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2BundleV2DTO]',
        };
}
# @return ARRAY[UniswapV2BundleV2DTO]
#
sub uniswap_v2_get_bundle_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/BundleV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2BundleV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_bundles__historical
#
# Bundles (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_bundles__historical' } = {
        summary => 'Bundles (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2BundleV2DTO]',
        };
}
# @return ARRAY[UniswapV2BundleV2DTO]
#
sub uniswap_v2_get_bundles__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/bundles/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2BundleV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_burn_v2_dtos__historical
#
# BurnV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_burn_v2_dtos__historical' } = {
        summary => 'BurnV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2BurnV2DTO]',
        };
}
# @return ARRAY[UniswapV2BurnV2DTO]
#
sub uniswap_v2_get_burn_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/BurnV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2BurnV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_burns__historical
#
# Burns (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_burns__historical' } = {
        summary => 'Burns (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2BurnV2DTO]',
        };
}
# @return ARRAY[UniswapV2BurnV2DTO]
#
sub uniswap_v2_get_burns__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/burns/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2BurnV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_day_data__historical
#
# DayData (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_day_data__historical' } = {
        summary => 'DayData (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2UniswapDayDataV2DTO]',
        };
}
# @return ARRAY[UniswapV2UniswapDayDataV2DTO]
#
sub uniswap_v2_get_day_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/dayData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UniswapDayDataV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_factory__historical
#
# Factory (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_factory__historical' } = {
        summary => 'Factory (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2UniswapFactoryV2DTO]',
        };
}
# @return ARRAY[UniswapV2UniswapFactoryV2DTO]
#
sub uniswap_v2_get_factory__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/factory/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UniswapFactoryV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_liquidity_position_snapshot_v2_dtos__historical
#
# LiquidityPositionSnapshotV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_liquidity_position_snapshot_v2_dtos__historical' } = {
        summary => 'LiquidityPositionSnapshotV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2LiquidityPositionSnapshotV2DTO]',
        };
}
# @return ARRAY[UniswapV2LiquidityPositionSnapshotV2DTO]
#
sub uniswap_v2_get_liquidity_position_snapshot_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/LiquidityPositionSnapshotV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2LiquidityPositionSnapshotV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_liquidity_position_v2_dtos__historical
#
# LiquidityPositionV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_liquidity_position_v2_dtos__historical' } = {
        summary => 'LiquidityPositionV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2LiquidityPositionV2DTO]',
        };
}
# @return ARRAY[UniswapV2LiquidityPositionV2DTO]
#
sub uniswap_v2_get_liquidity_position_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/LiquidityPositionV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2LiquidityPositionV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_liquidity_positions__historical
#
# LiquidityPositions (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_liquidity_positions__historical' } = {
        summary => 'LiquidityPositions (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2LiquidityPositionV2DTO]',
        };
}
# @return ARRAY[UniswapV2LiquidityPositionV2DTO]
#
sub uniswap_v2_get_liquidity_positions__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/liquidityPositions/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2LiquidityPositionV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_liquidity_positions_snapshots__historical
#
# LiquidityPositionsSnapshots (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_liquidity_positions_snapshots__historical' } = {
        summary => 'LiquidityPositionsSnapshots (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2LiquidityPositionSnapshotV2DTO]',
        };
}
# @return ARRAY[UniswapV2LiquidityPositionSnapshotV2DTO]
#
sub uniswap_v2_get_liquidity_positions_snapshots__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/liquidityPositionsSnapshots/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2LiquidityPositionSnapshotV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_mint_v2_dtos__historical
#
# MintV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_mint_v2_dtos__historical' } = {
        summary => 'MintV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2MintV2DTO]',
        };
}
# @return ARRAY[UniswapV2MintV2DTO]
#
sub uniswap_v2_get_mint_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/MintV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2MintV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_mints__historical
#
# Mints (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_mints__historical' } = {
        summary => 'Mints (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2MintV2DTO]',
        };
}
# @return ARRAY[UniswapV2MintV2DTO]
#
sub uniswap_v2_get_mints__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/mints/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2MintV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pair_day_data_v2_dtos__historical
#
# PairDayDataV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pair_day_data_v2_dtos__historical' } = {
        summary => 'PairDayDataV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2PairDayDataV2DTO]',
        };
}
# @return ARRAY[UniswapV2PairDayDataV2DTO]
#
sub uniswap_v2_get_pair_day_data_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/PairDayDataV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairDayDataV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pair_hour_data_v2_dtos__historical
#
# PairHourDataV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pair_hour_data_v2_dtos__historical' } = {
        summary => 'PairHourDataV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2PairHourDataV2DTO]',
        };
}
# @return ARRAY[UniswapV2PairHourDataV2DTO]
#
sub uniswap_v2_get_pair_hour_data_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/PairHourDataV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairHourDataV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pair_v2_dtos__historical
#
# PairV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pair_v2_dtos__historical' } = {
        summary => 'PairV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2PairV2DTO]',
        };
}
# @return ARRAY[UniswapV2PairV2DTO]
#
sub uniswap_v2_get_pair_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/PairV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pools__current
#
# Pools (current) ðŸ”¥
#
# @param string $filter_pool_id  (optional)
{
    my $params = {
    'filter_pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pools__current' } = {
        summary => 'Pools (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2PairV2DTO]',
        };
}
# @return ARRAY[UniswapV2PairV2DTO]
#
sub uniswap_v2_get_pools__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/pools/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'filter_pool_id'}) {
        $query_params->{'filter_pool_id'} = $self->{api_client}->to_query_value($args{'filter_pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pools__historical
#
# Pools (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pools__historical' } = {
        summary => 'Pools (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2PairV2DTO]',
        };
}
# @return ARRAY[UniswapV2PairV2DTO]
#
sub uniswap_v2_get_pools__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/pools/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pools_day_data__historical
#
# PoolsDayData (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pools_day_data__historical' } = {
        summary => 'PoolsDayData (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2PairDayDataV2DTO]',
        };
}
# @return ARRAY[UniswapV2PairDayDataV2DTO]
#
sub uniswap_v2_get_pools_day_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/poolsDayData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairDayDataV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pools_hour_data__historical
#
# PoolsHourData (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pools_hour_data__historical' } = {
        summary => 'PoolsHourData (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2PairHourDataV2DTO]',
        };
}
# @return ARRAY[UniswapV2PairHourDataV2DTO]
#
sub uniswap_v2_get_pools_hour_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/poolsHourData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairHourDataV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_swap_v2_dtos__historical
#
# SwapV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_swap_v2_dtos__historical' } = {
        summary => 'SwapV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2SwapV2DTO]',
        };
}
# @return ARRAY[UniswapV2SwapV2DTO]
#
sub uniswap_v2_get_swap_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/SwapV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2SwapV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_swaps__current
#
# Swaps (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_swaps__current' } = {
        summary => 'Swaps (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2SwapV2DTO]',
        };
}
# @return ARRAY[UniswapV2SwapV2DTO]
#
sub uniswap_v2_get_swaps__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/swaps/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2SwapV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_swaps__historical
#
# Swaps (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_swaps__historical' } = {
        summary => 'Swaps (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2SwapV2DTO]',
        };
}
# @return ARRAY[UniswapV2SwapV2DTO]
#
sub uniswap_v2_get_swaps__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/swaps/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2SwapV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_token_day_data_v2_dtos__historical
#
# TokenDayDataV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_token_day_data_v2_dtos__historical' } = {
        summary => 'TokenDayDataV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2TokenDayDataV2DTO]',
        };
}
# @return ARRAY[UniswapV2TokenDayDataV2DTO]
#
sub uniswap_v2_get_token_day_data_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/TokenDayDataV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TokenDayDataV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_token_v2_dtos__historical
#
# TokenV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_token_v2_dtos__historical' } = {
        summary => 'TokenV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2TokenV2DTO]',
        };
}
# @return ARRAY[UniswapV2TokenV2DTO]
#
sub uniswap_v2_get_token_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/TokenV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TokenV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_tokens__current
#
# Tokens (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_tokens__current' } = {
        summary => 'Tokens (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2TokenV2DTO]',
        };
}
# @return ARRAY[UniswapV2TokenV2DTO]
#
sub uniswap_v2_get_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/tokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TokenV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_tokens__historical
#
# Tokens (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $token_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'token_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_tokens__historical' } = {
        summary => 'Tokens (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2TokenV2DTO]',
        };
}
# @return ARRAY[UniswapV2TokenV2DTO]
#
sub uniswap_v2_get_tokens__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/tokens/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'token_id'}) {
        $query_params->{'tokenId'} = $self->{api_client}->to_query_value($args{'token_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TokenV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_tokens_day_data__historical
#
# TokensDayData (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $token_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'token_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_tokens_day_data__historical' } = {
        summary => 'TokensDayData (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2TokenDayDataV2DTO]',
        };
}
# @return ARRAY[UniswapV2TokenDayDataV2DTO]
#
sub uniswap_v2_get_tokens_day_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/tokensDayData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'token_id'}) {
        $query_params->{'tokenId'} = $self->{api_client}->to_query_value($args{'token_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TokenDayDataV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_transaction_v2_dtos__historical
#
# TransactionV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_transaction_v2_dtos__historical' } = {
        summary => 'TransactionV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2TransactionV2DTO]',
        };
}
# @return ARRAY[UniswapV2TransactionV2DTO]
#
sub uniswap_v2_get_transaction_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/TransactionV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TransactionV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_transactions__historical
#
# Transactions (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_transactions__historical' } = {
        summary => 'Transactions (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2TransactionV2DTO]',
        };
}
# @return ARRAY[UniswapV2TransactionV2DTO]
#
sub uniswap_v2_get_transactions__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/transactions/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TransactionV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_uniswap_day_data_v2_dtos__historical
#
# UniswapDayDataV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_uniswap_day_data_v2_dtos__historical' } = {
        summary => 'UniswapDayDataV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2UniswapDayDataV2DTO]',
        };
}
# @return ARRAY[UniswapV2UniswapDayDataV2DTO]
#
sub uniswap_v2_get_uniswap_day_data_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/UniswapDayDataV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UniswapDayDataV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_uniswap_factory_v2_dtos__historical
#
# UniswapFactoryV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_uniswap_factory_v2_dtos__historical' } = {
        summary => 'UniswapFactoryV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2UniswapFactoryV2DTO]',
        };
}
# @return ARRAY[UniswapV2UniswapFactoryV2DTO]
#
sub uniswap_v2_get_uniswap_factory_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/UniswapFactoryV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UniswapFactoryV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_user_v2_dtos__historical
#
# UserV2DTOs (historical) ðŸ”¥
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_user_v2_dtos__historical' } = {
        summary => 'UserV2DTOs (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[UniswapV2UserV2DTO]',
        };
}
# @return ARRAY[UniswapV2UserV2DTO]
#
sub uniswap_v2_get_user_v2_dtos__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/UserV2DTOs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UserV2DTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_users__historical
#
# Users (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_users__historical' } = {
        summary => 'Users (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2UserV2DTO]',
        };
}
# @return ARRAY[UniswapV2UserV2DTO]
#
sub uniswap_v2_get_users__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/users/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UserV2DTO]', $response);
    return $_response_object;
}

1;
