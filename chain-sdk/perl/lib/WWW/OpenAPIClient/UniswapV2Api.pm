=begin comment

On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::UniswapV2Api;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# uniswap_v2_bundles__current
#
# Bundles (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_bundles__current' } = {
        summary => 'Bundles (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2BundleDTO]',
        };
}
# @return ARRAY[UniswapV2BundleDTO]
#
sub uniswap_v2_bundles__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/bundles/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2BundleDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_burns__current
#
# Burns (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_burns__current' } = {
        summary => 'Burns (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2BurnDTO]',
        };
}
# @return ARRAY[UniswapV2BurnDTO]
#
sub uniswap_v2_burns__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/burns/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2BurnDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_bundles__historical
#
# Bundles (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Constant 1. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Constant 1.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_bundles__historical' } = {
        summary => 'Bundles (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2BundleDTO]',
        };
}
# @return ARRAY[UniswapV2BundleDTO]
#
sub uniswap_v2_get_bundles__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/bundles/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2BundleDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_burns__historical
#
# Burns (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Transaction hash plus index in the transaction burn array (optional)
# @param string $pair Reference to pair. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Transaction hash plus index in the transaction burn array',
        required => '0',
    },
    'pair' => {
        data_type => 'string',
        description => 'Reference to pair.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_burns__historical' } = {
        summary => 'Burns (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2BurnDTO]',
        };
}
# @return ARRAY[UniswapV2BurnDTO]
#
sub uniswap_v2_get_burns__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/burns/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'pair'}) {
        $query_params->{'pair'} = $self->{api_client}->to_query_value($args{'pair'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2BurnDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_liquidity_position_snapshots__historical
#
# LiquidityPositionSnapshots (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Identifier, format: (pair address)-(user address) (optional)
# @param string $user Reference to user. (optional)
# @param string $pair Reference to the pair liquidity is being provided on. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Identifier, format: (pair address)-(user address)',
        required => '0',
    },
    'user' => {
        data_type => 'string',
        description => 'Reference to user.',
        required => '0',
    },
    'pair' => {
        data_type => 'string',
        description => 'Reference to the pair liquidity is being provided on.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_liquidity_position_snapshots__historical' } = {
        summary => 'LiquidityPositionSnapshots (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2LiquidityPositionSnapshotDTO]',
        };
}
# @return ARRAY[UniswapV2LiquidityPositionSnapshotDTO]
#
sub uniswap_v2_get_liquidity_position_snapshots__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/liquidityPositionSnapshots/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'pair'}) {
        $query_params->{'pair'} = $self->{api_client}->to_query_value($args{'pair'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2LiquidityPositionSnapshotDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_liquidity_positions__historical
#
# LiquidityPositions (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id User address and pair address concatenated with a dash. (optional)
# @param string $user Reference to user. (optional)
# @param string $pair Reference to the pair liquidity is being provided on. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'User address and pair address concatenated with a dash.',
        required => '0',
    },
    'user' => {
        data_type => 'string',
        description => 'Reference to user.',
        required => '0',
    },
    'pair' => {
        data_type => 'string',
        description => 'Reference to the pair liquidity is being provided on.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_liquidity_positions__historical' } = {
        summary => 'LiquidityPositions (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2LiquidityPositionDTO]',
        };
}
# @return ARRAY[UniswapV2LiquidityPositionDTO]
#
sub uniswap_v2_get_liquidity_positions__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/liquidityPositions/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'user'}) {
        $query_params->{'user'} = $self->{api_client}->to_query_value($args{'user'});
    }

    # query params
    if ( exists $args{'pair'}) {
        $query_params->{'pair'} = $self->{api_client}->to_query_value($args{'pair'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2LiquidityPositionDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_mints__historical
#
# Mints (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Transaction hash plus index in the transaction mint array. (optional)
# @param string $pair Reference to pair. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Transaction hash plus index in the transaction mint array.',
        required => '0',
    },
    'pair' => {
        data_type => 'string',
        description => 'Reference to pair.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_mints__historical' } = {
        summary => 'Mints (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2MintDTO]',
        };
}
# @return ARRAY[UniswapV2MintDTO]
#
sub uniswap_v2_get_mints__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/mints/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'pair'}) {
        $query_params->{'pair'} = $self->{api_client}->to_query_value($args{'pair'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2MintDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pair_day_data__historical
#
# PairDayData (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id  (optional)
# @param string $token_0 Reference to token0. (optional)
# @param string $token_1 Reference to token1. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'token_0' => {
        data_type => 'string',
        description => 'Reference to token0.',
        required => '0',
    },
    'token_1' => {
        data_type => 'string',
        description => 'Reference to token1.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pair_day_data__historical' } = {
        summary => 'PairDayData (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2PairDayDataDTO]',
        };
}
# @return ARRAY[UniswapV2PairDayDataDTO]
#
sub uniswap_v2_get_pair_day_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/pairDayData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'token_0'}) {
        $query_params->{'token_0'} = $self->{api_client}->to_query_value($args{'token_0'});
    }

    # query params
    if ( exists $args{'token_1'}) {
        $query_params->{'token_1'} = $self->{api_client}->to_query_value($args{'token_1'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairDayDataDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pair_hour_data__historical
#
# PairHourData (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id  (optional)
# @param string $pair Address for pair contract. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'pair' => {
        data_type => 'string',
        description => 'Address for pair contract.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pair_hour_data__historical' } = {
        summary => 'PairHourData (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2PairHourDataDTO]',
        };
}
# @return ARRAY[UniswapV2PairHourDataDTO]
#
sub uniswap_v2_get_pair_hour_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/pairHourData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'pair'}) {
        $query_params->{'pair'} = $self->{api_client}->to_query_value($args{'pair'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairHourDataDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_pairs__historical
#
# Pairs (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Pair contract address. (optional)
# @param string $token_0 Reference to token0 as stored in pair contract. (optional)
# @param string $token_1 Reference to token1 as stored in pair contract. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Pair contract address.',
        required => '0',
    },
    'token_0' => {
        data_type => 'string',
        description => 'Reference to token0 as stored in pair contract.',
        required => '0',
    },
    'token_1' => {
        data_type => 'string',
        description => 'Reference to token1 as stored in pair contract.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_pairs__historical' } = {
        summary => 'Pairs (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2PairDTO]',
        };
}
# @return ARRAY[UniswapV2PairDTO]
#
sub uniswap_v2_get_pairs__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/pairs/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'token_0'}) {
        $query_params->{'token_0'} = $self->{api_client}->to_query_value($args{'token_0'});
    }

    # query params
    if ( exists $args{'token_1'}) {
        $query_params->{'token_1'} = $self->{api_client}->to_query_value($args{'token_1'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_swaps__historical
#
# Swaps (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Transaction hash plus index in Transaction swap array. (optional)
# @param string $pair Reference to pair. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Transaction hash plus index in Transaction swap array.',
        required => '0',
    },
    'pair' => {
        data_type => 'string',
        description => 'Reference to pair.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_swaps__historical' } = {
        summary => 'Swaps (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2SwapDTO]',
        };
}
# @return ARRAY[UniswapV2SwapDTO]
#
sub uniswap_v2_get_swaps__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/swaps/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'pair'}) {
        $query_params->{'pair'} = $self->{api_client}->to_query_value($args{'pair'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2SwapDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_token_day_data__historical
#
# TokenDayData (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Token address and day id (day start timestamp in unix / 86400) concatenated with a dash. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Token address and day id (day start timestamp in unix / 86400) concatenated with a dash.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_token_day_data__historical' } = {
        summary => 'TokenDayData (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2TokenDayDataDTO]',
        };
}
# @return ARRAY[UniswapV2TokenDayDataDTO]
#
sub uniswap_v2_get_token_day_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/tokenDayData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TokenDayDataDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_tokens__historical
#
# Tokens (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Token address. (optional)
# @param string $symbol Token symbol. (optional)
# @param string $name Token name. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Token address.',
        required => '0',
    },
    'symbol' => {
        data_type => 'string',
        description => 'Token symbol.',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Token name.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_tokens__historical' } = {
        summary => 'Tokens (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2TokenDTO]',
        };
}
# @return ARRAY[UniswapV2TokenDTO]
#
sub uniswap_v2_get_tokens__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/tokens/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'symbol'}) {
        $query_params->{'symbol'} = $self->{api_client}->to_query_value($args{'symbol'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TokenDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_transactions__historical
#
# Transactions (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Ethereum transaction hash. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Ethereum transaction hash.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_transactions__historical' } = {
        summary => 'Transactions (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2TransactionDTO]',
        };
}
# @return ARRAY[UniswapV2TransactionDTO]
#
sub uniswap_v2_get_transactions__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/transactions/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TransactionDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_uniswap_day_data__historical
#
# UniswapDayData (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Unix timestamp for start of day / 86400 giving a unique day index. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Unix timestamp for start of day / 86400 giving a unique day index.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_uniswap_day_data__historical' } = {
        summary => 'UniswapDayData (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2UniswapDayDataDTO]',
        };
}
# @return ARRAY[UniswapV2UniswapDayDataDTO]
#
sub uniswap_v2_get_uniswap_day_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/uniswapDayData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UniswapDayDataDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_uniswap_factories__historical
#
# UniswapFactories (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id Factory address. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Factory address.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_uniswap_factories__historical' } = {
        summary => 'UniswapFactories (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2UniswapFactoryDTO]',
        };
}
# @return ARRAY[UniswapV2UniswapFactoryDTO]
#
sub uniswap_v2_get_uniswap_factories__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/uniswapFactories/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UniswapFactoryDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_get_users__historical
#
# Users (historical)
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe. (optional)
# @param string $id User address. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe.',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'User address.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_get_users__historical' } = {
        summary => 'Users (historical)',
        params => $params,
        returns => 'ARRAY[UniswapV2UserDTO]',
        };
}
# @return ARRAY[UniswapV2UserDTO]
#
sub uniswap_v2_get_users__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/users/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UserDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_liquidity_position_snapshots__current
#
# LiquidityPositionSnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_liquidity_position_snapshots__current' } = {
        summary => 'LiquidityPositionSnapshots (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2LiquidityPositionSnapshotDTO]',
        };
}
# @return ARRAY[UniswapV2LiquidityPositionSnapshotDTO]
#
sub uniswap_v2_liquidity_position_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/liquidityPositionSnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2LiquidityPositionSnapshotDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_liquidity_positions__current
#
# LiquidityPositions (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_liquidity_positions__current' } = {
        summary => 'LiquidityPositions (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2LiquidityPositionDTO]',
        };
}
# @return ARRAY[UniswapV2LiquidityPositionDTO]
#
sub uniswap_v2_liquidity_positions__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/liquidityPositions/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2LiquidityPositionDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_mints__current
#
# Mints (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_mints__current' } = {
        summary => 'Mints (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2MintDTO]',
        };
}
# @return ARRAY[UniswapV2MintDTO]
#
sub uniswap_v2_mints__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/mints/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2MintDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_pair_day_data__current
#
# PairDayData (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_pair_day_data__current' } = {
        summary => 'PairDayData (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2PairDayDataDTO]',
        };
}
# @return ARRAY[UniswapV2PairDayDataDTO]
#
sub uniswap_v2_pair_day_data__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/pairDayData/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairDayDataDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_pair_hour_data__current
#
# PairHourData (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_pair_hour_data__current' } = {
        summary => 'PairHourData (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2PairHourDataDTO]',
        };
}
# @return ARRAY[UniswapV2PairHourDataDTO]
#
sub uniswap_v2_pair_hour_data__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/pairHourData/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairHourDataDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_pairs__current
#
# Pairs (current)
#
# @param string $id Pair contract address. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Pair contract address.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_pairs__current' } = {
        summary => 'Pairs (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2PairDTO]',
        };
}
# @return ARRAY[UniswapV2PairDTO]
#
sub uniswap_v2_pairs__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/pairs/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2PairDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_swaps__current
#
# Swaps (current)
#
# @param string $pair Reference to pair. (optional)
{
    my $params = {
    'pair' => {
        data_type => 'string',
        description => 'Reference to pair.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_swaps__current' } = {
        summary => 'Swaps (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2SwapDTO]',
        };
}
# @return ARRAY[UniswapV2SwapDTO]
#
sub uniswap_v2_swaps__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/swaps/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pair'}) {
        $query_params->{'pair'} = $self->{api_client}->to_query_value($args{'pair'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2SwapDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_token_day_data__current
#
# TokenDayData (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_token_day_data__current' } = {
        summary => 'TokenDayData (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2TokenDayDataDTO]',
        };
}
# @return ARRAY[UniswapV2TokenDayDataDTO]
#
sub uniswap_v2_token_day_data__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/tokenDayData/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TokenDayDataDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_tokens__current
#
# Tokens (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_tokens__current' } = {
        summary => 'Tokens (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2TokenDTO]',
        };
}
# @return ARRAY[UniswapV2TokenDTO]
#
sub uniswap_v2_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/tokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TokenDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_transactions__current
#
# Transactions (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_transactions__current' } = {
        summary => 'Transactions (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2TransactionDTO]',
        };
}
# @return ARRAY[UniswapV2TransactionDTO]
#
sub uniswap_v2_transactions__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/transactions/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2TransactionDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_uniswap_day_data__current
#
# UniswapDayData (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_uniswap_day_data__current' } = {
        summary => 'UniswapDayData (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2UniswapDayDataDTO]',
        };
}
# @return ARRAY[UniswapV2UniswapDayDataDTO]
#
sub uniswap_v2_uniswap_day_data__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/uniswapDayData/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UniswapDayDataDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_uniswap_factories__current
#
# UniswapFactories (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_uniswap_factories__current' } = {
        summary => 'UniswapFactories (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2UniswapFactoryDTO]',
        };
}
# @return ARRAY[UniswapV2UniswapFactoryDTO]
#
sub uniswap_v2_uniswap_factories__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/uniswapFactories/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UniswapFactoryDTO]', $response);
    return $_response_object;
}

#
# uniswap_v2_users__current
#
# Users (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'uniswap_v2_users__current' } = {
        summary => 'Users (current)',
        params => $params,
        returns => 'ARRAY[UniswapV2UserDTO]',
        };
}
# @return ARRAY[UniswapV2UserDTO]
#
sub uniswap_v2_users__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/uniswapv2/users/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UniswapV2UserDTO]', $response);
    return $_response_object;
}

1;
