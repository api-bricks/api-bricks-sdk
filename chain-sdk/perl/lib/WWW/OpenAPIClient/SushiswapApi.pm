=begin comment

OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::SushiswapApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# curve_get_exchanges__current
#
# GetExchanges (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_get_exchanges__current' } = {
        summary => 'GetExchanges (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[CurveExchangeDTO]',
        };
}
# @return ARRAY[CurveExchangeDTO]
#
sub curve_get_exchanges__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/exchanges/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveExchangeDTO]', $response);
    return $_response_object;
}

#
# dex_get_trades__current
#
# GetTrades (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_get_trades__current' } = {
        summary => 'GetTrades (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[DexTradeDTO]',
        };
}
# @return ARRAY[DexTradeDTO]
#
sub dex_get_trades__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/trades/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexTradeDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_bundles__historical
#
# GetBundles (historical)
#
# @param int $start_block AAAAAAAAAA (optional)
# @param int $end_block BBBBBBBBBBBB (optional)
# @param DATE_TIME $start_date CCCCCCCCC (optional)
# @param DATE_TIME $end_date DDDDDDDDDDD (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'AAAAAAAAAA',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'BBBBBBBBBBBB',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'CCCCCCCCC',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'DDDDDDDDDDD',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_bundles__historical' } = {
        summary => 'GetBundles (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapBundleDTO]',
        };
}
# @return ARRAY[SushiswapBundleDTO]
#
sub sushiswap_get_bundles__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/bundles/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapBundleDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_burns__historical
#
# GetBurns (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_burns__historical' } = {
        summary => 'GetBurns (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapBurnDTO]',
        };
}
# @return ARRAY[SushiswapBurnDTO]
#
sub sushiswap_get_burns__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/burns/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapBurnDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_day_data__historical
#
# GetDayData (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_day_data__historical' } = {
        summary => 'GetDayData (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapDayDataDTO]',
        };
}
# @return ARRAY[SushiswapDayDataDTO]
#
sub sushiswap_get_day_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/dayData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapDayDataDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_factory__historical
#
# GetFactory (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_factory__historical' } = {
        summary => 'GetFactory (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapFactoryDTO]',
        };
}
# @return ARRAY[SushiswapFactoryDTO]
#
sub sushiswap_get_factory__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/factory/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapFactoryDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_hour_data__historical
#
# GetHourData (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_hour_data__historical' } = {
        summary => 'GetHourData (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapHourDataDTO]',
        };
}
# @return ARRAY[SushiswapHourDataDTO]
#
sub sushiswap_get_hour_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/hourData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapHourDataDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_liquidity_position__historical
#
# GetLiquidityPosition (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_liquidity_position__historical' } = {
        summary => 'GetLiquidityPosition (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapLiquidityPositionDTO]',
        };
}
# @return ARRAY[SushiswapLiquidityPositionDTO]
#
sub sushiswap_get_liquidity_position__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/liquidityPosition/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapLiquidityPositionDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_liquidity_position_snapshot__historical
#
# GetLiquidityPositionSnapshot (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_liquidity_position_snapshot__historical' } = {
        summary => 'GetLiquidityPositionSnapshot (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapLiquidityPositionSnapshotDTO]',
        };
}
# @return ARRAY[SushiswapLiquidityPositionSnapshotDTO]
#
sub sushiswap_get_liquidity_position_snapshot__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/liquidityPositionSnapshots/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapLiquidityPositionSnapshotDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_mints__historical
#
# GetMints (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_mints__historical' } = {
        summary => 'GetMints (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapMintDTO]',
        };
}
# @return ARRAY[SushiswapMintDTO]
#
sub sushiswap_get_mints__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/mints/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapMintDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_pools__current
#
# GetPools (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_pools__current' } = {
        summary => 'GetPools (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[SushiswapPairDTO]',
        };
}
# @return ARRAY[SushiswapPairDTO]
#
sub sushiswap_get_pools__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/pools/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapPairDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_pools__historical
#
# GetPools (historical) ðŸ”¥
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe (optional)
# @param string $pool_id The pool address. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => 'The pool address.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_pools__historical' } = {
        summary => 'GetPools (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[SushiswapPairDTO]',
        };
}
# @return ARRAY[SushiswapPairDTO]
#
sub sushiswap_get_pools__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/pools/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapPairDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_pools_day_data__historical
#
# GetPoolsDayData (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_pools_day_data__historical' } = {
        summary => 'GetPoolsDayData (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapPairDayDataDTO]',
        };
}
# @return ARRAY[SushiswapPairDayDataDTO]
#
sub sushiswap_get_pools_day_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/poolsDayData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapPairDayDataDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_pools_hour_data__historical
#
# GetPoolsHourData (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $pool_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_pools_hour_data__historical' } = {
        summary => 'GetPoolsHourData (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapPairHourDataDTO]',
        };
}
# @return ARRAY[SushiswapPairHourDataDTO]
#
sub sushiswap_get_pools_hour_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/poolsHourData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapPairHourDataDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_swaps__current
#
# GetSwaps (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_swaps__current' } = {
        summary => 'GetSwaps (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[SushiswapSwapDTO]',
        };
}
# @return ARRAY[SushiswapSwapDTO]
#
sub sushiswap_get_swaps__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/swaps/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapSwapDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_swaps__historical
#
# GetSwaps (historical) ðŸ”¥
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe (optional)
# @param string $pool_id The pool address. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe',
        required => '0',
    },
    'pool_id' => {
        data_type => 'string',
        description => 'The pool address.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_swaps__historical' } = {
        summary => 'GetSwaps (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[SushiswapSwapDTO]',
        };
}
# @return ARRAY[SushiswapSwapDTO]
#
sub sushiswap_get_swaps__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/swaps/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'pool_id'}) {
        $query_params->{'poolId'} = $self->{api_client}->to_query_value($args{'pool_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapSwapDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_tokens__current
#
# GetTokens (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_tokens__current' } = {
        summary => 'GetTokens (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[SushiswapTokenDTO]',
        };
}
# @return ARRAY[SushiswapTokenDTO]
#
sub sushiswap_get_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/tokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapTokenDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_tokens__historical
#
# GetTokens (historical) ðŸ”¥
#
# @param int $start_block The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock. (optional)
# @param int $end_block The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock). (optional)
# @param DATE_TIME $start_date The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included. (optional)
# @param DATE_TIME $end_date The end date of timeframe (optional)
# @param string $token_id The token address. (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => 'The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => 'The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => 'The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => 'The end date of timeframe',
        required => '0',
    },
    'token_id' => {
        data_type => 'string',
        description => 'The token address.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_tokens__historical' } = {
        summary => 'GetTokens (historical) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[SushiswapTokenDTO]',
        };
}
# @return ARRAY[SushiswapTokenDTO]
#
sub sushiswap_get_tokens__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/tokens/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'token_id'}) {
        $query_params->{'tokenId'} = $self->{api_client}->to_query_value($args{'token_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapTokenDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_tokens_day_data__historical
#
# GetTokensDayData (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
# @param string $token_id  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'token_id' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_tokens_day_data__historical' } = {
        summary => 'GetTokensDayData (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapTokenDayDataDTO]',
        };
}
# @return ARRAY[SushiswapTokenDayDataDTO]
#
sub sushiswap_get_tokens_day_data__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/tokensDayData/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    # query params
    if ( exists $args{'token_id'}) {
        $query_params->{'tokenId'} = $self->{api_client}->to_query_value($args{'token_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapTokenDayDataDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_transactions__historical
#
# GetTransactions (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_transactions__historical' } = {
        summary => 'GetTransactions (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapTransactionDTO]',
        };
}
# @return ARRAY[SushiswapTransactionDTO]
#
sub sushiswap_get_transactions__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/transactions/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapTransactionDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_users__historical
#
# GetUsers (historical)
#
# @param int $start_block  (optional)
# @param int $end_block  (optional)
# @param DATE_TIME $start_date  (optional)
# @param DATE_TIME $end_date  (optional)
{
    my $params = {
    'start_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'end_block' => {
        data_type => 'int',
        description => '',
        required => '0',
    },
    'start_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    'end_date' => {
        data_type => 'DATE_TIME',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_users__historical' } = {
        summary => 'GetUsers (historical)',
        params => $params,
        returns => 'ARRAY[SushiswapUserDTO]',
        };
}
# @return ARRAY[SushiswapUserDTO]
#
sub sushiswap_get_users__historical {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/users/historical';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_block'}) {
        $query_params->{'startBlock'} = $self->{api_client}->to_query_value($args{'start_block'});
    }

    # query params
    if ( exists $args{'end_block'}) {
        $query_params->{'endBlock'} = $self->{api_client}->to_query_value($args{'end_block'});
    }

    # query params
    if ( exists $args{'start_date'}) {
        $query_params->{'startDate'} = $self->{api_client}->to_query_value($args{'start_date'});
    }

    # query params
    if ( exists $args{'end_date'}) {
        $query_params->{'endDate'} = $self->{api_client}->to_query_value($args{'end_date'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapUserDTO]', $response);
    return $_response_object;
}

1;
