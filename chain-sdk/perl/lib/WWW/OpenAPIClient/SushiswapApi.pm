=begin comment

OnChain API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::SushiswapApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# curve_get_exchanges__current
#
# Exchanges (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_get_exchanges__current' } = {
        summary => 'Exchanges (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[CurveExchangeDTO]',
        };
}
# @return ARRAY[CurveExchangeDTO]
#
sub curve_get_exchanges__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/exchanges/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveExchangeDTO]', $response);
    return $_response_object;
}

#
# dex_get_trades__current
#
# Trades (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'dex_get_trades__current' } = {
        summary => 'Trades (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[DexTradeDTO]',
        };
}
# @return ARRAY[DexTradeDTO]
#
sub dex_get_trades__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/trades/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DexTradeDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_pools__current
#
# Pools (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_pools__current' } = {
        summary => 'Pools (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[SushiswapPairDTO]',
        };
}
# @return ARRAY[SushiswapPairDTO]
#
sub sushiswap_get_pools__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/pools/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapPairDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_swaps__current
#
# Swaps (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_swaps__current' } = {
        summary => 'Swaps (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[SushiswapSwapDTO]',
        };
}
# @return ARRAY[SushiswapSwapDTO]
#
sub sushiswap_get_swaps__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/swaps/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapSwapDTO]', $response);
    return $_response_object;
}

#
# sushiswap_get_tokens__current
#
# Tokens (current) ðŸ”¥
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'sushiswap_get_tokens__current' } = {
        summary => 'Tokens (current) ðŸ”¥',
        params => $params,
        returns => 'ARRAY[SushiswapTokenDTO]',
        };
}
# @return ARRAY[SushiswapTokenDTO]
#
sub sushiswap_get_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/sushiswap/tokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[SushiswapTokenDTO]', $response);
    return $_response_object;
}

1;
