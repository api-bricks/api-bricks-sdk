/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.BidDTO
import org.openapitools.client.model.CollectionDTO
import org.openapitools.client.model.CollectionDailySnapshotDTO
import org.openapitools.client.model.DataSourcesDTO
import org.openapitools.client.model.ItemDTO
import org.openapitools.client.model.MarketPlaceDTO
import org.openapitools.client.model.MarketplaceDailySnapshotDTO
import java.time.OffsetDateTime
import org.openapitools.client.model.TradeDTO
import org.openapitools.client.model.UserDTO
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object CRYPTOPUNKSApi {

  def apply(baseUrl: String = "https://onchain.coinapi.io") = new CRYPTOPUNKSApi(baseUrl)
}

class CRYPTOPUNKSApi(baseUrl: String) {

  /**
   * Gets bids.
   * 
   * Expected answers:
   *   code 200 : Seq[BidDTO] (successful operation)
   */
  def cRYPTOPUNKSBidsCurrent(): ApiRequest[Seq[BidDTO]] =
    ApiRequest[Seq[BidDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/bids/current", "application/json")
      .withSuccessResponse[Seq[BidDTO]](200)
      

  /**
   * Gets collectionDailySnapshots.
   * 
   * Expected answers:
   *   code 200 : Seq[CollectionDailySnapshotDTO] (successful operation)
   */
  def cRYPTOPUNKSCollectionDailySnapshotsCurrent(): ApiRequest[Seq[CollectionDailySnapshotDTO]] =
    ApiRequest[Seq[CollectionDailySnapshotDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/collectionDailySnapshots/current", "application/json")
      .withSuccessResponse[Seq[CollectionDailySnapshotDTO]](200)
      

  /**
   * Gets collections.
   * 
   * Expected answers:
   *   code 200 : Seq[CollectionDTO] (successful operation)
   */
  def cRYPTOPUNKSCollectionsCurrent(): ApiRequest[Seq[CollectionDTO]] =
    ApiRequest[Seq[CollectionDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/collections/current", "application/json")
      .withSuccessResponse[Seq[CollectionDTO]](200)
      

  /**
   * Gets dataSources.
   * 
   * Expected answers:
   *   code 200 : Seq[DataSourcesDTO] (successful operation)
   */
  def cRYPTOPUNKSDataSourcesCurrent(): ApiRequest[Seq[DataSourcesDTO]] =
    ApiRequest[Seq[DataSourcesDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/dataSources/current", "application/json")
      .withSuccessResponse[Seq[DataSourcesDTO]](200)
      

  /**
   * Gets bids.
   * 
   * Expected answers:
   *   code 200 : Seq[BidDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def cRYPTOPUNKSGetBidsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[BidDTO]] =
    ApiRequest[Seq[BidDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/bids/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[BidDTO]](200)
      

  /**
   * Gets collectionDailySnapshots.
   * 
   * Expected answers:
   *   code 200 : Seq[CollectionDailySnapshotDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   */
  def cRYPTOPUNKSGetCollectionDailySnapshotsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Seq[CollectionDailySnapshotDTO]] =
    ApiRequest[Seq[CollectionDailySnapshotDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/collectionDailySnapshots/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Seq[CollectionDailySnapshotDTO]](200)
      

  /**
   * Gets collections.
   * 
   * Expected answers:
   *   code 200 : Seq[CollectionDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def cRYPTOPUNKSGetCollectionsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[CollectionDTO]] =
    ApiRequest[Seq[CollectionDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/collections/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[CollectionDTO]](200)
      

  /**
   * Gets dataSources.
   * 
   * Expected answers:
   *   code 200 : Seq[DataSourcesDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def cRYPTOPUNKSGetDataSourcesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[DataSourcesDTO]] =
    ApiRequest[Seq[DataSourcesDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/dataSources/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[DataSourcesDTO]](200)
      

  /**
   * Gets items.
   * 
   * Expected answers:
   *   code 200 : Seq[ItemDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   */
  def cRYPTOPUNKSGetItemsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Seq[ItemDTO]] =
    ApiRequest[Seq[ItemDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/items/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Seq[ItemDTO]](200)
      

  /**
   * Gets marketPlaces.
   * 
   * Expected answers:
   *   code 200 : Seq[MarketPlaceDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def cRYPTOPUNKSGetMarketPlacesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[MarketPlaceDTO]] =
    ApiRequest[Seq[MarketPlaceDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/marketPlaces/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[MarketPlaceDTO]](200)
      

  /**
   * Gets marketplaceDailySnapshots.
   * 
   * Expected answers:
   *   code 200 : Seq[MarketplaceDailySnapshotDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def cRYPTOPUNKSGetMarketplaceDailySnapshotsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[MarketplaceDailySnapshotDTO]] =
    ApiRequest[Seq[MarketplaceDailySnapshotDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/marketplaceDailySnapshots/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[MarketplaceDailySnapshotDTO]](200)
      

  /**
   * Gets trades.
   * 
   * Expected answers:
   *   code 200 : Seq[TradeDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def cRYPTOPUNKSGetTradesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[TradeDTO]] =
    ApiRequest[Seq[TradeDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/trades/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[TradeDTO]](200)
      

  /**
   * Gets users.
   * 
   * Expected answers:
   *   code 200 : Seq[UserDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def cRYPTOPUNKSGetUsersHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[UserDTO]] =
    ApiRequest[Seq[UserDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/users/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[UserDTO]](200)
      

  /**
   * Gets items.
   * 
   * Expected answers:
   *   code 200 : Seq[ItemDTO] (successful operation)
   */
  def cRYPTOPUNKSItemsCurrent(): ApiRequest[Seq[ItemDTO]] =
    ApiRequest[Seq[ItemDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/items/current", "application/json")
      .withSuccessResponse[Seq[ItemDTO]](200)
      

  /**
   * Gets marketPlaces.
   * 
   * Expected answers:
   *   code 200 : Seq[MarketPlaceDTO] (successful operation)
   */
  def cRYPTOPUNKSMarketPlacesCurrent(): ApiRequest[Seq[MarketPlaceDTO]] =
    ApiRequest[Seq[MarketPlaceDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/marketPlaces/current", "application/json")
      .withSuccessResponse[Seq[MarketPlaceDTO]](200)
      

  /**
   * Gets marketplaceDailySnapshots.
   * 
   * Expected answers:
   *   code 200 : Seq[MarketplaceDailySnapshotDTO] (successful operation)
   */
  def cRYPTOPUNKSMarketplaceDailySnapshotsCurrent(): ApiRequest[Seq[MarketplaceDailySnapshotDTO]] =
    ApiRequest[Seq[MarketplaceDailySnapshotDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/marketplaceDailySnapshots/current", "application/json")
      .withSuccessResponse[Seq[MarketplaceDailySnapshotDTO]](200)
      

  /**
   * Gets trades.
   * 
   * Expected answers:
   *   code 200 : Seq[TradeDTO] (successful operation)
   */
  def cRYPTOPUNKSTradesCurrent(): ApiRequest[Seq[TradeDTO]] =
    ApiRequest[Seq[TradeDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/trades/current", "application/json")
      .withSuccessResponse[Seq[TradeDTO]](200)
      

  /**
   * Gets users.
   * 
   * Expected answers:
   *   code 200 : Seq[UserDTO] (successful operation)
   */
  def cRYPTOPUNKSUsersCurrent(): ApiRequest[Seq[UserDTO]] =
    ApiRequest[Seq[UserDTO]](ApiMethods.GET, baseUrl, "/dapps/cryptopunks/users/current", "application/json")
      .withSuccessResponse[Seq[UserDTO]](200)
      



}

