/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AccountDTO
import org.openapitools.client.model.AddLiquidityEventDTO
import org.openapitools.client.model.AdminFeeChangeLogDTO
import org.openapitools.client.model.AmplificationCoeffChangeLogDTO
import org.openapitools.client.model.CoinDTO
import org.openapitools.client.model.ContractDTO
import org.openapitools.client.model.ContractVersionDTO
import org.openapitools.client.model.DailyVolumeDTO
import org.openapitools.client.model.ExchangeDTO
import org.openapitools.client.model.FeeChangeLogDTO
import org.openapitools.client.model.GaugeDTO
import org.openapitools.client.model.GaugeDepositDTO
import org.openapitools.client.model.GaugeLiquidityDTO
import org.openapitools.client.model.GaugeTotalWeightDTO
import org.openapitools.client.model.GaugeTypeDTO
import org.openapitools.client.model.GaugeTypeWeightDTO
import org.openapitools.client.model.GaugeWeightDTO
import org.openapitools.client.model.GaugeWeightVoteDTO
import org.openapitools.client.model.GaugeWithdrawDTO
import org.openapitools.client.model.HourlyVolumeDTO
import org.openapitools.client.model.LpTokenDTO
import java.time.OffsetDateTime
import org.openapitools.client.model.PoolDTO
import org.openapitools.client.model.ProposalDTO
import org.openapitools.client.model.ProposalVoteDTO
import org.openapitools.client.model.RemoveLiquidityEventDTO
import org.openapitools.client.model.RemoveLiquidityOneEventDTO
import org.openapitools.client.model.SystemStateDTO
import org.openapitools.client.model.TokenDTO
import org.openapitools.client.model.TransferOwnershipEventDTO
import org.openapitools.client.model.UnderlyingCoinDTO
import org.openapitools.client.model.VotingAppDTO
import org.openapitools.client.model.WeeklyVolumeDTO
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object CurveApi {

  def apply(baseUrl: String = "https://onchain.coinapi.io") = new CurveApi(baseUrl)
}

class CurveApi(baseUrl: String) {

  /**
   * Gets accounts.
   * 
   * Expected answers:
   *   code 200 : Seq[AccountDTO] (successful operation)
   */
  def curveAccountsCurrent(): ApiRequest[Seq[AccountDTO]] =
    ApiRequest[Seq[AccountDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/accounts/current", "application/json")
      .withSuccessResponse[Seq[AccountDTO]](200)
      

  /**
   * Gets addLiquidityEvents.
   * 
   * Expected answers:
   *   code 200 : Seq[AddLiquidityEventDTO] (successful operation)
   */
  def curveAddLiquidityEventsCurrent(): ApiRequest[Seq[AddLiquidityEventDTO]] =
    ApiRequest[Seq[AddLiquidityEventDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/addLiquidityEvents/current", "application/json")
      .withSuccessResponse[Seq[AddLiquidityEventDTO]](200)
      

  /**
   * Gets adminFeeChangeLogs.
   * 
   * Expected answers:
   *   code 200 : Seq[AdminFeeChangeLogDTO] (successful operation)
   */
  def curveAdminFeeChangeLogsCurrent(): ApiRequest[Seq[AdminFeeChangeLogDTO]] =
    ApiRequest[Seq[AdminFeeChangeLogDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/adminFeeChangeLogs/current", "application/json")
      .withSuccessResponse[Seq[AdminFeeChangeLogDTO]](200)
      

  /**
   * Gets amplificationCoeffChangeLogs.
   * 
   * Expected answers:
   *   code 200 : Seq[AmplificationCoeffChangeLogDTO] (successful operation)
   */
  def curveAmplificationCoeffChangeLogsCurrent(): ApiRequest[Seq[AmplificationCoeffChangeLogDTO]] =
    ApiRequest[Seq[AmplificationCoeffChangeLogDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/amplificationCoeffChangeLogs/current", "application/json")
      .withSuccessResponse[Seq[AmplificationCoeffChangeLogDTO]](200)
      

  /**
   * Gets coins.
   * 
   * Expected answers:
   *   code 200 : Seq[CoinDTO] (successful operation)
   */
  def curveCoinsCurrent(): ApiRequest[Seq[CoinDTO]] =
    ApiRequest[Seq[CoinDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/coins/current", "application/json")
      .withSuccessResponse[Seq[CoinDTO]](200)
      

  /**
   * Gets contractVersions.
   * 
   * Expected answers:
   *   code 200 : Seq[ContractVersionDTO] (successful operation)
   */
  def curveContractVersionsCurrent(): ApiRequest[Seq[ContractVersionDTO]] =
    ApiRequest[Seq[ContractVersionDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/contractVersions/current", "application/json")
      .withSuccessResponse[Seq[ContractVersionDTO]](200)
      

  /**
   * Gets contracts.
   * 
   * Expected answers:
   *   code 200 : Seq[ContractDTO] (successful operation)
   */
  def curveContractsCurrent(): ApiRequest[Seq[ContractDTO]] =
    ApiRequest[Seq[ContractDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/contracts/current", "application/json")
      .withSuccessResponse[Seq[ContractDTO]](200)
      

  /**
   * Gets dailyVolumes.
   * 
   * Expected answers:
   *   code 200 : Seq[DailyVolumeDTO] (successful operation)
   */
  def curveDailyVolumesCurrent(): ApiRequest[Seq[DailyVolumeDTO]] =
    ApiRequest[Seq[DailyVolumeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/dailyVolumes/current", "application/json")
      .withSuccessResponse[Seq[DailyVolumeDTO]](200)
      

  /**
   * Gets exchanges.
   * 
   * Expected answers:
   *   code 200 : Seq[ExchangeDTO] (successful operation)
   * 
   * @param pool 
   */
  def curveExchangesCurrent(pool: Option[String] = None): ApiRequest[Seq[ExchangeDTO]] =
    ApiRequest[Seq[ExchangeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/exchanges/current", "application/json")
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[ExchangeDTO]](200)
      

  /**
   * Gets feeChangeLogs.
   * 
   * Expected answers:
   *   code 200 : Seq[FeeChangeLogDTO] (successful operation)
   */
  def curveFeeChangeLogsCurrent(): ApiRequest[Seq[FeeChangeLogDTO]] =
    ApiRequest[Seq[FeeChangeLogDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/feeChangeLogs/current", "application/json")
      .withSuccessResponse[Seq[FeeChangeLogDTO]](200)
      

  /**
   * Gets gaugeDeposits.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeDepositDTO] (successful operation)
   */
  def curveGaugeDepositsCurrent(): ApiRequest[Seq[GaugeDepositDTO]] =
    ApiRequest[Seq[GaugeDepositDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeDeposits/current", "application/json")
      .withSuccessResponse[Seq[GaugeDepositDTO]](200)
      

  /**
   * Gets gaugeLiquidities.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeLiquidityDTO] (successful operation)
   */
  def curveGaugeLiquiditiesCurrent(): ApiRequest[Seq[GaugeLiquidityDTO]] =
    ApiRequest[Seq[GaugeLiquidityDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeLiquidities/current", "application/json")
      .withSuccessResponse[Seq[GaugeLiquidityDTO]](200)
      

  /**
   * Gets gaugeTotalWeights.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeTotalWeightDTO] (successful operation)
   */
  def curveGaugeTotalWeightsCurrent(): ApiRequest[Seq[GaugeTotalWeightDTO]] =
    ApiRequest[Seq[GaugeTotalWeightDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeTotalWeights/current", "application/json")
      .withSuccessResponse[Seq[GaugeTotalWeightDTO]](200)
      

  /**
   * Gets gaugeTypeWeights.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeTypeWeightDTO] (successful operation)
   */
  def curveGaugeTypeWeightsCurrent(): ApiRequest[Seq[GaugeTypeWeightDTO]] =
    ApiRequest[Seq[GaugeTypeWeightDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeTypeWeights/current", "application/json")
      .withSuccessResponse[Seq[GaugeTypeWeightDTO]](200)
      

  /**
   * Gets gaugeTypes.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeTypeDTO] (successful operation)
   */
  def curveGaugeTypesCurrent(): ApiRequest[Seq[GaugeTypeDTO]] =
    ApiRequest[Seq[GaugeTypeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeTypes/current", "application/json")
      .withSuccessResponse[Seq[GaugeTypeDTO]](200)
      

  /**
   * Gets gaugeWeightVotes.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeWeightVoteDTO] (successful operation)
   */
  def curveGaugeWeightVotesCurrent(): ApiRequest[Seq[GaugeWeightVoteDTO]] =
    ApiRequest[Seq[GaugeWeightVoteDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeWeightVotes/current", "application/json")
      .withSuccessResponse[Seq[GaugeWeightVoteDTO]](200)
      

  /**
   * Gets gaugeWeights.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeWeightDTO] (successful operation)
   */
  def curveGaugeWeightsCurrent(): ApiRequest[Seq[GaugeWeightDTO]] =
    ApiRequest[Seq[GaugeWeightDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeWeights/current", "application/json")
      .withSuccessResponse[Seq[GaugeWeightDTO]](200)
      

  /**
   * Gets gaugeWithdraws.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeWithdrawDTO] (successful operation)
   */
  def curveGaugeWithdrawsCurrent(): ApiRequest[Seq[GaugeWithdrawDTO]] =
    ApiRequest[Seq[GaugeWithdrawDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeWithdraws/current", "application/json")
      .withSuccessResponse[Seq[GaugeWithdrawDTO]](200)
      

  /**
   * Gets gauges.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeDTO] (successful operation)
   */
  def curveGaugesCurrent(): ApiRequest[Seq[GaugeDTO]] =
    ApiRequest[Seq[GaugeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gauges/current", "application/json")
      .withSuccessResponse[Seq[GaugeDTO]](200)
      

  /**
   * Gets accounts.
   * 
   * Expected answers:
   *   code 200 : Seq[AccountDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param address 
   */
  def curveGetAccountsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, address: Option[String] = None): ApiRequest[Seq[AccountDTO]] =
    ApiRequest[Seq[AccountDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/accounts/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("address", address)
      .withSuccessResponse[Seq[AccountDTO]](200)
      

  /**
   * Gets addLiquidityEvents.
   * 
   * Expected answers:
   *   code 200 : Seq[AddLiquidityEventDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetAddLiquidityEventsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[AddLiquidityEventDTO]] =
    ApiRequest[Seq[AddLiquidityEventDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/addLiquidityEvents/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[AddLiquidityEventDTO]](200)
      

  /**
   * Gets adminFeeChangeLogs.
   * 
   * Expected answers:
   *   code 200 : Seq[AdminFeeChangeLogDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetAdminFeeChangeLogsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[AdminFeeChangeLogDTO]] =
    ApiRequest[Seq[AdminFeeChangeLogDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/adminFeeChangeLogs/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[AdminFeeChangeLogDTO]](200)
      

  /**
   * Gets amplificationCoeffChangeLogs.
   * 
   * Expected answers:
   *   code 200 : Seq[AmplificationCoeffChangeLogDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetAmplificationCoeffChangeLogsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[AmplificationCoeffChangeLogDTO]] =
    ApiRequest[Seq[AmplificationCoeffChangeLogDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/amplificationCoeffChangeLogs/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[AmplificationCoeffChangeLogDTO]](200)
      

  /**
   * Gets coins.
   * 
   * Expected answers:
   *   code 200 : Seq[CoinDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id Identifier, format: (pool_id)-(coin_index).
   * @param pool 
   */
  def curveGetCoinsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[CoinDTO]] =
    ApiRequest[Seq[CoinDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/coins/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[CoinDTO]](200)
      

  /**
   * Gets contractVersions.
   * 
   * Expected answers:
   *   code 200 : Seq[ContractVersionDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param address 
   */
  def curveGetContractVersionsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, address: Option[String] = None): ApiRequest[Seq[ContractVersionDTO]] =
    ApiRequest[Seq[ContractVersionDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/contractVersions/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("address", address)
      .withSuccessResponse[Seq[ContractVersionDTO]](200)
      

  /**
   * Gets contracts.
   * 
   * Expected answers:
   *   code 200 : Seq[ContractDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def curveGetContractsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[ContractDTO]] =
    ApiRequest[Seq[ContractDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/contracts/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[ContractDTO]](200)
      

  /**
   * Gets dailyVolumes.
   * 
   * Expected answers:
   *   code 200 : Seq[DailyVolumeDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetDailyVolumesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[DailyVolumeDTO]] =
    ApiRequest[Seq[DailyVolumeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/dailyVolumes/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[DailyVolumeDTO]](200)
      

  /**
   * Gets exchanges.
   * 
   * Expected answers:
   *   code 200 : Seq[ExchangeDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetExchangesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[ExchangeDTO]] =
    ApiRequest[Seq[ExchangeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/exchanges/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[ExchangeDTO]](200)
      

  /**
   * Gets feeChangeLogs.
   * 
   * Expected answers:
   *   code 200 : Seq[FeeChangeLogDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetFeeChangeLogsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[FeeChangeLogDTO]] =
    ApiRequest[Seq[FeeChangeLogDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/feeChangeLogs/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[FeeChangeLogDTO]](200)
      

  /**
   * Gets gaugeDeposits.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeDepositDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def curveGetGaugeDepositsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[GaugeDepositDTO]] =
    ApiRequest[Seq[GaugeDepositDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeDeposits/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[GaugeDepositDTO]](200)
      

  /**
   * Gets gaugeLiquidities.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeLiquidityDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param user 
   */
  def curveGetGaugeLiquiditiesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, user: Option[String] = None): ApiRequest[Seq[GaugeLiquidityDTO]] =
    ApiRequest[Seq[GaugeLiquidityDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeLiquidities/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("user", user)
      .withSuccessResponse[Seq[GaugeLiquidityDTO]](200)
      

  /**
   * Gets gaugeTotalWeights.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeTotalWeightDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def curveGetGaugeTotalWeightsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[GaugeTotalWeightDTO]] =
    ApiRequest[Seq[GaugeTotalWeightDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeTotalWeights/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[GaugeTotalWeightDTO]](200)
      

  /**
   * Gets gaugeTypeWeights.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeTypeWeightDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def curveGetGaugeTypeWeightsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[GaugeTypeWeightDTO]] =
    ApiRequest[Seq[GaugeTypeWeightDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeTypeWeights/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[GaugeTypeWeightDTO]](200)
      

  /**
   * Gets gaugeTypes.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeTypeDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param name 
   */
  def curveGetGaugeTypesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, name: Option[String] = None): ApiRequest[Seq[GaugeTypeDTO]] =
    ApiRequest[Seq[GaugeTypeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeTypes/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("name", name)
      .withSuccessResponse[Seq[GaugeTypeDTO]](200)
      

  /**
   * Gets gaugeWeightVotes.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeWeightVoteDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param user 
   */
  def curveGetGaugeWeightVotesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, user: Option[String] = None): ApiRequest[Seq[GaugeWeightVoteDTO]] =
    ApiRequest[Seq[GaugeWeightVoteDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeWeightVotes/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("user", user)
      .withSuccessResponse[Seq[GaugeWeightVoteDTO]](200)
      

  /**
   * Gets gaugeWeights.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeWeightDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def curveGetGaugeWeightsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[GaugeWeightDTO]] =
    ApiRequest[Seq[GaugeWeightDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeWeights/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[GaugeWeightDTO]](200)
      

  /**
   * Gets gaugeWithdraws.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeWithdrawDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def curveGetGaugeWithdrawsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[GaugeWithdrawDTO]] =
    ApiRequest[Seq[GaugeWithdrawDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gaugeWithdraws/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[GaugeWithdrawDTO]](200)
      

  /**
   * Gets gauges.
   * 
   * Expected answers:
   *   code 200 : Seq[GaugeDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param address 
   * @param pool 
   */
  def curveGetGaugesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, address: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[GaugeDTO]] =
    ApiRequest[Seq[GaugeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/gauges/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("address", address)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[GaugeDTO]](200)
      

  /**
   * Gets hourlyVolumes.
   * 
   * Expected answers:
   *   code 200 : Seq[HourlyVolumeDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetHourlyVolumesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[HourlyVolumeDTO]] =
    ApiRequest[Seq[HourlyVolumeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/hourlyVolumes/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[HourlyVolumeDTO]](200)
      

  /**
   * Gets lpTokens.
   * 
   * Expected answers:
   *   code 200 : Seq[LpTokenDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param address 
   * @param name 
   * @param symbol 
   * @param pool 
   */
  def curveGetLpTokensHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, address: Option[String] = None, name: Option[String] = None, symbol: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[LpTokenDTO]] =
    ApiRequest[Seq[LpTokenDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/lpTokens/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("address", address)
      .withQueryParam("name", name)
      .withQueryParam("symbol", symbol)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[LpTokenDTO]](200)
      

  /**
   * Gets pools.
   * 
   * Expected answers:
   *   code 200 : Seq[PoolDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id Pool address.
   * @param name Pool's human-readable name.
   */
  def curveGetPoolsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, name: Option[String] = None): ApiRequest[Seq[PoolDTO]] =
    ApiRequest[Seq[PoolDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/pools/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("name", name)
      .withSuccessResponse[Seq[PoolDTO]](200)
      

  /**
   * Gets proposalVotes.
   * 
   * Expected answers:
   *   code 200 : Seq[ProposalVoteDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def curveGetProposalVotesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[ProposalVoteDTO]] =
    ApiRequest[Seq[ProposalVoteDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/proposalVotes/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[ProposalVoteDTO]](200)
      

  /**
   * Gets proposals.
   * 
   * Expected answers:
   *   code 200 : Seq[ProposalDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   */
  def curveGetProposalsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[ProposalDTO]] =
    ApiRequest[Seq[ProposalDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/proposals/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[ProposalDTO]](200)
      

  /**
   * Gets removeLiquidityEvents.
   * 
   * Expected answers:
   *   code 200 : Seq[RemoveLiquidityEventDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetRemoveLiquidityEventsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[RemoveLiquidityEventDTO]] =
    ApiRequest[Seq[RemoveLiquidityEventDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/removeLiquidityEvents/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[RemoveLiquidityEventDTO]](200)
      

  /**
   * Gets removeLiquidityOneEvents.
   * 
   * Expected answers:
   *   code 200 : Seq[RemoveLiquidityOneEventDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetRemoveLiquidityOneEventsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[RemoveLiquidityOneEventDTO]] =
    ApiRequest[Seq[RemoveLiquidityOneEventDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/removeLiquidityOneEvents/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[RemoveLiquidityOneEventDTO]](200)
      

  /**
   * Gets systemStates.
   * 
   * Expected answers:
   *   code 200 : Seq[SystemStateDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id Singleton ID, equals to 'current'.
   */
  def curveGetSystemStatesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None): ApiRequest[Seq[SystemStateDTO]] =
    ApiRequest[Seq[SystemStateDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/systemStates/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[SystemStateDTO]](200)
      

  /**
   * Gets tokens.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param address 
   * @param name 
   * @param symbol 
   */
  def curveGetTokensHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, address: Option[String] = None, name: Option[String] = None, symbol: Option[String] = None): ApiRequest[Seq[TokenDTO]] =
    ApiRequest[Seq[TokenDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/tokens/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("address", address)
      .withQueryParam("name", name)
      .withQueryParam("symbol", symbol)
      .withSuccessResponse[Seq[TokenDTO]](200)
      

  /**
   * Gets transferOwnershipEvents.
   * 
   * Expected answers:
   *   code 200 : Seq[TransferOwnershipEventDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetTransferOwnershipEventsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[TransferOwnershipEventDTO]] =
    ApiRequest[Seq[TransferOwnershipEventDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/transferOwnershipEvents/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[TransferOwnershipEventDTO]](200)
      

  /**
   * Gets underlyingCoins.
   * 
   * Expected answers:
   *   code 200 : Seq[UnderlyingCoinDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id Equals to: (pool_id)-(coin_index).
   * @param pool 
   */
  def curveGetUnderlyingCoinsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[UnderlyingCoinDTO]] =
    ApiRequest[Seq[UnderlyingCoinDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/underlyingCoins/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[UnderlyingCoinDTO]](200)
      

  /**
   * Gets votingApps.
   * 
   * Expected answers:
   *   code 200 : Seq[VotingAppDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id App address.
   * @param address 
   */
  def curveGetVotingAppsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, address: Option[String] = None): ApiRequest[Seq[VotingAppDTO]] =
    ApiRequest[Seq[VotingAppDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/votingApps/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("address", address)
      .withSuccessResponse[Seq[VotingAppDTO]](200)
      

  /**
   * Gets weeklyVolumes.
   * 
   * Expected answers:
   *   code 200 : Seq[WeeklyVolumeDTO] (successful operation)
   * 
   * @param startBlock The start block. If endblock is not given, only those entities will be included that were exactly created in startBlock.
   * @param endBlock The end block. Useful to filter data in range of blocks (FROM startBlock TO endBlock).
   * @param startDate The start date of timeframe. If endDate is not given, entities created FROM startDate TO startDate plus 24 hours will be included.
   * @param endDate The end date of timeframe.
   * @param id 
   * @param pool 
   */
  def curveGetWeeklyVolumesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, id: Option[String] = None, pool: Option[String] = None): ApiRequest[Seq[WeeklyVolumeDTO]] =
    ApiRequest[Seq[WeeklyVolumeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/weeklyVolumes/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("id", id)
      .withQueryParam("pool", pool)
      .withSuccessResponse[Seq[WeeklyVolumeDTO]](200)
      

  /**
   * Gets hourlyVolumes.
   * 
   * Expected answers:
   *   code 200 : Seq[HourlyVolumeDTO] (successful operation)
   */
  def curveHourlyVolumesCurrent(): ApiRequest[Seq[HourlyVolumeDTO]] =
    ApiRequest[Seq[HourlyVolumeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/hourlyVolumes/current", "application/json")
      .withSuccessResponse[Seq[HourlyVolumeDTO]](200)
      

  /**
   * Gets lpTokens.
   * 
   * Expected answers:
   *   code 200 : Seq[LpTokenDTO] (successful operation)
   */
  def curveLpTokensCurrent(): ApiRequest[Seq[LpTokenDTO]] =
    ApiRequest[Seq[LpTokenDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/lpTokens/current", "application/json")
      .withSuccessResponse[Seq[LpTokenDTO]](200)
      

  /**
   * Gets pools.
   * 
   * Expected answers:
   *   code 200 : Seq[PoolDTO] (successful operation)
   * 
   * @param id Pool address.
   */
  def curvePoolsCurrent(id: Option[String] = None): ApiRequest[Seq[PoolDTO]] =
    ApiRequest[Seq[PoolDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/pools/current", "application/json")
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[PoolDTO]](200)
      

  /**
   * Gets proposalVotes.
   * 
   * Expected answers:
   *   code 200 : Seq[ProposalVoteDTO] (successful operation)
   */
  def curveProposalVotesCurrent(): ApiRequest[Seq[ProposalVoteDTO]] =
    ApiRequest[Seq[ProposalVoteDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/proposalVotes/current", "application/json")
      .withSuccessResponse[Seq[ProposalVoteDTO]](200)
      

  /**
   * Gets proposals.
   * 
   * Expected answers:
   *   code 200 : Seq[ProposalDTO] (successful operation)
   */
  def curveProposalsCurrent(): ApiRequest[Seq[ProposalDTO]] =
    ApiRequest[Seq[ProposalDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/proposals/current", "application/json")
      .withSuccessResponse[Seq[ProposalDTO]](200)
      

  /**
   * Gets removeLiquidityEvents.
   * 
   * Expected answers:
   *   code 200 : Seq[RemoveLiquidityEventDTO] (successful operation)
   */
  def curveRemoveLiquidityEventsCurrent(): ApiRequest[Seq[RemoveLiquidityEventDTO]] =
    ApiRequest[Seq[RemoveLiquidityEventDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/removeLiquidityEvents/current", "application/json")
      .withSuccessResponse[Seq[RemoveLiquidityEventDTO]](200)
      

  /**
   * Gets removeLiquidityOneEvents.
   * 
   * Expected answers:
   *   code 200 : Seq[RemoveLiquidityOneEventDTO] (successful operation)
   */
  def curveRemoveLiquidityOneEventsCurrent(): ApiRequest[Seq[RemoveLiquidityOneEventDTO]] =
    ApiRequest[Seq[RemoveLiquidityOneEventDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/removeLiquidityOneEvents/current", "application/json")
      .withSuccessResponse[Seq[RemoveLiquidityOneEventDTO]](200)
      

  /**
   * Gets systemStates.
   * 
   * Expected answers:
   *   code 200 : Seq[SystemStateDTO] (successful operation)
   */
  def curveSystemStatesCurrent(): ApiRequest[Seq[SystemStateDTO]] =
    ApiRequest[Seq[SystemStateDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/systemStates/current", "application/json")
      .withSuccessResponse[Seq[SystemStateDTO]](200)
      

  /**
   * Gets tokens.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenDTO] (successful operation)
   */
  def curveTokensCurrent(): ApiRequest[Seq[TokenDTO]] =
    ApiRequest[Seq[TokenDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/tokens/current", "application/json")
      .withSuccessResponse[Seq[TokenDTO]](200)
      

  /**
   * Gets transferOwnershipEvents.
   * 
   * Expected answers:
   *   code 200 : Seq[TransferOwnershipEventDTO] (successful operation)
   */
  def curveTransferOwnershipEventsCurrent(): ApiRequest[Seq[TransferOwnershipEventDTO]] =
    ApiRequest[Seq[TransferOwnershipEventDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/transferOwnershipEvents/current", "application/json")
      .withSuccessResponse[Seq[TransferOwnershipEventDTO]](200)
      

  /**
   * Gets underlyingCoins.
   * 
   * Expected answers:
   *   code 200 : Seq[UnderlyingCoinDTO] (successful operation)
   */
  def curveUnderlyingCoinsCurrent(): ApiRequest[Seq[UnderlyingCoinDTO]] =
    ApiRequest[Seq[UnderlyingCoinDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/underlyingCoins/current", "application/json")
      .withSuccessResponse[Seq[UnderlyingCoinDTO]](200)
      

  /**
   * Gets votingApps.
   * 
   * Expected answers:
   *   code 200 : Seq[VotingAppDTO] (successful operation)
   */
  def curveVotingAppsCurrent(): ApiRequest[Seq[VotingAppDTO]] =
    ApiRequest[Seq[VotingAppDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/votingApps/current", "application/json")
      .withSuccessResponse[Seq[VotingAppDTO]](200)
      

  /**
   * Gets weeklyVolumes.
   * 
   * Expected answers:
   *   code 200 : Seq[WeeklyVolumeDTO] (successful operation)
   */
  def curveWeeklyVolumesCurrent(): ApiRequest[Seq[WeeklyVolumeDTO]] =
    ApiRequest[Seq[WeeklyVolumeDTO]](ApiMethods.GET, baseUrl, "/dapps/curve/weeklyVolumes/current", "application/json")
      .withSuccessResponse[Seq[WeeklyVolumeDTO]](200)
      



}

