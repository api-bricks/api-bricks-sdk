/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.BundleV3DTO
import org.openapitools.client.model.BurnV3DTO
import org.openapitools.client.model.FactoryV3DTO
import org.openapitools.client.model.MintV3DTO
import java.time.OffsetDateTime
import org.openapitools.client.model.PoolDayDataV3DTO
import org.openapitools.client.model.PoolHourDataV3DTO
import org.openapitools.client.model.PoolV3DTO
import org.openapitools.client.model.PositionSnapshotV3DTO
import org.openapitools.client.model.PositionV3DTO
import org.openapitools.client.model.SwapV3DTO
import org.openapitools.client.model.TickDayDataV3DTO
import org.openapitools.client.model.TickV3DTO
import org.openapitools.client.model.TokenHourDataV3DTO
import org.openapitools.client.model.TokenV3DTO
import org.openapitools.client.model.TokenV3DayDataDTO
import org.openapitools.client.model.TransactionV3DTO
import org.openapitools.client.model.UniswapDayDataV3DTO
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object UniswapV3Api {

  def apply(baseUrl: String = "https://onchain.coinapi.io") = new UniswapV3Api(baseUrl)
}

class UniswapV3Api(baseUrl: String) {

  /**
   * Gets bundles.
   * 
   * Expected answers:
   *   code 200 : Seq[BundleV3DTO] (successful operation)
   */
  def uniswapV3GetBundlesCurrent(): ApiRequest[Seq[BundleV3DTO]] =
    ApiRequest[Seq[BundleV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/bundles/current", "application/json")
      .withSuccessResponse[Seq[BundleV3DTO]](200)
      

  /**
   * Gets bundles.
   * 
   * Expected answers:
   *   code 200 : Seq[BundleV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   */
  def uniswapV3GetBundlesHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Seq[BundleV3DTO]] =
    ApiRequest[Seq[BundleV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/bundles/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Seq[BundleV3DTO]](200)
      

  /**
   * Gets burns.
   * 
   * Expected answers:
   *   code 200 : Seq[BurnV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetBurnsCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[BurnV3DTO]] =
    ApiRequest[Seq[BurnV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/burns/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[BurnV3DTO]](200)
      

  /**
   * Gets burns.
   * 
   * Expected answers:
   *   code 200 : Seq[BurnV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetBurnsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[BurnV3DTO]] =
    ApiRequest[Seq[BurnV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/burns/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[BurnV3DTO]](200)
      

  /**
   * Gets uniswapv3 day data.
   * 
   * Expected answers:
   *   code 200 : Seq[UniswapDayDataV3DTO] (successful operation)
   */
  def uniswapV3GetDayDataCurrent(): ApiRequest[Seq[UniswapDayDataV3DTO]] =
    ApiRequest[Seq[UniswapDayDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/dayData/current", "application/json")
      .withSuccessResponse[Seq[UniswapDayDataV3DTO]](200)
      

  /**
   * Gets uniswapv3 day data.
   * 
   * Expected answers:
   *   code 200 : Seq[UniswapDayDataV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   */
  def uniswapV3GetDayDataHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Seq[UniswapDayDataV3DTO]] =
    ApiRequest[Seq[UniswapDayDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/dayData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Seq[UniswapDayDataV3DTO]](200)
      

  /**
   * Gets factory.
   * 
   * Expected answers:
   *   code 200 : Seq[FactoryV3DTO] (successful operation)
   */
  def uniswapV3GetFactoryCurrent(): ApiRequest[Seq[FactoryV3DTO]] =
    ApiRequest[Seq[FactoryV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/factory/current", "application/json")
      .withSuccessResponse[Seq[FactoryV3DTO]](200)
      

  /**
   * Gets factory.
   * 
   * Expected answers:
   *   code 200 : Seq[FactoryV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   */
  def uniswapV3GetFactoryHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Seq[FactoryV3DTO]] =
    ApiRequest[Seq[FactoryV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/factory/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Seq[FactoryV3DTO]](200)
      

  /**
   * Gets mints.
   * 
   * Expected answers:
   *   code 200 : Seq[MintV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetMintsCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[MintV3DTO]] =
    ApiRequest[Seq[MintV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/mints/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[MintV3DTO]](200)
      

  /**
   * Gets mints.
   * 
   * Expected answers:
   *   code 200 : Seq[MintV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetMintsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[MintV3DTO]] =
    ApiRequest[Seq[MintV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/mints/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[MintV3DTO]](200)
      

  /**
   * Gets pools.
   * 
   * Expected answers:
   *   code 200 : Seq[PoolV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetPoolsCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[PoolV3DTO]] =
    ApiRequest[Seq[PoolV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/pools/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[PoolV3DTO]](200)
      

  /**
   * Gets pools day data.
   * 
   * Expected answers:
   *   code 200 : Seq[PoolDayDataV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetPoolsDayDataCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[PoolDayDataV3DTO]] =
    ApiRequest[Seq[PoolDayDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/poolsDayData/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[PoolDayDataV3DTO]](200)
      

  /**
   * Gets pools day data.
   * 
   * Expected answers:
   *   code 200 : Seq[PoolDayDataV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetPoolsDayDataHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[PoolDayDataV3DTO]] =
    ApiRequest[Seq[PoolDayDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/poolsDayData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[PoolDayDataV3DTO]](200)
      

  /**
   * Gets pools.
   * 
   * Expected answers:
   *   code 200 : Seq[PoolV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetPoolsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[PoolV3DTO]] =
    ApiRequest[Seq[PoolV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/pools/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[PoolV3DTO]](200)
      

  /**
   * Gets pools hour data.
   * 
   * Expected answers:
   *   code 200 : Seq[PoolHourDataV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetPoolsHourDataCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[PoolHourDataV3DTO]] =
    ApiRequest[Seq[PoolHourDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/poolsHourData/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[PoolHourDataV3DTO]](200)
      

  /**
   * Gets pools hour data.
   * 
   * Expected answers:
   *   code 200 : Seq[PoolHourDataV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetPoolsHourDataHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[PoolHourDataV3DTO]] =
    ApiRequest[Seq[PoolHourDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/poolsHourData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[PoolHourDataV3DTO]](200)
      

  /**
   * Gets positions.
   * 
   * Expected answers:
   *   code 200 : Seq[PositionV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetPositionsCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[PositionV3DTO]] =
    ApiRequest[Seq[PositionV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/positions/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[PositionV3DTO]](200)
      

  /**
   * Gets positions.
   * 
   * Expected answers:
   *   code 200 : Seq[PositionV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetPositionsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[PositionV3DTO]] =
    ApiRequest[Seq[PositionV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/positions/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[PositionV3DTO]](200)
      

  /**
   * Gets positions snapshots.
   * 
   * Expected answers:
   *   code 200 : Seq[PositionSnapshotV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetPositionsSnaphotsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[PositionSnapshotV3DTO]] =
    ApiRequest[Seq[PositionSnapshotV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/positionsSnapshots/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[PositionSnapshotV3DTO]](200)
      

  /**
   * Gets positions snapshots.
   * 
   * Expected answers:
   *   code 200 : Seq[PositionSnapshotV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetPositionsSnapshotsCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[PositionSnapshotV3DTO]] =
    ApiRequest[Seq[PositionSnapshotV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/positionSnapshots/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[PositionSnapshotV3DTO]](200)
      

  /**
   * Gets swaps.
   * 
   * Expected answers:
   *   code 200 : Seq[SwapV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetSwapsCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[SwapV3DTO]] =
    ApiRequest[Seq[SwapV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/swaps/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[SwapV3DTO]](200)
      

  /**
   * Gets swaps.
   * 
   * Expected answers:
   *   code 200 : Seq[SwapV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetSwapsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[SwapV3DTO]] =
    ApiRequest[Seq[SwapV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/swaps/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[SwapV3DTO]](200)
      

  /**
   * Gets ticks.
   * 
   * Expected answers:
   *   code 200 : Seq[TickV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetTicksCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[TickV3DTO]] =
    ApiRequest[Seq[TickV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/ticks/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[TickV3DTO]](200)
      

  /**
   * Gets ticks day data.
   * 
   * Expected answers:
   *   code 200 : Seq[TickDayDataV3DTO] (successful operation)
   * 
   * @param filterPoolId 
   */
  def uniswapV3GetTicksDayDataCurrent(filterPoolId: Option[String] = None): ApiRequest[Seq[TickDayDataV3DTO]] =
    ApiRequest[Seq[TickDayDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/ticksDayData/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[TickDayDataV3DTO]](200)
      

  /**
   * Gets ticks day data.
   * 
   * Expected answers:
   *   code 200 : Seq[TickDayDataV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetTicksDayDataHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[TickDayDataV3DTO]] =
    ApiRequest[Seq[TickDayDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/ticksDayData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[TickDayDataV3DTO]](200)
      

  /**
   * Gets ticks.
   * 
   * Expected answers:
   *   code 200 : Seq[TickV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def uniswapV3GetTicksHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Seq[TickV3DTO]] =
    ApiRequest[Seq[TickV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/ticks/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Seq[TickV3DTO]](200)
      

  /**
   * Gets tokens.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenV3DTO] (successful operation)
   * 
   * @param filterTokenId 
   */
  def uniswapV3GetTokensCurrent(filterTokenId: Option[String] = None): ApiRequest[Seq[TokenV3DTO]] =
    ApiRequest[Seq[TokenV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokens/current", "application/json")
      .withQueryParam("filter_token_id", filterTokenId)
      .withSuccessResponse[Seq[TokenV3DTO]](200)
      

  /**
   * Gets tokens day data.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenV3DayDataDTO] (successful operation)
   * 
   * @param filterTokenId 
   */
  def uniswapV3GetTokensDayDataCurrent(filterTokenId: Option[String] = None): ApiRequest[Seq[TokenV3DayDataDTO]] =
    ApiRequest[Seq[TokenV3DayDataDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokensDayData/current", "application/json")
      .withQueryParam("filter_token_id", filterTokenId)
      .withSuccessResponse[Seq[TokenV3DayDataDTO]](200)
      

  /**
   * Gets tokens day data.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenV3DayDataDTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param tokenId 
   */
  def uniswapV3GetTokensDayDataHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, tokenId: Option[String] = None): ApiRequest[Seq[TokenV3DayDataDTO]] =
    ApiRequest[Seq[TokenV3DayDataDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokensDayData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("tokenId", tokenId)
      .withSuccessResponse[Seq[TokenV3DayDataDTO]](200)
      

  /**
   * Gets tokens.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param tokenId 
   */
  def uniswapV3GetTokensHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, tokenId: Option[String] = None): ApiRequest[Seq[TokenV3DTO]] =
    ApiRequest[Seq[TokenV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokens/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("tokenId", tokenId)
      .withSuccessResponse[Seq[TokenV3DTO]](200)
      

  /**
   * Gets tokens hour data.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenHourDataV3DTO] (successful operation)
   * 
   * @param filterTokenId 
   */
  def uniswapV3GetTokensHourDataCurrent(filterTokenId: Option[String] = None): ApiRequest[Seq[TokenHourDataV3DTO]] =
    ApiRequest[Seq[TokenHourDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokensHourData/current", "application/json")
      .withQueryParam("filter_token_id", filterTokenId)
      .withSuccessResponse[Seq[TokenHourDataV3DTO]](200)
      

  /**
   * Gets tokens hour data.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenHourDataV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param tokenId 
   */
  def uniswapV3GetTokensHourDataHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, tokenId: Option[String] = None): ApiRequest[Seq[TokenHourDataV3DTO]] =
    ApiRequest[Seq[TokenHourDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokensHourData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("tokenId", tokenId)
      .withSuccessResponse[Seq[TokenHourDataV3DTO]](200)
      

  /**
   * Gets transactions.
   * 
   * Expected answers:
   *   code 200 : Seq[TransactionV3DTO] (successful operation)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   */
  def uniswapV3GetTransactionsHistorical(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Seq[TransactionV3DTO]] =
    ApiRequest[Seq[TransactionV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/transactions/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Seq[TransactionV3DTO]](200)
      



}

