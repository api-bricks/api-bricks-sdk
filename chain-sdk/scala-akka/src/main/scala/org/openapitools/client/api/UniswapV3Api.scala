/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import java.time.OffsetDateTime
import org.openapitools.client.model.UniswapV3BundleV3DTO
import org.openapitools.client.model.UniswapV3BurnV3DTO
import org.openapitools.client.model.UniswapV3FactoryV3DTO
import org.openapitools.client.model.UniswapV3MintV3DTO
import org.openapitools.client.model.UniswapV3PoolDayDataV3DTO
import org.openapitools.client.model.UniswapV3PoolHourDataV3DTO
import org.openapitools.client.model.UniswapV3PoolV3DTO
import org.openapitools.client.model.UniswapV3PositionSnapshotV3DTO
import org.openapitools.client.model.UniswapV3PositionV3DTO
import org.openapitools.client.model.UniswapV3SwapV3DTO
import org.openapitools.client.model.UniswapV3TickDayDataV3DTO
import org.openapitools.client.model.UniswapV3TickV3DTO
import org.openapitools.client.model.UniswapV3TokenHourDataV3DTO
import org.openapitools.client.model.UniswapV3TokenV3DTO
import org.openapitools.client.model.UniswapV3TokenV3DayDataDTO
import org.openapitools.client.model.UniswapV3UniswapDayDataV3DTO
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object UniswapV3Api {

  def apply(baseUrl: String = "https://onchain.coinapi.io") = new UniswapV3Api(baseUrl)
}

class UniswapV3Api(baseUrl: String) {

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3BundleV3DTO] (successful operation)
   */
  def dappsUniswapv3BundleCurrentGet(): ApiRequest[Seq[UniswapV3BundleV3DTO]] =
    ApiRequest[Seq[UniswapV3BundleV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/bundle/current", "application/json")
      .withSuccessResponse[Seq[UniswapV3BundleV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   */
  def dappsUniswapv3BundlesHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/bundles/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3BurnV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3BurnsCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3BurnV3DTO]] =
    ApiRequest[Seq[UniswapV3BurnV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/burns/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3BurnV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3BurnsHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/burns/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   */
  def dappsUniswapv3DayDataHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/dayData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3FactoryV3DTO] (successful operation)
   * 
   * @param chainId 
   */
  def dappsUniswapv3FactoryCurrentGet(chainId: String): ApiRequest[Seq[UniswapV3FactoryV3DTO]] =
    ApiRequest[Seq[UniswapV3FactoryV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/factory/current", "application/json")
      .withPathParam("chain_id", chainId)
      .withSuccessResponse[Seq[UniswapV3FactoryV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   */
  def dappsUniswapv3FactoryHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/factory/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3MintV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3MintsCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3MintV3DTO]] =
    ApiRequest[Seq[UniswapV3MintV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/mints/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3MintV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3MintsHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/mints/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3PoolDayDataHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/poolDayData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3PoolHourDataHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/poolHourData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3PoolV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3PoolsCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3PoolV3DTO]] =
    ApiRequest[Seq[UniswapV3PoolV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/pools/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3PoolV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3PoolDayDataV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3PoolsDayDataCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3PoolDayDataV3DTO]] =
    ApiRequest[Seq[UniswapV3PoolDayDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/poolsDayData/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3PoolDayDataV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3PoolsHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/pools/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3PoolHourDataV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3PoolsHourDataCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3PoolHourDataV3DTO]] =
    ApiRequest[Seq[UniswapV3PoolHourDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/poolsHourData/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3PoolHourDataV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3PositionSnapshotHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/positionSnapshot/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3PositionSnapshotV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3PositionSnapshotsCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3PositionSnapshotV3DTO]] =
    ApiRequest[Seq[UniswapV3PositionSnapshotV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/positionSnapshots/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3PositionSnapshotV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3PositionV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3PositionsCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3PositionV3DTO]] =
    ApiRequest[Seq[UniswapV3PositionV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/positions/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3PositionV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3PositionsHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/positions/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3SwapV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3SwapsCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3SwapV3DTO]] =
    ApiRequest[Seq[UniswapV3SwapV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/swaps/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3SwapV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3SwapsHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/swaps/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3TickDayDataHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tickDayData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3TickV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3TicksCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3TickV3DTO]] =
    ApiRequest[Seq[UniswapV3TickV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/ticks/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3TickV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3TickDayDataV3DTO] (successful operation)
   * 
   * @param filterPoolId Filter pool id
   */
  def dappsUniswapv3TicksDayDataCurrentGet(filterPoolId: Option[String] = None): ApiRequest[Seq[UniswapV3TickDayDataV3DTO]] =
    ApiRequest[Seq[UniswapV3TickDayDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/ticksDayData/current", "application/json")
      .withQueryParam("filter_pool_id", filterPoolId)
      .withSuccessResponse[Seq[UniswapV3TickDayDataV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param poolId 
   */
  def dappsUniswapv3TicksHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, poolId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/ticks/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("poolId", poolId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param tokenId 
   */
  def dappsUniswapv3TokenDayDataHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, tokenId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokenDayData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("tokenId", tokenId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param tokenId 
   */
  def dappsUniswapv3TokenHourDataHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, tokenId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokenHourData/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("tokenId", tokenId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3TokenV3DTO] (successful operation)
   * 
   * @param filterTokenId 
   */
  def dappsUniswapv3TokensCurrentGet(filterTokenId: Option[String] = None): ApiRequest[Seq[UniswapV3TokenV3DTO]] =
    ApiRequest[Seq[UniswapV3TokenV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokens/current", "application/json")
      .withQueryParam("filter_token_id", filterTokenId)
      .withSuccessResponse[Seq[UniswapV3TokenV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3TokenV3DayDataDTO] (successful operation)
   * 
   * @param filterTokenId 
   */
  def dappsUniswapv3TokensDayDataCurrentGet(filterTokenId: Option[String] = None): ApiRequest[Seq[UniswapV3TokenV3DayDataDTO]] =
    ApiRequest[Seq[UniswapV3TokenV3DayDataDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokensDayData/current", "application/json")
      .withQueryParam("filter_token_id", filterTokenId)
      .withSuccessResponse[Seq[UniswapV3TokenV3DayDataDTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   * @param tokenId 
   */
  def dappsUniswapv3TokensHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None, tokenId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokens/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withQueryParam("tokenId", tokenId)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3TokenHourDataV3DTO] (successful operation)
   * 
   * @param filterTokenId 
   */
  def dappsUniswapv3TokensHourDataCurrentGet(filterTokenId: Option[String] = None): ApiRequest[Seq[UniswapV3TokenHourDataV3DTO]] =
    ApiRequest[Seq[UniswapV3TokenHourDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/tokensHourData/current", "application/json")
      .withQueryParam("filter_token_id", filterTokenId)
      .withSuccessResponse[Seq[UniswapV3TokenHourDataV3DTO]](200)
      

  /**
   * Expected answers:
   *   code 200 :  (Success)
   * 
   * @param startBlock 
   * @param endBlock 
   * @param startDate 
   * @param endDate 
   */
  def dappsUniswapv3TransactionsHistoricalGet(startBlock: Option[Long] = None, endBlock: Option[Long] = None, startDate: Option[OffsetDateTime] = None, endDate: Option[OffsetDateTime] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/transactions/historical", "application/json")
      .withQueryParam("startBlock", startBlock)
      .withQueryParam("endBlock", endBlock)
      .withQueryParam("startDate", startDate)
      .withQueryParam("endDate", endDate)
      .withSuccessResponse[Unit](200)
      

  /**
   * Expected answers:
   *   code 200 : Seq[UniswapV3UniswapDayDataV3DTO] (successful operation)
   */
  def dappsUniswapv3UniswapDayDataCurrentGet(): ApiRequest[Seq[UniswapV3UniswapDayDataV3DTO]] =
    ApiRequest[Seq[UniswapV3UniswapDayDataV3DTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv3/uniswapDayData/current", "application/json")
      .withSuccessResponse[Seq[UniswapV3UniswapDayDataV3DTO]](200)
      



}

