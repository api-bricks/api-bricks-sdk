// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    CurveAccountDTO,
    CurveAddLiquidityEventDTO,
    CurveAdminFeeChangeLogDTO,
    CurveAmplificationCoeffChangeLogDTO,
    CurveCoinDTO,
    CurveContractDTO,
    CurveContractVersionDTO,
    CurveDailyVolumeDTO,
    CurveExchangeDTO,
    CurveFeeChangeLogDTO,
    CurveGaugeDTO,
    CurveGaugeDepositDTO,
    CurveGaugeLiquidityDTO,
    CurveGaugeTotalWeightDTO,
    CurveGaugeTypeDTO,
    CurveGaugeTypeWeightDTO,
    CurveGaugeWeightDTO,
    CurveGaugeWeightVoteDTO,
    CurveGaugeWithdrawDTO,
    CurveHourlyVolumeDTO,
    CurveLpTokenDTO,
    CurvePoolDTO,
    CurveProposalDTO,
    CurveProposalVoteDTO,
    CurveRemoveLiquidityEventDTO,
    CurveRemoveLiquidityOneEventDTO,
    CurveSystemStateDTO,
    CurveTokenDTO,
    CurveTransferOwnershipEventDTO,
    CurveUnderlyingCoinDTO,
    CurveVotingAppDTO,
    CurveWeeklyVolumeDTO,
} from '../models';

export interface CurveGetAccountDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetAccountsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetAddLiquidityEventDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetAddLiquidityEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetAdminFeeChangeLogDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetAdminFeeChangeLogsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetAmplificationCoeffChangeLogDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetAmplificationCoeffChangeLogsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetCoinDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetCoinsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetContractDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetContractVersionDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetContractsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetContractsVersionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetDailyVolumeDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetDailyVolumesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetExchangeDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetExchangesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetFeeChangeLogDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetFeeChangeLogsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugeDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugeDepositDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugeLiquidityDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugeTotalWeightDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugeTypeDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugeTypeWeightDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugeWeightDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugeWeightVoteDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugeWithdrawDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugesDepositsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugesLiquidityHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesTotalWeightsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesTypesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesTypesWeightsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesWeightsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesWeightsVotesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesWithdrawHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetHourlyVolumeDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetHourlyVolumesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetLpTokenDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetLpTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetPoolDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetPoolsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetProposalDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetProposalVoteDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetProposalsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetProposalsVotesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetRemoveLiquidityEventDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetRemoveLiquidityEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetRemoveLiquidityOneEventDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetRemoveLiquidityOneEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetSystemStateDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetSystemStatesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetTokenDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface CurveGetTransferOwnershipEventDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetTransferOwnershipEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetUnderlyingCoinDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetUnderlyingCoinsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetVotingAppDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetVotingAppsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetWeeklyVolumeDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetWeeklyVolumesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

/**
 * no description
 */
export class CurveApi extends BaseAPI {

    /**
     * Gets AccountDTOs.
     * AccountDTOs (historical) 🔥
     */
    curveGetAccountDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAccountDTOsHistoricalRequest): Observable<Array<CurveAccountDTO>>
    curveGetAccountDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAccountDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAccountDTO>>>
    curveGetAccountDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAccountDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAccountDTO> | AjaxResponse<Array<CurveAccountDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAccountDTO>>({
            url: '/dapps/curve/AccountDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets accounts.
     * Accounts (historical)
     */
    curveGetAccountsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetAccountsHistoricalRequest): Observable<Array<CurveAccountDTO>>
    curveGetAccountsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetAccountsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAccountDTO>>>
    curveGetAccountsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetAccountsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAccountDTO> | AjaxResponse<Array<CurveAccountDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveAccountDTO>>({
            url: '/dapps/curve/accounts/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets AddLiquidityEventDTOs.
     * AddLiquidityEventDTOs (historical) 🔥
     */
    curveGetAddLiquidityEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAddLiquidityEventDTOsHistoricalRequest): Observable<Array<CurveAddLiquidityEventDTO>>
    curveGetAddLiquidityEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAddLiquidityEventDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAddLiquidityEventDTO>>>
    curveGetAddLiquidityEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAddLiquidityEventDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAddLiquidityEventDTO> | AjaxResponse<Array<CurveAddLiquidityEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAddLiquidityEventDTO>>({
            url: '/dapps/curve/AddLiquidityEventDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets add liquidity events.
     * AddLiquidityEvents (historical)
     */
    curveGetAddLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAddLiquidityEventsHistoricalRequest): Observable<Array<CurveAddLiquidityEventDTO>>
    curveGetAddLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAddLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAddLiquidityEventDTO>>>
    curveGetAddLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAddLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAddLiquidityEventDTO> | AjaxResponse<Array<CurveAddLiquidityEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAddLiquidityEventDTO>>({
            url: '/dapps/curve/addLiquidityEvents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets AdminFeeChangeLogDTOs.
     * AdminFeeChangeLogDTOs (historical) 🔥
     */
    curveGetAdminFeeChangeLogDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAdminFeeChangeLogDTOsHistoricalRequest): Observable<Array<CurveAdminFeeChangeLogDTO>>
    curveGetAdminFeeChangeLogDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAdminFeeChangeLogDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAdminFeeChangeLogDTO>>>
    curveGetAdminFeeChangeLogDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAdminFeeChangeLogDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAdminFeeChangeLogDTO> | AjaxResponse<Array<CurveAdminFeeChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAdminFeeChangeLogDTO>>({
            url: '/dapps/curve/AdminFeeChangeLogDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets admin fee change logs.
     * AdminFeeChangeLogs (historical)
     */
    curveGetAdminFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAdminFeeChangeLogsHistoricalRequest): Observable<Array<CurveAdminFeeChangeLogDTO>>
    curveGetAdminFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAdminFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAdminFeeChangeLogDTO>>>
    curveGetAdminFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAdminFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAdminFeeChangeLogDTO> | AjaxResponse<Array<CurveAdminFeeChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAdminFeeChangeLogDTO>>({
            url: '/dapps/curve/adminFeeChangeLogs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets AmplificationCoeffChangeLogDTOs.
     * AmplificationCoeffChangeLogDTOs (historical) 🔥
     */
    curveGetAmplificationCoeffChangeLogDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAmplificationCoeffChangeLogDTOsHistoricalRequest): Observable<Array<CurveAmplificationCoeffChangeLogDTO>>
    curveGetAmplificationCoeffChangeLogDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAmplificationCoeffChangeLogDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAmplificationCoeffChangeLogDTO>>>
    curveGetAmplificationCoeffChangeLogDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAmplificationCoeffChangeLogDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAmplificationCoeffChangeLogDTO> | AjaxResponse<Array<CurveAmplificationCoeffChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAmplificationCoeffChangeLogDTO>>({
            url: '/dapps/curve/AmplificationCoeffChangeLogDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets amplification coeff change logs.
     * AmplificationCoeffChangeLogs (historical)
     */
    curveGetAmplificationCoeffChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAmplificationCoeffChangeLogsHistoricalRequest): Observable<Array<CurveAmplificationCoeffChangeLogDTO>>
    curveGetAmplificationCoeffChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAmplificationCoeffChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAmplificationCoeffChangeLogDTO>>>
    curveGetAmplificationCoeffChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAmplificationCoeffChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAmplificationCoeffChangeLogDTO> | AjaxResponse<Array<CurveAmplificationCoeffChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAmplificationCoeffChangeLogDTO>>({
            url: '/dapps/curve/amplificationCoeffChangeLogs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets CoinDTOs.
     * CoinDTOs (historical) 🔥
     */
    curveGetCoinDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetCoinDTOsHistoricalRequest): Observable<Array<CurveCoinDTO>>
    curveGetCoinDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetCoinDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveCoinDTO>>>
    curveGetCoinDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetCoinDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveCoinDTO> | AjaxResponse<Array<CurveCoinDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveCoinDTO>>({
            url: '/dapps/curve/CoinDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets coins.
     * Coins (historical)
     */
    curveGetCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetCoinsHistoricalRequest): Observable<Array<CurveCoinDTO>>
    curveGetCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetCoinsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveCoinDTO>>>
    curveGetCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetCoinsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveCoinDTO> | AjaxResponse<Array<CurveCoinDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveCoinDTO>>({
            url: '/dapps/curve/coins/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets ContractDTOs.
     * ContractDTOs (historical) 🔥
     */
    curveGetContractDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractDTOsHistoricalRequest): Observable<Array<CurveContractDTO>>
    curveGetContractDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveContractDTO>>>
    curveGetContractDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveContractDTO> | AjaxResponse<Array<CurveContractDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveContractDTO>>({
            url: '/dapps/curve/ContractDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets ContractVersionDTOs.
     * ContractVersionDTOs (historical) 🔥
     */
    curveGetContractVersionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractVersionDTOsHistoricalRequest): Observable<Array<CurveContractVersionDTO>>
    curveGetContractVersionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractVersionDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveContractVersionDTO>>>
    curveGetContractVersionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractVersionDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveContractVersionDTO> | AjaxResponse<Array<CurveContractVersionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveContractVersionDTO>>({
            url: '/dapps/curve/ContractVersionDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets contracts.
     * Contracts (historical)
     */
    curveGetContractsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsHistoricalRequest): Observable<Array<CurveContractDTO>>
    curveGetContractsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveContractDTO>>>
    curveGetContractsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveContractDTO> | AjaxResponse<Array<CurveContractDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveContractDTO>>({
            url: '/dapps/curve/contracts/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets contracts versions.
     * ContractsVersions (historical)
     */
    curveGetContractsVersionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsVersionsHistoricalRequest): Observable<Array<CurveContractVersionDTO>>
    curveGetContractsVersionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsVersionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveContractVersionDTO>>>
    curveGetContractsVersionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsVersionsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveContractVersionDTO> | AjaxResponse<Array<CurveContractVersionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveContractVersionDTO>>({
            url: '/dapps/curve/contractsVersions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets DailyVolumeDTOs.
     * DailyVolumeDTOs (historical) 🔥
     */
    curveGetDailyVolumeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetDailyVolumeDTOsHistoricalRequest): Observable<Array<CurveDailyVolumeDTO>>
    curveGetDailyVolumeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetDailyVolumeDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveDailyVolumeDTO>>>
    curveGetDailyVolumeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetDailyVolumeDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveDailyVolumeDTO> | AjaxResponse<Array<CurveDailyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveDailyVolumeDTO>>({
            url: '/dapps/curve/DailyVolumeDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets daily volumes.
     * DailyVolumes (historical)
     */
    curveGetDailyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetDailyVolumesHistoricalRequest): Observable<Array<CurveDailyVolumeDTO>>
    curveGetDailyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetDailyVolumesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveDailyVolumeDTO>>>
    curveGetDailyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetDailyVolumesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveDailyVolumeDTO> | AjaxResponse<Array<CurveDailyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveDailyVolumeDTO>>({
            url: '/dapps/curve/dailyVolumes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets ExchangeDTOs.
     * ExchangeDTOs (historical) 🔥
     */
    curveGetExchangeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetExchangeDTOsHistoricalRequest): Observable<Array<CurveExchangeDTO>>
    curveGetExchangeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetExchangeDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveExchangeDTO>>>
    curveGetExchangeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetExchangeDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveExchangeDTO> | AjaxResponse<Array<CurveExchangeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveExchangeDTO>>({
            url: '/dapps/curve/ExchangeDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets exchanges.
     * Exchanges (historical) 🔥
     */
    curveGetExchangesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetExchangesHistoricalRequest): Observable<Array<CurveExchangeDTO>>
    curveGetExchangesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetExchangesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveExchangeDTO>>>
    curveGetExchangesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetExchangesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveExchangeDTO> | AjaxResponse<Array<CurveExchangeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveExchangeDTO>>({
            url: '/dapps/curve/exchanges/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets FeeChangeLogDTOs.
     * FeeChangeLogDTOs (historical) 🔥
     */
    curveGetFeeChangeLogDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetFeeChangeLogDTOsHistoricalRequest): Observable<Array<CurveFeeChangeLogDTO>>
    curveGetFeeChangeLogDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetFeeChangeLogDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveFeeChangeLogDTO>>>
    curveGetFeeChangeLogDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetFeeChangeLogDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveFeeChangeLogDTO> | AjaxResponse<Array<CurveFeeChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveFeeChangeLogDTO>>({
            url: '/dapps/curve/FeeChangeLogDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets fee change logs.
     * FeeChangeLogs (historical)
     */
    curveGetFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetFeeChangeLogsHistoricalRequest): Observable<Array<CurveFeeChangeLogDTO>>
    curveGetFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveFeeChangeLogDTO>>>
    curveGetFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveFeeChangeLogDTO> | AjaxResponse<Array<CurveFeeChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveFeeChangeLogDTO>>({
            url: '/dapps/curve/feeChangeLogs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets GaugeDTOs.
     * GaugeDTOs (historical) 🔥
     */
    curveGetGaugeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeDTOsHistoricalRequest): Observable<Array<CurveGaugeDTO>>
    curveGetGaugeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeDTO>>>
    curveGetGaugeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeDTO> | AjaxResponse<Array<CurveGaugeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeDTO>>({
            url: '/dapps/curve/GaugeDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets GaugeDepositDTOs.
     * GaugeDepositDTOs (historical) 🔥
     */
    curveGetGaugeDepositDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeDepositDTOsHistoricalRequest): Observable<Array<CurveGaugeDepositDTO>>
    curveGetGaugeDepositDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeDepositDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeDepositDTO>>>
    curveGetGaugeDepositDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeDepositDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeDepositDTO> | AjaxResponse<Array<CurveGaugeDepositDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeDepositDTO>>({
            url: '/dapps/curve/GaugeDepositDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets GaugeLiquidityDTOs.
     * GaugeLiquidityDTOs (historical) 🔥
     */
    curveGetGaugeLiquidityDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeLiquidityDTOsHistoricalRequest): Observable<Array<CurveGaugeLiquidityDTO>>
    curveGetGaugeLiquidityDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeLiquidityDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeLiquidityDTO>>>
    curveGetGaugeLiquidityDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeLiquidityDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeLiquidityDTO> | AjaxResponse<Array<CurveGaugeLiquidityDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeLiquidityDTO>>({
            url: '/dapps/curve/GaugeLiquidityDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets GaugeTotalWeightDTOs.
     * GaugeTotalWeightDTOs (historical) 🔥
     */
    curveGetGaugeTotalWeightDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeTotalWeightDTOsHistoricalRequest): Observable<Array<CurveGaugeTotalWeightDTO>>
    curveGetGaugeTotalWeightDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeTotalWeightDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTotalWeightDTO>>>
    curveGetGaugeTotalWeightDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeTotalWeightDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTotalWeightDTO> | AjaxResponse<Array<CurveGaugeTotalWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeTotalWeightDTO>>({
            url: '/dapps/curve/GaugeTotalWeightDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets GaugeTypeDTOs.
     * GaugeTypeDTOs (historical) 🔥
     */
    curveGetGaugeTypeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeTypeDTOsHistoricalRequest): Observable<Array<CurveGaugeTypeDTO>>
    curveGetGaugeTypeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeTypeDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTypeDTO>>>
    curveGetGaugeTypeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeTypeDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTypeDTO> | AjaxResponse<Array<CurveGaugeTypeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeTypeDTO>>({
            url: '/dapps/curve/GaugeTypeDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets GaugeTypeWeightDTOs.
     * GaugeTypeWeightDTOs (historical) 🔥
     */
    curveGetGaugeTypeWeightDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeTypeWeightDTOsHistoricalRequest): Observable<Array<CurveGaugeTypeWeightDTO>>
    curveGetGaugeTypeWeightDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeTypeWeightDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTypeWeightDTO>>>
    curveGetGaugeTypeWeightDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeTypeWeightDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTypeWeightDTO> | AjaxResponse<Array<CurveGaugeTypeWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeTypeWeightDTO>>({
            url: '/dapps/curve/GaugeTypeWeightDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets GaugeWeightDTOs.
     * GaugeWeightDTOs (historical) 🔥
     */
    curveGetGaugeWeightDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeWeightDTOsHistoricalRequest): Observable<Array<CurveGaugeWeightDTO>>
    curveGetGaugeWeightDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeWeightDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWeightDTO>>>
    curveGetGaugeWeightDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeWeightDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWeightDTO> | AjaxResponse<Array<CurveGaugeWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeWeightDTO>>({
            url: '/dapps/curve/GaugeWeightDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets GaugeWeightVoteDTOs.
     * GaugeWeightVoteDTOs (historical) 🔥
     */
    curveGetGaugeWeightVoteDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeWeightVoteDTOsHistoricalRequest): Observable<Array<CurveGaugeWeightVoteDTO>>
    curveGetGaugeWeightVoteDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeWeightVoteDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWeightVoteDTO>>>
    curveGetGaugeWeightVoteDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeWeightVoteDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWeightVoteDTO> | AjaxResponse<Array<CurveGaugeWeightVoteDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeWeightVoteDTO>>({
            url: '/dapps/curve/GaugeWeightVoteDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets GaugeWithdrawDTOs.
     * GaugeWithdrawDTOs (historical) 🔥
     */
    curveGetGaugeWithdrawDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeWithdrawDTOsHistoricalRequest): Observable<Array<CurveGaugeWithdrawDTO>>
    curveGetGaugeWithdrawDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeWithdrawDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWithdrawDTO>>>
    curveGetGaugeWithdrawDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugeWithdrawDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWithdrawDTO> | AjaxResponse<Array<CurveGaugeWithdrawDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeWithdrawDTO>>({
            url: '/dapps/curve/GaugeWithdrawDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges deposits.
     * GaugesDeposits (historical)
     */
    curveGetGaugesDepositsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesDepositsHistoricalRequest): Observable<Array<CurveGaugeDepositDTO>>
    curveGetGaugesDepositsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesDepositsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeDepositDTO>>>
    curveGetGaugesDepositsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesDepositsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeDepositDTO> | AjaxResponse<Array<CurveGaugeDepositDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeDepositDTO>>({
            url: '/dapps/curve/gaugesDeposits/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges.
     * Gauges (historical)
     */
    curveGetGaugesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugesHistoricalRequest): Observable<Array<CurveGaugeDTO>>
    curveGetGaugesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeDTO>>>
    curveGetGaugesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeDTO> | AjaxResponse<Array<CurveGaugeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeDTO>>({
            url: '/dapps/curve/gauges/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges liquidity.
     * GaugesLiquidity (historical)
     */
    curveGetGaugesLiquidityHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesLiquidityHistoricalRequest): Observable<Array<CurveGaugeLiquidityDTO>>
    curveGetGaugesLiquidityHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesLiquidityHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeLiquidityDTO>>>
    curveGetGaugesLiquidityHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesLiquidityHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeLiquidityDTO> | AjaxResponse<Array<CurveGaugeLiquidityDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeLiquidityDTO>>({
            url: '/dapps/curve/gaugesLiquidity/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges total weights.
     * GaugesTotalWeights (historical)
     */
    curveGetGaugesTotalWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTotalWeightsHistoricalRequest): Observable<Array<CurveGaugeTotalWeightDTO>>
    curveGetGaugesTotalWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTotalWeightsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTotalWeightDTO>>>
    curveGetGaugesTotalWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTotalWeightsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTotalWeightDTO> | AjaxResponse<Array<CurveGaugeTotalWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeTotalWeightDTO>>({
            url: '/dapps/curve/gaugesTotalWeights/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges types.
     * GaugesTypes (historical)
     */
    curveGetGaugesTypesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesHistoricalRequest): Observable<Array<CurveGaugeTypeDTO>>
    curveGetGaugesTypesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTypeDTO>>>
    curveGetGaugesTypesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTypeDTO> | AjaxResponse<Array<CurveGaugeTypeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeTypeDTO>>({
            url: '/dapps/curve/gaugesTypes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges types weights.
     * GaugesTypesWeights (historical)
     */
    curveGetGaugesTypesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesWeightsHistoricalRequest): Observable<Array<CurveGaugeTypeWeightDTO>>
    curveGetGaugesTypesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesWeightsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTypeWeightDTO>>>
    curveGetGaugesTypesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesWeightsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTypeWeightDTO> | AjaxResponse<Array<CurveGaugeTypeWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeTypeWeightDTO>>({
            url: '/dapps/curve/gaugesTypesWeights/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges weights.
     * GaugesWeights (historical)
     */
    curveGetGaugesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsHistoricalRequest): Observable<Array<CurveGaugeWeightDTO>>
    curveGetGaugesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWeightDTO>>>
    curveGetGaugesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWeightDTO> | AjaxResponse<Array<CurveGaugeWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeWeightDTO>>({
            url: '/dapps/curve/gaugesWeights/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges weights votes.
     * GaugesWeightsVotes (historical)
     */
    curveGetGaugesWeightsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsVotesHistoricalRequest): Observable<Array<CurveGaugeWeightVoteDTO>>
    curveGetGaugesWeightsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsVotesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWeightVoteDTO>>>
    curveGetGaugesWeightsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsVotesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWeightVoteDTO> | AjaxResponse<Array<CurveGaugeWeightVoteDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeWeightVoteDTO>>({
            url: '/dapps/curve/gaugesWeightsVotes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges withdraws.
     * GaugesWithdraw (historical)
     */
    curveGetGaugesWithdrawHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWithdrawHistoricalRequest): Observable<Array<CurveGaugeWithdrawDTO>>
    curveGetGaugesWithdrawHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWithdrawHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWithdrawDTO>>>
    curveGetGaugesWithdrawHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWithdrawHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWithdrawDTO> | AjaxResponse<Array<CurveGaugeWithdrawDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeWithdrawDTO>>({
            url: '/dapps/curve/gaugesWithdraws/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets HourlyVolumeDTOs.
     * HourlyVolumeDTOs (historical) 🔥
     */
    curveGetHourlyVolumeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetHourlyVolumeDTOsHistoricalRequest): Observable<Array<CurveHourlyVolumeDTO>>
    curveGetHourlyVolumeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetHourlyVolumeDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveHourlyVolumeDTO>>>
    curveGetHourlyVolumeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetHourlyVolumeDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveHourlyVolumeDTO> | AjaxResponse<Array<CurveHourlyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveHourlyVolumeDTO>>({
            url: '/dapps/curve/HourlyVolumeDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets hourly volumes.
     * HourlyVolumes (historical)
     */
    curveGetHourlyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetHourlyVolumesHistoricalRequest): Observable<Array<CurveHourlyVolumeDTO>>
    curveGetHourlyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetHourlyVolumesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveHourlyVolumeDTO>>>
    curveGetHourlyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetHourlyVolumesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveHourlyVolumeDTO> | AjaxResponse<Array<CurveHourlyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveHourlyVolumeDTO>>({
            url: '/dapps/curve/hourlyVolumes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets LpTokenDTOs.
     * LpTokenDTOs (historical) 🔥
     */
    curveGetLpTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetLpTokenDTOsHistoricalRequest): Observable<Array<CurveLpTokenDTO>>
    curveGetLpTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetLpTokenDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveLpTokenDTO>>>
    curveGetLpTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetLpTokenDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveLpTokenDTO> | AjaxResponse<Array<CurveLpTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveLpTokenDTO>>({
            url: '/dapps/curve/LpTokenDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets lp tokens.
     * LpTokens (historical)
     */
    curveGetLpTokensHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetLpTokensHistoricalRequest): Observable<Array<CurveLpTokenDTO>>
    curveGetLpTokensHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetLpTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveLpTokenDTO>>>
    curveGetLpTokensHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetLpTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveLpTokenDTO> | AjaxResponse<Array<CurveLpTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveLpTokenDTO>>({
            url: '/dapps/curve/lpTokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PoolDTOs.
     * PoolDTOs (historical) 🔥
     */
    curveGetPoolDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetPoolDTOsHistoricalRequest): Observable<Array<CurvePoolDTO>>
    curveGetPoolDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetPoolDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurvePoolDTO>>>
    curveGetPoolDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetPoolDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurvePoolDTO> | AjaxResponse<Array<CurvePoolDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurvePoolDTO>>({
            url: '/dapps/curve/PoolDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * Pools (historical) 🔥
     */
    curveGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetPoolsHistoricalRequest): Observable<Array<CurvePoolDTO>>
    curveGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetPoolsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurvePoolDTO>>>
    curveGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetPoolsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurvePoolDTO> | AjaxResponse<Array<CurvePoolDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurvePoolDTO>>({
            url: '/dapps/curve/pools/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets ProposalDTOs.
     * ProposalDTOs (historical) 🔥
     */
    curveGetProposalDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetProposalDTOsHistoricalRequest): Observable<Array<CurveProposalDTO>>
    curveGetProposalDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetProposalDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveProposalDTO>>>
    curveGetProposalDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetProposalDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveProposalDTO> | AjaxResponse<Array<CurveProposalDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveProposalDTO>>({
            url: '/dapps/curve/ProposalDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets ProposalVoteDTOs.
     * ProposalVoteDTOs (historical) 🔥
     */
    curveGetProposalVoteDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetProposalVoteDTOsHistoricalRequest): Observable<Array<CurveProposalVoteDTO>>
    curveGetProposalVoteDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetProposalVoteDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveProposalVoteDTO>>>
    curveGetProposalVoteDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetProposalVoteDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveProposalVoteDTO> | AjaxResponse<Array<CurveProposalVoteDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveProposalVoteDTO>>({
            url: '/dapps/curve/ProposalVoteDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets proposals.
     * Proposals (historical)
     */
    curveGetProposalsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsHistoricalRequest): Observable<Array<CurveProposalDTO>>
    curveGetProposalsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveProposalDTO>>>
    curveGetProposalsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveProposalDTO> | AjaxResponse<Array<CurveProposalDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveProposalDTO>>({
            url: '/dapps/curve/proposals/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets proposals votes.
     * ProposalsVotes (historical)
     */
    curveGetProposalsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsVotesHistoricalRequest): Observable<Array<CurveProposalVoteDTO>>
    curveGetProposalsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsVotesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveProposalVoteDTO>>>
    curveGetProposalsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsVotesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveProposalVoteDTO> | AjaxResponse<Array<CurveProposalVoteDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveProposalVoteDTO>>({
            url: '/dapps/curve/proposalsVotes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets RemoveLiquidityEventDTOs.
     * RemoveLiquidityEventDTOs (historical) 🔥
     */
    curveGetRemoveLiquidityEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityEventDTOsHistoricalRequest): Observable<Array<CurveRemoveLiquidityEventDTO>>
    curveGetRemoveLiquidityEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityEventDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveRemoveLiquidityEventDTO>>>
    curveGetRemoveLiquidityEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityEventDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveRemoveLiquidityEventDTO> | AjaxResponse<Array<CurveRemoveLiquidityEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveRemoveLiquidityEventDTO>>({
            url: '/dapps/curve/RemoveLiquidityEventDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets remove liquidity events.
     * RemoveLiquidityEvents (historical)
     */
    curveGetRemoveLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityEventsHistoricalRequest): Observable<Array<CurveRemoveLiquidityEventDTO>>
    curveGetRemoveLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveRemoveLiquidityEventDTO>>>
    curveGetRemoveLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveRemoveLiquidityEventDTO> | AjaxResponse<Array<CurveRemoveLiquidityEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveRemoveLiquidityEventDTO>>({
            url: '/dapps/curve/removeLiquidityEvents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets RemoveLiquidityOneEventDTOs.
     * RemoveLiquidityOneEventDTOs (historical) 🔥
     */
    curveGetRemoveLiquidityOneEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityOneEventDTOsHistoricalRequest): Observable<Array<CurveRemoveLiquidityOneEventDTO>>
    curveGetRemoveLiquidityOneEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityOneEventDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveRemoveLiquidityOneEventDTO>>>
    curveGetRemoveLiquidityOneEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityOneEventDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveRemoveLiquidityOneEventDTO> | AjaxResponse<Array<CurveRemoveLiquidityOneEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveRemoveLiquidityOneEventDTO>>({
            url: '/dapps/curve/RemoveLiquidityOneEventDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets remove liquidity one events.
     * RemoveLiquidityOneEvents (historical)
     */
    curveGetRemoveLiquidityOneEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityOneEventsHistoricalRequest): Observable<Array<CurveRemoveLiquidityOneEventDTO>>
    curveGetRemoveLiquidityOneEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityOneEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveRemoveLiquidityOneEventDTO>>>
    curveGetRemoveLiquidityOneEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityOneEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveRemoveLiquidityOneEventDTO> | AjaxResponse<Array<CurveRemoveLiquidityOneEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveRemoveLiquidityOneEventDTO>>({
            url: '/dapps/curve/removeLiquidityOneEvents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets SystemStateDTOs.
     * SystemStateDTOs (historical) 🔥
     */
    curveGetSystemStateDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetSystemStateDTOsHistoricalRequest): Observable<Array<CurveSystemStateDTO>>
    curveGetSystemStateDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetSystemStateDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveSystemStateDTO>>>
    curveGetSystemStateDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetSystemStateDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveSystemStateDTO> | AjaxResponse<Array<CurveSystemStateDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveSystemStateDTO>>({
            url: '/dapps/curve/SystemStateDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets system states.
     * SystemStates (historical)
     */
    curveGetSystemStatesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetSystemStatesHistoricalRequest): Observable<Array<CurveSystemStateDTO>>
    curveGetSystemStatesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetSystemStatesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveSystemStateDTO>>>
    curveGetSystemStatesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetSystemStatesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveSystemStateDTO> | AjaxResponse<Array<CurveSystemStateDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveSystemStateDTO>>({
            url: '/dapps/curve/systemStates/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TokenDTOs.
     * TokenDTOs (historical) 🔥
     */
    curveGetTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTokenDTOsHistoricalRequest): Observable<Array<CurveTokenDTO>>
    curveGetTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTokenDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveTokenDTO>>>
    curveGetTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTokenDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveTokenDTO> | AjaxResponse<Array<CurveTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveTokenDTO>>({
            url: '/dapps/curve/TokenDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (historical) 🔥
     */
    curveGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: CurveGetTokensHistoricalRequest): Observable<Array<CurveTokenDTO>>
    curveGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: CurveGetTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveTokenDTO>>>
    curveGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: CurveGetTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveTokenDTO> | AjaxResponse<Array<CurveTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<CurveTokenDTO>>({
            url: '/dapps/curve/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TransferOwnershipEventDTOs.
     * TransferOwnershipEventDTOs (historical) 🔥
     */
    curveGetTransferOwnershipEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTransferOwnershipEventDTOsHistoricalRequest): Observable<Array<CurveTransferOwnershipEventDTO>>
    curveGetTransferOwnershipEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTransferOwnershipEventDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveTransferOwnershipEventDTO>>>
    curveGetTransferOwnershipEventDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTransferOwnershipEventDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveTransferOwnershipEventDTO> | AjaxResponse<Array<CurveTransferOwnershipEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveTransferOwnershipEventDTO>>({
            url: '/dapps/curve/TransferOwnershipEventDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets transfer ownership events.
     * TransferOwnershipEvents (historical)
     */
    curveGetTransferOwnershipEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTransferOwnershipEventsHistoricalRequest): Observable<Array<CurveTransferOwnershipEventDTO>>
    curveGetTransferOwnershipEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTransferOwnershipEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveTransferOwnershipEventDTO>>>
    curveGetTransferOwnershipEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTransferOwnershipEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveTransferOwnershipEventDTO> | AjaxResponse<Array<CurveTransferOwnershipEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveTransferOwnershipEventDTO>>({
            url: '/dapps/curve/transferOwnershipEvents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets UnderlyingCoinDTOs.
     * UnderlyingCoinDTOs (historical) 🔥
     */
    curveGetUnderlyingCoinDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetUnderlyingCoinDTOsHistoricalRequest): Observable<Array<CurveUnderlyingCoinDTO>>
    curveGetUnderlyingCoinDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetUnderlyingCoinDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveUnderlyingCoinDTO>>>
    curveGetUnderlyingCoinDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetUnderlyingCoinDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveUnderlyingCoinDTO> | AjaxResponse<Array<CurveUnderlyingCoinDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveUnderlyingCoinDTO>>({
            url: '/dapps/curve/UnderlyingCoinDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets underlying coins.
     * UnderlyingCoins (historical)
     */
    curveGetUnderlyingCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetUnderlyingCoinsHistoricalRequest): Observable<Array<CurveUnderlyingCoinDTO>>
    curveGetUnderlyingCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetUnderlyingCoinsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveUnderlyingCoinDTO>>>
    curveGetUnderlyingCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetUnderlyingCoinsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveUnderlyingCoinDTO> | AjaxResponse<Array<CurveUnderlyingCoinDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveUnderlyingCoinDTO>>({
            url: '/dapps/curve/underlyingCoins/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets VotingAppDTOs.
     * VotingAppDTOs (historical) 🔥
     */
    curveGetVotingAppDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetVotingAppDTOsHistoricalRequest): Observable<Array<CurveVotingAppDTO>>
    curveGetVotingAppDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetVotingAppDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveVotingAppDTO>>>
    curveGetVotingAppDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetVotingAppDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveVotingAppDTO> | AjaxResponse<Array<CurveVotingAppDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveVotingAppDTO>>({
            url: '/dapps/curve/VotingAppDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets voting apps.
     * VotingApps (historical)
     */
    curveGetVotingAppsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetVotingAppsHistoricalRequest): Observable<Array<CurveVotingAppDTO>>
    curveGetVotingAppsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetVotingAppsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveVotingAppDTO>>>
    curveGetVotingAppsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetVotingAppsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveVotingAppDTO> | AjaxResponse<Array<CurveVotingAppDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveVotingAppDTO>>({
            url: '/dapps/curve/votingApps/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets WeeklyVolumeDTOs.
     * WeeklyVolumeDTOs (historical) 🔥
     */
    curveGetWeeklyVolumeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetWeeklyVolumeDTOsHistoricalRequest): Observable<Array<CurveWeeklyVolumeDTO>>
    curveGetWeeklyVolumeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetWeeklyVolumeDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveWeeklyVolumeDTO>>>
    curveGetWeeklyVolumeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetWeeklyVolumeDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveWeeklyVolumeDTO> | AjaxResponse<Array<CurveWeeklyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveWeeklyVolumeDTO>>({
            url: '/dapps/curve/WeeklyVolumeDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets weekly volumes.
     * WeeklyVolumes (historical)
     */
    curveGetWeeklyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetWeeklyVolumesHistoricalRequest): Observable<Array<CurveWeeklyVolumeDTO>>
    curveGetWeeklyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetWeeklyVolumesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveWeeklyVolumeDTO>>>
    curveGetWeeklyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetWeeklyVolumesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveWeeklyVolumeDTO> | AjaxResponse<Array<CurveWeeklyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveWeeklyVolumeDTO>>({
            url: '/dapps/curve/weeklyVolumes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
