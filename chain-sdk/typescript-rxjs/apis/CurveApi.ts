// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    CurveAccountDTO,
    CurveAddLiquidityEventDTO,
    CurveAdminFeeChangeLogDTO,
    CurveAmplificationCoeffChangeLogDTO,
    CurveCoinDTO,
    CurveContractDTO,
    CurveContractVersionDTO,
    CurveDailyVolumeDTO,
    CurveExchangeDTO,
    CurveFeeChangeLogDTO,
    CurveGaugeDTO,
    CurveGaugeDepositDTO,
    CurveGaugeLiquidityDTO,
    CurveGaugeTotalWeightDTO,
    CurveGaugeTypeDTO,
    CurveGaugeTypeWeightDTO,
    CurveGaugeWeightDTO,
    CurveGaugeWeightVoteDTO,
    CurveGaugeWithdrawDTO,
    CurveHourlyVolumeDTO,
    CurveLpTokenDTO,
    CurvePoolDTO,
    CurveProposalDTO,
    CurveProposalVoteDTO,
    CurveRemoveLiquidityEventDTO,
    CurveRemoveLiquidityOneEventDTO,
    CurveSystemStateDTO,
    CurveTokenDTO,
    CurveTransferOwnershipEventDTO,
    CurveUnderlyingCoinDTO,
    CurveVotingAppDTO,
    CurveWeeklyVolumeDTO,
} from '../models';

export interface CurveGetAccountsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    address?: string;
}

export interface CurveGetAddLiquidityEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetAdminFeeChangeLogsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetAmplificationCoeffChangeLogsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetCoinsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetContractVersionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    address?: string;
}

export interface CurveGetContractsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface CurveGetDailyVolumesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetExchangesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetFeeChangeLogsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetGaugeDepositsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface CurveGetGaugeLiquiditysHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    user?: string;
}

export interface CurveGetGaugeTotalWeightsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface CurveGetGaugeTypeWeightsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface CurveGetGaugeTypesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    name?: string;
}

export interface CurveGetGaugeWeightVotesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    user?: string;
}

export interface CurveGetGaugeWeightsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface CurveGetGaugeWithdrawsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface CurveGetGaugesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    address?: string;
    pool?: string;
}

export interface CurveGetHourlyVolumesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetLpTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    address?: string;
    name?: string;
    symbol?: string;
    pool?: string;
}

export interface CurveGetPoolsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    name?: string;
}

export interface CurveGetProposalVotesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface CurveGetProposalsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface CurveGetRemoveLiquidityEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetRemoveLiquidityOneEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetSystemStatesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface CurveGetTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    address?: string;
    name?: string;
    symbol?: string;
}

export interface CurveGetTransferOwnershipEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetUnderlyingCoinsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

export interface CurveGetVotingAppsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    address?: string;
}

export interface CurveGetWeeklyVolumesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pool?: string;
}

/**
 * no description
 */
export class CurveApi extends BaseAPI {

    /**
     * Gets accounts.
     * Accounts (historical) ðŸ”¥
     */
    curveGetAccountsHistorical({ startBlock, endBlock, startDate, endDate, id, address }: CurveGetAccountsHistoricalRequest): Observable<Array<CurveAccountDTO>>
    curveGetAccountsHistorical({ startBlock, endBlock, startDate, endDate, id, address }: CurveGetAccountsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAccountDTO>>>
    curveGetAccountsHistorical({ startBlock, endBlock, startDate, endDate, id, address }: CurveGetAccountsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAccountDTO> | AjaxResponse<Array<CurveAccountDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (address != null) { query['address'] = address; }

        return this.request<Array<CurveAccountDTO>>({
            url: '/dapps/curve/accounts/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets addliquidityevents.
     * AddLiquidityEvents (historical) ðŸ”¥
     */
    curveGetAddLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetAddLiquidityEventsHistoricalRequest): Observable<Array<CurveAddLiquidityEventDTO>>
    curveGetAddLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetAddLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAddLiquidityEventDTO>>>
    curveGetAddLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetAddLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAddLiquidityEventDTO> | AjaxResponse<Array<CurveAddLiquidityEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveAddLiquidityEventDTO>>({
            url: '/dapps/curve/addliquidityevents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets adminfeechangelogs.
     * AdminFeeChangeLogs (historical) ðŸ”¥
     */
    curveGetAdminFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetAdminFeeChangeLogsHistoricalRequest): Observable<Array<CurveAdminFeeChangeLogDTO>>
    curveGetAdminFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetAdminFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAdminFeeChangeLogDTO>>>
    curveGetAdminFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetAdminFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAdminFeeChangeLogDTO> | AjaxResponse<Array<CurveAdminFeeChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveAdminFeeChangeLogDTO>>({
            url: '/dapps/curve/adminfeechangelogs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets amplificationcoeffchangelogs.
     * AmplificationCoeffChangeLogs (historical) ðŸ”¥
     */
    curveGetAmplificationCoeffChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetAmplificationCoeffChangeLogsHistoricalRequest): Observable<Array<CurveAmplificationCoeffChangeLogDTO>>
    curveGetAmplificationCoeffChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetAmplificationCoeffChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAmplificationCoeffChangeLogDTO>>>
    curveGetAmplificationCoeffChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetAmplificationCoeffChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAmplificationCoeffChangeLogDTO> | AjaxResponse<Array<CurveAmplificationCoeffChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveAmplificationCoeffChangeLogDTO>>({
            url: '/dapps/curve/amplificationcoeffchangelogs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets coins.
     * Coins (historical) ðŸ”¥
     */
    curveGetCoinsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetCoinsHistoricalRequest): Observable<Array<CurveCoinDTO>>
    curveGetCoinsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetCoinsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveCoinDTO>>>
    curveGetCoinsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetCoinsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveCoinDTO> | AjaxResponse<Array<CurveCoinDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveCoinDTO>>({
            url: '/dapps/curve/coins/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets contractversions.
     * ContractVersions (historical) ðŸ”¥
     */
    curveGetContractVersionsHistorical({ startBlock, endBlock, startDate, endDate, id, address }: CurveGetContractVersionsHistoricalRequest): Observable<Array<CurveContractVersionDTO>>
    curveGetContractVersionsHistorical({ startBlock, endBlock, startDate, endDate, id, address }: CurveGetContractVersionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveContractVersionDTO>>>
    curveGetContractVersionsHistorical({ startBlock, endBlock, startDate, endDate, id, address }: CurveGetContractVersionsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveContractVersionDTO> | AjaxResponse<Array<CurveContractVersionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (address != null) { query['address'] = address; }

        return this.request<Array<CurveContractVersionDTO>>({
            url: '/dapps/curve/contractversions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets contracts.
     * Contracts (historical) ðŸ”¥
     */
    curveGetContractsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetContractsHistoricalRequest): Observable<Array<CurveContractDTO>>
    curveGetContractsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetContractsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveContractDTO>>>
    curveGetContractsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetContractsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveContractDTO> | AjaxResponse<Array<CurveContractDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<CurveContractDTO>>({
            url: '/dapps/curve/contracts/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets dailyvolumes.
     * DailyVolumes (historical) ðŸ”¥
     */
    curveGetDailyVolumesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetDailyVolumesHistoricalRequest): Observable<Array<CurveDailyVolumeDTO>>
    curveGetDailyVolumesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetDailyVolumesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveDailyVolumeDTO>>>
    curveGetDailyVolumesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetDailyVolumesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveDailyVolumeDTO> | AjaxResponse<Array<CurveDailyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveDailyVolumeDTO>>({
            url: '/dapps/curve/dailyvolumes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets exchanges.
     * Exchanges (historical) ðŸ”¥
     */
    curveGetExchangesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetExchangesHistoricalRequest): Observable<Array<CurveExchangeDTO>>
    curveGetExchangesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetExchangesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveExchangeDTO>>>
    curveGetExchangesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetExchangesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveExchangeDTO> | AjaxResponse<Array<CurveExchangeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveExchangeDTO>>({
            url: '/dapps/curve/exchanges/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets feechangelogs.
     * FeeChangeLogs (historical) ðŸ”¥
     */
    curveGetFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetFeeChangeLogsHistoricalRequest): Observable<Array<CurveFeeChangeLogDTO>>
    curveGetFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveFeeChangeLogDTO>>>
    curveGetFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveFeeChangeLogDTO> | AjaxResponse<Array<CurveFeeChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveFeeChangeLogDTO>>({
            url: '/dapps/curve/feechangelogs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gaugedeposits.
     * GaugeDeposits (historical) ðŸ”¥
     */
    curveGetGaugeDepositsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeDepositsHistoricalRequest): Observable<Array<CurveGaugeDepositDTO>>
    curveGetGaugeDepositsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeDepositsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeDepositDTO>>>
    curveGetGaugeDepositsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeDepositsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeDepositDTO> | AjaxResponse<Array<CurveGaugeDepositDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<CurveGaugeDepositDTO>>({
            url: '/dapps/curve/gaugedeposits/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gaugeliquiditys.
     * GaugeLiquiditys (historical) ðŸ”¥
     */
    curveGetGaugeLiquiditysHistorical({ startBlock, endBlock, startDate, endDate, id, user }: CurveGetGaugeLiquiditysHistoricalRequest): Observable<Array<CurveGaugeLiquidityDTO>>
    curveGetGaugeLiquiditysHistorical({ startBlock, endBlock, startDate, endDate, id, user }: CurveGetGaugeLiquiditysHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeLiquidityDTO>>>
    curveGetGaugeLiquiditysHistorical({ startBlock, endBlock, startDate, endDate, id, user }: CurveGetGaugeLiquiditysHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeLiquidityDTO> | AjaxResponse<Array<CurveGaugeLiquidityDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (user != null) { query['user'] = user; }

        return this.request<Array<CurveGaugeLiquidityDTO>>({
            url: '/dapps/curve/gaugeliquiditys/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gaugetotalweights.
     * GaugeTotalWeights (historical) ðŸ”¥
     */
    curveGetGaugeTotalWeightsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeTotalWeightsHistoricalRequest): Observable<Array<CurveGaugeTotalWeightDTO>>
    curveGetGaugeTotalWeightsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeTotalWeightsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTotalWeightDTO>>>
    curveGetGaugeTotalWeightsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeTotalWeightsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTotalWeightDTO> | AjaxResponse<Array<CurveGaugeTotalWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<CurveGaugeTotalWeightDTO>>({
            url: '/dapps/curve/gaugetotalweights/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gaugetypeweights.
     * GaugeTypeWeights (historical) ðŸ”¥
     */
    curveGetGaugeTypeWeightsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeTypeWeightsHistoricalRequest): Observable<Array<CurveGaugeTypeWeightDTO>>
    curveGetGaugeTypeWeightsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeTypeWeightsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTypeWeightDTO>>>
    curveGetGaugeTypeWeightsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeTypeWeightsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTypeWeightDTO> | AjaxResponse<Array<CurveGaugeTypeWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<CurveGaugeTypeWeightDTO>>({
            url: '/dapps/curve/gaugetypeweights/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gaugetypes.
     * GaugeTypes (historical) ðŸ”¥
     */
    curveGetGaugeTypesHistorical({ startBlock, endBlock, startDate, endDate, id, name }: CurveGetGaugeTypesHistoricalRequest): Observable<Array<CurveGaugeTypeDTO>>
    curveGetGaugeTypesHistorical({ startBlock, endBlock, startDate, endDate, id, name }: CurveGetGaugeTypesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTypeDTO>>>
    curveGetGaugeTypesHistorical({ startBlock, endBlock, startDate, endDate, id, name }: CurveGetGaugeTypesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTypeDTO> | AjaxResponse<Array<CurveGaugeTypeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (name != null) { query['name'] = name; }

        return this.request<Array<CurveGaugeTypeDTO>>({
            url: '/dapps/curve/gaugetypes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gaugeweightvotes.
     * GaugeWeightVotes (historical) ðŸ”¥
     */
    curveGetGaugeWeightVotesHistorical({ startBlock, endBlock, startDate, endDate, id, user }: CurveGetGaugeWeightVotesHistoricalRequest): Observable<Array<CurveGaugeWeightVoteDTO>>
    curveGetGaugeWeightVotesHistorical({ startBlock, endBlock, startDate, endDate, id, user }: CurveGetGaugeWeightVotesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWeightVoteDTO>>>
    curveGetGaugeWeightVotesHistorical({ startBlock, endBlock, startDate, endDate, id, user }: CurveGetGaugeWeightVotesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWeightVoteDTO> | AjaxResponse<Array<CurveGaugeWeightVoteDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (user != null) { query['user'] = user; }

        return this.request<Array<CurveGaugeWeightVoteDTO>>({
            url: '/dapps/curve/gaugeweightvotes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gaugeweights.
     * GaugeWeights (historical) ðŸ”¥
     */
    curveGetGaugeWeightsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeWeightsHistoricalRequest): Observable<Array<CurveGaugeWeightDTO>>
    curveGetGaugeWeightsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeWeightsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWeightDTO>>>
    curveGetGaugeWeightsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeWeightsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWeightDTO> | AjaxResponse<Array<CurveGaugeWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<CurveGaugeWeightDTO>>({
            url: '/dapps/curve/gaugeweights/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gaugewithdraws.
     * GaugeWithdraws (historical) ðŸ”¥
     */
    curveGetGaugeWithdrawsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeWithdrawsHistoricalRequest): Observable<Array<CurveGaugeWithdrawDTO>>
    curveGetGaugeWithdrawsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeWithdrawsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWithdrawDTO>>>
    curveGetGaugeWithdrawsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetGaugeWithdrawsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWithdrawDTO> | AjaxResponse<Array<CurveGaugeWithdrawDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<CurveGaugeWithdrawDTO>>({
            url: '/dapps/curve/gaugewithdraws/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges.
     * Gauges (historical) ðŸ”¥
     */
    curveGetGaugesHistorical({ startBlock, endBlock, startDate, endDate, id, address, pool }: CurveGetGaugesHistoricalRequest): Observable<Array<CurveGaugeDTO>>
    curveGetGaugesHistorical({ startBlock, endBlock, startDate, endDate, id, address, pool }: CurveGetGaugesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeDTO>>>
    curveGetGaugesHistorical({ startBlock, endBlock, startDate, endDate, id, address, pool }: CurveGetGaugesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeDTO> | AjaxResponse<Array<CurveGaugeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (address != null) { query['address'] = address; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveGaugeDTO>>({
            url: '/dapps/curve/gauges/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets hourlyvolumes.
     * HourlyVolumes (historical) ðŸ”¥
     */
    curveGetHourlyVolumesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetHourlyVolumesHistoricalRequest): Observable<Array<CurveHourlyVolumeDTO>>
    curveGetHourlyVolumesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetHourlyVolumesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveHourlyVolumeDTO>>>
    curveGetHourlyVolumesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetHourlyVolumesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveHourlyVolumeDTO> | AjaxResponse<Array<CurveHourlyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveHourlyVolumeDTO>>({
            url: '/dapps/curve/hourlyvolumes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets lptokens.
     * LpTokens (historical) ðŸ”¥
     */
    curveGetLpTokensHistorical({ startBlock, endBlock, startDate, endDate, id, address, name, symbol, pool }: CurveGetLpTokensHistoricalRequest): Observable<Array<CurveLpTokenDTO>>
    curveGetLpTokensHistorical({ startBlock, endBlock, startDate, endDate, id, address, name, symbol, pool }: CurveGetLpTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveLpTokenDTO>>>
    curveGetLpTokensHistorical({ startBlock, endBlock, startDate, endDate, id, address, name, symbol, pool }: CurveGetLpTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveLpTokenDTO> | AjaxResponse<Array<CurveLpTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (address != null) { query['address'] = address; }
        if (name != null) { query['name'] = name; }
        if (symbol != null) { query['symbol'] = symbol; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveLpTokenDTO>>({
            url: '/dapps/curve/lptokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * Pools (historical) ðŸ”¥
     */
    curveGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, id, name }: CurveGetPoolsHistoricalRequest): Observable<Array<CurvePoolDTO>>
    curveGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, id, name }: CurveGetPoolsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurvePoolDTO>>>
    curveGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, id, name }: CurveGetPoolsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurvePoolDTO> | AjaxResponse<Array<CurvePoolDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (name != null) { query['name'] = name; }

        return this.request<Array<CurvePoolDTO>>({
            url: '/dapps/curve/pools/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets proposalvotes.
     * ProposalVotes (historical) ðŸ”¥
     */
    curveGetProposalVotesHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetProposalVotesHistoricalRequest): Observable<Array<CurveProposalVoteDTO>>
    curveGetProposalVotesHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetProposalVotesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveProposalVoteDTO>>>
    curveGetProposalVotesHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetProposalVotesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveProposalVoteDTO> | AjaxResponse<Array<CurveProposalVoteDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<CurveProposalVoteDTO>>({
            url: '/dapps/curve/proposalvotes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets proposals.
     * Proposals (historical) ðŸ”¥
     */
    curveGetProposalsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetProposalsHistoricalRequest): Observable<Array<CurveProposalDTO>>
    curveGetProposalsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetProposalsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveProposalDTO>>>
    curveGetProposalsHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetProposalsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveProposalDTO> | AjaxResponse<Array<CurveProposalDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<CurveProposalDTO>>({
            url: '/dapps/curve/proposals/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets removeliquidityevents.
     * RemoveLiquidityEvents (historical) ðŸ”¥
     */
    curveGetRemoveLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetRemoveLiquidityEventsHistoricalRequest): Observable<Array<CurveRemoveLiquidityEventDTO>>
    curveGetRemoveLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetRemoveLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveRemoveLiquidityEventDTO>>>
    curveGetRemoveLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetRemoveLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveRemoveLiquidityEventDTO> | AjaxResponse<Array<CurveRemoveLiquidityEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveRemoveLiquidityEventDTO>>({
            url: '/dapps/curve/removeliquidityevents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets removeliquidityoneevents.
     * RemoveLiquidityOneEvents (historical) ðŸ”¥
     */
    curveGetRemoveLiquidityOneEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetRemoveLiquidityOneEventsHistoricalRequest): Observable<Array<CurveRemoveLiquidityOneEventDTO>>
    curveGetRemoveLiquidityOneEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetRemoveLiquidityOneEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveRemoveLiquidityOneEventDTO>>>
    curveGetRemoveLiquidityOneEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetRemoveLiquidityOneEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveRemoveLiquidityOneEventDTO> | AjaxResponse<Array<CurveRemoveLiquidityOneEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveRemoveLiquidityOneEventDTO>>({
            url: '/dapps/curve/removeliquidityoneevents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets systemstates.
     * SystemStates (historical) ðŸ”¥
     */
    curveGetSystemStatesHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetSystemStatesHistoricalRequest): Observable<Array<CurveSystemStateDTO>>
    curveGetSystemStatesHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetSystemStatesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveSystemStateDTO>>>
    curveGetSystemStatesHistorical({ startBlock, endBlock, startDate, endDate, id }: CurveGetSystemStatesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveSystemStateDTO> | AjaxResponse<Array<CurveSystemStateDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<CurveSystemStateDTO>>({
            url: '/dapps/curve/systemstates/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (historical) ðŸ”¥
     */
    curveGetTokensHistorical({ startBlock, endBlock, startDate, endDate, id, address, name, symbol }: CurveGetTokensHistoricalRequest): Observable<Array<CurveTokenDTO>>
    curveGetTokensHistorical({ startBlock, endBlock, startDate, endDate, id, address, name, symbol }: CurveGetTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveTokenDTO>>>
    curveGetTokensHistorical({ startBlock, endBlock, startDate, endDate, id, address, name, symbol }: CurveGetTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveTokenDTO> | AjaxResponse<Array<CurveTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (address != null) { query['address'] = address; }
        if (name != null) { query['name'] = name; }
        if (symbol != null) { query['symbol'] = symbol; }

        return this.request<Array<CurveTokenDTO>>({
            url: '/dapps/curve/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets transferownershipevents.
     * TransferOwnershipEvents (historical) ðŸ”¥
     */
    curveGetTransferOwnershipEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetTransferOwnershipEventsHistoricalRequest): Observable<Array<CurveTransferOwnershipEventDTO>>
    curveGetTransferOwnershipEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetTransferOwnershipEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveTransferOwnershipEventDTO>>>
    curveGetTransferOwnershipEventsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetTransferOwnershipEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveTransferOwnershipEventDTO> | AjaxResponse<Array<CurveTransferOwnershipEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveTransferOwnershipEventDTO>>({
            url: '/dapps/curve/transferownershipevents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets underlyingcoins.
     * UnderlyingCoins (historical) ðŸ”¥
     */
    curveGetUnderlyingCoinsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetUnderlyingCoinsHistoricalRequest): Observable<Array<CurveUnderlyingCoinDTO>>
    curveGetUnderlyingCoinsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetUnderlyingCoinsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveUnderlyingCoinDTO>>>
    curveGetUnderlyingCoinsHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetUnderlyingCoinsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveUnderlyingCoinDTO> | AjaxResponse<Array<CurveUnderlyingCoinDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveUnderlyingCoinDTO>>({
            url: '/dapps/curve/underlyingcoins/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets votingapps.
     * VotingApps (historical) ðŸ”¥
     */
    curveGetVotingAppsHistorical({ startBlock, endBlock, startDate, endDate, id, address }: CurveGetVotingAppsHistoricalRequest): Observable<Array<CurveVotingAppDTO>>
    curveGetVotingAppsHistorical({ startBlock, endBlock, startDate, endDate, id, address }: CurveGetVotingAppsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveVotingAppDTO>>>
    curveGetVotingAppsHistorical({ startBlock, endBlock, startDate, endDate, id, address }: CurveGetVotingAppsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveVotingAppDTO> | AjaxResponse<Array<CurveVotingAppDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (address != null) { query['address'] = address; }

        return this.request<Array<CurveVotingAppDTO>>({
            url: '/dapps/curve/votingapps/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets weeklyvolumes.
     * WeeklyVolumes (historical) ðŸ”¥
     */
    curveGetWeeklyVolumesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetWeeklyVolumesHistoricalRequest): Observable<Array<CurveWeeklyVolumeDTO>>
    curveGetWeeklyVolumesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetWeeklyVolumesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveWeeklyVolumeDTO>>>
    curveGetWeeklyVolumesHistorical({ startBlock, endBlock, startDate, endDate, id, pool }: CurveGetWeeklyVolumesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveWeeklyVolumeDTO> | AjaxResponse<Array<CurveWeeklyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pool != null) { query['pool'] = pool; }

        return this.request<Array<CurveWeeklyVolumeDTO>>({
            url: '/dapps/curve/weeklyvolumes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
