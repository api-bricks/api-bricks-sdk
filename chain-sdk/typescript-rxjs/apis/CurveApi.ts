// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    CurveAccountDTO,
    CurveAddLiquidityEventDTO,
    CurveAdminFeeChangeLogDTO,
    CurveAmplificationCoeffChangeLogDTO,
    CurveCoinDTO,
    CurveContractDTO,
    CurveContractVersionDTO,
    CurveDailyVolumeDTO,
    CurveExchangeDTO,
    CurveFeeChangeLogDTO,
    CurveGaugeDTO,
    CurveGaugeDepositDTO,
    CurveGaugeLiquidityDTO,
    CurveGaugeTotalWeightDTO,
    CurveGaugeTypeDTO,
    CurveGaugeTypeWeightDTO,
    CurveGaugeWeightDTO,
    CurveGaugeWeightVoteDTO,
    CurveGaugeWithdrawDTO,
    CurveHourlyVolumeDTO,
    CurveLpTokenDTO,
    CurvePoolDTO,
    CurveProposalDTO,
    CurveProposalVoteDTO,
    CurveRemoveLiquidityEventDTO,
    CurveRemoveLiquidityOneEventDTO,
    CurveSystemStateDTO,
    CurveTokenDTO,
    CurveTransferOwnershipEventDTO,
    CurveUnderlyingCoinDTO,
    CurveVotingAppDTO,
    CurveWeeklyVolumeDTO,
} from '../models';

export interface CurveGetAccountsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetAddLiquidityEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetAdminFeeChangeLogsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetAmplificationCoeffChangeLogsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetCoinsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetContractsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetContractsVersionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetDailyVolumesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetExchangesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetFeeChangeLogsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugesDepositsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetGaugesLiquidityHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesTotalWeightsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesTypesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesTypesWeightsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesWeightsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesWeightsVotesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetGaugesWithdrawHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetHourlyVolumesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetLpTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetPoolsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetProposalsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetProposalsVotesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetRemoveLiquidityEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetRemoveLiquidityOneEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetSystemStatesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface CurveGetTransferOwnershipEventsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetUnderlyingCoinsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface CurveGetVotingAppsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface CurveGetWeeklyVolumesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

/**
 * no description
 */
export class CurveApi extends BaseAPI {

    /**
     * Gets accounts.
     * GetAccounts (historical)
     */
    curveGetAccountsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetAccountsHistoricalRequest): Observable<Array<CurveAccountDTO>>
    curveGetAccountsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetAccountsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAccountDTO>>>
    curveGetAccountsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetAccountsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAccountDTO> | AjaxResponse<Array<CurveAccountDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveAccountDTO>>({
            url: '/dapps/curve/accounts/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets add liquidity events.
     * GetAddLiquidityEvents (historical)
     */
    curveGetAddLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAddLiquidityEventsHistoricalRequest): Observable<Array<CurveAddLiquidityEventDTO>>
    curveGetAddLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAddLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAddLiquidityEventDTO>>>
    curveGetAddLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAddLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAddLiquidityEventDTO> | AjaxResponse<Array<CurveAddLiquidityEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAddLiquidityEventDTO>>({
            url: '/dapps/curve/addLiquidityEvents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets admin fee change logs.
     * GetAdminFeeChangeLogs (historical)
     */
    curveGetAdminFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAdminFeeChangeLogsHistoricalRequest): Observable<Array<CurveAdminFeeChangeLogDTO>>
    curveGetAdminFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAdminFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAdminFeeChangeLogDTO>>>
    curveGetAdminFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAdminFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAdminFeeChangeLogDTO> | AjaxResponse<Array<CurveAdminFeeChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAdminFeeChangeLogDTO>>({
            url: '/dapps/curve/adminFeeChangeLogs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets amplification coeff change logs.
     * GetAmplificationCoeffChangeLogs (historical)
     */
    curveGetAmplificationCoeffChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAmplificationCoeffChangeLogsHistoricalRequest): Observable<Array<CurveAmplificationCoeffChangeLogDTO>>
    curveGetAmplificationCoeffChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAmplificationCoeffChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveAmplificationCoeffChangeLogDTO>>>
    curveGetAmplificationCoeffChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetAmplificationCoeffChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveAmplificationCoeffChangeLogDTO> | AjaxResponse<Array<CurveAmplificationCoeffChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveAmplificationCoeffChangeLogDTO>>({
            url: '/dapps/curve/amplificationCoeffChangeLogs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets coins.
     * GetCoins (historical)
     */
    curveGetCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetCoinsHistoricalRequest): Observable<Array<CurveCoinDTO>>
    curveGetCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetCoinsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveCoinDTO>>>
    curveGetCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetCoinsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveCoinDTO> | AjaxResponse<Array<CurveCoinDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveCoinDTO>>({
            url: '/dapps/curve/coins/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets contracts.
     * GetContracts (historical)
     */
    curveGetContractsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsHistoricalRequest): Observable<Array<CurveContractDTO>>
    curveGetContractsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveContractDTO>>>
    curveGetContractsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveContractDTO> | AjaxResponse<Array<CurveContractDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveContractDTO>>({
            url: '/dapps/curve/contracts/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets contracts versions.
     * GetContractsVersions (historical)
     */
    curveGetContractsVersionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsVersionsHistoricalRequest): Observable<Array<CurveContractVersionDTO>>
    curveGetContractsVersionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsVersionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveContractVersionDTO>>>
    curveGetContractsVersionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetContractsVersionsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveContractVersionDTO> | AjaxResponse<Array<CurveContractVersionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveContractVersionDTO>>({
            url: '/dapps/curve/contractsVersions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets daily volumes.
     * GetDailyVolumes (historical)
     */
    curveGetDailyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetDailyVolumesHistoricalRequest): Observable<Array<CurveDailyVolumeDTO>>
    curveGetDailyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetDailyVolumesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveDailyVolumeDTO>>>
    curveGetDailyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetDailyVolumesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveDailyVolumeDTO> | AjaxResponse<Array<CurveDailyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveDailyVolumeDTO>>({
            url: '/dapps/curve/dailyVolumes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets exchanges.
     * GetExchanges (historical) 🔥
     */
    curveGetExchangesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetExchangesHistoricalRequest): Observable<Array<CurveExchangeDTO>>
    curveGetExchangesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetExchangesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveExchangeDTO>>>
    curveGetExchangesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetExchangesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveExchangeDTO> | AjaxResponse<Array<CurveExchangeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveExchangeDTO>>({
            url: '/dapps/curve/exchanges/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets fee change logs.
     * GetFeeChangeLogs (historical)
     */
    curveGetFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetFeeChangeLogsHistoricalRequest): Observable<Array<CurveFeeChangeLogDTO>>
    curveGetFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveFeeChangeLogDTO>>>
    curveGetFeeChangeLogsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetFeeChangeLogsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveFeeChangeLogDTO> | AjaxResponse<Array<CurveFeeChangeLogDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveFeeChangeLogDTO>>({
            url: '/dapps/curve/feeChangeLogs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges deposits.
     * GetGaugesDeposits (historical)
     */
    curveGetGaugesDepositsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesDepositsHistoricalRequest): Observable<Array<CurveGaugeDepositDTO>>
    curveGetGaugesDepositsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesDepositsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeDepositDTO>>>
    curveGetGaugesDepositsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesDepositsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeDepositDTO> | AjaxResponse<Array<CurveGaugeDepositDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeDepositDTO>>({
            url: '/dapps/curve/gaugesDeposits/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges.
     * GetGauges (historical)
     */
    curveGetGaugesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugesHistoricalRequest): Observable<Array<CurveGaugeDTO>>
    curveGetGaugesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeDTO>>>
    curveGetGaugesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetGaugesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeDTO> | AjaxResponse<Array<CurveGaugeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveGaugeDTO>>({
            url: '/dapps/curve/gauges/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges liquidity.
     * GetGaugesLiquidity (historical)
     */
    curveGetGaugesLiquidityHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesLiquidityHistoricalRequest): Observable<Array<CurveGaugeLiquidityDTO>>
    curveGetGaugesLiquidityHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesLiquidityHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeLiquidityDTO>>>
    curveGetGaugesLiquidityHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesLiquidityHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeLiquidityDTO> | AjaxResponse<Array<CurveGaugeLiquidityDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeLiquidityDTO>>({
            url: '/dapps/curve/gaugesLiquidity/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges total weights.
     * GetGaugesTotalWeights (historical)
     */
    curveGetGaugesTotalWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTotalWeightsHistoricalRequest): Observable<Array<CurveGaugeTotalWeightDTO>>
    curveGetGaugesTotalWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTotalWeightsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTotalWeightDTO>>>
    curveGetGaugesTotalWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTotalWeightsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTotalWeightDTO> | AjaxResponse<Array<CurveGaugeTotalWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeTotalWeightDTO>>({
            url: '/dapps/curve/gaugesTotalWeights/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges types.
     * GetGaugesTypes (historical)
     */
    curveGetGaugesTypesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesHistoricalRequest): Observable<Array<CurveGaugeTypeDTO>>
    curveGetGaugesTypesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTypeDTO>>>
    curveGetGaugesTypesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTypeDTO> | AjaxResponse<Array<CurveGaugeTypeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeTypeDTO>>({
            url: '/dapps/curve/gaugesTypes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges types weights.
     * GetGaugesTypesWeights (historical)
     */
    curveGetGaugesTypesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesWeightsHistoricalRequest): Observable<Array<CurveGaugeTypeWeightDTO>>
    curveGetGaugesTypesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesWeightsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeTypeWeightDTO>>>
    curveGetGaugesTypesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesTypesWeightsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeTypeWeightDTO> | AjaxResponse<Array<CurveGaugeTypeWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeTypeWeightDTO>>({
            url: '/dapps/curve/gaugesTypesWeights/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges weights.
     * GetGaugesWeights (historical)
     */
    curveGetGaugesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsHistoricalRequest): Observable<Array<CurveGaugeWeightDTO>>
    curveGetGaugesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWeightDTO>>>
    curveGetGaugesWeightsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWeightDTO> | AjaxResponse<Array<CurveGaugeWeightDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeWeightDTO>>({
            url: '/dapps/curve/gaugesWeights/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges weights votes.
     * GetGaugesWeightsVotes (historical)
     */
    curveGetGaugesWeightsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsVotesHistoricalRequest): Observable<Array<CurveGaugeWeightVoteDTO>>
    curveGetGaugesWeightsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsVotesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWeightVoteDTO>>>
    curveGetGaugesWeightsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWeightsVotesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWeightVoteDTO> | AjaxResponse<Array<CurveGaugeWeightVoteDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeWeightVoteDTO>>({
            url: '/dapps/curve/gaugesWeightsVotes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets gauges withdraws.
     * GetGaugesWithdraw (historical)
     */
    curveGetGaugesWithdrawHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWithdrawHistoricalRequest): Observable<Array<CurveGaugeWithdrawDTO>>
    curveGetGaugesWithdrawHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWithdrawHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveGaugeWithdrawDTO>>>
    curveGetGaugesWithdrawHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetGaugesWithdrawHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveGaugeWithdrawDTO> | AjaxResponse<Array<CurveGaugeWithdrawDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveGaugeWithdrawDTO>>({
            url: '/dapps/curve/gaugesWithdraws/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets hourly volumes.
     * GetHourlyVolumes (historical)
     */
    curveGetHourlyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetHourlyVolumesHistoricalRequest): Observable<Array<CurveHourlyVolumeDTO>>
    curveGetHourlyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetHourlyVolumesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveHourlyVolumeDTO>>>
    curveGetHourlyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetHourlyVolumesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveHourlyVolumeDTO> | AjaxResponse<Array<CurveHourlyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveHourlyVolumeDTO>>({
            url: '/dapps/curve/hourlyVolumes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets lp tokens.
     * GetLpTokens (historical)
     */
    curveGetLpTokensHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetLpTokensHistoricalRequest): Observable<Array<CurveLpTokenDTO>>
    curveGetLpTokensHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetLpTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveLpTokenDTO>>>
    curveGetLpTokensHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetLpTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveLpTokenDTO> | AjaxResponse<Array<CurveLpTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveLpTokenDTO>>({
            url: '/dapps/curve/lpTokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * GetPools (historical) 🔥
     */
    curveGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetPoolsHistoricalRequest): Observable<Array<CurvePoolDTO>>
    curveGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetPoolsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurvePoolDTO>>>
    curveGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetPoolsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurvePoolDTO> | AjaxResponse<Array<CurvePoolDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurvePoolDTO>>({
            url: '/dapps/curve/pools/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets proposals.
     * GetProposals (historical)
     */
    curveGetProposalsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsHistoricalRequest): Observable<Array<CurveProposalDTO>>
    curveGetProposalsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveProposalDTO>>>
    curveGetProposalsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveProposalDTO> | AjaxResponse<Array<CurveProposalDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveProposalDTO>>({
            url: '/dapps/curve/proposals/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets proposals votes.
     * GetProposalsVotes (historical)
     */
    curveGetProposalsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsVotesHistoricalRequest): Observable<Array<CurveProposalVoteDTO>>
    curveGetProposalsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsVotesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveProposalVoteDTO>>>
    curveGetProposalsVotesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetProposalsVotesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveProposalVoteDTO> | AjaxResponse<Array<CurveProposalVoteDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveProposalVoteDTO>>({
            url: '/dapps/curve/proposalsVotes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets remove liquidity events.
     * GetRemoveLiquidityEvents (historical)
     */
    curveGetRemoveLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityEventsHistoricalRequest): Observable<Array<CurveRemoveLiquidityEventDTO>>
    curveGetRemoveLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveRemoveLiquidityEventDTO>>>
    curveGetRemoveLiquidityEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveRemoveLiquidityEventDTO> | AjaxResponse<Array<CurveRemoveLiquidityEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveRemoveLiquidityEventDTO>>({
            url: '/dapps/curve/removeLiquidityEvents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets remove liquidity one events.
     * GetRemoveLiquidityOneEvents (historical)
     */
    curveGetRemoveLiquidityOneEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityOneEventsHistoricalRequest): Observable<Array<CurveRemoveLiquidityOneEventDTO>>
    curveGetRemoveLiquidityOneEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityOneEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveRemoveLiquidityOneEventDTO>>>
    curveGetRemoveLiquidityOneEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetRemoveLiquidityOneEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveRemoveLiquidityOneEventDTO> | AjaxResponse<Array<CurveRemoveLiquidityOneEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveRemoveLiquidityOneEventDTO>>({
            url: '/dapps/curve/removeLiquidityOneEvents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets system states.
     * GetSystemStates (historical)
     */
    curveGetSystemStatesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetSystemStatesHistoricalRequest): Observable<Array<CurveSystemStateDTO>>
    curveGetSystemStatesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetSystemStatesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveSystemStateDTO>>>
    curveGetSystemStatesHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetSystemStatesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveSystemStateDTO> | AjaxResponse<Array<CurveSystemStateDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveSystemStateDTO>>({
            url: '/dapps/curve/systemStates/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * GetTokens (historical) 🔥
     */
    curveGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: CurveGetTokensHistoricalRequest): Observable<Array<CurveTokenDTO>>
    curveGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: CurveGetTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveTokenDTO>>>
    curveGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: CurveGetTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveTokenDTO> | AjaxResponse<Array<CurveTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<CurveTokenDTO>>({
            url: '/dapps/curve/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets transfer ownership events.
     * GetTransferOwnershipEvents (historical)
     */
    curveGetTransferOwnershipEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTransferOwnershipEventsHistoricalRequest): Observable<Array<CurveTransferOwnershipEventDTO>>
    curveGetTransferOwnershipEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTransferOwnershipEventsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveTransferOwnershipEventDTO>>>
    curveGetTransferOwnershipEventsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetTransferOwnershipEventsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveTransferOwnershipEventDTO> | AjaxResponse<Array<CurveTransferOwnershipEventDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveTransferOwnershipEventDTO>>({
            url: '/dapps/curve/transferOwnershipEvents/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets underlying coins.
     * GetUnderlyingCoins (historical)
     */
    curveGetUnderlyingCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetUnderlyingCoinsHistoricalRequest): Observable<Array<CurveUnderlyingCoinDTO>>
    curveGetUnderlyingCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetUnderlyingCoinsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveUnderlyingCoinDTO>>>
    curveGetUnderlyingCoinsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetUnderlyingCoinsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveUnderlyingCoinDTO> | AjaxResponse<Array<CurveUnderlyingCoinDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveUnderlyingCoinDTO>>({
            url: '/dapps/curve/underlyingCoins/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets voting apps.
     * GetVotingApps (historical)
     */
    curveGetVotingAppsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetVotingAppsHistoricalRequest): Observable<Array<CurveVotingAppDTO>>
    curveGetVotingAppsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetVotingAppsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveVotingAppDTO>>>
    curveGetVotingAppsHistorical({ startBlock, endBlock, startDate, endDate }: CurveGetVotingAppsHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveVotingAppDTO> | AjaxResponse<Array<CurveVotingAppDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<CurveVotingAppDTO>>({
            url: '/dapps/curve/votingApps/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets weekly volumes.
     * GetWeeklyVolumes (historical)
     */
    curveGetWeeklyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetWeeklyVolumesHistoricalRequest): Observable<Array<CurveWeeklyVolumeDTO>>
    curveGetWeeklyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetWeeklyVolumesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<CurveWeeklyVolumeDTO>>>
    curveGetWeeklyVolumesHistorical({ startBlock, endBlock, startDate, endDate, poolId }: CurveGetWeeklyVolumesHistoricalRequest, opts?: OperationOpts): Observable<Array<CurveWeeklyVolumeDTO> | AjaxResponse<Array<CurveWeeklyVolumeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<CurveWeeklyVolumeDTO>>({
            url: '/dapps/curve/weeklyVolumes/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
