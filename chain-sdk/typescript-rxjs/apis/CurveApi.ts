// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';

export interface DappsCurveAccountsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveAddLiquidityEventHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveAdminFeeChangeLogHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveAmplificationCoeffChangeLogHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveCoinsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveContractsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveContractsVersionHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveDailyVolumeHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveFeeChangeLogHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveGaugeDepositHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveGaugeHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveGaugeLiquidityHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveGaugeTotalWeightHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveGaugeTypeHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveGaugeTypeWeightHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveGaugeWeightHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveGaugeWeightVoteHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveGaugeWithdrawHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveHourlyVolumeHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveLpTokenHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurvePoiHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurvePoolsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveProposalsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveProposalsVoteHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveRemoveLiquidityEventHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveRemoveLiquidityOneEventHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveSwapsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveSystemStateHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveTokensHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DappsCurveTransferOwnershipEventHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveUnderlyingCoinHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsCurveVotingAppHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsCurveWeeklyVolumeHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

/**
 * no description
 */
export class CurveApi extends BaseAPI {

    /**
     */
    dappsCurveAccountsHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveAccountsHistoricalGetRequest): Observable<void>
    dappsCurveAccountsHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveAccountsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveAccountsHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveAccountsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/accounts/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveAddLiquidityEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveAddLiquidityEventHistoricalGetRequest): Observable<void>
    dappsCurveAddLiquidityEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveAddLiquidityEventHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveAddLiquidityEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveAddLiquidityEventHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/addLiquidityEvent/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveAdminFeeChangeLogHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveAdminFeeChangeLogHistoricalGetRequest): Observable<void>
    dappsCurveAdminFeeChangeLogHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveAdminFeeChangeLogHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveAdminFeeChangeLogHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveAdminFeeChangeLogHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/adminFeeChangeLog/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveAmplificationCoeffChangeLogHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveAmplificationCoeffChangeLogHistoricalGetRequest): Observable<void>
    dappsCurveAmplificationCoeffChangeLogHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveAmplificationCoeffChangeLogHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveAmplificationCoeffChangeLogHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveAmplificationCoeffChangeLogHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/amplificationCoeffChangeLog/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveCoinsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveCoinsHistoricalGetRequest): Observable<void>
    dappsCurveCoinsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveCoinsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveCoinsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveCoinsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/coins/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveContractsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveContractsHistoricalGetRequest): Observable<void>
    dappsCurveContractsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveContractsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveContractsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveContractsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/contracts/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveContractsVersionHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveContractsVersionHistoricalGetRequest): Observable<void>
    dappsCurveContractsVersionHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveContractsVersionHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveContractsVersionHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveContractsVersionHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/contractsVersion/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveDailyVolumeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveDailyVolumeHistoricalGetRequest): Observable<void>
    dappsCurveDailyVolumeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveDailyVolumeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveDailyVolumeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveDailyVolumeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/dailyVolume/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveFeeChangeLogHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveFeeChangeLogHistoricalGetRequest): Observable<void>
    dappsCurveFeeChangeLogHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveFeeChangeLogHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveFeeChangeLogHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveFeeChangeLogHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/feeChangeLog/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveGaugeDepositHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeDepositHistoricalGetRequest): Observable<void>
    dappsCurveGaugeDepositHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeDepositHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveGaugeDepositHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeDepositHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/gaugeDeposit/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveGaugeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveGaugeHistoricalGetRequest): Observable<void>
    dappsCurveGaugeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveGaugeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveGaugeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveGaugeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/gauge/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveGaugeLiquidityHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeLiquidityHistoricalGetRequest): Observable<void>
    dappsCurveGaugeLiquidityHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeLiquidityHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveGaugeLiquidityHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeLiquidityHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/gaugeLiquidity/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveGaugeTotalWeightHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeTotalWeightHistoricalGetRequest): Observable<void>
    dappsCurveGaugeTotalWeightHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeTotalWeightHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveGaugeTotalWeightHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeTotalWeightHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/gaugeTotalWeight/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveGaugeTypeHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeTypeHistoricalGetRequest): Observable<void>
    dappsCurveGaugeTypeHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeTypeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveGaugeTypeHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeTypeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/gaugeType/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveGaugeTypeWeightHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeTypeWeightHistoricalGetRequest): Observable<void>
    dappsCurveGaugeTypeWeightHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeTypeWeightHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveGaugeTypeWeightHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeTypeWeightHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/gaugeTypeWeight/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveGaugeWeightHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeWeightHistoricalGetRequest): Observable<void>
    dappsCurveGaugeWeightHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeWeightHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveGaugeWeightHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeWeightHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/gaugeWeight/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveGaugeWeightVoteHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeWeightVoteHistoricalGetRequest): Observable<void>
    dappsCurveGaugeWeightVoteHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeWeightVoteHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveGaugeWeightVoteHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeWeightVoteHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/gaugeWeightVote/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveGaugeWithdrawHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeWithdrawHistoricalGetRequest): Observable<void>
    dappsCurveGaugeWithdrawHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeWithdrawHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveGaugeWithdrawHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveGaugeWithdrawHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/gaugeWithdraw/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveHourlyVolumeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveHourlyVolumeHistoricalGetRequest): Observable<void>
    dappsCurveHourlyVolumeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveHourlyVolumeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveHourlyVolumeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveHourlyVolumeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/hourlyVolume/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveLpTokenHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveLpTokenHistoricalGetRequest): Observable<void>
    dappsCurveLpTokenHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveLpTokenHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveLpTokenHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveLpTokenHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/lpToken/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurvePoiHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurvePoiHistoricalGetRequest): Observable<void>
    dappsCurvePoiHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurvePoiHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurvePoiHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurvePoiHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/poi/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurvePoolsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurvePoolsHistoricalGetRequest): Observable<void>
    dappsCurvePoolsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurvePoolsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurvePoolsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurvePoolsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/pools/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveProposalsHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveProposalsHistoricalGetRequest): Observable<void>
    dappsCurveProposalsHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveProposalsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveProposalsHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveProposalsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/proposals/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveProposalsVoteHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveProposalsVoteHistoricalGetRequest): Observable<void>
    dappsCurveProposalsVoteHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveProposalsVoteHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveProposalsVoteHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveProposalsVoteHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/proposalsVote/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveRemoveLiquidityEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveRemoveLiquidityEventHistoricalGetRequest): Observable<void>
    dappsCurveRemoveLiquidityEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveRemoveLiquidityEventHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveRemoveLiquidityEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveRemoveLiquidityEventHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/removeLiquidityEvent/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveRemoveLiquidityOneEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveRemoveLiquidityOneEventHistoricalGetRequest): Observable<void>
    dappsCurveRemoveLiquidityOneEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveRemoveLiquidityOneEventHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveRemoveLiquidityOneEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveRemoveLiquidityOneEventHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/removeLiquidityOneEvent/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveSwapsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveSwapsHistoricalGetRequest): Observable<void>
    dappsCurveSwapsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveSwapsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveSwapsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveSwapsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/swaps/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveSystemStateHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveSystemStateHistoricalGetRequest): Observable<void>
    dappsCurveSystemStateHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveSystemStateHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveSystemStateHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveSystemStateHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/systemState/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveTokensHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsCurveTokensHistoricalGetRequest): Observable<void>
    dappsCurveTokensHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsCurveTokensHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveTokensHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsCurveTokensHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<void>({
            url: '/dapps/curve/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveTransferOwnershipEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveTransferOwnershipEventHistoricalGetRequest): Observable<void>
    dappsCurveTransferOwnershipEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveTransferOwnershipEventHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveTransferOwnershipEventHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveTransferOwnershipEventHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/transferOwnershipEvent/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveUnderlyingCoinHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveUnderlyingCoinHistoricalGetRequest): Observable<void>
    dappsCurveUnderlyingCoinHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveUnderlyingCoinHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveUnderlyingCoinHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveUnderlyingCoinHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/underlyingCoin/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveVotingAppHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveVotingAppHistoricalGetRequest): Observable<void>
    dappsCurveVotingAppHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveVotingAppHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveVotingAppHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsCurveVotingAppHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/curve/votingApp/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsCurveWeeklyVolumeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveWeeklyVolumeHistoricalGetRequest): Observable<void>
    dappsCurveWeeklyVolumeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveWeeklyVolumeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsCurveWeeklyVolumeHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsCurveWeeklyVolumeHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/curve/weeklyVolume/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
