// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    BundleV3DTO,
    BurnV3DTO,
    FactoryV3DTO,
    MintV3DTO,
    PoolDayDataV3DTO,
    PoolHourDataV3DTO,
    PoolV3DTO,
    PositionSnapshotV3DTO,
    PositionV3DTO,
    SwapV3DTO,
    TickDayDataV3DTO,
    TickV3DTO,
    TokenHourDataV3DTO,
    TokenV3DTO,
    TokenV3DayDataDTO,
    UniswapDayDataV3DTO,
} from '../models';

export interface ChainsChainIdDappsUniswapv3BundleCurrentGetRequest {
    chainId: string;
}

export interface ChainsChainIdDappsUniswapv3BurnsCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3FactoryCurrentGetRequest {
    chainId: string;
}

export interface ChainsChainIdDappsUniswapv3MintsCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3PoolsCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3PositionsCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3SwapsCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3TicksCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetRequest {
    chainId: string;
    filterPoolId?: string;
}

export interface ChainsChainIdDappsUniswapv3TokensCurrentGetRequest {
    chainId: string;
    filterTokenId?: string;
}

export interface ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetRequest {
    chainId: string;
    filterTokenId?: string;
}

export interface ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetRequest {
    chainId: string;
    filterTokenId?: string;
}

export interface ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetRequest {
    chainId: string;
}

/**
 * no description
 */
export class UniswapV3Api extends BaseAPI {

    /**
     * GetBundles
     */
    chainsChainIdDappsUniswapv3BundleCurrentGet({ chainId }: ChainsChainIdDappsUniswapv3BundleCurrentGetRequest): Observable<Array<BundleV3DTO>>
    chainsChainIdDappsUniswapv3BundleCurrentGet({ chainId }: ChainsChainIdDappsUniswapv3BundleCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<BundleV3DTO>>>
    chainsChainIdDappsUniswapv3BundleCurrentGet({ chainId }: ChainsChainIdDappsUniswapv3BundleCurrentGetRequest, opts?: OperationOpts): Observable<Array<BundleV3DTO> | AjaxResponse<Array<BundleV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3BundleCurrentGet');

        return this.request<Array<BundleV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/bundle/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * GetBurns
     */
    chainsChainIdDappsUniswapv3BurnsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3BurnsCurrentGetRequest): Observable<Array<BurnV3DTO>>
    chainsChainIdDappsUniswapv3BurnsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3BurnsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<BurnV3DTO>>>
    chainsChainIdDappsUniswapv3BurnsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3BurnsCurrentGetRequest, opts?: OperationOpts): Observable<Array<BurnV3DTO> | AjaxResponse<Array<BurnV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3BurnsCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<BurnV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/burns/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetFactory
     */
    chainsChainIdDappsUniswapv3FactoryCurrentGet({ chainId }: ChainsChainIdDappsUniswapv3FactoryCurrentGetRequest): Observable<Array<FactoryV3DTO>>
    chainsChainIdDappsUniswapv3FactoryCurrentGet({ chainId }: ChainsChainIdDappsUniswapv3FactoryCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<FactoryV3DTO>>>
    chainsChainIdDappsUniswapv3FactoryCurrentGet({ chainId }: ChainsChainIdDappsUniswapv3FactoryCurrentGetRequest, opts?: OperationOpts): Observable<Array<FactoryV3DTO> | AjaxResponse<Array<FactoryV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3FactoryCurrentGet');

        return this.request<Array<FactoryV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/factory/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * GetMints
     */
    chainsChainIdDappsUniswapv3MintsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3MintsCurrentGetRequest): Observable<Array<MintV3DTO>>
    chainsChainIdDappsUniswapv3MintsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3MintsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<MintV3DTO>>>
    chainsChainIdDappsUniswapv3MintsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3MintsCurrentGetRequest, opts?: OperationOpts): Observable<Array<MintV3DTO> | AjaxResponse<Array<MintV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3MintsCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<MintV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/mints/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPools
     */
    chainsChainIdDappsUniswapv3PoolsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PoolsCurrentGetRequest): Observable<Array<PoolV3DTO>>
    chainsChainIdDappsUniswapv3PoolsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PoolsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PoolV3DTO>>>
    chainsChainIdDappsUniswapv3PoolsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PoolsCurrentGetRequest, opts?: OperationOpts): Observable<Array<PoolV3DTO> | AjaxResponse<Array<PoolV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3PoolsCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PoolV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/pools/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPoolsDayData
     */
    chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetRequest): Observable<Array<PoolDayDataV3DTO>>
    chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PoolDayDataV3DTO>>>
    chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PoolsDayDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<PoolDayDataV3DTO> | AjaxResponse<Array<PoolDayDataV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3PoolsDayDataCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PoolDayDataV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/poolsDayData/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPoolsHourData
     */
    chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetRequest): Observable<Array<PoolHourDataV3DTO>>
    chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PoolHourDataV3DTO>>>
    chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PoolsHourDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<PoolHourDataV3DTO> | AjaxResponse<Array<PoolHourDataV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3PoolsHourDataCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PoolHourDataV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/poolsHourData/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPositionSnapshot
     */
    chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetRequest): Observable<Array<PositionSnapshotV3DTO>>
    chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PositionSnapshotV3DTO>>>
    chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PositionSnapshotsCurrentGetRequest, opts?: OperationOpts): Observable<Array<PositionSnapshotV3DTO> | AjaxResponse<Array<PositionSnapshotV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3PositionSnapshotsCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PositionSnapshotV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/positionSnapshots/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPositions
     */
    chainsChainIdDappsUniswapv3PositionsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PositionsCurrentGetRequest): Observable<Array<PositionV3DTO>>
    chainsChainIdDappsUniswapv3PositionsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PositionsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PositionV3DTO>>>
    chainsChainIdDappsUniswapv3PositionsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3PositionsCurrentGetRequest, opts?: OperationOpts): Observable<Array<PositionV3DTO> | AjaxResponse<Array<PositionV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3PositionsCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PositionV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/positions/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetSwaps
     */
    chainsChainIdDappsUniswapv3SwapsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3SwapsCurrentGetRequest): Observable<Array<SwapV3DTO>>
    chainsChainIdDappsUniswapv3SwapsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3SwapsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SwapV3DTO>>>
    chainsChainIdDappsUniswapv3SwapsCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3SwapsCurrentGetRequest, opts?: OperationOpts): Observable<Array<SwapV3DTO> | AjaxResponse<Array<SwapV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3SwapsCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<SwapV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/swaps/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTicks
     */
    chainsChainIdDappsUniswapv3TicksCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3TicksCurrentGetRequest): Observable<Array<TickV3DTO>>
    chainsChainIdDappsUniswapv3TicksCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3TicksCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TickV3DTO>>>
    chainsChainIdDappsUniswapv3TicksCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3TicksCurrentGetRequest, opts?: OperationOpts): Observable<Array<TickV3DTO> | AjaxResponse<Array<TickV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3TicksCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<TickV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/ticks/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTicksDayData
     */
    chainsChainIdDappsUniswapv3TicksDayDataCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetRequest): Observable<Array<TickDayDataV3DTO>>
    chainsChainIdDappsUniswapv3TicksDayDataCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TickDayDataV3DTO>>>
    chainsChainIdDappsUniswapv3TicksDayDataCurrentGet({ chainId, filterPoolId }: ChainsChainIdDappsUniswapv3TicksDayDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<TickDayDataV3DTO> | AjaxResponse<Array<TickDayDataV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3TicksDayDataCurrentGet');

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<TickDayDataV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/ticksDayData/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTokens
     */
    chainsChainIdDappsUniswapv3TokensCurrentGet({ chainId, filterTokenId }: ChainsChainIdDappsUniswapv3TokensCurrentGetRequest): Observable<Array<TokenV3DTO>>
    chainsChainIdDappsUniswapv3TokensCurrentGet({ chainId, filterTokenId }: ChainsChainIdDappsUniswapv3TokensCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TokenV3DTO>>>
    chainsChainIdDappsUniswapv3TokensCurrentGet({ chainId, filterTokenId }: ChainsChainIdDappsUniswapv3TokensCurrentGetRequest, opts?: OperationOpts): Observable<Array<TokenV3DTO> | AjaxResponse<Array<TokenV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3TokensCurrentGet');

        const query: HttpQuery = {};

        if (filterTokenId != null) { query['filter_token_id'] = filterTokenId; }

        return this.request<Array<TokenV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/tokens/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTokensDayData
     */
    chainsChainIdDappsUniswapv3TokensDayDataCurrentGet({ chainId, filterTokenId }: ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetRequest): Observable<Array<TokenV3DayDataDTO>>
    chainsChainIdDappsUniswapv3TokensDayDataCurrentGet({ chainId, filterTokenId }: ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TokenV3DayDataDTO>>>
    chainsChainIdDappsUniswapv3TokensDayDataCurrentGet({ chainId, filterTokenId }: ChainsChainIdDappsUniswapv3TokensDayDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<TokenV3DayDataDTO> | AjaxResponse<Array<TokenV3DayDataDTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3TokensDayDataCurrentGet');

        const query: HttpQuery = {};

        if (filterTokenId != null) { query['filter_token_id'] = filterTokenId; }

        return this.request<Array<TokenV3DayDataDTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/tokensDayData/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTokensHourData
     */
    chainsChainIdDappsUniswapv3TokensHourDataCurrentGet({ chainId, filterTokenId }: ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetRequest): Observable<Array<TokenHourDataV3DTO>>
    chainsChainIdDappsUniswapv3TokensHourDataCurrentGet({ chainId, filterTokenId }: ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TokenHourDataV3DTO>>>
    chainsChainIdDappsUniswapv3TokensHourDataCurrentGet({ chainId, filterTokenId }: ChainsChainIdDappsUniswapv3TokensHourDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<TokenHourDataV3DTO> | AjaxResponse<Array<TokenHourDataV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3TokensHourDataCurrentGet');

        const query: HttpQuery = {};

        if (filterTokenId != null) { query['filter_token_id'] = filterTokenId; }

        return this.request<Array<TokenHourDataV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/tokensHourData/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetUniswapDayData
     */
    chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet({ chainId }: ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetRequest): Observable<Array<UniswapDayDataV3DTO>>
    chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet({ chainId }: ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapDayDataV3DTO>>>
    chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet({ chainId }: ChainsChainIdDappsUniswapv3UniswapDayDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<UniswapDayDataV3DTO> | AjaxResponse<Array<UniswapDayDataV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'chainsChainIdDappsUniswapv3UniswapDayDataCurrentGet');

        return this.request<Array<UniswapDayDataV3DTO>>({
            url: '/chains/{chain_id}/dapps/uniswapv3/uniswapDayData/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

}
