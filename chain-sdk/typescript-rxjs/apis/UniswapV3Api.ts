// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    BundleV3DTO,
    BurnV3DTO,
    FactoryV3DTO,
    MintV3DTO,
    PoolDayDataV3DTO,
    PoolHourDataV3DTO,
    PoolV3DTO,
    PositionSnapshotV3DTO,
    PositionV3DTO,
    SwapV3DTO,
    TickDayDataV3DTO,
    TickV3DTO,
    TokenHourDataV3DTO,
    TokenV3DTO,
    TokenV3DayDataDTO,
    UniswapDayDataV3DTO,
} from '../models';

export interface DappsUniswapv3BundlesHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsUniswapv3BurnsCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3BurnsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3DayDataHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsUniswapv3FactoryCurrentGetRequest {
    chainId: string;
}

export interface DappsUniswapv3FactoryHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DappsUniswapv3MintsCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3MintsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3PoolDayDataHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3PoolHourDataHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3PoolsCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3PoolsDayDataCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3PoolsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3PoolsHourDataCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3PositionSnapshotHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3PositionSnapshotsCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3PositionsCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3PositionsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3SwapsCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3SwapsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3TickDayDataHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3TicksCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3TicksDayDataCurrentGetRequest {
    filterPoolId?: string;
}

export interface DappsUniswapv3TicksHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DappsUniswapv3TokenDayDataHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DappsUniswapv3TokenHourDataHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DappsUniswapv3TokensCurrentGetRequest {
    filterTokenId?: string;
}

export interface DappsUniswapv3TokensDayDataCurrentGetRequest {
    filterTokenId?: string;
}

export interface DappsUniswapv3TokensHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DappsUniswapv3TokensHourDataCurrentGetRequest {
    filterTokenId?: string;
}

export interface DappsUniswapv3TransactionsHistoricalGetRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

/**
 * no description
 */
export class UniswapV3Api extends BaseAPI {

    /**
     * GetBundles
     */
    dappsUniswapv3BundleCurrentGet(): Observable<Array<BundleV3DTO>>
    dappsUniswapv3BundleCurrentGet(opts?: OperationOpts): Observable<AjaxResponse<Array<BundleV3DTO>>>
    dappsUniswapv3BundleCurrentGet(opts?: OperationOpts): Observable<Array<BundleV3DTO> | AjaxResponse<Array<BundleV3DTO>>> {
        return this.request<Array<BundleV3DTO>>({
            url: '/dapps/uniswapv3/bundle/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3BundlesHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3BundlesHistoricalGetRequest): Observable<void>
    dappsUniswapv3BundlesHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3BundlesHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3BundlesHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3BundlesHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/uniswapv3/bundles/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetBurns
     */
    dappsUniswapv3BurnsCurrentGet({ filterPoolId }: DappsUniswapv3BurnsCurrentGetRequest): Observable<Array<BurnV3DTO>>
    dappsUniswapv3BurnsCurrentGet({ filterPoolId }: DappsUniswapv3BurnsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<BurnV3DTO>>>
    dappsUniswapv3BurnsCurrentGet({ filterPoolId }: DappsUniswapv3BurnsCurrentGetRequest, opts?: OperationOpts): Observable<Array<BurnV3DTO> | AjaxResponse<Array<BurnV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<BurnV3DTO>>({
            url: '/dapps/uniswapv3/burns/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3BurnsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3BurnsHistoricalGetRequest): Observable<void>
    dappsUniswapv3BurnsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3BurnsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3BurnsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3BurnsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/burns/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3DayDataHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3DayDataHistoricalGetRequest): Observable<void>
    dappsUniswapv3DayDataHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3DayDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3DayDataHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3DayDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/uniswapv3/dayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetFactory
     */
    dappsUniswapv3FactoryCurrentGet({ chainId }: DappsUniswapv3FactoryCurrentGetRequest): Observable<Array<FactoryV3DTO>>
    dappsUniswapv3FactoryCurrentGet({ chainId }: DappsUniswapv3FactoryCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<FactoryV3DTO>>>
    dappsUniswapv3FactoryCurrentGet({ chainId }: DappsUniswapv3FactoryCurrentGetRequest, opts?: OperationOpts): Observable<Array<FactoryV3DTO> | AjaxResponse<Array<FactoryV3DTO>>> {
        throwIfNullOrUndefined(chainId, 'chainId', 'dappsUniswapv3FactoryCurrentGet');

        return this.request<Array<FactoryV3DTO>>({
            url: '/dapps/uniswapv3/factory/current'.replace('{chain_id}', encodeURI(chainId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3FactoryHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3FactoryHistoricalGetRequest): Observable<void>
    dappsUniswapv3FactoryHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3FactoryHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3FactoryHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3FactoryHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/uniswapv3/factory/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetMints
     */
    dappsUniswapv3MintsCurrentGet({ filterPoolId }: DappsUniswapv3MintsCurrentGetRequest): Observable<Array<MintV3DTO>>
    dappsUniswapv3MintsCurrentGet({ filterPoolId }: DappsUniswapv3MintsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<MintV3DTO>>>
    dappsUniswapv3MintsCurrentGet({ filterPoolId }: DappsUniswapv3MintsCurrentGetRequest, opts?: OperationOpts): Observable<Array<MintV3DTO> | AjaxResponse<Array<MintV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<MintV3DTO>>({
            url: '/dapps/uniswapv3/mints/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3MintsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3MintsHistoricalGetRequest): Observable<void>
    dappsUniswapv3MintsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3MintsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3MintsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3MintsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/mints/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3PoolDayDataHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PoolDayDataHistoricalGetRequest): Observable<void>
    dappsUniswapv3PoolDayDataHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PoolDayDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3PoolDayDataHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PoolDayDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/poolDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3PoolHourDataHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PoolHourDataHistoricalGetRequest): Observable<void>
    dappsUniswapv3PoolHourDataHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PoolHourDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3PoolHourDataHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PoolHourDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/poolHourData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPools
     */
    dappsUniswapv3PoolsCurrentGet({ filterPoolId }: DappsUniswapv3PoolsCurrentGetRequest): Observable<Array<PoolV3DTO>>
    dappsUniswapv3PoolsCurrentGet({ filterPoolId }: DappsUniswapv3PoolsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PoolV3DTO>>>
    dappsUniswapv3PoolsCurrentGet({ filterPoolId }: DappsUniswapv3PoolsCurrentGetRequest, opts?: OperationOpts): Observable<Array<PoolV3DTO> | AjaxResponse<Array<PoolV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PoolV3DTO>>({
            url: '/dapps/uniswapv3/pools/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPoolsDayData
     */
    dappsUniswapv3PoolsDayDataCurrentGet({ filterPoolId }: DappsUniswapv3PoolsDayDataCurrentGetRequest): Observable<Array<PoolDayDataV3DTO>>
    dappsUniswapv3PoolsDayDataCurrentGet({ filterPoolId }: DappsUniswapv3PoolsDayDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PoolDayDataV3DTO>>>
    dappsUniswapv3PoolsDayDataCurrentGet({ filterPoolId }: DappsUniswapv3PoolsDayDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<PoolDayDataV3DTO> | AjaxResponse<Array<PoolDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PoolDayDataV3DTO>>({
            url: '/dapps/uniswapv3/poolsDayData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3PoolsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PoolsHistoricalGetRequest): Observable<void>
    dappsUniswapv3PoolsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PoolsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3PoolsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PoolsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/pools/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPoolsHourData
     */
    dappsUniswapv3PoolsHourDataCurrentGet({ filterPoolId }: DappsUniswapv3PoolsHourDataCurrentGetRequest): Observable<Array<PoolHourDataV3DTO>>
    dappsUniswapv3PoolsHourDataCurrentGet({ filterPoolId }: DappsUniswapv3PoolsHourDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PoolHourDataV3DTO>>>
    dappsUniswapv3PoolsHourDataCurrentGet({ filterPoolId }: DappsUniswapv3PoolsHourDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<PoolHourDataV3DTO> | AjaxResponse<Array<PoolHourDataV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PoolHourDataV3DTO>>({
            url: '/dapps/uniswapv3/poolsHourData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3PositionSnapshotHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PositionSnapshotHistoricalGetRequest): Observable<void>
    dappsUniswapv3PositionSnapshotHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PositionSnapshotHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3PositionSnapshotHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PositionSnapshotHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/positionSnapshot/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPositionSnapshot
     */
    dappsUniswapv3PositionSnapshotsCurrentGet({ filterPoolId }: DappsUniswapv3PositionSnapshotsCurrentGetRequest): Observable<Array<PositionSnapshotV3DTO>>
    dappsUniswapv3PositionSnapshotsCurrentGet({ filterPoolId }: DappsUniswapv3PositionSnapshotsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PositionSnapshotV3DTO>>>
    dappsUniswapv3PositionSnapshotsCurrentGet({ filterPoolId }: DappsUniswapv3PositionSnapshotsCurrentGetRequest, opts?: OperationOpts): Observable<Array<PositionSnapshotV3DTO> | AjaxResponse<Array<PositionSnapshotV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PositionSnapshotV3DTO>>({
            url: '/dapps/uniswapv3/positionSnapshots/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetPositions
     */
    dappsUniswapv3PositionsCurrentGet({ filterPoolId }: DappsUniswapv3PositionsCurrentGetRequest): Observable<Array<PositionV3DTO>>
    dappsUniswapv3PositionsCurrentGet({ filterPoolId }: DappsUniswapv3PositionsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PositionV3DTO>>>
    dappsUniswapv3PositionsCurrentGet({ filterPoolId }: DappsUniswapv3PositionsCurrentGetRequest, opts?: OperationOpts): Observable<Array<PositionV3DTO> | AjaxResponse<Array<PositionV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<PositionV3DTO>>({
            url: '/dapps/uniswapv3/positions/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3PositionsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PositionsHistoricalGetRequest): Observable<void>
    dappsUniswapv3PositionsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PositionsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3PositionsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3PositionsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/positions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetSwaps
     */
    dappsUniswapv3SwapsCurrentGet({ filterPoolId }: DappsUniswapv3SwapsCurrentGetRequest): Observable<Array<SwapV3DTO>>
    dappsUniswapv3SwapsCurrentGet({ filterPoolId }: DappsUniswapv3SwapsCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SwapV3DTO>>>
    dappsUniswapv3SwapsCurrentGet({ filterPoolId }: DappsUniswapv3SwapsCurrentGetRequest, opts?: OperationOpts): Observable<Array<SwapV3DTO> | AjaxResponse<Array<SwapV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<SwapV3DTO>>({
            url: '/dapps/uniswapv3/swaps/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3SwapsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3SwapsHistoricalGetRequest): Observable<void>
    dappsUniswapv3SwapsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3SwapsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3SwapsHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3SwapsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/swaps/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3TickDayDataHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3TickDayDataHistoricalGetRequest): Observable<void>
    dappsUniswapv3TickDayDataHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3TickDayDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3TickDayDataHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3TickDayDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/tickDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTicks
     */
    dappsUniswapv3TicksCurrentGet({ filterPoolId }: DappsUniswapv3TicksCurrentGetRequest): Observable<Array<TickV3DTO>>
    dappsUniswapv3TicksCurrentGet({ filterPoolId }: DappsUniswapv3TicksCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TickV3DTO>>>
    dappsUniswapv3TicksCurrentGet({ filterPoolId }: DappsUniswapv3TicksCurrentGetRequest, opts?: OperationOpts): Observable<Array<TickV3DTO> | AjaxResponse<Array<TickV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<TickV3DTO>>({
            url: '/dapps/uniswapv3/ticks/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTicksDayData
     */
    dappsUniswapv3TicksDayDataCurrentGet({ filterPoolId }: DappsUniswapv3TicksDayDataCurrentGetRequest): Observable<Array<TickDayDataV3DTO>>
    dappsUniswapv3TicksDayDataCurrentGet({ filterPoolId }: DappsUniswapv3TicksDayDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TickDayDataV3DTO>>>
    dappsUniswapv3TicksDayDataCurrentGet({ filterPoolId }: DappsUniswapv3TicksDayDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<TickDayDataV3DTO> | AjaxResponse<Array<TickDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<TickDayDataV3DTO>>({
            url: '/dapps/uniswapv3/ticksDayData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3TicksHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3TicksHistoricalGetRequest): Observable<void>
    dappsUniswapv3TicksHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3TicksHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3TicksHistoricalGet({ startBlock, endBlock, startDate, endDate, poolId }: DappsUniswapv3TicksHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/ticks/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3TokenDayDataHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsUniswapv3TokenDayDataHistoricalGetRequest): Observable<void>
    dappsUniswapv3TokenDayDataHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsUniswapv3TokenDayDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3TokenDayDataHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsUniswapv3TokenDayDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/tokenDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3TokenHourDataHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsUniswapv3TokenHourDataHistoricalGetRequest): Observable<void>
    dappsUniswapv3TokenHourDataHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsUniswapv3TokenHourDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3TokenHourDataHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsUniswapv3TokenHourDataHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/tokenHourData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTokens
     */
    dappsUniswapv3TokensCurrentGet({ filterTokenId }: DappsUniswapv3TokensCurrentGetRequest): Observable<Array<TokenV3DTO>>
    dappsUniswapv3TokensCurrentGet({ filterTokenId }: DappsUniswapv3TokensCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TokenV3DTO>>>
    dappsUniswapv3TokensCurrentGet({ filterTokenId }: DappsUniswapv3TokensCurrentGetRequest, opts?: OperationOpts): Observable<Array<TokenV3DTO> | AjaxResponse<Array<TokenV3DTO>>> {

        const query: HttpQuery = {};

        if (filterTokenId != null) { query['filter_token_id'] = filterTokenId; }

        return this.request<Array<TokenV3DTO>>({
            url: '/dapps/uniswapv3/tokens/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTokensDayData
     */
    dappsUniswapv3TokensDayDataCurrentGet({ filterTokenId }: DappsUniswapv3TokensDayDataCurrentGetRequest): Observable<Array<TokenV3DayDataDTO>>
    dappsUniswapv3TokensDayDataCurrentGet({ filterTokenId }: DappsUniswapv3TokensDayDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TokenV3DayDataDTO>>>
    dappsUniswapv3TokensDayDataCurrentGet({ filterTokenId }: DappsUniswapv3TokensDayDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<TokenV3DayDataDTO> | AjaxResponse<Array<TokenV3DayDataDTO>>> {

        const query: HttpQuery = {};

        if (filterTokenId != null) { query['filter_token_id'] = filterTokenId; }

        return this.request<Array<TokenV3DayDataDTO>>({
            url: '/dapps/uniswapv3/tokensDayData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3TokensHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsUniswapv3TokensHistoricalGetRequest): Observable<void>
    dappsUniswapv3TokensHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsUniswapv3TokensHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3TokensHistoricalGet({ startBlock, endBlock, startDate, endDate, tokenId }: DappsUniswapv3TokensHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<void>({
            url: '/dapps/uniswapv3/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetTokensHourData
     */
    dappsUniswapv3TokensHourDataCurrentGet({ filterTokenId }: DappsUniswapv3TokensHourDataCurrentGetRequest): Observable<Array<TokenHourDataV3DTO>>
    dappsUniswapv3TokensHourDataCurrentGet({ filterTokenId }: DappsUniswapv3TokensHourDataCurrentGetRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<TokenHourDataV3DTO>>>
    dappsUniswapv3TokensHourDataCurrentGet({ filterTokenId }: DappsUniswapv3TokensHourDataCurrentGetRequest, opts?: OperationOpts): Observable<Array<TokenHourDataV3DTO> | AjaxResponse<Array<TokenHourDataV3DTO>>> {

        const query: HttpQuery = {};

        if (filterTokenId != null) { query['filter_token_id'] = filterTokenId; }

        return this.request<Array<TokenHourDataV3DTO>>({
            url: '/dapps/uniswapv3/tokensHourData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     */
    dappsUniswapv3TransactionsHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3TransactionsHistoricalGetRequest): Observable<void>
    dappsUniswapv3TransactionsHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3TransactionsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dappsUniswapv3TransactionsHistoricalGet({ startBlock, endBlock, startDate, endDate }: DappsUniswapv3TransactionsHistoricalGetRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<void>({
            url: '/dapps/uniswapv3/transactions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * GetUniswapDayData
     */
    dappsUniswapv3UniswapDayDataCurrentGet(): Observable<Array<UniswapDayDataV3DTO>>
    dappsUniswapv3UniswapDayDataCurrentGet(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapDayDataV3DTO>>>
    dappsUniswapv3UniswapDayDataCurrentGet(opts?: OperationOpts): Observable<Array<UniswapDayDataV3DTO> | AjaxResponse<Array<UniswapDayDataV3DTO>>> {
        return this.request<Array<UniswapDayDataV3DTO>>({
            url: '/dapps/uniswapv3/uniswapDayData/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

}
