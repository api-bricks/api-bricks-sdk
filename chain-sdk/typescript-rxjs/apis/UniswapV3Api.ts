// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    UniswapV3BundleV3DTO,
    UniswapV3BurnV3DTO,
    UniswapV3FactoryV3DTO,
    UniswapV3MintV3DTO,
    UniswapV3PoolDayDataV3DTO,
    UniswapV3PoolHourDataV3DTO,
    UniswapV3PoolV3DTO,
    UniswapV3PositionSnapshotV3DTO,
    UniswapV3PositionV3DTO,
    UniswapV3SwapV3DTO,
    UniswapV3TickDayDataV3DTO,
    UniswapV3TickV3DTO,
    UniswapV3TokenHourDataV3DTO,
    UniswapV3TokenV3DTO,
    UniswapV3TokenV3DayDataDTO,
    UniswapV3TransactionV3DTO,
    UniswapV3UniswapDayDataV3DTO,
} from '../models';

export interface UniswapV3GetBundleV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetBundlesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV3GetBurnV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetBurnsCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetBurnsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV3GetFactoryHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV3GetFactoryV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetMintV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetMintsCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetMintsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPoolDayDataV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPoolHourDataV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPoolV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPoolsCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetPoolsDayDataCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetPoolsDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPoolsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPoolsHourDataCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetPoolsHourDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPositionSnapshotV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPositionV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPositionsCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetPositionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPositionsSnaphotsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetPositionsSnapshotsCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetSwapV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetSwapsCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetSwapsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetTickDayDataV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetTickV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetTicksCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetTicksDayDataCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV3GetTicksDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetTicksHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetTokenHourDataV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetTokenV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetTokenV3DayDataDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetTokensCurrentRequest {
    filterTokenId?: string;
}

export interface UniswapV3GetTokensDayDataCurrentRequest {
    filterTokenId?: string;
}

export interface UniswapV3GetTokensDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface UniswapV3GetTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface UniswapV3GetTokensHourDataCurrentRequest {
    filterTokenId?: string;
}

export interface UniswapV3GetTokensHourDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface UniswapV3GetTransactionV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV3GetTransactionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV3GetUniswapDayDataV3DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

/**
 * no description
 */
export class UniswapV3Api extends BaseAPI {

    /**
     * Gets BundleV3DTOs.
     * BundleV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetBundleV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetBundleV3DTOsHistoricalRequest): Observable<Array<UniswapV3BundleV3DTO>>
    uniswapV3GetBundleV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetBundleV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3BundleV3DTO>>>
    uniswapV3GetBundleV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetBundleV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3BundleV3DTO> | AjaxResponse<Array<UniswapV3BundleV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3BundleV3DTO>>({
            url: '/dapps/uniswapv3/BundleV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets bundles.
     * Bundles (current)
     */
    uniswapV3GetBundlesCurrent(): Observable<Array<UniswapV3BundleV3DTO>>
    uniswapV3GetBundlesCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3BundleV3DTO>>>
    uniswapV3GetBundlesCurrent(opts?: OperationOpts): Observable<Array<UniswapV3BundleV3DTO> | AjaxResponse<Array<UniswapV3BundleV3DTO>>> {
        return this.request<Array<UniswapV3BundleV3DTO>>({
            url: '/dapps/uniswapv3/bundles/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets bundles.
     * Bundles (historical)
     */
    uniswapV3GetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetBundlesHistoricalRequest): Observable<Array<UniswapV3BundleV3DTO>>
    uniswapV3GetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetBundlesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3BundleV3DTO>>>
    uniswapV3GetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetBundlesHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3BundleV3DTO> | AjaxResponse<Array<UniswapV3BundleV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV3BundleV3DTO>>({
            url: '/dapps/uniswapv3/bundles/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets BurnV3DTOs.
     * BurnV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetBurnV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetBurnV3DTOsHistoricalRequest): Observable<Array<UniswapV3BurnV3DTO>>
    uniswapV3GetBurnV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetBurnV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3BurnV3DTO>>>
    uniswapV3GetBurnV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetBurnV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3BurnV3DTO> | AjaxResponse<Array<UniswapV3BurnV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3BurnV3DTO>>({
            url: '/dapps/uniswapv3/BurnV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets burns.
     * Burns (current)
     */
    uniswapV3GetBurnsCurrent({ filterPoolId }: UniswapV3GetBurnsCurrentRequest): Observable<Array<UniswapV3BurnV3DTO>>
    uniswapV3GetBurnsCurrent({ filterPoolId }: UniswapV3GetBurnsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3BurnV3DTO>>>
    uniswapV3GetBurnsCurrent({ filterPoolId }: UniswapV3GetBurnsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3BurnV3DTO> | AjaxResponse<Array<UniswapV3BurnV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3BurnV3DTO>>({
            url: '/dapps/uniswapv3/burns/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets burns.
     * Burns (historical)
     */
    uniswapV3GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetBurnsHistoricalRequest): Observable<Array<UniswapV3BurnV3DTO>>
    uniswapV3GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetBurnsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3BurnV3DTO>>>
    uniswapV3GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetBurnsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3BurnV3DTO> | AjaxResponse<Array<UniswapV3BurnV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3BurnV3DTO>>({
            url: '/dapps/uniswapv3/burns/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets uniswapv3 day data.
     * DayData (current)
     */
    uniswapV3GetDayDataCurrent(): Observable<Array<UniswapV3UniswapDayDataV3DTO>>
    uniswapV3GetDayDataCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3UniswapDayDataV3DTO>>>
    uniswapV3GetDayDataCurrent(opts?: OperationOpts): Observable<Array<UniswapV3UniswapDayDataV3DTO> | AjaxResponse<Array<UniswapV3UniswapDayDataV3DTO>>> {
        return this.request<Array<UniswapV3UniswapDayDataV3DTO>>({
            url: '/dapps/uniswapv3/dayData/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets uniswapv3 day data.
     * DayData (historical)
     */
    uniswapV3GetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetDayDataHistoricalRequest): Observable<Array<UniswapV3UniswapDayDataV3DTO>>
    uniswapV3GetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3UniswapDayDataV3DTO>>>
    uniswapV3GetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3UniswapDayDataV3DTO> | AjaxResponse<Array<UniswapV3UniswapDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV3UniswapDayDataV3DTO>>({
            url: '/dapps/uniswapv3/dayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets factory.
     * Factory (current)
     */
    uniswapV3GetFactoryCurrent(): Observable<Array<UniswapV3FactoryV3DTO>>
    uniswapV3GetFactoryCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3FactoryV3DTO>>>
    uniswapV3GetFactoryCurrent(opts?: OperationOpts): Observable<Array<UniswapV3FactoryV3DTO> | AjaxResponse<Array<UniswapV3FactoryV3DTO>>> {
        return this.request<Array<UniswapV3FactoryV3DTO>>({
            url: '/dapps/uniswapv3/factory/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets factory.
     * Factory (historical)
     */
    uniswapV3GetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetFactoryHistoricalRequest): Observable<Array<UniswapV3FactoryV3DTO>>
    uniswapV3GetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetFactoryHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3FactoryV3DTO>>>
    uniswapV3GetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetFactoryHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3FactoryV3DTO> | AjaxResponse<Array<UniswapV3FactoryV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV3FactoryV3DTO>>({
            url: '/dapps/uniswapv3/factory/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets FactoryV3DTOs.
     * FactoryV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetFactoryV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetFactoryV3DTOsHistoricalRequest): Observable<Array<UniswapV3FactoryV3DTO>>
    uniswapV3GetFactoryV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetFactoryV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3FactoryV3DTO>>>
    uniswapV3GetFactoryV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetFactoryV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3FactoryV3DTO> | AjaxResponse<Array<UniswapV3FactoryV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3FactoryV3DTO>>({
            url: '/dapps/uniswapv3/FactoryV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets MintV3DTOs.
     * MintV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetMintV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetMintV3DTOsHistoricalRequest): Observable<Array<UniswapV3MintV3DTO>>
    uniswapV3GetMintV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetMintV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3MintV3DTO>>>
    uniswapV3GetMintV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetMintV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3MintV3DTO> | AjaxResponse<Array<UniswapV3MintV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3MintV3DTO>>({
            url: '/dapps/uniswapv3/MintV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets mints.
     * Mints (current)
     */
    uniswapV3GetMintsCurrent({ filterPoolId }: UniswapV3GetMintsCurrentRequest): Observable<Array<UniswapV3MintV3DTO>>
    uniswapV3GetMintsCurrent({ filterPoolId }: UniswapV3GetMintsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3MintV3DTO>>>
    uniswapV3GetMintsCurrent({ filterPoolId }: UniswapV3GetMintsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3MintV3DTO> | AjaxResponse<Array<UniswapV3MintV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3MintV3DTO>>({
            url: '/dapps/uniswapv3/mints/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets mints.
     * Mints (historical)
     */
    uniswapV3GetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetMintsHistoricalRequest): Observable<Array<UniswapV3MintV3DTO>>
    uniswapV3GetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetMintsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3MintV3DTO>>>
    uniswapV3GetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetMintsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3MintV3DTO> | AjaxResponse<Array<UniswapV3MintV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3MintV3DTO>>({
            url: '/dapps/uniswapv3/mints/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PoolDayDataV3DTOs.
     * PoolDayDataV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetPoolDayDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolDayDataV3DTOsHistoricalRequest): Observable<Array<UniswapV3PoolDayDataV3DTO>>
    uniswapV3GetPoolDayDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolDayDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PoolDayDataV3DTO>>>
    uniswapV3GetPoolDayDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolDayDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PoolDayDataV3DTO> | AjaxResponse<Array<UniswapV3PoolDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PoolDayDataV3DTO>>({
            url: '/dapps/uniswapv3/PoolDayDataV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PoolHourDataV3DTOs.
     * PoolHourDataV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetPoolHourDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolHourDataV3DTOsHistoricalRequest): Observable<Array<UniswapV3PoolHourDataV3DTO>>
    uniswapV3GetPoolHourDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolHourDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PoolHourDataV3DTO>>>
    uniswapV3GetPoolHourDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolHourDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PoolHourDataV3DTO> | AjaxResponse<Array<UniswapV3PoolHourDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PoolHourDataV3DTO>>({
            url: '/dapps/uniswapv3/PoolHourDataV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PoolV3DTOs.
     * PoolV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetPoolV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolV3DTOsHistoricalRequest): Observable<Array<UniswapV3PoolV3DTO>>
    uniswapV3GetPoolV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PoolV3DTO>>>
    uniswapV3GetPoolV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PoolV3DTO> | AjaxResponse<Array<UniswapV3PoolV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PoolV3DTO>>({
            url: '/dapps/uniswapv3/PoolV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * Pools (current) ðŸ”¥
     */
    uniswapV3GetPoolsCurrent({ filterPoolId }: UniswapV3GetPoolsCurrentRequest): Observable<Array<UniswapV3PoolV3DTO>>
    uniswapV3GetPoolsCurrent({ filterPoolId }: UniswapV3GetPoolsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PoolV3DTO>>>
    uniswapV3GetPoolsCurrent({ filterPoolId }: UniswapV3GetPoolsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3PoolV3DTO> | AjaxResponse<Array<UniswapV3PoolV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3PoolV3DTO>>({
            url: '/dapps/uniswapv3/pools/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools day data.
     * PoolsDayData (current)
     */
    uniswapV3GetPoolsDayDataCurrent({ filterPoolId }: UniswapV3GetPoolsDayDataCurrentRequest): Observable<Array<UniswapV3PoolDayDataV3DTO>>
    uniswapV3GetPoolsDayDataCurrent({ filterPoolId }: UniswapV3GetPoolsDayDataCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PoolDayDataV3DTO>>>
    uniswapV3GetPoolsDayDataCurrent({ filterPoolId }: UniswapV3GetPoolsDayDataCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3PoolDayDataV3DTO> | AjaxResponse<Array<UniswapV3PoolDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3PoolDayDataV3DTO>>({
            url: '/dapps/uniswapv3/poolsDayData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools day data.
     * PoolsDayData (historical)
     */
    uniswapV3GetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolsDayDataHistoricalRequest): Observable<Array<UniswapV3PoolDayDataV3DTO>>
    uniswapV3GetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolsDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PoolDayDataV3DTO>>>
    uniswapV3GetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolsDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PoolDayDataV3DTO> | AjaxResponse<Array<UniswapV3PoolDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PoolDayDataV3DTO>>({
            url: '/dapps/uniswapv3/poolsDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * Pools (historical) ðŸ”¥
     */
    uniswapV3GetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolsHistoricalRequest): Observable<Array<UniswapV3PoolV3DTO>>
    uniswapV3GetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PoolV3DTO>>>
    uniswapV3GetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PoolV3DTO> | AjaxResponse<Array<UniswapV3PoolV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PoolV3DTO>>({
            url: '/dapps/uniswapv3/pools/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools hour data.
     * PoolsHourData (current)
     */
    uniswapV3GetPoolsHourDataCurrent({ filterPoolId }: UniswapV3GetPoolsHourDataCurrentRequest): Observable<Array<UniswapV3PoolHourDataV3DTO>>
    uniswapV3GetPoolsHourDataCurrent({ filterPoolId }: UniswapV3GetPoolsHourDataCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PoolHourDataV3DTO>>>
    uniswapV3GetPoolsHourDataCurrent({ filterPoolId }: UniswapV3GetPoolsHourDataCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3PoolHourDataV3DTO> | AjaxResponse<Array<UniswapV3PoolHourDataV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3PoolHourDataV3DTO>>({
            url: '/dapps/uniswapv3/poolsHourData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools hour data.
     * PoolsHourData (historical)
     */
    uniswapV3GetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolsHourDataHistoricalRequest): Observable<Array<UniswapV3PoolHourDataV3DTO>>
    uniswapV3GetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolsHourDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PoolHourDataV3DTO>>>
    uniswapV3GetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPoolsHourDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PoolHourDataV3DTO> | AjaxResponse<Array<UniswapV3PoolHourDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PoolHourDataV3DTO>>({
            url: '/dapps/uniswapv3/poolsHourData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PositionSnapshotV3DTOs.
     * PositionSnapshotV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetPositionSnapshotV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionSnapshotV3DTOsHistoricalRequest): Observable<Array<UniswapV3PositionSnapshotV3DTO>>
    uniswapV3GetPositionSnapshotV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionSnapshotV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PositionSnapshotV3DTO>>>
    uniswapV3GetPositionSnapshotV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionSnapshotV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PositionSnapshotV3DTO> | AjaxResponse<Array<UniswapV3PositionSnapshotV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PositionSnapshotV3DTO>>({
            url: '/dapps/uniswapv3/PositionSnapshotV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PositionV3DTOs.
     * PositionV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetPositionV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionV3DTOsHistoricalRequest): Observable<Array<UniswapV3PositionV3DTO>>
    uniswapV3GetPositionV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PositionV3DTO>>>
    uniswapV3GetPositionV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PositionV3DTO> | AjaxResponse<Array<UniswapV3PositionV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PositionV3DTO>>({
            url: '/dapps/uniswapv3/PositionV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets positions.
     * Positions (current)
     */
    uniswapV3GetPositionsCurrent({ filterPoolId }: UniswapV3GetPositionsCurrentRequest): Observable<Array<UniswapV3PositionV3DTO>>
    uniswapV3GetPositionsCurrent({ filterPoolId }: UniswapV3GetPositionsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PositionV3DTO>>>
    uniswapV3GetPositionsCurrent({ filterPoolId }: UniswapV3GetPositionsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3PositionV3DTO> | AjaxResponse<Array<UniswapV3PositionV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3PositionV3DTO>>({
            url: '/dapps/uniswapv3/positions/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets positions.
     * Positions (historical)
     */
    uniswapV3GetPositionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionsHistoricalRequest): Observable<Array<UniswapV3PositionV3DTO>>
    uniswapV3GetPositionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PositionV3DTO>>>
    uniswapV3GetPositionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PositionV3DTO> | AjaxResponse<Array<UniswapV3PositionV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PositionV3DTO>>({
            url: '/dapps/uniswapv3/positions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets positions snapshots.
     * PositionsSnaphots (historical)
     */
    uniswapV3GetPositionsSnaphotsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionsSnaphotsHistoricalRequest): Observable<Array<UniswapV3PositionSnapshotV3DTO>>
    uniswapV3GetPositionsSnaphotsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionsSnaphotsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PositionSnapshotV3DTO>>>
    uniswapV3GetPositionsSnaphotsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetPositionsSnaphotsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3PositionSnapshotV3DTO> | AjaxResponse<Array<UniswapV3PositionSnapshotV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3PositionSnapshotV3DTO>>({
            url: '/dapps/uniswapv3/positionsSnapshots/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets positions snapshots.
     * PositionsSnapshots (current)
     */
    uniswapV3GetPositionsSnapshotsCurrent({ filterPoolId }: UniswapV3GetPositionsSnapshotsCurrentRequest): Observable<Array<UniswapV3PositionSnapshotV3DTO>>
    uniswapV3GetPositionsSnapshotsCurrent({ filterPoolId }: UniswapV3GetPositionsSnapshotsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3PositionSnapshotV3DTO>>>
    uniswapV3GetPositionsSnapshotsCurrent({ filterPoolId }: UniswapV3GetPositionsSnapshotsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3PositionSnapshotV3DTO> | AjaxResponse<Array<UniswapV3PositionSnapshotV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3PositionSnapshotV3DTO>>({
            url: '/dapps/uniswapv3/positionSnapshots/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets SwapV3DTOs.
     * SwapV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetSwapV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetSwapV3DTOsHistoricalRequest): Observable<Array<UniswapV3SwapV3DTO>>
    uniswapV3GetSwapV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetSwapV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3SwapV3DTO>>>
    uniswapV3GetSwapV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetSwapV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3SwapV3DTO> | AjaxResponse<Array<UniswapV3SwapV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3SwapV3DTO>>({
            url: '/dapps/uniswapv3/SwapV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (current) ðŸ”¥
     */
    uniswapV3GetSwapsCurrent({ filterPoolId }: UniswapV3GetSwapsCurrentRequest): Observable<Array<UniswapV3SwapV3DTO>>
    uniswapV3GetSwapsCurrent({ filterPoolId }: UniswapV3GetSwapsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3SwapV3DTO>>>
    uniswapV3GetSwapsCurrent({ filterPoolId }: UniswapV3GetSwapsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3SwapV3DTO> | AjaxResponse<Array<UniswapV3SwapV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3SwapV3DTO>>({
            url: '/dapps/uniswapv3/swaps/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (historical) ðŸ”¥
     */
    uniswapV3GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetSwapsHistoricalRequest): Observable<Array<UniswapV3SwapV3DTO>>
    uniswapV3GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetSwapsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3SwapV3DTO>>>
    uniswapV3GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetSwapsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3SwapV3DTO> | AjaxResponse<Array<UniswapV3SwapV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3SwapV3DTO>>({
            url: '/dapps/uniswapv3/swaps/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TickDayDataV3DTOs.
     * TickDayDataV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetTickDayDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTickDayDataV3DTOsHistoricalRequest): Observable<Array<UniswapV3TickDayDataV3DTO>>
    uniswapV3GetTickDayDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTickDayDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TickDayDataV3DTO>>>
    uniswapV3GetTickDayDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTickDayDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TickDayDataV3DTO> | AjaxResponse<Array<UniswapV3TickDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3TickDayDataV3DTO>>({
            url: '/dapps/uniswapv3/TickDayDataV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TickV3DTOs.
     * TickV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetTickV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTickV3DTOsHistoricalRequest): Observable<Array<UniswapV3TickV3DTO>>
    uniswapV3GetTickV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTickV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TickV3DTO>>>
    uniswapV3GetTickV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTickV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TickV3DTO> | AjaxResponse<Array<UniswapV3TickV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3TickV3DTO>>({
            url: '/dapps/uniswapv3/TickV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets ticks.
     * Ticks (current)
     */
    uniswapV3GetTicksCurrent({ filterPoolId }: UniswapV3GetTicksCurrentRequest): Observable<Array<UniswapV3TickV3DTO>>
    uniswapV3GetTicksCurrent({ filterPoolId }: UniswapV3GetTicksCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TickV3DTO>>>
    uniswapV3GetTicksCurrent({ filterPoolId }: UniswapV3GetTicksCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3TickV3DTO> | AjaxResponse<Array<UniswapV3TickV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3TickV3DTO>>({
            url: '/dapps/uniswapv3/ticks/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets ticks day data.
     * TicksDayData (current)
     */
    uniswapV3GetTicksDayDataCurrent({ filterPoolId }: UniswapV3GetTicksDayDataCurrentRequest): Observable<Array<UniswapV3TickDayDataV3DTO>>
    uniswapV3GetTicksDayDataCurrent({ filterPoolId }: UniswapV3GetTicksDayDataCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TickDayDataV3DTO>>>
    uniswapV3GetTicksDayDataCurrent({ filterPoolId }: UniswapV3GetTicksDayDataCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3TickDayDataV3DTO> | AjaxResponse<Array<UniswapV3TickDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV3TickDayDataV3DTO>>({
            url: '/dapps/uniswapv3/ticksDayData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets ticks day data.
     * TicksDayData (historical)
     */
    uniswapV3GetTicksDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTicksDayDataHistoricalRequest): Observable<Array<UniswapV3TickDayDataV3DTO>>
    uniswapV3GetTicksDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTicksDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TickDayDataV3DTO>>>
    uniswapV3GetTicksDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTicksDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TickDayDataV3DTO> | AjaxResponse<Array<UniswapV3TickDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3TickDayDataV3DTO>>({
            url: '/dapps/uniswapv3/ticksDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets ticks.
     * Ticks (historical)
     */
    uniswapV3GetTicksHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTicksHistoricalRequest): Observable<Array<UniswapV3TickV3DTO>>
    uniswapV3GetTicksHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTicksHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TickV3DTO>>>
    uniswapV3GetTicksHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTicksHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TickV3DTO> | AjaxResponse<Array<UniswapV3TickV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3TickV3DTO>>({
            url: '/dapps/uniswapv3/ticks/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TokenHourDataV3DTOs.
     * TokenHourDataV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetTokenHourDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTokenHourDataV3DTOsHistoricalRequest): Observable<Array<UniswapV3TokenHourDataV3DTO>>
    uniswapV3GetTokenHourDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTokenHourDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TokenHourDataV3DTO>>>
    uniswapV3GetTokenHourDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTokenHourDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TokenHourDataV3DTO> | AjaxResponse<Array<UniswapV3TokenHourDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3TokenHourDataV3DTO>>({
            url: '/dapps/uniswapv3/TokenHourDataV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TokenV3DTOs.
     * TokenV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetTokenV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTokenV3DTOsHistoricalRequest): Observable<Array<UniswapV3TokenV3DTO>>
    uniswapV3GetTokenV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTokenV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TokenV3DTO>>>
    uniswapV3GetTokenV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTokenV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TokenV3DTO> | AjaxResponse<Array<UniswapV3TokenV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3TokenV3DTO>>({
            url: '/dapps/uniswapv3/TokenV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TokenV3DayDataDTOs.
     * TokenV3DayDataDTOs (historical) ðŸ”¥
     */
    uniswapV3GetTokenV3DayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTokenV3DayDataDTOsHistoricalRequest): Observable<Array<UniswapV3TokenV3DayDataDTO>>
    uniswapV3GetTokenV3DayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTokenV3DayDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TokenV3DayDataDTO>>>
    uniswapV3GetTokenV3DayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTokenV3DayDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TokenV3DayDataDTO> | AjaxResponse<Array<UniswapV3TokenV3DayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3TokenV3DayDataDTO>>({
            url: '/dapps/uniswapv3/TokenV3DayDataDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (current) ðŸ”¥
     */
    uniswapV3GetTokensCurrent({ filterTokenId }: UniswapV3GetTokensCurrentRequest): Observable<Array<UniswapV3TokenV3DTO>>
    uniswapV3GetTokensCurrent({ filterTokenId }: UniswapV3GetTokensCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TokenV3DTO>>>
    uniswapV3GetTokensCurrent({ filterTokenId }: UniswapV3GetTokensCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3TokenV3DTO> | AjaxResponse<Array<UniswapV3TokenV3DTO>>> {

        const query: HttpQuery = {};

        if (filterTokenId != null) { query['filter_token_id'] = filterTokenId; }

        return this.request<Array<UniswapV3TokenV3DTO>>({
            url: '/dapps/uniswapv3/tokens/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens day data.
     * TokensDayData (current)
     */
    uniswapV3GetTokensDayDataCurrent({ filterTokenId }: UniswapV3GetTokensDayDataCurrentRequest): Observable<Array<UniswapV3TokenV3DayDataDTO>>
    uniswapV3GetTokensDayDataCurrent({ filterTokenId }: UniswapV3GetTokensDayDataCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TokenV3DayDataDTO>>>
    uniswapV3GetTokensDayDataCurrent({ filterTokenId }: UniswapV3GetTokensDayDataCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3TokenV3DayDataDTO> | AjaxResponse<Array<UniswapV3TokenV3DayDataDTO>>> {

        const query: HttpQuery = {};

        if (filterTokenId != null) { query['filter_token_id'] = filterTokenId; }

        return this.request<Array<UniswapV3TokenV3DayDataDTO>>({
            url: '/dapps/uniswapv3/tokensDayData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens day data.
     * TokensDayData (historical)
     */
    uniswapV3GetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV3GetTokensDayDataHistoricalRequest): Observable<Array<UniswapV3TokenV3DayDataDTO>>
    uniswapV3GetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV3GetTokensDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TokenV3DayDataDTO>>>
    uniswapV3GetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV3GetTokensDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TokenV3DayDataDTO> | AjaxResponse<Array<UniswapV3TokenV3DayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<UniswapV3TokenV3DayDataDTO>>({
            url: '/dapps/uniswapv3/tokensDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (historical) ðŸ”¥
     */
    uniswapV3GetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV3GetTokensHistoricalRequest): Observable<Array<UniswapV3TokenV3DTO>>
    uniswapV3GetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV3GetTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TokenV3DTO>>>
    uniswapV3GetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV3GetTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TokenV3DTO> | AjaxResponse<Array<UniswapV3TokenV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<UniswapV3TokenV3DTO>>({
            url: '/dapps/uniswapv3/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens hour data.
     * TokensHourData (current)
     */
    uniswapV3GetTokensHourDataCurrent({ filterTokenId }: UniswapV3GetTokensHourDataCurrentRequest): Observable<Array<UniswapV3TokenHourDataV3DTO>>
    uniswapV3GetTokensHourDataCurrent({ filterTokenId }: UniswapV3GetTokensHourDataCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TokenHourDataV3DTO>>>
    uniswapV3GetTokensHourDataCurrent({ filterTokenId }: UniswapV3GetTokensHourDataCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV3TokenHourDataV3DTO> | AjaxResponse<Array<UniswapV3TokenHourDataV3DTO>>> {

        const query: HttpQuery = {};

        if (filterTokenId != null) { query['filter_token_id'] = filterTokenId; }

        return this.request<Array<UniswapV3TokenHourDataV3DTO>>({
            url: '/dapps/uniswapv3/tokensHourData/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens hour data.
     * TokensHourData (historical)
     */
    uniswapV3GetTokensHourDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV3GetTokensHourDataHistoricalRequest): Observable<Array<UniswapV3TokenHourDataV3DTO>>
    uniswapV3GetTokensHourDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV3GetTokensHourDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TokenHourDataV3DTO>>>
    uniswapV3GetTokensHourDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV3GetTokensHourDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TokenHourDataV3DTO> | AjaxResponse<Array<UniswapV3TokenHourDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<UniswapV3TokenHourDataV3DTO>>({
            url: '/dapps/uniswapv3/tokensHourData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TransactionV3DTOs.
     * TransactionV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetTransactionV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTransactionV3DTOsHistoricalRequest): Observable<Array<UniswapV3TransactionV3DTO>>
    uniswapV3GetTransactionV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTransactionV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TransactionV3DTO>>>
    uniswapV3GetTransactionV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetTransactionV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TransactionV3DTO> | AjaxResponse<Array<UniswapV3TransactionV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3TransactionV3DTO>>({
            url: '/dapps/uniswapv3/TransactionV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets transactions.
     * Transactions (historical)
     */
    uniswapV3GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetTransactionsHistoricalRequest): Observable<Array<UniswapV3TransactionV3DTO>>
    uniswapV3GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3TransactionV3DTO>>>
    uniswapV3GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV3GetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3TransactionV3DTO> | AjaxResponse<Array<UniswapV3TransactionV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV3TransactionV3DTO>>({
            url: '/dapps/uniswapv3/transactions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets UniswapDayDataV3DTOs.
     * UniswapDayDataV3DTOs (historical) ðŸ”¥
     */
    uniswapV3GetUniswapDayDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetUniswapDayDataV3DTOsHistoricalRequest): Observable<Array<UniswapV3UniswapDayDataV3DTO>>
    uniswapV3GetUniswapDayDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetUniswapDayDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV3UniswapDayDataV3DTO>>>
    uniswapV3GetUniswapDayDataV3DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV3GetUniswapDayDataV3DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV3UniswapDayDataV3DTO> | AjaxResponse<Array<UniswapV3UniswapDayDataV3DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV3UniswapDayDataV3DTO>>({
            url: '/dapps/uniswapv3/UniswapDayDataV3DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
