// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    DexBatchDTO,
    DexDepositDTO,
    DexOrderDTO,
    DexPriceDTO,
    DexSolutionDTO,
    DexStatsDTO,
    DexTokenDTO,
    DexTradeDTO,
    DexUserDTO,
    DexWithdrawDTO,
    DexWithdrawRequestDTO,
} from '../models';

export interface DexGetBatchDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetBatchesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DexGetDepositDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetDepositsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DexGetOrderDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetOrdersHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DexGetPriceDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetPricesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DexGetSolutionDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetSolutionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DexGetStatsDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetStatsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DexGetTokenDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DexGetTradeDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetTradesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DexGetUserDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetUsersHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface DexGetWithdrawDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetWithdrawRequestDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface DexGetWithdrawsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface DexGetWithdrawsRequestsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

/**
 * no description
 */
export class DexApi extends BaseAPI {

    /**
     * Gets BatchDTOs.
     * BatchDTOs (historical) ðŸ”¥
     */
    dexGetBatchDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetBatchDTOsHistoricalRequest): Observable<Array<DexBatchDTO>>
    dexGetBatchDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetBatchDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexBatchDTO>>>
    dexGetBatchDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetBatchDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexBatchDTO> | AjaxResponse<Array<DexBatchDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexBatchDTO>>({
            url: '/dapps/dex/BatchDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets batches.
     * Batches (historical)
     */
    dexGetBatchesHistorical({ startBlock, endBlock, startDate, endDate }: DexGetBatchesHistoricalRequest): Observable<Array<DexBatchDTO>>
    dexGetBatchesHistorical({ startBlock, endBlock, startDate, endDate }: DexGetBatchesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexBatchDTO>>>
    dexGetBatchesHistorical({ startBlock, endBlock, startDate, endDate }: DexGetBatchesHistoricalRequest, opts?: OperationOpts): Observable<Array<DexBatchDTO> | AjaxResponse<Array<DexBatchDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<DexBatchDTO>>({
            url: '/dapps/dex/batches/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets DepositDTOs.
     * DepositDTOs (historical) ðŸ”¥
     */
    dexGetDepositDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetDepositDTOsHistoricalRequest): Observable<Array<DexDepositDTO>>
    dexGetDepositDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetDepositDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexDepositDTO>>>
    dexGetDepositDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetDepositDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexDepositDTO> | AjaxResponse<Array<DexDepositDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexDepositDTO>>({
            url: '/dapps/dex/DepositDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets deposits.
     * Deposits (historical)
     */
    dexGetDepositsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetDepositsHistoricalRequest): Observable<Array<DexDepositDTO>>
    dexGetDepositsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetDepositsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexDepositDTO>>>
    dexGetDepositsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetDepositsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexDepositDTO> | AjaxResponse<Array<DexDepositDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<DexDepositDTO>>({
            url: '/dapps/dex/deposits/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets OrderDTOs.
     * OrderDTOs (historical) ðŸ”¥
     */
    dexGetOrderDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetOrderDTOsHistoricalRequest): Observable<Array<DexOrderDTO>>
    dexGetOrderDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetOrderDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexOrderDTO>>>
    dexGetOrderDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetOrderDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexOrderDTO> | AjaxResponse<Array<DexOrderDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexOrderDTO>>({
            url: '/dapps/dex/OrderDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets orders.
     * Orders (historical)
     */
    dexGetOrdersHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetOrdersHistoricalRequest): Observable<Array<DexOrderDTO>>
    dexGetOrdersHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetOrdersHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexOrderDTO>>>
    dexGetOrdersHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetOrdersHistoricalRequest, opts?: OperationOpts): Observable<Array<DexOrderDTO> | AjaxResponse<Array<DexOrderDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<DexOrderDTO>>({
            url: '/dapps/dex/orders/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PriceDTOs.
     * PriceDTOs (historical) ðŸ”¥
     */
    dexGetPriceDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetPriceDTOsHistoricalRequest): Observable<Array<DexPriceDTO>>
    dexGetPriceDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetPriceDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexPriceDTO>>>
    dexGetPriceDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetPriceDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexPriceDTO> | AjaxResponse<Array<DexPriceDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexPriceDTO>>({
            url: '/dapps/dex/PriceDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets prices.
     * Prices (historical)
     */
    dexGetPricesHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetPricesHistoricalRequest): Observable<Array<DexPriceDTO>>
    dexGetPricesHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetPricesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexPriceDTO>>>
    dexGetPricesHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetPricesHistoricalRequest, opts?: OperationOpts): Observable<Array<DexPriceDTO> | AjaxResponse<Array<DexPriceDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<DexPriceDTO>>({
            url: '/dapps/dex/prices/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets SolutionDTOs.
     * SolutionDTOs (historical) ðŸ”¥
     */
    dexGetSolutionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetSolutionDTOsHistoricalRequest): Observable<Array<DexSolutionDTO>>
    dexGetSolutionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetSolutionDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexSolutionDTO>>>
    dexGetSolutionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetSolutionDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexSolutionDTO> | AjaxResponse<Array<DexSolutionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexSolutionDTO>>({
            url: '/dapps/dex/SolutionDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets solutions.
     * Solutions (historical)
     */
    dexGetSolutionsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetSolutionsHistoricalRequest): Observable<Array<DexSolutionDTO>>
    dexGetSolutionsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetSolutionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexSolutionDTO>>>
    dexGetSolutionsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetSolutionsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexSolutionDTO> | AjaxResponse<Array<DexSolutionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<DexSolutionDTO>>({
            url: '/dapps/dex/solutions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets StatsDTOs.
     * StatsDTOs (historical) ðŸ”¥
     */
    dexGetStatsDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetStatsDTOsHistoricalRequest): Observable<Array<DexStatsDTO>>
    dexGetStatsDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetStatsDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexStatsDTO>>>
    dexGetStatsDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetStatsDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexStatsDTO> | AjaxResponse<Array<DexStatsDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexStatsDTO>>({
            url: '/dapps/dex/StatsDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets stats.
     * Stats (historical)
     */
    dexGetStatsHistorical({ startBlock, endBlock, startDate, endDate }: DexGetStatsHistoricalRequest): Observable<Array<DexStatsDTO>>
    dexGetStatsHistorical({ startBlock, endBlock, startDate, endDate }: DexGetStatsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexStatsDTO>>>
    dexGetStatsHistorical({ startBlock, endBlock, startDate, endDate }: DexGetStatsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexStatsDTO> | AjaxResponse<Array<DexStatsDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<DexStatsDTO>>({
            url: '/dapps/dex/stats/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TokenDTOs.
     * TokenDTOs (historical) ðŸ”¥
     */
    dexGetTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetTokenDTOsHistoricalRequest): Observable<Array<DexTokenDTO>>
    dexGetTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetTokenDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexTokenDTO>>>
    dexGetTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetTokenDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexTokenDTO> | AjaxResponse<Array<DexTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexTokenDTO>>({
            url: '/dapps/dex/TokenDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (historical) ðŸ”¥
     */
    dexGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetTokensHistoricalRequest): Observable<Array<DexTokenDTO>>
    dexGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexTokenDTO>>>
    dexGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<DexTokenDTO> | AjaxResponse<Array<DexTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<DexTokenDTO>>({
            url: '/dapps/dex/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TradeDTOs.
     * TradeDTOs (historical) ðŸ”¥
     */
    dexGetTradeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetTradeDTOsHistoricalRequest): Observable<Array<DexTradeDTO>>
    dexGetTradeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetTradeDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexTradeDTO>>>
    dexGetTradeDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetTradeDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexTradeDTO> | AjaxResponse<Array<DexTradeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexTradeDTO>>({
            url: '/dapps/dex/TradeDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets trades.
     * Trades (historical) ðŸ”¥
     */
    dexGetTradesHistorical({ startBlock, endBlock, startDate, endDate }: DexGetTradesHistoricalRequest): Observable<Array<DexTradeDTO>>
    dexGetTradesHistorical({ startBlock, endBlock, startDate, endDate }: DexGetTradesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexTradeDTO>>>
    dexGetTradesHistorical({ startBlock, endBlock, startDate, endDate }: DexGetTradesHistoricalRequest, opts?: OperationOpts): Observable<Array<DexTradeDTO> | AjaxResponse<Array<DexTradeDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<DexTradeDTO>>({
            url: '/dapps/dex/trades/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets UserDTOs.
     * UserDTOs (historical) ðŸ”¥
     */
    dexGetUserDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetUserDTOsHistoricalRequest): Observable<Array<DexUserDTO>>
    dexGetUserDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetUserDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexUserDTO>>>
    dexGetUserDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetUserDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexUserDTO> | AjaxResponse<Array<DexUserDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexUserDTO>>({
            url: '/dapps/dex/UserDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets users.
     * Users (historical)
     */
    dexGetUsersHistorical({ startBlock, endBlock, startDate, endDate }: DexGetUsersHistoricalRequest): Observable<Array<DexUserDTO>>
    dexGetUsersHistorical({ startBlock, endBlock, startDate, endDate }: DexGetUsersHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexUserDTO>>>
    dexGetUsersHistorical({ startBlock, endBlock, startDate, endDate }: DexGetUsersHistoricalRequest, opts?: OperationOpts): Observable<Array<DexUserDTO> | AjaxResponse<Array<DexUserDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<DexUserDTO>>({
            url: '/dapps/dex/users/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets WithdrawDTOs.
     * WithdrawDTOs (historical) ðŸ”¥
     */
    dexGetWithdrawDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetWithdrawDTOsHistoricalRequest): Observable<Array<DexWithdrawDTO>>
    dexGetWithdrawDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetWithdrawDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexWithdrawDTO>>>
    dexGetWithdrawDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetWithdrawDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexWithdrawDTO> | AjaxResponse<Array<DexWithdrawDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexWithdrawDTO>>({
            url: '/dapps/dex/WithdrawDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets WithdrawRequestDTOs.
     * WithdrawRequestDTOs (historical) ðŸ”¥
     */
    dexGetWithdrawRequestDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetWithdrawRequestDTOsHistoricalRequest): Observable<Array<DexWithdrawRequestDTO>>
    dexGetWithdrawRequestDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetWithdrawRequestDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexWithdrawRequestDTO>>>
    dexGetWithdrawRequestDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: DexGetWithdrawRequestDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexWithdrawRequestDTO> | AjaxResponse<Array<DexWithdrawRequestDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<DexWithdrawRequestDTO>>({
            url: '/dapps/dex/WithdrawRequestDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets withdraws.
     * Withdraws (historical)
     */
    dexGetWithdrawsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetWithdrawsHistoricalRequest): Observable<Array<DexWithdrawDTO>>
    dexGetWithdrawsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetWithdrawsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexWithdrawDTO>>>
    dexGetWithdrawsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetWithdrawsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexWithdrawDTO> | AjaxResponse<Array<DexWithdrawDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<DexWithdrawDTO>>({
            url: '/dapps/dex/withdraws/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets withdraws requests.
     * WithdrawsRequests (historical)
     */
    dexGetWithdrawsRequestsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetWithdrawsRequestsHistoricalRequest): Observable<Array<DexWithdrawRequestDTO>>
    dexGetWithdrawsRequestsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetWithdrawsRequestsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<DexWithdrawRequestDTO>>>
    dexGetWithdrawsRequestsHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: DexGetWithdrawsRequestsHistoricalRequest, opts?: OperationOpts): Observable<Array<DexWithdrawRequestDTO> | AjaxResponse<Array<DexWithdrawRequestDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<DexWithdrawRequestDTO>>({
            url: '/dapps/dex/withdrawsRequests/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
