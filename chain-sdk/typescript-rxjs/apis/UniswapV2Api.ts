// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    UniswapV2BundleV2DTO,
    UniswapV2BurnV2DTO,
    UniswapV2LiquidityPositionSnapshotV2DTO,
    UniswapV2LiquidityPositionV2DTO,
    UniswapV2MintV2DTO,
    UniswapV2PairDayDataV2DTO,
    UniswapV2PairHourDataV2DTO,
    UniswapV2PairV2DTO,
    UniswapV2SwapV2DTO,
    UniswapV2TokenDayDataV2DTO,
    UniswapV2TokenV2DTO,
    UniswapV2TransactionV2DTO,
    UniswapV2UniswapDayDataV2DTO,
    UniswapV2UniswapFactoryV2DTO,
    UniswapV2UserV2DTO,
} from '../models';

export interface UniswapV2GetBundlesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV2GetBurnsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV2GetFactoryHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV2GetLiquidityPositionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetLiquidityPositionsSnapshotsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetMintsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetPoolsCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV2GetPoolsDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetPoolsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetPoolsHourDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetSwapsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetTokensDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface UniswapV2GetTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface UniswapV2GetTransactionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV2GetUsersHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

/**
 * no description
 */
export class UniswapV2Api extends BaseAPI {

    /**
     * Gets bundles.
     * Bundles (historical)
     */
    uniswapV2GetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetBundlesHistoricalRequest): Observable<Array<UniswapV2BundleV2DTO>>
    uniswapV2GetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetBundlesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BundleV2DTO>>>
    uniswapV2GetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetBundlesHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2BundleV2DTO> | AjaxResponse<Array<UniswapV2BundleV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2BundleV2DTO>>({
            url: '/dapps/uniswapv2/bundles/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets burns.
     * Burns (historical)
     */
    uniswapV2GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBurnsHistoricalRequest): Observable<Array<UniswapV2BurnV2DTO>>
    uniswapV2GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBurnsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BurnV2DTO>>>
    uniswapV2GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBurnsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2BurnV2DTO> | AjaxResponse<Array<UniswapV2BurnV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2BurnV2DTO>>({
            url: '/dapps/uniswapv2/burns/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets uniswapv2 day data.
     * DayData (historical)
     */
    uniswapV2GetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetDayDataHistoricalRequest): Observable<Array<UniswapV2UniswapDayDataV2DTO>>
    uniswapV2GetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapDayDataV2DTO>>>
    uniswapV2GetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UniswapDayDataV2DTO> | AjaxResponse<Array<UniswapV2UniswapDayDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2UniswapDayDataV2DTO>>({
            url: '/dapps/uniswapv2/dayData/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets factory.
     * Factory (historical)
     */
    uniswapV2GetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetFactoryHistoricalRequest): Observable<Array<UniswapV2UniswapFactoryV2DTO>>
    uniswapV2GetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetFactoryHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapFactoryV2DTO>>>
    uniswapV2GetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetFactoryHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UniswapFactoryV2DTO> | AjaxResponse<Array<UniswapV2UniswapFactoryV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2UniswapFactoryV2DTO>>({
            url: '/dapps/uniswapv2/factory/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidity positions.
     * LiquidityPositions (historical)
     */
    uniswapV2GetLiquidityPositionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsHistoricalRequest): Observable<Array<UniswapV2LiquidityPositionV2DTO>>
    uniswapV2GetLiquidityPositionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionV2DTO>>>
    uniswapV2GetLiquidityPositionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionV2DTO> | AjaxResponse<Array<UniswapV2LiquidityPositionV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2LiquidityPositionV2DTO>>({
            url: '/dapps/uniswapv2/liquidityPositions/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidity positions snapshots.
     * LiquidityPositionsSnapshots (historical)
     */
    uniswapV2GetLiquidityPositionsSnapshotsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsSnapshotsHistoricalRequest): Observable<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>
    uniswapV2GetLiquidityPositionsSnapshotsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsSnapshotsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>>
    uniswapV2GetLiquidityPositionsSnapshotsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsSnapshotsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionSnapshotV2DTO> | AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>({
            url: '/dapps/uniswapv2/liquidityPositionsSnapshots/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets mints.
     * Mints (historical)
     */
    uniswapV2GetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetMintsHistoricalRequest): Observable<Array<UniswapV2MintV2DTO>>
    uniswapV2GetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetMintsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2MintV2DTO>>>
    uniswapV2GetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetMintsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2MintV2DTO> | AjaxResponse<Array<UniswapV2MintV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2MintV2DTO>>({
            url: '/dapps/uniswapv2/mints/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * Pools (current) 🔥
     */
    uniswapV2GetPoolsCurrent({ filterPoolId }: UniswapV2GetPoolsCurrentRequest): Observable<Array<UniswapV2PairV2DTO>>
    uniswapV2GetPoolsCurrent({ filterPoolId }: UniswapV2GetPoolsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairV2DTO>>>
    uniswapV2GetPoolsCurrent({ filterPoolId }: UniswapV2GetPoolsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairV2DTO> | AjaxResponse<Array<UniswapV2PairV2DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV2PairV2DTO>>({
            url: '/dapps/uniswapv2/pools/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools day data.
     * PoolsDayData (historical)
     */
    uniswapV2GetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsDayDataHistoricalRequest): Observable<Array<UniswapV2PairDayDataV2DTO>>
    uniswapV2GetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairDayDataV2DTO>>>
    uniswapV2GetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairDayDataV2DTO> | AjaxResponse<Array<UniswapV2PairDayDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2PairDayDataV2DTO>>({
            url: '/dapps/uniswapv2/poolsDayData/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * Pools (historical) 🔥
     */
    uniswapV2GetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHistoricalRequest): Observable<Array<UniswapV2PairV2DTO>>
    uniswapV2GetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairV2DTO>>>
    uniswapV2GetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairV2DTO> | AjaxResponse<Array<UniswapV2PairV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2PairV2DTO>>({
            url: '/dapps/uniswapv2/pools/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools tracked each our.
     * PoolsHourData (historical)
     */
    uniswapV2GetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHourDataHistoricalRequest): Observable<Array<UniswapV2PairHourDataV2DTO>>
    uniswapV2GetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHourDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairHourDataV2DTO>>>
    uniswapV2GetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHourDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairHourDataV2DTO> | AjaxResponse<Array<UniswapV2PairHourDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2PairHourDataV2DTO>>({
            url: '/dapps/uniswapv2/poolsHourData/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (current) 🔥
     */
    uniswapV2GetSwapsCurrent(): Observable<Array<UniswapV2SwapV2DTO>>
    uniswapV2GetSwapsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2SwapV2DTO>>>
    uniswapV2GetSwapsCurrent(opts?: OperationOpts): Observable<Array<UniswapV2SwapV2DTO> | AjaxResponse<Array<UniswapV2SwapV2DTO>>> {
        return this.request<Array<UniswapV2SwapV2DTO>>({
            url: '/dapps/uniswapv2/swaps/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (historical) 🔥
     */
    uniswapV2GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetSwapsHistoricalRequest): Observable<Array<UniswapV2SwapV2DTO>>
    uniswapV2GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetSwapsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2SwapV2DTO>>>
    uniswapV2GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetSwapsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2SwapV2DTO> | AjaxResponse<Array<UniswapV2SwapV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2SwapV2DTO>>({
            url: '/dapps/uniswapv2/swaps/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (current) 🔥
     */
    uniswapV2GetTokensCurrent(): Observable<Array<UniswapV2TokenV2DTO>>
    uniswapV2GetTokensCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenV2DTO>>>
    uniswapV2GetTokensCurrent(opts?: OperationOpts): Observable<Array<UniswapV2TokenV2DTO> | AjaxResponse<Array<UniswapV2TokenV2DTO>>> {
        return this.request<Array<UniswapV2TokenV2DTO>>({
            url: '/dapps/uniswapv2/tokens/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens day data.
     * TokensDayData (historical)
     */
    uniswapV2GetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensDayDataHistoricalRequest): Observable<Array<UniswapV2TokenDayDataV2DTO>>
    uniswapV2GetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenDayDataV2DTO>>>
    uniswapV2GetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TokenDayDataV2DTO> | AjaxResponse<Array<UniswapV2TokenDayDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<UniswapV2TokenDayDataV2DTO>>({
            url: '/dapps/uniswapv2/tokensDayData/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (historical) 🔥
     */
    uniswapV2GetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensHistoricalRequest): Observable<Array<UniswapV2TokenV2DTO>>
    uniswapV2GetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenV2DTO>>>
    uniswapV2GetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TokenV2DTO> | AjaxResponse<Array<UniswapV2TokenV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<UniswapV2TokenV2DTO>>({
            url: '/dapps/uniswapv2/tokens/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets transactions.
     * Transactions (historical)
     */
    uniswapV2GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetTransactionsHistoricalRequest): Observable<Array<UniswapV2TransactionV2DTO>>
    uniswapV2GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TransactionV2DTO>>>
    uniswapV2GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TransactionV2DTO> | AjaxResponse<Array<UniswapV2TransactionV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2TransactionV2DTO>>({
            url: '/dapps/uniswapv2/transactions/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets users.
     * Users (historical)
     */
    uniswapV2GetUsersHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetUsersHistoricalRequest): Observable<Array<UniswapV2UserV2DTO>>
    uniswapV2GetUsersHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetUsersHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UserV2DTO>>>
    uniswapV2GetUsersHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetUsersHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UserV2DTO> | AjaxResponse<Array<UniswapV2UserV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2UserV2DTO>>({
            url: '/dapps/uniswapv2/users/historical-manual',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
