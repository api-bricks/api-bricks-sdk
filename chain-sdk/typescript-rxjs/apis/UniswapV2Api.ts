// tslint:disable
/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    UniswapV2BundleDTO,
    UniswapV2BurnDTO,
    UniswapV2LiquidityPositionDTO,
    UniswapV2LiquidityPositionSnapshotDTO,
    UniswapV2MintDTO,
    UniswapV2PairDTO,
    UniswapV2PairDayDataDTO,
    UniswapV2PairHourDataDTO,
    UniswapV2SwapDTO,
    UniswapV2TokenDTO,
    UniswapV2TokenDayDataDTO,
    UniswapV2TransactionDTO,
    UniswapV2UniswapDayDataDTO,
    UniswapV2UniswapFactoryDTO,
    UniswapV2UserDTO,
} from '../models';

export interface UniswapV2GetBundlesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface UniswapV2GetBurnsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pair?: string;
}

export interface UniswapV2GetLiquidityPositionSnapshotsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    user?: string;
    pair?: string;
}

export interface UniswapV2GetLiquidityPositionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    user?: string;
    pair?: string;
}

export interface UniswapV2GetMintsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pair?: string;
}

export interface UniswapV2GetPairDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    token0?: string;
    token1?: string;
}

export interface UniswapV2GetPairHourDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pair?: string;
}

export interface UniswapV2GetPairsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    token0?: string;
    token1?: string;
}

export interface UniswapV2GetSwapsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    pair?: string;
}

export interface UniswapV2GetTokenDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface UniswapV2GetTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
    symbol?: string;
    name?: string;
}

export interface UniswapV2GetTransactionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface UniswapV2GetUniswapDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface UniswapV2GetUniswapFactoriesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface UniswapV2GetUsersHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    id?: string;
}

export interface UniswapV2PairsCurrentRequest {
    id?: string;
}

export interface UniswapV2SwapsCurrentRequest {
    pair?: string;
}

/**
 * no description
 */
export class UniswapV2Api extends BaseAPI {

    /**
     * Gets bundles.
     * Bundles (current)
     */
    uniswapV2BundlesCurrent(): Observable<Array<UniswapV2BundleDTO>>
    uniswapV2BundlesCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BundleDTO>>>
    uniswapV2BundlesCurrent(opts?: OperationOpts): Observable<Array<UniswapV2BundleDTO> | AjaxResponse<Array<UniswapV2BundleDTO>>> {
        return this.request<Array<UniswapV2BundleDTO>>({
            url: '/dapps/uniswapv2/bundles/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets burns.
     * Burns (current)
     */
    uniswapV2BurnsCurrent(): Observable<Array<UniswapV2BurnDTO>>
    uniswapV2BurnsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BurnDTO>>>
    uniswapV2BurnsCurrent(opts?: OperationOpts): Observable<Array<UniswapV2BurnDTO> | AjaxResponse<Array<UniswapV2BurnDTO>>> {
        return this.request<Array<UniswapV2BurnDTO>>({
            url: '/dapps/uniswapv2/burns/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets bundles.
     * Bundles (historical)
     */
    uniswapV2GetBundlesHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetBundlesHistoricalRequest): Observable<Array<UniswapV2BundleDTO>>
    uniswapV2GetBundlesHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetBundlesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BundleDTO>>>
    uniswapV2GetBundlesHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetBundlesHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2BundleDTO> | AjaxResponse<Array<UniswapV2BundleDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<UniswapV2BundleDTO>>({
            url: '/dapps/uniswapv2/bundles/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets burns.
     * Burns (historical)
     */
    uniswapV2GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetBurnsHistoricalRequest): Observable<Array<UniswapV2BurnDTO>>
    uniswapV2GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetBurnsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BurnDTO>>>
    uniswapV2GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetBurnsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2BurnDTO> | AjaxResponse<Array<UniswapV2BurnDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pair != null) { query['pair'] = pair; }

        return this.request<Array<UniswapV2BurnDTO>>({
            url: '/dapps/uniswapv2/burns/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidityPositionSnapshots.
     * LiquidityPositionSnapshots (historical)
     */
    uniswapV2GetLiquidityPositionSnapshotsHistorical({ startBlock, endBlock, startDate, endDate, id, user, pair }: UniswapV2GetLiquidityPositionSnapshotsHistoricalRequest): Observable<Array<UniswapV2LiquidityPositionSnapshotDTO>>
    uniswapV2GetLiquidityPositionSnapshotsHistorical({ startBlock, endBlock, startDate, endDate, id, user, pair }: UniswapV2GetLiquidityPositionSnapshotsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotDTO>>>
    uniswapV2GetLiquidityPositionSnapshotsHistorical({ startBlock, endBlock, startDate, endDate, id, user, pair }: UniswapV2GetLiquidityPositionSnapshotsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionSnapshotDTO> | AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (user != null) { query['user'] = user; }
        if (pair != null) { query['pair'] = pair; }

        return this.request<Array<UniswapV2LiquidityPositionSnapshotDTO>>({
            url: '/dapps/uniswapv2/liquidityPositionSnapshots/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidityPositions.
     * LiquidityPositions (historical)
     */
    uniswapV2GetLiquidityPositionsHistorical({ startBlock, endBlock, startDate, endDate, id, user, pair }: UniswapV2GetLiquidityPositionsHistoricalRequest): Observable<Array<UniswapV2LiquidityPositionDTO>>
    uniswapV2GetLiquidityPositionsHistorical({ startBlock, endBlock, startDate, endDate, id, user, pair }: UniswapV2GetLiquidityPositionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionDTO>>>
    uniswapV2GetLiquidityPositionsHistorical({ startBlock, endBlock, startDate, endDate, id, user, pair }: UniswapV2GetLiquidityPositionsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionDTO> | AjaxResponse<Array<UniswapV2LiquidityPositionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (user != null) { query['user'] = user; }
        if (pair != null) { query['pair'] = pair; }

        return this.request<Array<UniswapV2LiquidityPositionDTO>>({
            url: '/dapps/uniswapv2/liquidityPositions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets mints.
     * Mints (historical)
     */
    uniswapV2GetMintsHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetMintsHistoricalRequest): Observable<Array<UniswapV2MintDTO>>
    uniswapV2GetMintsHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetMintsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2MintDTO>>>
    uniswapV2GetMintsHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetMintsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2MintDTO> | AjaxResponse<Array<UniswapV2MintDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pair != null) { query['pair'] = pair; }

        return this.request<Array<UniswapV2MintDTO>>({
            url: '/dapps/uniswapv2/mints/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pairDayData.
     * PairDayData (historical)
     */
    uniswapV2GetPairDayDataHistorical({ startBlock, endBlock, startDate, endDate, id, token0, token1 }: UniswapV2GetPairDayDataHistoricalRequest): Observable<Array<UniswapV2PairDayDataDTO>>
    uniswapV2GetPairDayDataHistorical({ startBlock, endBlock, startDate, endDate, id, token0, token1 }: UniswapV2GetPairDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairDayDataDTO>>>
    uniswapV2GetPairDayDataHistorical({ startBlock, endBlock, startDate, endDate, id, token0, token1 }: UniswapV2GetPairDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairDayDataDTO> | AjaxResponse<Array<UniswapV2PairDayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (token0 != null) { query['token_0'] = token0; }
        if (token1 != null) { query['token_1'] = token1; }

        return this.request<Array<UniswapV2PairDayDataDTO>>({
            url: '/dapps/uniswapv2/pairDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pairHourData.
     * PairHourData (historical)
     */
    uniswapV2GetPairHourDataHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetPairHourDataHistoricalRequest): Observable<Array<UniswapV2PairHourDataDTO>>
    uniswapV2GetPairHourDataHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetPairHourDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairHourDataDTO>>>
    uniswapV2GetPairHourDataHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetPairHourDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairHourDataDTO> | AjaxResponse<Array<UniswapV2PairHourDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pair != null) { query['pair'] = pair; }

        return this.request<Array<UniswapV2PairHourDataDTO>>({
            url: '/dapps/uniswapv2/pairHourData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pairs.
     * Pairs (historical)
     */
    uniswapV2GetPairsHistorical({ startBlock, endBlock, startDate, endDate, id, token0, token1 }: UniswapV2GetPairsHistoricalRequest): Observable<Array<UniswapV2PairDTO>>
    uniswapV2GetPairsHistorical({ startBlock, endBlock, startDate, endDate, id, token0, token1 }: UniswapV2GetPairsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairDTO>>>
    uniswapV2GetPairsHistorical({ startBlock, endBlock, startDate, endDate, id, token0, token1 }: UniswapV2GetPairsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairDTO> | AjaxResponse<Array<UniswapV2PairDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (token0 != null) { query['token_0'] = token0; }
        if (token1 != null) { query['token_1'] = token1; }

        return this.request<Array<UniswapV2PairDTO>>({
            url: '/dapps/uniswapv2/pairs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (historical)
     */
    uniswapV2GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetSwapsHistoricalRequest): Observable<Array<UniswapV2SwapDTO>>
    uniswapV2GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetSwapsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2SwapDTO>>>
    uniswapV2GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, id, pair }: UniswapV2GetSwapsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2SwapDTO> | AjaxResponse<Array<UniswapV2SwapDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (pair != null) { query['pair'] = pair; }

        return this.request<Array<UniswapV2SwapDTO>>({
            url: '/dapps/uniswapv2/swaps/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokenDayData.
     * TokenDayData (historical)
     */
    uniswapV2GetTokenDayDataHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetTokenDayDataHistoricalRequest): Observable<Array<UniswapV2TokenDayDataDTO>>
    uniswapV2GetTokenDayDataHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetTokenDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenDayDataDTO>>>
    uniswapV2GetTokenDayDataHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetTokenDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TokenDayDataDTO> | AjaxResponse<Array<UniswapV2TokenDayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<UniswapV2TokenDayDataDTO>>({
            url: '/dapps/uniswapv2/tokenDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (historical)
     */
    uniswapV2GetTokensHistorical({ startBlock, endBlock, startDate, endDate, id, symbol, name }: UniswapV2GetTokensHistoricalRequest): Observable<Array<UniswapV2TokenDTO>>
    uniswapV2GetTokensHistorical({ startBlock, endBlock, startDate, endDate, id, symbol, name }: UniswapV2GetTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenDTO>>>
    uniswapV2GetTokensHistorical({ startBlock, endBlock, startDate, endDate, id, symbol, name }: UniswapV2GetTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TokenDTO> | AjaxResponse<Array<UniswapV2TokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }
        if (symbol != null) { query['symbol'] = symbol; }
        if (name != null) { query['name'] = name; }

        return this.request<Array<UniswapV2TokenDTO>>({
            url: '/dapps/uniswapv2/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets transactions.
     * Transactions (historical)
     */
    uniswapV2GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetTransactionsHistoricalRequest): Observable<Array<UniswapV2TransactionDTO>>
    uniswapV2GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TransactionDTO>>>
    uniswapV2GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TransactionDTO> | AjaxResponse<Array<UniswapV2TransactionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<UniswapV2TransactionDTO>>({
            url: '/dapps/uniswapv2/transactions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets uniswapDayData.
     * UniswapDayData (historical)
     */
    uniswapV2GetUniswapDayDataHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetUniswapDayDataHistoricalRequest): Observable<Array<UniswapV2UniswapDayDataDTO>>
    uniswapV2GetUniswapDayDataHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetUniswapDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapDayDataDTO>>>
    uniswapV2GetUniswapDayDataHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetUniswapDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UniswapDayDataDTO> | AjaxResponse<Array<UniswapV2UniswapDayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<UniswapV2UniswapDayDataDTO>>({
            url: '/dapps/uniswapv2/uniswapDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets uniswapFactories.
     * UniswapFactories (historical)
     */
    uniswapV2GetUniswapFactoriesHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetUniswapFactoriesHistoricalRequest): Observable<Array<UniswapV2UniswapFactoryDTO>>
    uniswapV2GetUniswapFactoriesHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetUniswapFactoriesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapFactoryDTO>>>
    uniswapV2GetUniswapFactoriesHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetUniswapFactoriesHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UniswapFactoryDTO> | AjaxResponse<Array<UniswapV2UniswapFactoryDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<UniswapV2UniswapFactoryDTO>>({
            url: '/dapps/uniswapv2/uniswapFactories/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets users.
     * Users (historical)
     */
    uniswapV2GetUsersHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetUsersHistoricalRequest): Observable<Array<UniswapV2UserDTO>>
    uniswapV2GetUsersHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetUsersHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UserDTO>>>
    uniswapV2GetUsersHistorical({ startBlock, endBlock, startDate, endDate, id }: UniswapV2GetUsersHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UserDTO> | AjaxResponse<Array<UniswapV2UserDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (id != null) { query['id'] = id; }

        return this.request<Array<UniswapV2UserDTO>>({
            url: '/dapps/uniswapv2/users/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidityPositionSnapshots.
     * LiquidityPositionSnapshots (current)
     */
    uniswapV2LiquidityPositionSnapshotsCurrent(): Observable<Array<UniswapV2LiquidityPositionSnapshotDTO>>
    uniswapV2LiquidityPositionSnapshotsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotDTO>>>
    uniswapV2LiquidityPositionSnapshotsCurrent(opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionSnapshotDTO> | AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotDTO>>> {
        return this.request<Array<UniswapV2LiquidityPositionSnapshotDTO>>({
            url: '/dapps/uniswapv2/liquidityPositionSnapshots/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidityPositions.
     * LiquidityPositions (current)
     */
    uniswapV2LiquidityPositionsCurrent(): Observable<Array<UniswapV2LiquidityPositionDTO>>
    uniswapV2LiquidityPositionsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionDTO>>>
    uniswapV2LiquidityPositionsCurrent(opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionDTO> | AjaxResponse<Array<UniswapV2LiquidityPositionDTO>>> {
        return this.request<Array<UniswapV2LiquidityPositionDTO>>({
            url: '/dapps/uniswapv2/liquidityPositions/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets mints.
     * Mints (current)
     */
    uniswapV2MintsCurrent(): Observable<Array<UniswapV2MintDTO>>
    uniswapV2MintsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2MintDTO>>>
    uniswapV2MintsCurrent(opts?: OperationOpts): Observable<Array<UniswapV2MintDTO> | AjaxResponse<Array<UniswapV2MintDTO>>> {
        return this.request<Array<UniswapV2MintDTO>>({
            url: '/dapps/uniswapv2/mints/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets pairDayData.
     * PairDayData (current)
     */
    uniswapV2PairDayDataCurrent(): Observable<Array<UniswapV2PairDayDataDTO>>
    uniswapV2PairDayDataCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairDayDataDTO>>>
    uniswapV2PairDayDataCurrent(opts?: OperationOpts): Observable<Array<UniswapV2PairDayDataDTO> | AjaxResponse<Array<UniswapV2PairDayDataDTO>>> {
        return this.request<Array<UniswapV2PairDayDataDTO>>({
            url: '/dapps/uniswapv2/pairDayData/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets pairHourData.
     * PairHourData (current)
     */
    uniswapV2PairHourDataCurrent(): Observable<Array<UniswapV2PairHourDataDTO>>
    uniswapV2PairHourDataCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairHourDataDTO>>>
    uniswapV2PairHourDataCurrent(opts?: OperationOpts): Observable<Array<UniswapV2PairHourDataDTO> | AjaxResponse<Array<UniswapV2PairHourDataDTO>>> {
        return this.request<Array<UniswapV2PairHourDataDTO>>({
            url: '/dapps/uniswapv2/pairHourData/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets pairs.
     * Pairs (current)
     */
    uniswapV2PairsCurrent({ id }: UniswapV2PairsCurrentRequest): Observable<Array<UniswapV2PairDTO>>
    uniswapV2PairsCurrent({ id }: UniswapV2PairsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairDTO>>>
    uniswapV2PairsCurrent({ id }: UniswapV2PairsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairDTO> | AjaxResponse<Array<UniswapV2PairDTO>>> {

        const query: HttpQuery = {};

        if (id != null) { query['id'] = id; }

        return this.request<Array<UniswapV2PairDTO>>({
            url: '/dapps/uniswapv2/pairs/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (current)
     */
    uniswapV2SwapsCurrent({ pair }: UniswapV2SwapsCurrentRequest): Observable<Array<UniswapV2SwapDTO>>
    uniswapV2SwapsCurrent({ pair }: UniswapV2SwapsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2SwapDTO>>>
    uniswapV2SwapsCurrent({ pair }: UniswapV2SwapsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV2SwapDTO> | AjaxResponse<Array<UniswapV2SwapDTO>>> {

        const query: HttpQuery = {};

        if (pair != null) { query['pair'] = pair; }

        return this.request<Array<UniswapV2SwapDTO>>({
            url: '/dapps/uniswapv2/swaps/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokenDayData.
     * TokenDayData (current)
     */
    uniswapV2TokenDayDataCurrent(): Observable<Array<UniswapV2TokenDayDataDTO>>
    uniswapV2TokenDayDataCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenDayDataDTO>>>
    uniswapV2TokenDayDataCurrent(opts?: OperationOpts): Observable<Array<UniswapV2TokenDayDataDTO> | AjaxResponse<Array<UniswapV2TokenDayDataDTO>>> {
        return this.request<Array<UniswapV2TokenDayDataDTO>>({
            url: '/dapps/uniswapv2/tokenDayData/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (current)
     */
    uniswapV2TokensCurrent(): Observable<Array<UniswapV2TokenDTO>>
    uniswapV2TokensCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenDTO>>>
    uniswapV2TokensCurrent(opts?: OperationOpts): Observable<Array<UniswapV2TokenDTO> | AjaxResponse<Array<UniswapV2TokenDTO>>> {
        return this.request<Array<UniswapV2TokenDTO>>({
            url: '/dapps/uniswapv2/tokens/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets transactions.
     * Transactions (current)
     */
    uniswapV2TransactionsCurrent(): Observable<Array<UniswapV2TransactionDTO>>
    uniswapV2TransactionsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TransactionDTO>>>
    uniswapV2TransactionsCurrent(opts?: OperationOpts): Observable<Array<UniswapV2TransactionDTO> | AjaxResponse<Array<UniswapV2TransactionDTO>>> {
        return this.request<Array<UniswapV2TransactionDTO>>({
            url: '/dapps/uniswapv2/transactions/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets uniswapDayData.
     * UniswapDayData (current)
     */
    uniswapV2UniswapDayDataCurrent(): Observable<Array<UniswapV2UniswapDayDataDTO>>
    uniswapV2UniswapDayDataCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapDayDataDTO>>>
    uniswapV2UniswapDayDataCurrent(opts?: OperationOpts): Observable<Array<UniswapV2UniswapDayDataDTO> | AjaxResponse<Array<UniswapV2UniswapDayDataDTO>>> {
        return this.request<Array<UniswapV2UniswapDayDataDTO>>({
            url: '/dapps/uniswapv2/uniswapDayData/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets uniswapFactories.
     * UniswapFactories (current)
     */
    uniswapV2UniswapFactoriesCurrent(): Observable<Array<UniswapV2UniswapFactoryDTO>>
    uniswapV2UniswapFactoriesCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapFactoryDTO>>>
    uniswapV2UniswapFactoriesCurrent(opts?: OperationOpts): Observable<Array<UniswapV2UniswapFactoryDTO> | AjaxResponse<Array<UniswapV2UniswapFactoryDTO>>> {
        return this.request<Array<UniswapV2UniswapFactoryDTO>>({
            url: '/dapps/uniswapv2/uniswapFactories/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets users.
     * Users (current)
     */
    uniswapV2UsersCurrent(): Observable<Array<UniswapV2UserDTO>>
    uniswapV2UsersCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UserDTO>>>
    uniswapV2UsersCurrent(opts?: OperationOpts): Observable<Array<UniswapV2UserDTO> | AjaxResponse<Array<UniswapV2UserDTO>>> {
        return this.request<Array<UniswapV2UserDTO>>({
            url: '/dapps/uniswapv2/users/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

}
