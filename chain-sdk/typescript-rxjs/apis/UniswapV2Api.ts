// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    UniswapV2BundleV2DTO,
    UniswapV2BurnV2DTO,
    UniswapV2LiquidityPositionSnapshotV2DTO,
    UniswapV2LiquidityPositionV2DTO,
    UniswapV2MintV2DTO,
    UniswapV2PairDayDataV2DTO,
    UniswapV2PairHourDataV2DTO,
    UniswapV2PairV2DTO,
    UniswapV2SwapV2DTO,
    UniswapV2TokenDayDataV2DTO,
    UniswapV2TokenV2DTO,
    UniswapV2TransactionV2DTO,
    UniswapV2UniswapDayDataV2DTO,
    UniswapV2UniswapFactoryV2DTO,
    UniswapV2UserV2DTO,
} from '../models';

export interface UniswapV2GetBundleV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetBundlesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV2GetBurnV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetBurnsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV2GetFactoryHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV2GetLiquidityPositionSnapshotV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetLiquidityPositionV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetLiquidityPositionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetLiquidityPositionsSnapshotsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetMintV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetMintsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetPairDayDataV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetPairHourDataV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetPairV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetPoolsCurrentRequest {
    filterPoolId?: string;
}

export interface UniswapV2GetPoolsDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetPoolsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetPoolsHourDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetSwapV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetSwapsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetTokenDayDataV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetTokenV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetTokensDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface UniswapV2GetTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface UniswapV2GetTransactionV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetTransactionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface UniswapV2GetUniswapDayDataV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetUniswapFactoryV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetUserV2DTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface UniswapV2GetUsersHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

/**
 * no description
 */
export class UniswapV2Api extends BaseAPI {

    /**
     * Gets BundleV2DTOs.
     * BundleV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetBundleV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBundleV2DTOsHistoricalRequest): Observable<Array<UniswapV2BundleV2DTO>>
    uniswapV2GetBundleV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBundleV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BundleV2DTO>>>
    uniswapV2GetBundleV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBundleV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2BundleV2DTO> | AjaxResponse<Array<UniswapV2BundleV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2BundleV2DTO>>({
            url: '/dapps/uniswapv2/BundleV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets bundles.
     * Bundles (historical)
     */
    uniswapV2GetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetBundlesHistoricalRequest): Observable<Array<UniswapV2BundleV2DTO>>
    uniswapV2GetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetBundlesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BundleV2DTO>>>
    uniswapV2GetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetBundlesHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2BundleV2DTO> | AjaxResponse<Array<UniswapV2BundleV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2BundleV2DTO>>({
            url: '/dapps/uniswapv2/bundles/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets BurnV2DTOs.
     * BurnV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetBurnV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBurnV2DTOsHistoricalRequest): Observable<Array<UniswapV2BurnV2DTO>>
    uniswapV2GetBurnV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBurnV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BurnV2DTO>>>
    uniswapV2GetBurnV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBurnV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2BurnV2DTO> | AjaxResponse<Array<UniswapV2BurnV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2BurnV2DTO>>({
            url: '/dapps/uniswapv2/BurnV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets burns.
     * Burns (historical)
     */
    uniswapV2GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBurnsHistoricalRequest): Observable<Array<UniswapV2BurnV2DTO>>
    uniswapV2GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBurnsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2BurnV2DTO>>>
    uniswapV2GetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetBurnsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2BurnV2DTO> | AjaxResponse<Array<UniswapV2BurnV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2BurnV2DTO>>({
            url: '/dapps/uniswapv2/burns/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets uniswapv2 day data.
     * DayData (historical)
     */
    uniswapV2GetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetDayDataHistoricalRequest): Observable<Array<UniswapV2UniswapDayDataV2DTO>>
    uniswapV2GetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapDayDataV2DTO>>>
    uniswapV2GetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UniswapDayDataV2DTO> | AjaxResponse<Array<UniswapV2UniswapDayDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2UniswapDayDataV2DTO>>({
            url: '/dapps/uniswapv2/dayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets factory.
     * Factory (historical)
     */
    uniswapV2GetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetFactoryHistoricalRequest): Observable<Array<UniswapV2UniswapFactoryV2DTO>>
    uniswapV2GetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetFactoryHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapFactoryV2DTO>>>
    uniswapV2GetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetFactoryHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UniswapFactoryV2DTO> | AjaxResponse<Array<UniswapV2UniswapFactoryV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2UniswapFactoryV2DTO>>({
            url: '/dapps/uniswapv2/factory/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets LiquidityPositionSnapshotV2DTOs.
     * LiquidityPositionSnapshotV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetLiquidityPositionSnapshotV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionSnapshotV2DTOsHistoricalRequest): Observable<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>
    uniswapV2GetLiquidityPositionSnapshotV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionSnapshotV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>>
    uniswapV2GetLiquidityPositionSnapshotV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionSnapshotV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionSnapshotV2DTO> | AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>({
            url: '/dapps/uniswapv2/LiquidityPositionSnapshotV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets LiquidityPositionV2DTOs.
     * LiquidityPositionV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetLiquidityPositionV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionV2DTOsHistoricalRequest): Observable<Array<UniswapV2LiquidityPositionV2DTO>>
    uniswapV2GetLiquidityPositionV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionV2DTO>>>
    uniswapV2GetLiquidityPositionV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionV2DTO> | AjaxResponse<Array<UniswapV2LiquidityPositionV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2LiquidityPositionV2DTO>>({
            url: '/dapps/uniswapv2/LiquidityPositionV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidity positions.
     * LiquidityPositions (historical)
     */
    uniswapV2GetLiquidityPositionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsHistoricalRequest): Observable<Array<UniswapV2LiquidityPositionV2DTO>>
    uniswapV2GetLiquidityPositionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionV2DTO>>>
    uniswapV2GetLiquidityPositionsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionV2DTO> | AjaxResponse<Array<UniswapV2LiquidityPositionV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2LiquidityPositionV2DTO>>({
            url: '/dapps/uniswapv2/liquidityPositions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidity positions snapshots.
     * LiquidityPositionsSnapshots (historical)
     */
    uniswapV2GetLiquidityPositionsSnapshotsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsSnapshotsHistoricalRequest): Observable<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>
    uniswapV2GetLiquidityPositionsSnapshotsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsSnapshotsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>>
    uniswapV2GetLiquidityPositionsSnapshotsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetLiquidityPositionsSnapshotsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2LiquidityPositionSnapshotV2DTO> | AjaxResponse<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2LiquidityPositionSnapshotV2DTO>>({
            url: '/dapps/uniswapv2/liquidityPositionsSnapshots/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets MintV2DTOs.
     * MintV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetMintV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetMintV2DTOsHistoricalRequest): Observable<Array<UniswapV2MintV2DTO>>
    uniswapV2GetMintV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetMintV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2MintV2DTO>>>
    uniswapV2GetMintV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetMintV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2MintV2DTO> | AjaxResponse<Array<UniswapV2MintV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2MintV2DTO>>({
            url: '/dapps/uniswapv2/MintV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets mints.
     * Mints (historical)
     */
    uniswapV2GetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetMintsHistoricalRequest): Observable<Array<UniswapV2MintV2DTO>>
    uniswapV2GetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetMintsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2MintV2DTO>>>
    uniswapV2GetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetMintsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2MintV2DTO> | AjaxResponse<Array<UniswapV2MintV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2MintV2DTO>>({
            url: '/dapps/uniswapv2/mints/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PairDayDataV2DTOs.
     * PairDayDataV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetPairDayDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPairDayDataV2DTOsHistoricalRequest): Observable<Array<UniswapV2PairDayDataV2DTO>>
    uniswapV2GetPairDayDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPairDayDataV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairDayDataV2DTO>>>
    uniswapV2GetPairDayDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPairDayDataV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairDayDataV2DTO> | AjaxResponse<Array<UniswapV2PairDayDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2PairDayDataV2DTO>>({
            url: '/dapps/uniswapv2/PairDayDataV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PairHourDataV2DTOs.
     * PairHourDataV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetPairHourDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPairHourDataV2DTOsHistoricalRequest): Observable<Array<UniswapV2PairHourDataV2DTO>>
    uniswapV2GetPairHourDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPairHourDataV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairHourDataV2DTO>>>
    uniswapV2GetPairHourDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPairHourDataV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairHourDataV2DTO> | AjaxResponse<Array<UniswapV2PairHourDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2PairHourDataV2DTO>>({
            url: '/dapps/uniswapv2/PairHourDataV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PairV2DTOs.
     * PairV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetPairV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPairV2DTOsHistoricalRequest): Observable<Array<UniswapV2PairV2DTO>>
    uniswapV2GetPairV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPairV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairV2DTO>>>
    uniswapV2GetPairV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPairV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairV2DTO> | AjaxResponse<Array<UniswapV2PairV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2PairV2DTO>>({
            url: '/dapps/uniswapv2/PairV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * Pools (current) ðŸ”¥
     */
    uniswapV2GetPoolsCurrent({ filterPoolId }: UniswapV2GetPoolsCurrentRequest): Observable<Array<UniswapV2PairV2DTO>>
    uniswapV2GetPoolsCurrent({ filterPoolId }: UniswapV2GetPoolsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairV2DTO>>>
    uniswapV2GetPoolsCurrent({ filterPoolId }: UniswapV2GetPoolsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairV2DTO> | AjaxResponse<Array<UniswapV2PairV2DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV2PairV2DTO>>({
            url: '/dapps/uniswapv2/pools/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools day data.
     * PoolsDayData (historical)
     */
    uniswapV2GetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsDayDataHistoricalRequest): Observable<Array<UniswapV2PairDayDataV2DTO>>
    uniswapV2GetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairDayDataV2DTO>>>
    uniswapV2GetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairDayDataV2DTO> | AjaxResponse<Array<UniswapV2PairDayDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2PairDayDataV2DTO>>({
            url: '/dapps/uniswapv2/poolsDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * Pools (historical) ðŸ”¥
     */
    uniswapV2GetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHistoricalRequest): Observable<Array<UniswapV2PairV2DTO>>
    uniswapV2GetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairV2DTO>>>
    uniswapV2GetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairV2DTO> | AjaxResponse<Array<UniswapV2PairV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2PairV2DTO>>({
            url: '/dapps/uniswapv2/pools/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools tracked each our.
     * PoolsHourData (historical)
     */
    uniswapV2GetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHourDataHistoricalRequest): Observable<Array<UniswapV2PairHourDataV2DTO>>
    uniswapV2GetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHourDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairHourDataV2DTO>>>
    uniswapV2GetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetPoolsHourDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairHourDataV2DTO> | AjaxResponse<Array<UniswapV2PairHourDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2PairHourDataV2DTO>>({
            url: '/dapps/uniswapv2/poolsHourData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets SwapV2DTOs.
     * SwapV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetSwapV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetSwapV2DTOsHistoricalRequest): Observable<Array<UniswapV2SwapV2DTO>>
    uniswapV2GetSwapV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetSwapV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2SwapV2DTO>>>
    uniswapV2GetSwapV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetSwapV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2SwapV2DTO> | AjaxResponse<Array<UniswapV2SwapV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2SwapV2DTO>>({
            url: '/dapps/uniswapv2/SwapV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (current) ðŸ”¥
     */
    uniswapV2GetSwapsCurrent(): Observable<Array<UniswapV2SwapV2DTO>>
    uniswapV2GetSwapsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2SwapV2DTO>>>
    uniswapV2GetSwapsCurrent(opts?: OperationOpts): Observable<Array<UniswapV2SwapV2DTO> | AjaxResponse<Array<UniswapV2SwapV2DTO>>> {
        return this.request<Array<UniswapV2SwapV2DTO>>({
            url: '/dapps/uniswapv2/swaps/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (historical) ðŸ”¥
     */
    uniswapV2GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetSwapsHistoricalRequest): Observable<Array<UniswapV2SwapV2DTO>>
    uniswapV2GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetSwapsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2SwapV2DTO>>>
    uniswapV2GetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetSwapsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2SwapV2DTO> | AjaxResponse<Array<UniswapV2SwapV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2SwapV2DTO>>({
            url: '/dapps/uniswapv2/swaps/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TokenDayDataV2DTOs.
     * TokenDayDataV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetTokenDayDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetTokenDayDataV2DTOsHistoricalRequest): Observable<Array<UniswapV2TokenDayDataV2DTO>>
    uniswapV2GetTokenDayDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetTokenDayDataV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenDayDataV2DTO>>>
    uniswapV2GetTokenDayDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetTokenDayDataV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TokenDayDataV2DTO> | AjaxResponse<Array<UniswapV2TokenDayDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2TokenDayDataV2DTO>>({
            url: '/dapps/uniswapv2/TokenDayDataV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TokenV2DTOs.
     * TokenV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetTokenV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetTokenV2DTOsHistoricalRequest): Observable<Array<UniswapV2TokenV2DTO>>
    uniswapV2GetTokenV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetTokenV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenV2DTO>>>
    uniswapV2GetTokenV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetTokenV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TokenV2DTO> | AjaxResponse<Array<UniswapV2TokenV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2TokenV2DTO>>({
            url: '/dapps/uniswapv2/TokenV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (current) ðŸ”¥
     */
    uniswapV2GetTokensCurrent(): Observable<Array<UniswapV2TokenV2DTO>>
    uniswapV2GetTokensCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenV2DTO>>>
    uniswapV2GetTokensCurrent(opts?: OperationOpts): Observable<Array<UniswapV2TokenV2DTO> | AjaxResponse<Array<UniswapV2TokenV2DTO>>> {
        return this.request<Array<UniswapV2TokenV2DTO>>({
            url: '/dapps/uniswapv2/tokens/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens day data.
     * TokensDayData (historical)
     */
    uniswapV2GetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensDayDataHistoricalRequest): Observable<Array<UniswapV2TokenDayDataV2DTO>>
    uniswapV2GetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenDayDataV2DTO>>>
    uniswapV2GetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TokenDayDataV2DTO> | AjaxResponse<Array<UniswapV2TokenDayDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<UniswapV2TokenDayDataV2DTO>>({
            url: '/dapps/uniswapv2/tokensDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (historical) ðŸ”¥
     */
    uniswapV2GetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensHistoricalRequest): Observable<Array<UniswapV2TokenV2DTO>>
    uniswapV2GetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenV2DTO>>>
    uniswapV2GetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: UniswapV2GetTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TokenV2DTO> | AjaxResponse<Array<UniswapV2TokenV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<UniswapV2TokenV2DTO>>({
            url: '/dapps/uniswapv2/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TransactionV2DTOs.
     * TransactionV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetTransactionV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetTransactionV2DTOsHistoricalRequest): Observable<Array<UniswapV2TransactionV2DTO>>
    uniswapV2GetTransactionV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetTransactionV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TransactionV2DTO>>>
    uniswapV2GetTransactionV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetTransactionV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TransactionV2DTO> | AjaxResponse<Array<UniswapV2TransactionV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2TransactionV2DTO>>({
            url: '/dapps/uniswapv2/TransactionV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets transactions.
     * Transactions (historical)
     */
    uniswapV2GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetTransactionsHistoricalRequest): Observable<Array<UniswapV2TransactionV2DTO>>
    uniswapV2GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TransactionV2DTO>>>
    uniswapV2GetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2TransactionV2DTO> | AjaxResponse<Array<UniswapV2TransactionV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2TransactionV2DTO>>({
            url: '/dapps/uniswapv2/transactions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets UniswapDayDataV2DTOs.
     * UniswapDayDataV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetUniswapDayDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetUniswapDayDataV2DTOsHistoricalRequest): Observable<Array<UniswapV2UniswapDayDataV2DTO>>
    uniswapV2GetUniswapDayDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetUniswapDayDataV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapDayDataV2DTO>>>
    uniswapV2GetUniswapDayDataV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetUniswapDayDataV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UniswapDayDataV2DTO> | AjaxResponse<Array<UniswapV2UniswapDayDataV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2UniswapDayDataV2DTO>>({
            url: '/dapps/uniswapv2/UniswapDayDataV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets UniswapFactoryV2DTOs.
     * UniswapFactoryV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetUniswapFactoryV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetUniswapFactoryV2DTOsHistoricalRequest): Observable<Array<UniswapV2UniswapFactoryV2DTO>>
    uniswapV2GetUniswapFactoryV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetUniswapFactoryV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UniswapFactoryV2DTO>>>
    uniswapV2GetUniswapFactoryV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetUniswapFactoryV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UniswapFactoryV2DTO> | AjaxResponse<Array<UniswapV2UniswapFactoryV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2UniswapFactoryV2DTO>>({
            url: '/dapps/uniswapv2/UniswapFactoryV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets UserV2DTOs.
     * UserV2DTOs (historical) ðŸ”¥
     */
    uniswapV2GetUserV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetUserV2DTOsHistoricalRequest): Observable<Array<UniswapV2UserV2DTO>>
    uniswapV2GetUserV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetUserV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UserV2DTO>>>
    uniswapV2GetUserV2DTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: UniswapV2GetUserV2DTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UserV2DTO> | AjaxResponse<Array<UniswapV2UserV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<UniswapV2UserV2DTO>>({
            url: '/dapps/uniswapv2/UserV2DTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets users.
     * Users (historical)
     */
    uniswapV2GetUsersHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetUsersHistoricalRequest): Observable<Array<UniswapV2UserV2DTO>>
    uniswapV2GetUsersHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetUsersHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2UserV2DTO>>>
    uniswapV2GetUsersHistorical({ startBlock, endBlock, startDate, endDate }: UniswapV2GetUsersHistoricalRequest, opts?: OperationOpts): Observable<Array<UniswapV2UserV2DTO> | AjaxResponse<Array<UniswapV2UserV2DTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<UniswapV2UserV2DTO>>({
            url: '/dapps/uniswapv2/users/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
