// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    UniswapV2PairV2DTO,
    UniswapV2SwapV2DTO,
    UniswapV2TokenV2DTO,
} from '../models';

export interface UniswapV2GetPoolsCurrentRequest {
    filterPoolId?: string;
}

/**
 * no description
 */
export class UniswapV2Api extends BaseAPI {

    /**
     * Gets pools.
     * Pools (current) ðŸ”¥
     */
    uniswapV2GetPoolsCurrent({ filterPoolId }: UniswapV2GetPoolsCurrentRequest): Observable<Array<UniswapV2PairV2DTO>>
    uniswapV2GetPoolsCurrent({ filterPoolId }: UniswapV2GetPoolsCurrentRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2PairV2DTO>>>
    uniswapV2GetPoolsCurrent({ filterPoolId }: UniswapV2GetPoolsCurrentRequest, opts?: OperationOpts): Observable<Array<UniswapV2PairV2DTO> | AjaxResponse<Array<UniswapV2PairV2DTO>>> {

        const query: HttpQuery = {};

        if (filterPoolId != null) { query['filter_pool_id'] = filterPoolId; }

        return this.request<Array<UniswapV2PairV2DTO>>({
            url: '/dapps/uniswapv2/pools/current',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (current) ðŸ”¥
     */
    uniswapV2GetSwapsCurrent(): Observable<Array<UniswapV2SwapV2DTO>>
    uniswapV2GetSwapsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2SwapV2DTO>>>
    uniswapV2GetSwapsCurrent(opts?: OperationOpts): Observable<Array<UniswapV2SwapV2DTO> | AjaxResponse<Array<UniswapV2SwapV2DTO>>> {
        return this.request<Array<UniswapV2SwapV2DTO>>({
            url: '/dapps/uniswapv2/swaps/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (current) ðŸ”¥
     */
    uniswapV2GetTokensCurrent(): Observable<Array<UniswapV2TokenV2DTO>>
    uniswapV2GetTokensCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<UniswapV2TokenV2DTO>>>
    uniswapV2GetTokensCurrent(opts?: OperationOpts): Observable<Array<UniswapV2TokenV2DTO> | AjaxResponse<Array<UniswapV2TokenV2DTO>>> {
        return this.request<Array<UniswapV2TokenV2DTO>>({
            url: '/dapps/uniswapv2/tokens/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

}
