// tslint:disable
/**
 * OnChain API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpQuery } from '../runtime';
import type {
    CurveExchangeDTO,
    DexTradeDTO,
    SushiswapBundleDTO,
    SushiswapBurnDTO,
    SushiswapDayDataDTO,
    SushiswapFactoryDTO,
    SushiswapHourDataDTO,
    SushiswapLiquidityPositionDTO,
    SushiswapLiquidityPositionSnapshotDTO,
    SushiswapMintDTO,
    SushiswapPairDTO,
    SushiswapPairDayDataDTO,
    SushiswapPairHourDataDTO,
    SushiswapSwapDTO,
    SushiswapTokenDTO,
    SushiswapTokenDayDataDTO,
    SushiswapTransactionDTO,
    SushiswapUserDTO,
} from '../models';

export interface SushiswapGetBundleDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetBundlesHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface SushiswapGetBurnDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetBurnsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetDayDataDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface SushiswapGetFactoryDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetFactoryHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface SushiswapGetHourDataDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetHourDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface SushiswapGetLiquidityPositionDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetLiquidityPositionHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetLiquidityPositionSnapshotHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetMintDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetMintsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetPairDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetPairDayDataDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetPairHourDataDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetPoolsDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetPoolsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetPoolsHourDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetSwapDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetSwapsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetTokenDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetTokenDayDataDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetTokensDayDataHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface SushiswapGetTokensHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    tokenId?: string;
}

export interface SushiswapGetTransactionDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetTransactionsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

export interface SushiswapGetUserDTOsHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
    poolId?: string;
}

export interface SushiswapGetUsersHistoricalRequest {
    startBlock?: number;
    endBlock?: number;
    startDate?: string;
    endDate?: string;
}

/**
 * no description
 */
export class SushiswapApi extends BaseAPI {

    /**
     * Gets exchanges.
     * Exchanges (current) ðŸ”¥
     */
    curveGetExchangesCurrent(): Observable<Array<CurveExchangeDTO>>
    curveGetExchangesCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<CurveExchangeDTO>>>
    curveGetExchangesCurrent(opts?: OperationOpts): Observable<Array<CurveExchangeDTO> | AjaxResponse<Array<CurveExchangeDTO>>> {
        return this.request<Array<CurveExchangeDTO>>({
            url: '/dapps/sushiswap/exchanges/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets trades.
     * Trades (current) ðŸ”¥
     */
    dexGetTradesCurrent(): Observable<Array<DexTradeDTO>>
    dexGetTradesCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<DexTradeDTO>>>
    dexGetTradesCurrent(opts?: OperationOpts): Observable<Array<DexTradeDTO> | AjaxResponse<Array<DexTradeDTO>>> {
        return this.request<Array<DexTradeDTO>>({
            url: '/dapps/sushiswap/trades/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets BundleDTOs.
     * BundleDTOs (historical) ðŸ”¥
     */
    sushiswapGetBundleDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetBundleDTOsHistoricalRequest): Observable<Array<SushiswapBundleDTO>>
    sushiswapGetBundleDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetBundleDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapBundleDTO>>>
    sushiswapGetBundleDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetBundleDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapBundleDTO> | AjaxResponse<Array<SushiswapBundleDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapBundleDTO>>({
            url: '/dapps/sushiswap/BundleDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets bundles.
     * Bundles (historical)
     */
    sushiswapGetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetBundlesHistoricalRequest): Observable<Array<SushiswapBundleDTO>>
    sushiswapGetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetBundlesHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapBundleDTO>>>
    sushiswapGetBundlesHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetBundlesHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapBundleDTO> | AjaxResponse<Array<SushiswapBundleDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<SushiswapBundleDTO>>({
            url: '/dapps/sushiswap/bundles/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets BurnDTOs.
     * BurnDTOs (historical) ðŸ”¥
     */
    sushiswapGetBurnDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetBurnDTOsHistoricalRequest): Observable<Array<SushiswapBurnDTO>>
    sushiswapGetBurnDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetBurnDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapBurnDTO>>>
    sushiswapGetBurnDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetBurnDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapBurnDTO> | AjaxResponse<Array<SushiswapBurnDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapBurnDTO>>({
            url: '/dapps/sushiswap/BurnDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets burns.
     * Burns (historical)
     */
    sushiswapGetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetBurnsHistoricalRequest): Observable<Array<SushiswapBurnDTO>>
    sushiswapGetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetBurnsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapBurnDTO>>>
    sushiswapGetBurnsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetBurnsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapBurnDTO> | AjaxResponse<Array<SushiswapBurnDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapBurnDTO>>({
            url: '/dapps/sushiswap/burns/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets DayDataDTOs.
     * DayDataDTOs (historical) ðŸ”¥
     */
    sushiswapGetDayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetDayDataDTOsHistoricalRequest): Observable<Array<SushiswapDayDataDTO>>
    sushiswapGetDayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetDayDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapDayDataDTO>>>
    sushiswapGetDayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetDayDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapDayDataDTO> | AjaxResponse<Array<SushiswapDayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapDayDataDTO>>({
            url: '/dapps/sushiswap/DayDataDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets day data.
     * DayData (historical)
     */
    sushiswapGetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetDayDataHistoricalRequest): Observable<Array<SushiswapDayDataDTO>>
    sushiswapGetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapDayDataDTO>>>
    sushiswapGetDayDataHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapDayDataDTO> | AjaxResponse<Array<SushiswapDayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<SushiswapDayDataDTO>>({
            url: '/dapps/sushiswap/dayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets FactoryDTOs.
     * FactoryDTOs (historical) ðŸ”¥
     */
    sushiswapGetFactoryDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetFactoryDTOsHistoricalRequest): Observable<Array<SushiswapFactoryDTO>>
    sushiswapGetFactoryDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetFactoryDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapFactoryDTO>>>
    sushiswapGetFactoryDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetFactoryDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapFactoryDTO> | AjaxResponse<Array<SushiswapFactoryDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapFactoryDTO>>({
            url: '/dapps/sushiswap/FactoryDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets factory.
     * Factory (historical)
     */
    sushiswapGetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetFactoryHistoricalRequest): Observable<Array<SushiswapFactoryDTO>>
    sushiswapGetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetFactoryHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapFactoryDTO>>>
    sushiswapGetFactoryHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetFactoryHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapFactoryDTO> | AjaxResponse<Array<SushiswapFactoryDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<SushiswapFactoryDTO>>({
            url: '/dapps/sushiswap/factory/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets HourDataDTOs.
     * HourDataDTOs (historical) ðŸ”¥
     */
    sushiswapGetHourDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetHourDataDTOsHistoricalRequest): Observable<Array<SushiswapHourDataDTO>>
    sushiswapGetHourDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetHourDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapHourDataDTO>>>
    sushiswapGetHourDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetHourDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapHourDataDTO> | AjaxResponse<Array<SushiswapHourDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapHourDataDTO>>({
            url: '/dapps/sushiswap/HourDataDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets hour data.
     * HourData (historical)
     */
    sushiswapGetHourDataHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetHourDataHistoricalRequest): Observable<Array<SushiswapHourDataDTO>>
    sushiswapGetHourDataHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetHourDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapHourDataDTO>>>
    sushiswapGetHourDataHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetHourDataHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapHourDataDTO> | AjaxResponse<Array<SushiswapHourDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<SushiswapHourDataDTO>>({
            url: '/dapps/sushiswap/hourData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets LiquidityPositionDTOs.
     * LiquidityPositionDTOs (historical) ðŸ”¥
     */
    sushiswapGetLiquidityPositionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionDTOsHistoricalRequest): Observable<Array<SushiswapLiquidityPositionDTO>>
    sushiswapGetLiquidityPositionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapLiquidityPositionDTO>>>
    sushiswapGetLiquidityPositionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapLiquidityPositionDTO> | AjaxResponse<Array<SushiswapLiquidityPositionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapLiquidityPositionDTO>>({
            url: '/dapps/sushiswap/LiquidityPositionDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidity position.
     * LiquidityPosition (historical)
     */
    sushiswapGetLiquidityPositionHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionHistoricalRequest): Observable<Array<SushiswapLiquidityPositionDTO>>
    sushiswapGetLiquidityPositionHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapLiquidityPositionDTO>>>
    sushiswapGetLiquidityPositionHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapLiquidityPositionDTO> | AjaxResponse<Array<SushiswapLiquidityPositionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapLiquidityPositionDTO>>({
            url: '/dapps/sushiswap/liquidityPosition/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets LiquidityPositionSnapshotDTOs.
     * LiquidityPositionSnapshotDTOs (historical) ðŸ”¥
     */
    sushiswapGetLiquidityPositionSnapshotDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest): Observable<Array<SushiswapLiquidityPositionSnapshotDTO>>
    sushiswapGetLiquidityPositionSnapshotDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapLiquidityPositionSnapshotDTO>>>
    sushiswapGetLiquidityPositionSnapshotDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionSnapshotDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapLiquidityPositionSnapshotDTO> | AjaxResponse<Array<SushiswapLiquidityPositionSnapshotDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapLiquidityPositionSnapshotDTO>>({
            url: '/dapps/sushiswap/LiquidityPositionSnapshotDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets liquidity position snapshot.
     * LiquidityPositionSnapshot (historical)
     */
    sushiswapGetLiquidityPositionSnapshotHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionSnapshotHistoricalRequest): Observable<Array<SushiswapLiquidityPositionSnapshotDTO>>
    sushiswapGetLiquidityPositionSnapshotHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionSnapshotHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapLiquidityPositionSnapshotDTO>>>
    sushiswapGetLiquidityPositionSnapshotHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetLiquidityPositionSnapshotHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapLiquidityPositionSnapshotDTO> | AjaxResponse<Array<SushiswapLiquidityPositionSnapshotDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapLiquidityPositionSnapshotDTO>>({
            url: '/dapps/sushiswap/liquidityPositionSnapshots/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets MintDTOs.
     * MintDTOs (historical) ðŸ”¥
     */
    sushiswapGetMintDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetMintDTOsHistoricalRequest): Observable<Array<SushiswapMintDTO>>
    sushiswapGetMintDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetMintDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapMintDTO>>>
    sushiswapGetMintDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetMintDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapMintDTO> | AjaxResponse<Array<SushiswapMintDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapMintDTO>>({
            url: '/dapps/sushiswap/MintDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets mints.
     * Mints (historical)
     */
    sushiswapGetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetMintsHistoricalRequest): Observable<Array<SushiswapMintDTO>>
    sushiswapGetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetMintsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapMintDTO>>>
    sushiswapGetMintsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetMintsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapMintDTO> | AjaxResponse<Array<SushiswapMintDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapMintDTO>>({
            url: '/dapps/sushiswap/mints/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PairDTOs.
     * PairDTOs (historical) ðŸ”¥
     */
    sushiswapGetPairDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPairDTOsHistoricalRequest): Observable<Array<SushiswapPairDTO>>
    sushiswapGetPairDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPairDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapPairDTO>>>
    sushiswapGetPairDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPairDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapPairDTO> | AjaxResponse<Array<SushiswapPairDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapPairDTO>>({
            url: '/dapps/sushiswap/PairDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PairDayDataDTOs.
     * PairDayDataDTOs (historical) ðŸ”¥
     */
    sushiswapGetPairDayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPairDayDataDTOsHistoricalRequest): Observable<Array<SushiswapPairDayDataDTO>>
    sushiswapGetPairDayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPairDayDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapPairDayDataDTO>>>
    sushiswapGetPairDayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPairDayDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapPairDayDataDTO> | AjaxResponse<Array<SushiswapPairDayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapPairDayDataDTO>>({
            url: '/dapps/sushiswap/PairDayDataDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets PairHourDataDTOs.
     * PairHourDataDTOs (historical) ðŸ”¥
     */
    sushiswapGetPairHourDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPairHourDataDTOsHistoricalRequest): Observable<Array<SushiswapPairHourDataDTO>>
    sushiswapGetPairHourDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPairHourDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapPairHourDataDTO>>>
    sushiswapGetPairHourDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPairHourDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapPairHourDataDTO> | AjaxResponse<Array<SushiswapPairHourDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapPairHourDataDTO>>({
            url: '/dapps/sushiswap/PairHourDataDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools.
     * Pools (current) ðŸ”¥
     */
    sushiswapGetPoolsCurrent(): Observable<Array<SushiswapPairDTO>>
    sushiswapGetPoolsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapPairDTO>>>
    sushiswapGetPoolsCurrent(opts?: OperationOpts): Observable<Array<SushiswapPairDTO> | AjaxResponse<Array<SushiswapPairDTO>>> {
        return this.request<Array<SushiswapPairDTO>>({
            url: '/dapps/sushiswap/pools/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets pools day data.
     * PoolsDayData (historical)
     */
    sushiswapGetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPoolsDayDataHistoricalRequest): Observable<Array<SushiswapPairDayDataDTO>>
    sushiswapGetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPoolsDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapPairDayDataDTO>>>
    sushiswapGetPoolsDayDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPoolsDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapPairDayDataDTO> | AjaxResponse<Array<SushiswapPairDayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapPairDayDataDTO>>({
            url: '/dapps/sushiswap/poolsDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets list of pools for given filters.
     * Pools (historical) ðŸ”¥
     */
    sushiswapGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPoolsHistoricalRequest): Observable<Array<SushiswapPairDTO>>
    sushiswapGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPoolsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapPairDTO>>>
    sushiswapGetPoolsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPoolsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapPairDTO> | AjaxResponse<Array<SushiswapPairDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapPairDTO>>({
            url: '/dapps/sushiswap/pools/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets pools tracked each our.
     * PoolsHourData (historical)
     */
    sushiswapGetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPoolsHourDataHistoricalRequest): Observable<Array<SushiswapPairHourDataDTO>>
    sushiswapGetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPoolsHourDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapPairHourDataDTO>>>
    sushiswapGetPoolsHourDataHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetPoolsHourDataHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapPairHourDataDTO> | AjaxResponse<Array<SushiswapPairHourDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapPairHourDataDTO>>({
            url: '/dapps/sushiswap/poolsHourData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets SwapDTOs.
     * SwapDTOs (historical) ðŸ”¥
     */
    sushiswapGetSwapDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetSwapDTOsHistoricalRequest): Observable<Array<SushiswapSwapDTO>>
    sushiswapGetSwapDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetSwapDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapSwapDTO>>>
    sushiswapGetSwapDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetSwapDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapSwapDTO> | AjaxResponse<Array<SushiswapSwapDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapSwapDTO>>({
            url: '/dapps/sushiswap/SwapDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets swaps.
     * Swaps (current) ðŸ”¥
     */
    sushiswapGetSwapsCurrent(): Observable<Array<SushiswapSwapDTO>>
    sushiswapGetSwapsCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapSwapDTO>>>
    sushiswapGetSwapsCurrent(opts?: OperationOpts): Observable<Array<SushiswapSwapDTO> | AjaxResponse<Array<SushiswapSwapDTO>>> {
        return this.request<Array<SushiswapSwapDTO>>({
            url: '/dapps/sushiswap/swaps/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets list of swaps for given filters.
     * Swaps (historical) ðŸ”¥
     */
    sushiswapGetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetSwapsHistoricalRequest): Observable<Array<SushiswapSwapDTO>>
    sushiswapGetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetSwapsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapSwapDTO>>>
    sushiswapGetSwapsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetSwapsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapSwapDTO> | AjaxResponse<Array<SushiswapSwapDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapSwapDTO>>({
            url: '/dapps/sushiswap/swaps/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TokenDTOs.
     * TokenDTOs (historical) ðŸ”¥
     */
    sushiswapGetTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetTokenDTOsHistoricalRequest): Observable<Array<SushiswapTokenDTO>>
    sushiswapGetTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetTokenDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapTokenDTO>>>
    sushiswapGetTokenDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetTokenDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapTokenDTO> | AjaxResponse<Array<SushiswapTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapTokenDTO>>({
            url: '/dapps/sushiswap/TokenDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TokenDayDataDTOs.
     * TokenDayDataDTOs (historical) ðŸ”¥
     */
    sushiswapGetTokenDayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetTokenDayDataDTOsHistoricalRequest): Observable<Array<SushiswapTokenDayDataDTO>>
    sushiswapGetTokenDayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetTokenDayDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapTokenDayDataDTO>>>
    sushiswapGetTokenDayDataDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetTokenDayDataDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapTokenDayDataDTO> | AjaxResponse<Array<SushiswapTokenDayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapTokenDayDataDTO>>({
            url: '/dapps/sushiswap/TokenDayDataDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens.
     * Tokens (current) ðŸ”¥
     */
    sushiswapGetTokensCurrent(): Observable<Array<SushiswapTokenDTO>>
    sushiswapGetTokensCurrent(opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapTokenDTO>>>
    sushiswapGetTokensCurrent(opts?: OperationOpts): Observable<Array<SushiswapTokenDTO> | AjaxResponse<Array<SushiswapTokenDTO>>> {
        return this.request<Array<SushiswapTokenDTO>>({
            url: '/dapps/sushiswap/tokens/current',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Gets tokens day data.
     * TokensDayData (historical)
     */
    sushiswapGetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: SushiswapGetTokensDayDataHistoricalRequest): Observable<Array<SushiswapTokenDayDataDTO>>
    sushiswapGetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: SushiswapGetTokensDayDataHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapTokenDayDataDTO>>>
    sushiswapGetTokensDayDataHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: SushiswapGetTokensDayDataHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapTokenDayDataDTO> | AjaxResponse<Array<SushiswapTokenDayDataDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<SushiswapTokenDayDataDTO>>({
            url: '/dapps/sushiswap/tokensDayData/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets list of tokens for given filters.
     * Tokens (historical) ðŸ”¥
     */
    sushiswapGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: SushiswapGetTokensHistoricalRequest): Observable<Array<SushiswapTokenDTO>>
    sushiswapGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: SushiswapGetTokensHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapTokenDTO>>>
    sushiswapGetTokensHistorical({ startBlock, endBlock, startDate, endDate, tokenId }: SushiswapGetTokensHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapTokenDTO> | AjaxResponse<Array<SushiswapTokenDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (tokenId != null) { query['tokenId'] = tokenId; }

        return this.request<Array<SushiswapTokenDTO>>({
            url: '/dapps/sushiswap/tokens/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets TransactionDTOs.
     * TransactionDTOs (historical) ðŸ”¥
     */
    sushiswapGetTransactionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetTransactionDTOsHistoricalRequest): Observable<Array<SushiswapTransactionDTO>>
    sushiswapGetTransactionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetTransactionDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapTransactionDTO>>>
    sushiswapGetTransactionDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetTransactionDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapTransactionDTO> | AjaxResponse<Array<SushiswapTransactionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapTransactionDTO>>({
            url: '/dapps/sushiswap/TransactionDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets transactions.
     * Transactions (historical)
     */
    sushiswapGetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetTransactionsHistoricalRequest): Observable<Array<SushiswapTransactionDTO>>
    sushiswapGetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapTransactionDTO>>>
    sushiswapGetTransactionsHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetTransactionsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapTransactionDTO> | AjaxResponse<Array<SushiswapTransactionDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<SushiswapTransactionDTO>>({
            url: '/dapps/sushiswap/transactions/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets UserDTOs.
     * UserDTOs (historical) ðŸ”¥
     */
    sushiswapGetUserDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetUserDTOsHistoricalRequest): Observable<Array<SushiswapUserDTO>>
    sushiswapGetUserDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetUserDTOsHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapUserDTO>>>
    sushiswapGetUserDTOsHistorical({ startBlock, endBlock, startDate, endDate, poolId }: SushiswapGetUserDTOsHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapUserDTO> | AjaxResponse<Array<SushiswapUserDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }
        if (poolId != null) { query['poolId'] = poolId; }

        return this.request<Array<SushiswapUserDTO>>({
            url: '/dapps/sushiswap/UserDTOs/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Gets users.
     * Users (historical)
     */
    sushiswapGetUsersHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetUsersHistoricalRequest): Observable<Array<SushiswapUserDTO>>
    sushiswapGetUsersHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetUsersHistoricalRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<SushiswapUserDTO>>>
    sushiswapGetUsersHistorical({ startBlock, endBlock, startDate, endDate }: SushiswapGetUsersHistoricalRequest, opts?: OperationOpts): Observable<Array<SushiswapUserDTO> | AjaxResponse<Array<SushiswapUserDTO>>> {

        const query: HttpQuery = {};

        if (startBlock != null) { query['startBlock'] = startBlock; }
        if (endBlock != null) { query['endBlock'] = endBlock; }
        if (startDate != null) { query['startDate'] = (startDate as any).toISOString(); }
        if (endDate != null) { query['endDate'] = (endDate as any).toISOString(); }

        return this.request<Array<SushiswapUserDTO>>({
            url: '/dapps/sushiswap/users/historical',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

}
