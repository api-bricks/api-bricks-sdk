-module(openapi_curve_proposal_dto).

-export([encode/1]).

-export_type([openapi_curve_proposal_dto/0]).

-type openapi_curve_proposal_dto() ::
    #{ 'entry_time' => openapi_date_time:openapi_date_time(),
       'recv_time' => openapi_date_time:openapi_date_time(),
       'block_number' => integer(),
       'id' => binary(),
       'number' => binary(),
       'app' => binary(),
       'creator' => binary(),
       'execution_script' => binary(),
       'expire_date' => binary(),
       'minimum_quorum' => binary(),
       'required_support' => binary(),
       'snapshot_block' => binary(),
       'voting_power' => binary(),
       'metadata' => binary(),
       'text' => binary(),
       'vote_count' => binary(),
       'positive_vote_count' => binary(),
       'negative_vote_count' => binary(),
       'current_quorum' => binary(),
       'current_support' => binary(),
       'staked_support' => binary(),
       'total_staked' => binary(),
       'created' => binary(),
       'created_at_block' => binary(),
       'created_at_transaction' => binary(),
       'updated' => binary(),
       'updated_at_block' => binary(),
       'updated_at_transaction' => binary(),
       'executed' => binary(),
       'executed_at_block' => binary(),
       'executed_at_transaction' => binary(),
       'vid' => integer()
     }.

encode(#{ 'entry_time' := EntryTime,
          'recv_time' := RecvTime,
          'block_number' := BlockNumber,
          'id' := Id,
          'number' := Number,
          'app' := App,
          'creator' := Creator,
          'execution_script' := ExecutionScript,
          'expire_date' := ExpireDate,
          'minimum_quorum' := MinimumQuorum,
          'required_support' := RequiredSupport,
          'snapshot_block' := SnapshotBlock,
          'voting_power' := VotingPower,
          'metadata' := Metadata,
          'text' := Text,
          'vote_count' := VoteCount,
          'positive_vote_count' := PositiveVoteCount,
          'negative_vote_count' := NegativeVoteCount,
          'current_quorum' := CurrentQuorum,
          'current_support' := CurrentSupport,
          'staked_support' := StakedSupport,
          'total_staked' := TotalStaked,
          'created' := Created,
          'created_at_block' := CreatedAtBlock,
          'created_at_transaction' := CreatedAtTransaction,
          'updated' := Updated,
          'updated_at_block' := UpdatedAtBlock,
          'updated_at_transaction' := UpdatedAtTransaction,
          'executed' := Executed,
          'executed_at_block' := ExecutedAtBlock,
          'executed_at_transaction' := ExecutedAtTransaction,
          'vid' := Vid
        }) ->
    #{ 'entry_time' => EntryTime,
       'recv_time' => RecvTime,
       'block_number' => BlockNumber,
       'id' => Id,
       'number' => Number,
       'app' => App,
       'creator' => Creator,
       'execution_script' => ExecutionScript,
       'expire_date' => ExpireDate,
       'minimum_quorum' => MinimumQuorum,
       'required_support' => RequiredSupport,
       'snapshot_block' => SnapshotBlock,
       'voting_power' => VotingPower,
       'metadata' => Metadata,
       'text' => Text,
       'vote_count' => VoteCount,
       'positive_vote_count' => PositiveVoteCount,
       'negative_vote_count' => NegativeVoteCount,
       'current_quorum' => CurrentQuorum,
       'current_support' => CurrentSupport,
       'staked_support' => StakedSupport,
       'total_staked' => TotalStaked,
       'created' => Created,
       'created_at_block' => CreatedAtBlock,
       'created_at_transaction' => CreatedAtTransaction,
       'updated' => Updated,
       'updated_at_block' => UpdatedAtBlock,
       'updated_at_transaction' => UpdatedAtTransaction,
       'executed' => Executed,
       'executed_at_block' => ExecutedAtBlock,
       'executed_at_transaction' => ExecutedAtTransaction,
       'vid' => Vid
     }.
