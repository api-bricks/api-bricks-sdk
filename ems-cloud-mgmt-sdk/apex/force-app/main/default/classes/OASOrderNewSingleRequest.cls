/*
 * EMS - REST API
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol.\nThis API is also available in the Postman application: <a href="https://postman.coinapi.io/" target="_blank">https://postman.coinapi.io/</a>      \n\nImplemented Standards:\n\n  * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)\n  * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)\n  * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)\n   \n### Endpoints\n\n<table>\n  <thead>\n    <tr>\n      <th>Deployment method</th>\n      <th>Environment</th>\n      <th>Url</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Managed Cloud</td>\n      <td>Production</td>\n      <td>Use <a href="#ems-docs-sh">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>\n    </tr>\n    <tr>\n      <td>Managed Cloud</td>\n      <td>Sandbox</td>\n      <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>\n    </tr>\n    <tr>\n      <td>Self Hosted</td>\n      <td>Production</td>\n      <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>\n    </tr>\n    <tr>\n      <td>Self Hosted</td>\n      <td>Sandbox</td>\n      <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>\n    </tr>\n  </tbody>\n</table>\n\n### Authentication\nIf the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls. \nIf the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:\n\n 1. Custom authorization header named `X-CoinAPI-Key` with the API Key\n 2. Query string parameter named `apikey` with the API Key\n 3. <a href="#certificate">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.\n\n#### Custom authorization header\nYou can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value.\nAssuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY`\n<aside class="success">This method is recommended by us and you should use it in production environments.</aside>\n#### Query string authorization parameter\nYou can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request.\nAssuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY`\n<aside class="notice">Query string method may be more practical for development activities.</aside>\n
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * The new order message.
 */
public class OASOrderNewSingleRequest implements OAS.MappedProperties {
    /**
     * Exchange identifier used to identify the routing destination.
     * @return exchangeId
     */
    public String exchangeId { get; set; }

    /**
     * The unique identifier of the order assigned by the client.
     * @return clientOrderId
     */
    public String clientOrderId { get; set; }

    /**
     * Exchange symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
     * @return symbolIdExchange
     */
    public String symbolIdExchange { get; set; }

    /**
     * CoinAPI symbol. One of the properties (`symbol_id_exchange`, `symbol_id_coinapi`) is required to identify the market for the new order.
     * @return symbolIdCoinapi
     */
    public String symbolIdCoinapi { get; set; }

    /**
     * Order quantity.
     * @return amountOrder
     */
    public Double amountOrder { get; set; }

    /**
     * Order price.
     * @return price
     */
    public Double price { get; set; }

    /**
     * Get side
     * @return side
     */
    public OASOrdSide side { get; set; }

    /**
     * Get orderType
     * @return orderType
     */
    public OASOrdType orderType { get; set; }

    /**
     * Get timeInForce
     * @return timeInForce
     */
    public OASTimeInForce timeInForce { get; set; }

    /**
     * Expiration time. Conditionaly required for orders with time_in_force = `GOOD_TILL_TIME_EXCHANGE` or `GOOD_TILL_TIME_OEML`.
     * @return expireTime
     */
    public Date expireTime { get; set; }

    /**
     * Gets or Sets execInst
     */
    public enum ExecInstEnum {
        MAKER_OR_CANCEL,
        AUCTION_ONLY,
        INDICATION_OF_INTEREST
    }

    /**
     * Order execution instructions are documented in the separate section: <a href="#ems-order-params-exec">EMS / Starter Guide / Order parameters / Execution instructions</a>\n
     * @return execInst
     */
    public List<ExecInstEnum> execInst { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'exchange_id' => 'exchangeId',
        'client_order_id' => 'clientOrderId',
        'symbol_id_exchange' => 'symbolIdExchange',
        'symbol_id_coinapi' => 'symbolIdCoinapi',
        'amount_order' => 'amountOrder',
        'order_type' => 'orderType',
        'time_in_force' => 'timeInForce',
        'expire_time' => 'expireTime',
        'exec_inst' => 'execInst'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASOrderNewSingleRequest() {
        execInst = new List<String>();
    }

    public static OASOrderNewSingleRequest getExample() {
        OASOrderNewSingleRequest orderNewSingleRequest = new OASOrderNewSingleRequest();
          orderNewSingleRequest.exchangeId = 'KRAKEN';
          orderNewSingleRequest.clientOrderId = '6ab36bc1-344d-432e-ac6d-0bf44ee64c2b';
          orderNewSingleRequest.symbolIdExchange = 'XBT/USDT';
          orderNewSingleRequest.symbolIdCoinapi = 'KRAKEN_SPOT_BTC_USDT';
          orderNewSingleRequest.amountOrder = 0.045;
          orderNewSingleRequest.price = 0.0783;
          orderNewSingleRequest.side = OASOrdSide.getExample();
          orderNewSingleRequest.orderType = OASOrdType.getExample();
          orderNewSingleRequest.timeInForce = OASTimeInForce.getExample();
          orderNewSingleRequest.expireTime = Date.getExample();
          orderNewSingleRequest.execInst = List<ExecInstEnum>.LIST_EXECINSTENUM_NEW_LIST_STRING_MAKER_OR_CANCEL_;
        return orderNewSingleRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrderNewSingleRequest) {           
            OASOrderNewSingleRequest orderNewSingleRequest = (OASOrderNewSingleRequest) obj;
            return this.exchangeId == orderNewSingleRequest.exchangeId
                && this.clientOrderId == orderNewSingleRequest.clientOrderId
                && this.symbolIdExchange == orderNewSingleRequest.symbolIdExchange
                && this.symbolIdCoinapi == orderNewSingleRequest.symbolIdCoinapi
                && this.amountOrder == orderNewSingleRequest.amountOrder
                && this.price == orderNewSingleRequest.price
                && this.side == orderNewSingleRequest.side
                && this.orderType == orderNewSingleRequest.orderType
                && this.timeInForce == orderNewSingleRequest.timeInForce
                && this.expireTime == orderNewSingleRequest.expireTime
                && this.execInst == orderNewSingleRequest.execInst;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (exchangeId == null ? 0 : System.hashCode(exchangeId));
        hashCode = (17 * hashCode) + (clientOrderId == null ? 0 : System.hashCode(clientOrderId));
        hashCode = (17 * hashCode) + (symbolIdExchange == null ? 0 : System.hashCode(symbolIdExchange));
        hashCode = (17 * hashCode) + (symbolIdCoinapi == null ? 0 : System.hashCode(symbolIdCoinapi));
        hashCode = (17 * hashCode) + (amountOrder == null ? 0 : System.hashCode(amountOrder));
        hashCode = (17 * hashCode) + (price == null ? 0 : System.hashCode(price));
        hashCode = (17 * hashCode) + (side == null ? 0 : System.hashCode(side));
        hashCode = (17 * hashCode) + (orderType == null ? 0 : System.hashCode(orderType));
        hashCode = (17 * hashCode) + (timeInForce == null ? 0 : System.hashCode(timeInForce));
        hashCode = (17 * hashCode) + (expireTime == null ? 0 : System.hashCode(expireTime));
        hashCode = (17 * hashCode) + (execInst == null ? 0 : System.hashCode(execInst));
        return hashCode;
    }
}

