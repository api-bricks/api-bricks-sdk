/**
 * EMS - REST API
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Balance_data_inner.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Balance_data_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Balance_data_inner_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Balance_data_inner
    : public ModelBase
{
public:
    Balance_data_inner();
    virtual ~Balance_data_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Balance_data_inner members

    /// <summary>
    /// Exchange currency code.
    /// </summary>
    utility::string_t getAssetIdExchange() const;
    bool assetIdExchangeIsSet() const;
    void unsetAsset_id_exchange();

    void setAssetIdExchange(const utility::string_t& value);

    /// <summary>
    /// CoinAPI currency code.
    /// </summary>
    utility::string_t getAssetIdCoinapi() const;
    bool assetIdCoinapiIsSet() const;
    void unsetAsset_id_coinapi();

    void setAssetIdCoinapi(const utility::string_t& value);

    /// <summary>
    /// Value of the current total currency balance on the exchange.
    /// </summary>
    double getBalance() const;
    bool balanceIsSet() const;
    void unsetBalance();

    void setBalance(double value);

    /// <summary>
    /// Value of the current available currency balance on the exchange that can be used as collateral.
    /// </summary>
    double getAvailable() const;
    bool availableIsSet() const;
    void unsetAvailable();

    void setAvailable(double value);

    /// <summary>
    /// Value of the current locked currency balance by the exchange.
    /// </summary>
    double getLocked() const;
    bool lockedIsSet() const;
    void unsetLocked();

    void setLocked(double value);

    /// <summary>
    /// Source of the last modification. 
    /// </summary>
    utility::string_t getLastUpdatedBy() const;
    bool lastUpdatedByIsSet() const;
    void unsetLast_updated_by();

    void setLastUpdatedBy(const utility::string_t& value);

    /// <summary>
    /// Current exchange rate to the USD for the single unit of the currency. 
    /// </summary>
    double getRateUsd() const;
    bool rateUsdIsSet() const;
    void unsetRate_usd();

    void setRateUsd(double value);

    /// <summary>
    /// Value of the current total traded.
    /// </summary>
    double getTraded() const;
    bool tradedIsSet() const;
    void unsetTraded();

    void setTraded(double value);


protected:
    utility::string_t m_Asset_id_exchange;
    bool m_Asset_id_exchangeIsSet;
    utility::string_t m_Asset_id_coinapi;
    bool m_Asset_id_coinapiIsSet;
    double m_Balance;
    bool m_BalanceIsSet;
    double m_Available;
    bool m_AvailableIsSet;
    double m_Locked;
    bool m_LockedIsSet;
    utility::string_t m_Last_updated_by;
    bool m_Last_updated_byIsSet;
    double m_Rate_usd;
    bool m_Rate_usdIsSet;
    double m_Traded;
    bool m_TradedIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Balance_data_inner_H_ */
