/**
 * EMS - REST API
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. <br/> This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       <br/><br/> Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  <br/><br/> If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this:  <br/><br/> `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Position_data_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Position_data_inner::Position_data_inner()
{
    m_Symbol_id_exchange = utility::conversions::to_string_t("");
    m_Symbol_id_exchangeIsSet = false;
    m_Symbol_id_coinapi = utility::conversions::to_string_t("");
    m_Symbol_id_coinapiIsSet = false;
    m_Avg_entry_price = 0.0;
    m_Avg_entry_priceIsSet = false;
    m_Quantity = 0.0;
    m_QuantityIsSet = false;
    m_SideIsSet = false;
    m_Unrealized_pnl = 0.0;
    m_Unrealized_pnlIsSet = false;
    m_Leverage = 0.0;
    m_LeverageIsSet = false;
    m_Cross_margin = false;
    m_Cross_marginIsSet = false;
    m_Liquidation_price = 0.0;
    m_Liquidation_priceIsSet = false;
    m_Raw_dataIsSet = false;
}

Position_data_inner::~Position_data_inner()
{
}

void Position_data_inner::validate()
{
    // TODO: implement validation
}

web::json::value Position_data_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Symbol_id_exchangeIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol_id_exchange"))] = ModelBase::toJson(m_Symbol_id_exchange);
    }
    if(m_Symbol_id_coinapiIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol_id_coinapi"))] = ModelBase::toJson(m_Symbol_id_coinapi);
    }
    if(m_Avg_entry_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("avg_entry_price"))] = ModelBase::toJson(m_Avg_entry_price);
    }
    if(m_QuantityIsSet)
    {
        val[utility::conversions::to_string_t(U("quantity"))] = ModelBase::toJson(m_Quantity);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t(U("side"))] = ModelBase::toJson(m_Side);
    }
    if(m_Unrealized_pnlIsSet)
    {
        val[utility::conversions::to_string_t(U("unrealized_pnl"))] = ModelBase::toJson(m_Unrealized_pnl);
    }
    if(m_LeverageIsSet)
    {
        val[utility::conversions::to_string_t(U("leverage"))] = ModelBase::toJson(m_Leverage);
    }
    if(m_Cross_marginIsSet)
    {
        val[utility::conversions::to_string_t(U("cross_margin"))] = ModelBase::toJson(m_Cross_margin);
    }
    if(m_Liquidation_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidation_price"))] = ModelBase::toJson(m_Liquidation_price);
    }
    if(m_Raw_dataIsSet)
    {
        val[utility::conversions::to_string_t(U("raw_data"))] = ModelBase::toJson(m_Raw_data);
    }

    return val;
}

bool Position_data_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol_id_exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol_id_exchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolIdExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolIdExchange);
            setSymbolIdExchange(refVal_setSymbolIdExchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("symbol_id_coinapi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol_id_coinapi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolIdCoinapi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolIdCoinapi);
            setSymbolIdCoinapi(refVal_setSymbolIdCoinapi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("avg_entry_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("avg_entry_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setAvgEntryPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvgEntryPrice);
            setAvgEntryPrice(refVal_setAvgEntryPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quantity")));
        if(!fieldValue.is_null())
        {
            double refVal_setQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuantity);
            setQuantity(refVal_setQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("side"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("side")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdSide> refVal_setSide;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSide);
            setSide(refVal_setSide);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unrealized_pnl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unrealized_pnl")));
        if(!fieldValue.is_null())
        {
            double refVal_setUnrealizedPnl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnrealizedPnl);
            setUnrealizedPnl(refVal_setUnrealizedPnl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("leverage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("leverage")));
        if(!fieldValue.is_null())
        {
            double refVal_setLeverage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLeverage);
            setLeverage(refVal_setLeverage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cross_margin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cross_margin")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCrossMargin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCrossMargin);
            setCrossMargin(refVal_setCrossMargin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidation_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidation_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setLiquidationPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidationPrice);
            setLiquidationPrice(refVal_setLiquidationPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("raw_data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("raw_data")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setRawData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRawData);
            setRawData(refVal_setRawData);
        }
    }
    return ok;
}

void Position_data_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Symbol_id_exchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol_id_exchange")), m_Symbol_id_exchange));
    }
    if(m_Symbol_id_coinapiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol_id_coinapi")), m_Symbol_id_coinapi));
    }
    if(m_Avg_entry_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("avg_entry_price")), m_Avg_entry_price));
    }
    if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quantity")), m_Quantity));
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("side")), m_Side));
    }
    if(m_Unrealized_pnlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unrealized_pnl")), m_Unrealized_pnl));
    }
    if(m_LeverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("leverage")), m_Leverage));
    }
    if(m_Cross_marginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cross_margin")), m_Cross_margin));
    }
    if(m_Liquidation_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidation_price")), m_Liquidation_price));
    }
    if(m_Raw_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("raw_data")), m_Raw_data));
    }
}

bool Position_data_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol_id_exchange"))))
    {
        utility::string_t refVal_setSymbolIdExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol_id_exchange"))), refVal_setSymbolIdExchange );
        setSymbolIdExchange(refVal_setSymbolIdExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol_id_coinapi"))))
    {
        utility::string_t refVal_setSymbolIdCoinapi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol_id_coinapi"))), refVal_setSymbolIdCoinapi );
        setSymbolIdCoinapi(refVal_setSymbolIdCoinapi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("avg_entry_price"))))
    {
        double refVal_setAvgEntryPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("avg_entry_price"))), refVal_setAvgEntryPrice );
        setAvgEntryPrice(refVal_setAvgEntryPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quantity"))))
    {
        double refVal_setQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quantity"))), refVal_setQuantity );
        setQuantity(refVal_setQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("side"))))
    {
        std::shared_ptr<OrdSide> refVal_setSide;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("side"))), refVal_setSide );
        setSide(refVal_setSide);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unrealized_pnl"))))
    {
        double refVal_setUnrealizedPnl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unrealized_pnl"))), refVal_setUnrealizedPnl );
        setUnrealizedPnl(refVal_setUnrealizedPnl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("leverage"))))
    {
        double refVal_setLeverage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("leverage"))), refVal_setLeverage );
        setLeverage(refVal_setLeverage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cross_margin"))))
    {
        bool refVal_setCrossMargin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cross_margin"))), refVal_setCrossMargin );
        setCrossMargin(refVal_setCrossMargin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidation_price"))))
    {
        double refVal_setLiquidationPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidation_price"))), refVal_setLiquidationPrice );
        setLiquidationPrice(refVal_setLiquidationPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("raw_data"))))
    {
        std::shared_ptr<Object> refVal_setRawData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("raw_data"))), refVal_setRawData );
        setRawData(refVal_setRawData);
    }
    return ok;
}

utility::string_t Position_data_inner::getSymbolIdExchange() const
{
    return m_Symbol_id_exchange;
}

void Position_data_inner::setSymbolIdExchange(const utility::string_t& value)
{
    m_Symbol_id_exchange = value;
    m_Symbol_id_exchangeIsSet = true;
}

bool Position_data_inner::symbolIdExchangeIsSet() const
{
    return m_Symbol_id_exchangeIsSet;
}

void Position_data_inner::unsetSymbol_id_exchange()
{
    m_Symbol_id_exchangeIsSet = false;
}
utility::string_t Position_data_inner::getSymbolIdCoinapi() const
{
    return m_Symbol_id_coinapi;
}

void Position_data_inner::setSymbolIdCoinapi(const utility::string_t& value)
{
    m_Symbol_id_coinapi = value;
    m_Symbol_id_coinapiIsSet = true;
}

bool Position_data_inner::symbolIdCoinapiIsSet() const
{
    return m_Symbol_id_coinapiIsSet;
}

void Position_data_inner::unsetSymbol_id_coinapi()
{
    m_Symbol_id_coinapiIsSet = false;
}
double Position_data_inner::getAvgEntryPrice() const
{
    return m_Avg_entry_price;
}

void Position_data_inner::setAvgEntryPrice(double value)
{
    m_Avg_entry_price = value;
    m_Avg_entry_priceIsSet = true;
}

bool Position_data_inner::avgEntryPriceIsSet() const
{
    return m_Avg_entry_priceIsSet;
}

void Position_data_inner::unsetAvg_entry_price()
{
    m_Avg_entry_priceIsSet = false;
}
double Position_data_inner::getQuantity() const
{
    return m_Quantity;
}

void Position_data_inner::setQuantity(double value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}

bool Position_data_inner::quantityIsSet() const
{
    return m_QuantityIsSet;
}

void Position_data_inner::unsetQuantity()
{
    m_QuantityIsSet = false;
}
std::shared_ptr<OrdSide> Position_data_inner::getSide() const
{
    return m_Side;
}

void Position_data_inner::setSide(const std::shared_ptr<OrdSide>& value)
{
    m_Side = value;
    m_SideIsSet = true;
}

bool Position_data_inner::sideIsSet() const
{
    return m_SideIsSet;
}

void Position_data_inner::unsetSide()
{
    m_SideIsSet = false;
}
double Position_data_inner::getUnrealizedPnl() const
{
    return m_Unrealized_pnl;
}

void Position_data_inner::setUnrealizedPnl(double value)
{
    m_Unrealized_pnl = value;
    m_Unrealized_pnlIsSet = true;
}

bool Position_data_inner::unrealizedPnlIsSet() const
{
    return m_Unrealized_pnlIsSet;
}

void Position_data_inner::unsetUnrealized_pnl()
{
    m_Unrealized_pnlIsSet = false;
}
double Position_data_inner::getLeverage() const
{
    return m_Leverage;
}

void Position_data_inner::setLeverage(double value)
{
    m_Leverage = value;
    m_LeverageIsSet = true;
}

bool Position_data_inner::leverageIsSet() const
{
    return m_LeverageIsSet;
}

void Position_data_inner::unsetLeverage()
{
    m_LeverageIsSet = false;
}
bool Position_data_inner::isCrossMargin() const
{
    return m_Cross_margin;
}

void Position_data_inner::setCrossMargin(bool value)
{
    m_Cross_margin = value;
    m_Cross_marginIsSet = true;
}

bool Position_data_inner::crossMarginIsSet() const
{
    return m_Cross_marginIsSet;
}

void Position_data_inner::unsetCross_margin()
{
    m_Cross_marginIsSet = false;
}
double Position_data_inner::getLiquidationPrice() const
{
    return m_Liquidation_price;
}

void Position_data_inner::setLiquidationPrice(double value)
{
    m_Liquidation_price = value;
    m_Liquidation_priceIsSet = true;
}

bool Position_data_inner::liquidationPriceIsSet() const
{
    return m_Liquidation_priceIsSet;
}

void Position_data_inner::unsetLiquidation_price()
{
    m_Liquidation_priceIsSet = false;
}
std::shared_ptr<Object> Position_data_inner::getRawData() const
{
    return m_Raw_data;
}

void Position_data_inner::setRawData(const std::shared_ptr<Object>& value)
{
    m_Raw_data = value;
    m_Raw_dataIsSet = true;
}

bool Position_data_inner::rawDataIsSet() const
{
    return m_Raw_dataIsSet;
}

void Position_data_inner::unsetRaw_data()
{
    m_Raw_dataIsSet = false;
}
}
}
}
}


