/**
 * EMS - REST API
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. <br/> This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>       <br/><br/> Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  <br/><br/> If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: <br/><br/> `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this:  <br/><br/> `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OrderHistory.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderHistory::OrderHistory()
{
    m_Apikey = utility::conversions::to_string_t("");
    m_ApikeyIsSet = false;
    m_ExchangeId = utility::conversions::to_string_t("");
    m_ExchangeIdIsSet = false;
    m_ClientOrderId = utility::conversions::to_string_t("");
    m_ClientOrderIdIsSet = false;
    m_SymbolIdExchange = utility::conversions::to_string_t("");
    m_SymbolIdExchangeIsSet = false;
    m_SymbolIdCoinapi = utility::conversions::to_string_t("");
    m_SymbolIdCoinapiIsSet = false;
    m_AmountOrder = 0.0;
    m_AmountOrderIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Side = 0.0;
    m_SideIsSet = false;
    m_OrderType = utility::conversions::to_string_t("");
    m_OrderTypeIsSet = false;
    m_TimeInForce = utility::conversions::to_string_t("");
    m_TimeInForceIsSet = false;
    m_ExpireTimeIsSet = false;
    m_ExecInstIsSet = false;
    m_ClientOrderIdFormatExchange = utility::conversions::to_string_t("");
    m_ClientOrderIdFormatExchangeIsSet = false;
    m_ExchangeOrderId = utility::conversions::to_string_t("");
    m_ExchangeOrderIdIsSet = false;
    m_AmountOpen = 0.0;
    m_AmountOpenIsSet = false;
    m_AmountFilled = 0.0;
    m_AmountFilledIsSet = false;
    m_AvgPx = 0.0;
    m_AvgPxIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_StatusHistoryStatusIsSet = false;
    m_StatusHistoryTimeIsSet = false;
    m_ErrorMessageResult = utility::conversions::to_string_t("");
    m_ErrorMessageResultIsSet = false;
    m_ErrorMessageReason = utility::conversions::to_string_t("");
    m_ErrorMessageReasonIsSet = false;
    m_ErrorMessageMessage = utility::conversions::to_string_t("");
    m_ErrorMessageMessageIsSet = false;
    m_FillsTimeIsSet = false;
    m_FillsPriceIsSet = false;
    m_FillsAmountIsSet = false;
    m_CreatedTimeIsSet = false;
}

OrderHistory::~OrderHistory()
{
}

void OrderHistory::validate()
{
    // TODO: implement validation
}

web::json::value OrderHistory::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ApikeyIsSet)
    {
        val[utility::conversions::to_string_t(U("apikey"))] = ModelBase::toJson(m_Apikey);
    }
    if(m_ExchangeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("exchangeId"))] = ModelBase::toJson(m_ExchangeId);
    }
    if(m_ClientOrderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("clientOrderId"))] = ModelBase::toJson(m_ClientOrderId);
    }
    if(m_SymbolIdExchangeIsSet)
    {
        val[utility::conversions::to_string_t(U("symbolIdExchange"))] = ModelBase::toJson(m_SymbolIdExchange);
    }
    if(m_SymbolIdCoinapiIsSet)
    {
        val[utility::conversions::to_string_t(U("symbolIdCoinapi"))] = ModelBase::toJson(m_SymbolIdCoinapi);
    }
    if(m_AmountOrderIsSet)
    {
        val[utility::conversions::to_string_t(U("amountOrder"))] = ModelBase::toJson(m_AmountOrder);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_SideIsSet)
    {
        val[utility::conversions::to_string_t(U("side"))] = ModelBase::toJson(m_Side);
    }
    if(m_OrderTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("orderType"))] = ModelBase::toJson(m_OrderType);
    }
    if(m_TimeInForceIsSet)
    {
        val[utility::conversions::to_string_t(U("timeInForce"))] = ModelBase::toJson(m_TimeInForce);
    }
    if(m_ExpireTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("expireTime"))] = ModelBase::toJson(m_ExpireTime);
    }
    if(m_ExecInstIsSet)
    {
        val[utility::conversions::to_string_t(U("execInst"))] = ModelBase::toJson(m_ExecInst);
    }
    if(m_ClientOrderIdFormatExchangeIsSet)
    {
        val[utility::conversions::to_string_t(U("clientOrderIdFormatExchange"))] = ModelBase::toJson(m_ClientOrderIdFormatExchange);
    }
    if(m_ExchangeOrderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("exchangeOrderId"))] = ModelBase::toJson(m_ExchangeOrderId);
    }
    if(m_AmountOpenIsSet)
    {
        val[utility::conversions::to_string_t(U("amountOpen"))] = ModelBase::toJson(m_AmountOpen);
    }
    if(m_AmountFilledIsSet)
    {
        val[utility::conversions::to_string_t(U("amountFilled"))] = ModelBase::toJson(m_AmountFilled);
    }
    if(m_AvgPxIsSet)
    {
        val[utility::conversions::to_string_t(U("avgPx"))] = ModelBase::toJson(m_AvgPx);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_StatusHistoryStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("statusHistoryStatus"))] = ModelBase::toJson(m_StatusHistoryStatus);
    }
    if(m_StatusHistoryTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("statusHistoryTime"))] = ModelBase::toJson(m_StatusHistoryTime);
    }
    if(m_ErrorMessageResultIsSet)
    {
        val[utility::conversions::to_string_t(U("errorMessageResult"))] = ModelBase::toJson(m_ErrorMessageResult);
    }
    if(m_ErrorMessageReasonIsSet)
    {
        val[utility::conversions::to_string_t(U("errorMessageReason"))] = ModelBase::toJson(m_ErrorMessageReason);
    }
    if(m_ErrorMessageMessageIsSet)
    {
        val[utility::conversions::to_string_t(U("errorMessageMessage"))] = ModelBase::toJson(m_ErrorMessageMessage);
    }
    if(m_FillsTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("fillsTime"))] = ModelBase::toJson(m_FillsTime);
    }
    if(m_FillsPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("fillsPrice"))] = ModelBase::toJson(m_FillsPrice);
    }
    if(m_FillsAmountIsSet)
    {
        val[utility::conversions::to_string_t(U("fillsAmount"))] = ModelBase::toJson(m_FillsAmount);
    }
    if(m_CreatedTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("createdTime"))] = ModelBase::toJson(m_CreatedTime);
    }

    return val;
}

bool OrderHistory::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("apikey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apikey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setApikey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApikey);
            setApikey(refVal_setApikey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchangeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchangeId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeId);
            setExchangeId(refVal_setExchangeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("clientOrderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("clientOrderId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientOrderId);
            setClientOrderId(refVal_setClientOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("symbolIdExchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbolIdExchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolIdExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolIdExchange);
            setSymbolIdExchange(refVal_setSymbolIdExchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("symbolIdCoinapi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbolIdCoinapi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbolIdCoinapi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbolIdCoinapi);
            setSymbolIdCoinapi(refVal_setSymbolIdCoinapi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amountOrder"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amountOrder")));
        if(!fieldValue.is_null())
        {
            double refVal_setAmountOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountOrder);
            setAmountOrder(refVal_setAmountOrder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("side"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("side")));
        if(!fieldValue.is_null())
        {
            double refVal_setSide;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSide);
            setSide(refVal_setSide);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrderType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderType);
            setOrderType(refVal_setOrderType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timeInForce"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeInForce")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimeInForce;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeInForce);
            setTimeInForce(refVal_setTimeInForce);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expireTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expireTime")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<utility::datetime> refVal_setExpireTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpireTime);
            setExpireTime(refVal_setExpireTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("execInst"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("execInst")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setExecInst;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecInst);
            setExecInst(refVal_setExecInst);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("clientOrderIdFormatExchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("clientOrderIdFormatExchange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClientOrderIdFormatExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClientOrderIdFormatExchange);
            setClientOrderIdFormatExchange(refVal_setClientOrderIdFormatExchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchangeOrderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchangeOrderId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExchangeOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchangeOrderId);
            setExchangeOrderId(refVal_setExchangeOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amountOpen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amountOpen")));
        if(!fieldValue.is_null())
        {
            double refVal_setAmountOpen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountOpen);
            setAmountOpen(refVal_setAmountOpen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amountFilled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amountFilled")));
        if(!fieldValue.is_null())
        {
            double refVal_setAmountFilled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountFilled);
            setAmountFilled(refVal_setAmountFilled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("avgPx"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("avgPx")));
        if(!fieldValue.is_null())
        {
            double refVal_setAvgPx;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvgPx);
            setAvgPx(refVal_setAvgPx);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statusHistoryStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statusHistoryStatus")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setStatusHistoryStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusHistoryStatus);
            setStatusHistoryStatus(refVal_setStatusHistoryStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statusHistoryTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statusHistoryTime")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::datetime>> refVal_setStatusHistoryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusHistoryTime);
            setStatusHistoryTime(refVal_setStatusHistoryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errorMessageResult"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errorMessageResult")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorMessageResult;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorMessageResult);
            setErrorMessageResult(refVal_setErrorMessageResult);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errorMessageReason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errorMessageReason")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorMessageReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorMessageReason);
            setErrorMessageReason(refVal_setErrorMessageReason);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errorMessageMessage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errorMessageMessage")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorMessageMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorMessageMessage);
            setErrorMessageMessage(refVal_setErrorMessageMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fillsTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fillsTime")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::datetime>> refVal_setFillsTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFillsTime);
            setFillsTime(refVal_setFillsTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fillsPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fillsPrice")));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_setFillsPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFillsPrice);
            setFillsPrice(refVal_setFillsPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fillsAmount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fillsAmount")));
        if(!fieldValue.is_null())
        {
            std::vector<double> refVal_setFillsAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFillsAmount);
            setFillsAmount(refVal_setFillsAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdTime")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<utility::datetime> refVal_setCreatedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTime);
            setCreatedTime(refVal_setCreatedTime);
        }
    }
    return ok;
}

void OrderHistory::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ApikeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apikey")), m_Apikey));
    }
    if(m_ExchangeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchangeId")), m_ExchangeId));
    }
    if(m_ClientOrderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("clientOrderId")), m_ClientOrderId));
    }
    if(m_SymbolIdExchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbolIdExchange")), m_SymbolIdExchange));
    }
    if(m_SymbolIdCoinapiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbolIdCoinapi")), m_SymbolIdCoinapi));
    }
    if(m_AmountOrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amountOrder")), m_AmountOrder));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_SideIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("side")), m_Side));
    }
    if(m_OrderTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderType")), m_OrderType));
    }
    if(m_TimeInForceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeInForce")), m_TimeInForce));
    }
    if(m_ExpireTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expireTime")), m_ExpireTime));
    }
    if(m_ExecInstIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("execInst")), m_ExecInst));
    }
    if(m_ClientOrderIdFormatExchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("clientOrderIdFormatExchange")), m_ClientOrderIdFormatExchange));
    }
    if(m_ExchangeOrderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchangeOrderId")), m_ExchangeOrderId));
    }
    if(m_AmountOpenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amountOpen")), m_AmountOpen));
    }
    if(m_AmountFilledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amountFilled")), m_AmountFilled));
    }
    if(m_AvgPxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("avgPx")), m_AvgPx));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_StatusHistoryStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statusHistoryStatus")), m_StatusHistoryStatus));
    }
    if(m_StatusHistoryTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statusHistoryTime")), m_StatusHistoryTime));
    }
    if(m_ErrorMessageResultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errorMessageResult")), m_ErrorMessageResult));
    }
    if(m_ErrorMessageReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errorMessageReason")), m_ErrorMessageReason));
    }
    if(m_ErrorMessageMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errorMessageMessage")), m_ErrorMessageMessage));
    }
    if(m_FillsTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fillsTime")), m_FillsTime));
    }
    if(m_FillsPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fillsPrice")), m_FillsPrice));
    }
    if(m_FillsAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fillsAmount")), m_FillsAmount));
    }
    if(m_CreatedTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdTime")), m_CreatedTime));
    }
}

bool OrderHistory::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("apikey"))))
    {
        utility::string_t refVal_setApikey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apikey"))), refVal_setApikey );
        setApikey(refVal_setApikey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchangeId"))))
    {
        utility::string_t refVal_setExchangeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchangeId"))), refVal_setExchangeId );
        setExchangeId(refVal_setExchangeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("clientOrderId"))))
    {
        utility::string_t refVal_setClientOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("clientOrderId"))), refVal_setClientOrderId );
        setClientOrderId(refVal_setClientOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("symbolIdExchange"))))
    {
        utility::string_t refVal_setSymbolIdExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbolIdExchange"))), refVal_setSymbolIdExchange );
        setSymbolIdExchange(refVal_setSymbolIdExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("symbolIdCoinapi"))))
    {
        utility::string_t refVal_setSymbolIdCoinapi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbolIdCoinapi"))), refVal_setSymbolIdCoinapi );
        setSymbolIdCoinapi(refVal_setSymbolIdCoinapi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amountOrder"))))
    {
        double refVal_setAmountOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amountOrder"))), refVal_setAmountOrder );
        setAmountOrder(refVal_setAmountOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("side"))))
    {
        double refVal_setSide;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("side"))), refVal_setSide );
        setSide(refVal_setSide);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderType"))))
    {
        utility::string_t refVal_setOrderType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderType"))), refVal_setOrderType );
        setOrderType(refVal_setOrderType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timeInForce"))))
    {
        utility::string_t refVal_setTimeInForce;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeInForce"))), refVal_setTimeInForce );
        setTimeInForce(refVal_setTimeInForce);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expireTime"))))
    {
        std::shared_ptr<utility::datetime> refVal_setExpireTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expireTime"))), refVal_setExpireTime );
        setExpireTime(refVal_setExpireTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("execInst"))))
    {
        std::vector<utility::string_t> refVal_setExecInst;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("execInst"))), refVal_setExecInst );
        setExecInst(refVal_setExecInst);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("clientOrderIdFormatExchange"))))
    {
        utility::string_t refVal_setClientOrderIdFormatExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("clientOrderIdFormatExchange"))), refVal_setClientOrderIdFormatExchange );
        setClientOrderIdFormatExchange(refVal_setClientOrderIdFormatExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchangeOrderId"))))
    {
        utility::string_t refVal_setExchangeOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchangeOrderId"))), refVal_setExchangeOrderId );
        setExchangeOrderId(refVal_setExchangeOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amountOpen"))))
    {
        double refVal_setAmountOpen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amountOpen"))), refVal_setAmountOpen );
        setAmountOpen(refVal_setAmountOpen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amountFilled"))))
    {
        double refVal_setAmountFilled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amountFilled"))), refVal_setAmountFilled );
        setAmountFilled(refVal_setAmountFilled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("avgPx"))))
    {
        double refVal_setAvgPx;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("avgPx"))), refVal_setAvgPx );
        setAvgPx(refVal_setAvgPx);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statusHistoryStatus"))))
    {
        std::vector<utility::string_t> refVal_setStatusHistoryStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statusHistoryStatus"))), refVal_setStatusHistoryStatus );
        setStatusHistoryStatus(refVal_setStatusHistoryStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statusHistoryTime"))))
    {
        std::vector<std::shared_ptr<utility::datetime>> refVal_setStatusHistoryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statusHistoryTime"))), refVal_setStatusHistoryTime );
        setStatusHistoryTime(refVal_setStatusHistoryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errorMessageResult"))))
    {
        utility::string_t refVal_setErrorMessageResult;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errorMessageResult"))), refVal_setErrorMessageResult );
        setErrorMessageResult(refVal_setErrorMessageResult);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errorMessageReason"))))
    {
        utility::string_t refVal_setErrorMessageReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errorMessageReason"))), refVal_setErrorMessageReason );
        setErrorMessageReason(refVal_setErrorMessageReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errorMessageMessage"))))
    {
        utility::string_t refVal_setErrorMessageMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errorMessageMessage"))), refVal_setErrorMessageMessage );
        setErrorMessageMessage(refVal_setErrorMessageMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fillsTime"))))
    {
        std::vector<std::shared_ptr<utility::datetime>> refVal_setFillsTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fillsTime"))), refVal_setFillsTime );
        setFillsTime(refVal_setFillsTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fillsPrice"))))
    {
        std::vector<double> refVal_setFillsPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fillsPrice"))), refVal_setFillsPrice );
        setFillsPrice(refVal_setFillsPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fillsAmount"))))
    {
        std::vector<double> refVal_setFillsAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fillsAmount"))), refVal_setFillsAmount );
        setFillsAmount(refVal_setFillsAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdTime"))))
    {
        std::shared_ptr<utility::datetime> refVal_setCreatedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdTime"))), refVal_setCreatedTime );
        setCreatedTime(refVal_setCreatedTime);
    }
    return ok;
}

utility::string_t OrderHistory::getApikey() const
{
    return m_Apikey;
}

void OrderHistory::setApikey(const utility::string_t& value)
{
    m_Apikey = value;
    m_ApikeyIsSet = true;
}

bool OrderHistory::apikeyIsSet() const
{
    return m_ApikeyIsSet;
}

void OrderHistory::unsetApikey()
{
    m_ApikeyIsSet = false;
}
utility::string_t OrderHistory::getExchangeId() const
{
    return m_ExchangeId;
}

void OrderHistory::setExchangeId(const utility::string_t& value)
{
    m_ExchangeId = value;
    m_ExchangeIdIsSet = true;
}

bool OrderHistory::exchangeIdIsSet() const
{
    return m_ExchangeIdIsSet;
}

void OrderHistory::unsetExchangeId()
{
    m_ExchangeIdIsSet = false;
}
utility::string_t OrderHistory::getClientOrderId() const
{
    return m_ClientOrderId;
}

void OrderHistory::setClientOrderId(const utility::string_t& value)
{
    m_ClientOrderId = value;
    m_ClientOrderIdIsSet = true;
}

bool OrderHistory::clientOrderIdIsSet() const
{
    return m_ClientOrderIdIsSet;
}

void OrderHistory::unsetClientOrderId()
{
    m_ClientOrderIdIsSet = false;
}
utility::string_t OrderHistory::getSymbolIdExchange() const
{
    return m_SymbolIdExchange;
}

void OrderHistory::setSymbolIdExchange(const utility::string_t& value)
{
    m_SymbolIdExchange = value;
    m_SymbolIdExchangeIsSet = true;
}

bool OrderHistory::symbolIdExchangeIsSet() const
{
    return m_SymbolIdExchangeIsSet;
}

void OrderHistory::unsetSymbolIdExchange()
{
    m_SymbolIdExchangeIsSet = false;
}
utility::string_t OrderHistory::getSymbolIdCoinapi() const
{
    return m_SymbolIdCoinapi;
}

void OrderHistory::setSymbolIdCoinapi(const utility::string_t& value)
{
    m_SymbolIdCoinapi = value;
    m_SymbolIdCoinapiIsSet = true;
}

bool OrderHistory::symbolIdCoinapiIsSet() const
{
    return m_SymbolIdCoinapiIsSet;
}

void OrderHistory::unsetSymbolIdCoinapi()
{
    m_SymbolIdCoinapiIsSet = false;
}
double OrderHistory::getAmountOrder() const
{
    return m_AmountOrder;
}

void OrderHistory::setAmountOrder(double value)
{
    m_AmountOrder = value;
    m_AmountOrderIsSet = true;
}

bool OrderHistory::amountOrderIsSet() const
{
    return m_AmountOrderIsSet;
}

void OrderHistory::unsetAmountOrder()
{
    m_AmountOrderIsSet = false;
}
double OrderHistory::getPrice() const
{
    return m_Price;
}

void OrderHistory::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool OrderHistory::priceIsSet() const
{
    return m_PriceIsSet;
}

void OrderHistory::unsetPrice()
{
    m_PriceIsSet = false;
}
double OrderHistory::getSide() const
{
    return m_Side;
}

void OrderHistory::setSide(double value)
{
    m_Side = value;
    m_SideIsSet = true;
}

bool OrderHistory::sideIsSet() const
{
    return m_SideIsSet;
}

void OrderHistory::unsetSide()
{
    m_SideIsSet = false;
}
utility::string_t OrderHistory::getOrderType() const
{
    return m_OrderType;
}

void OrderHistory::setOrderType(const utility::string_t& value)
{
    m_OrderType = value;
    m_OrderTypeIsSet = true;
}

bool OrderHistory::orderTypeIsSet() const
{
    return m_OrderTypeIsSet;
}

void OrderHistory::unsetOrderType()
{
    m_OrderTypeIsSet = false;
}
utility::string_t OrderHistory::getTimeInForce() const
{
    return m_TimeInForce;
}

void OrderHistory::setTimeInForce(const utility::string_t& value)
{
    m_TimeInForce = value;
    m_TimeInForceIsSet = true;
}

bool OrderHistory::timeInForceIsSet() const
{
    return m_TimeInForceIsSet;
}

void OrderHistory::unsetTimeInForce()
{
    m_TimeInForceIsSet = false;
}
std::shared_ptr<utility::datetime> OrderHistory::getExpireTime() const
{
    return m_ExpireTime;
}

void OrderHistory::setExpireTime(const std::shared_ptr<utility::datetime>& value)
{
    m_ExpireTime = value;
    m_ExpireTimeIsSet = true;
}

bool OrderHistory::expireTimeIsSet() const
{
    return m_ExpireTimeIsSet;
}

void OrderHistory::unsetExpireTime()
{
    m_ExpireTimeIsSet = false;
}
std::vector<utility::string_t>& OrderHistory::getExecInst()
{
    return m_ExecInst;
}

void OrderHistory::setExecInst(const std::vector<utility::string_t>& value)
{
    m_ExecInst = value;
    m_ExecInstIsSet = true;
}

bool OrderHistory::execInstIsSet() const
{
    return m_ExecInstIsSet;
}

void OrderHistory::unsetExecInst()
{
    m_ExecInstIsSet = false;
}
utility::string_t OrderHistory::getClientOrderIdFormatExchange() const
{
    return m_ClientOrderIdFormatExchange;
}

void OrderHistory::setClientOrderIdFormatExchange(const utility::string_t& value)
{
    m_ClientOrderIdFormatExchange = value;
    m_ClientOrderIdFormatExchangeIsSet = true;
}

bool OrderHistory::clientOrderIdFormatExchangeIsSet() const
{
    return m_ClientOrderIdFormatExchangeIsSet;
}

void OrderHistory::unsetClientOrderIdFormatExchange()
{
    m_ClientOrderIdFormatExchangeIsSet = false;
}
utility::string_t OrderHistory::getExchangeOrderId() const
{
    return m_ExchangeOrderId;
}

void OrderHistory::setExchangeOrderId(const utility::string_t& value)
{
    m_ExchangeOrderId = value;
    m_ExchangeOrderIdIsSet = true;
}

bool OrderHistory::exchangeOrderIdIsSet() const
{
    return m_ExchangeOrderIdIsSet;
}

void OrderHistory::unsetExchangeOrderId()
{
    m_ExchangeOrderIdIsSet = false;
}
double OrderHistory::getAmountOpen() const
{
    return m_AmountOpen;
}

void OrderHistory::setAmountOpen(double value)
{
    m_AmountOpen = value;
    m_AmountOpenIsSet = true;
}

bool OrderHistory::amountOpenIsSet() const
{
    return m_AmountOpenIsSet;
}

void OrderHistory::unsetAmountOpen()
{
    m_AmountOpenIsSet = false;
}
double OrderHistory::getAmountFilled() const
{
    return m_AmountFilled;
}

void OrderHistory::setAmountFilled(double value)
{
    m_AmountFilled = value;
    m_AmountFilledIsSet = true;
}

bool OrderHistory::amountFilledIsSet() const
{
    return m_AmountFilledIsSet;
}

void OrderHistory::unsetAmountFilled()
{
    m_AmountFilledIsSet = false;
}
double OrderHistory::getAvgPx() const
{
    return m_AvgPx;
}

void OrderHistory::setAvgPx(double value)
{
    m_AvgPx = value;
    m_AvgPxIsSet = true;
}

bool OrderHistory::avgPxIsSet() const
{
    return m_AvgPxIsSet;
}

void OrderHistory::unsetAvgPx()
{
    m_AvgPxIsSet = false;
}
utility::string_t OrderHistory::getStatus() const
{
    return m_Status;
}

void OrderHistory::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool OrderHistory::statusIsSet() const
{
    return m_StatusIsSet;
}

void OrderHistory::unsetStatus()
{
    m_StatusIsSet = false;
}
std::vector<utility::string_t>& OrderHistory::getStatusHistoryStatus()
{
    return m_StatusHistoryStatus;
}

void OrderHistory::setStatusHistoryStatus(const std::vector<utility::string_t>& value)
{
    m_StatusHistoryStatus = value;
    m_StatusHistoryStatusIsSet = true;
}

bool OrderHistory::statusHistoryStatusIsSet() const
{
    return m_StatusHistoryStatusIsSet;
}

void OrderHistory::unsetStatusHistoryStatus()
{
    m_StatusHistoryStatusIsSet = false;
}
std::vector<std::shared_ptr<utility::datetime>>& OrderHistory::getStatusHistoryTime()
{
    return m_StatusHistoryTime;
}

void OrderHistory::setStatusHistoryTime(const std::vector<std::shared_ptr<utility::datetime>>& value)
{
    m_StatusHistoryTime = value;
    m_StatusHistoryTimeIsSet = true;
}

bool OrderHistory::statusHistoryTimeIsSet() const
{
    return m_StatusHistoryTimeIsSet;
}

void OrderHistory::unsetStatusHistoryTime()
{
    m_StatusHistoryTimeIsSet = false;
}
utility::string_t OrderHistory::getErrorMessageResult() const
{
    return m_ErrorMessageResult;
}

void OrderHistory::setErrorMessageResult(const utility::string_t& value)
{
    m_ErrorMessageResult = value;
    m_ErrorMessageResultIsSet = true;
}

bool OrderHistory::errorMessageResultIsSet() const
{
    return m_ErrorMessageResultIsSet;
}

void OrderHistory::unsetErrorMessageResult()
{
    m_ErrorMessageResultIsSet = false;
}
utility::string_t OrderHistory::getErrorMessageReason() const
{
    return m_ErrorMessageReason;
}

void OrderHistory::setErrorMessageReason(const utility::string_t& value)
{
    m_ErrorMessageReason = value;
    m_ErrorMessageReasonIsSet = true;
}

bool OrderHistory::errorMessageReasonIsSet() const
{
    return m_ErrorMessageReasonIsSet;
}

void OrderHistory::unsetErrorMessageReason()
{
    m_ErrorMessageReasonIsSet = false;
}
utility::string_t OrderHistory::getErrorMessageMessage() const
{
    return m_ErrorMessageMessage;
}

void OrderHistory::setErrorMessageMessage(const utility::string_t& value)
{
    m_ErrorMessageMessage = value;
    m_ErrorMessageMessageIsSet = true;
}

bool OrderHistory::errorMessageMessageIsSet() const
{
    return m_ErrorMessageMessageIsSet;
}

void OrderHistory::unsetErrorMessageMessage()
{
    m_ErrorMessageMessageIsSet = false;
}
std::vector<std::shared_ptr<utility::datetime>>& OrderHistory::getFillsTime()
{
    return m_FillsTime;
}

void OrderHistory::setFillsTime(const std::vector<std::shared_ptr<utility::datetime>>& value)
{
    m_FillsTime = value;
    m_FillsTimeIsSet = true;
}

bool OrderHistory::fillsTimeIsSet() const
{
    return m_FillsTimeIsSet;
}

void OrderHistory::unsetFillsTime()
{
    m_FillsTimeIsSet = false;
}
std::vector<double>& OrderHistory::getFillsPrice()
{
    return m_FillsPrice;
}

void OrderHistory::setFillsPrice(std::vector<double> value)
{
    m_FillsPrice = value;
    m_FillsPriceIsSet = true;
}

bool OrderHistory::fillsPriceIsSet() const
{
    return m_FillsPriceIsSet;
}

void OrderHistory::unsetFillsPrice()
{
    m_FillsPriceIsSet = false;
}
std::vector<double>& OrderHistory::getFillsAmount()
{
    return m_FillsAmount;
}

void OrderHistory::setFillsAmount(std::vector<double> value)
{
    m_FillsAmount = value;
    m_FillsAmountIsSet = true;
}

bool OrderHistory::fillsAmountIsSet() const
{
    return m_FillsAmountIsSet;
}

void OrderHistory::unsetFillsAmount()
{
    m_FillsAmountIsSet = false;
}
std::shared_ptr<utility::datetime> OrderHistory::getCreatedTime() const
{
    return m_CreatedTime;
}

void OrderHistory::setCreatedTime(const std::shared_ptr<utility::datetime>& value)
{
    m_CreatedTime = value;
    m_CreatedTimeIsSet = true;
}

bool OrderHistory::createdTimeIsSet() const
{
    return m_CreatedTimeIsSet;
}

void OrderHistory::unsetCreatedTime()
{
    m_CreatedTimeIsSet = false;
}
}
}
}
}


