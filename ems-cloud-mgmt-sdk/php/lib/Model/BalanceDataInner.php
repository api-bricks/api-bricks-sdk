<?php
/**
 * BalanceDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EMS - REST API
 *
 * This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside>
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BalanceDataInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BalanceDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Balance_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asset_id_exchange' => 'string',
        'asset_id_coinapi' => 'string',
        'balance' => 'float',
        'available' => 'float',
        'locked' => 'float',
        'last_updated_by' => 'string',
        'rate_usd' => 'float',
        'traded' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'asset_id_exchange' => null,
        'asset_id_coinapi' => null,
        'balance' => 'double',
        'available' => 'double',
        'locked' => 'double',
        'last_updated_by' => null,
        'rate_usd' => 'double',
        'traded' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'asset_id_exchange' => false,
		'asset_id_coinapi' => false,
		'balance' => false,
		'available' => false,
		'locked' => false,
		'last_updated_by' => false,
		'rate_usd' => false,
		'traded' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset_id_exchange' => 'asset_id_exchange',
        'asset_id_coinapi' => 'asset_id_coinapi',
        'balance' => 'balance',
        'available' => 'available',
        'locked' => 'locked',
        'last_updated_by' => 'last_updated_by',
        'rate_usd' => 'rate_usd',
        'traded' => 'traded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset_id_exchange' => 'setAssetIdExchange',
        'asset_id_coinapi' => 'setAssetIdCoinapi',
        'balance' => 'setBalance',
        'available' => 'setAvailable',
        'locked' => 'setLocked',
        'last_updated_by' => 'setLastUpdatedBy',
        'rate_usd' => 'setRateUsd',
        'traded' => 'setTraded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset_id_exchange' => 'getAssetIdExchange',
        'asset_id_coinapi' => 'getAssetIdCoinapi',
        'balance' => 'getBalance',
        'available' => 'getAvailable',
        'locked' => 'getLocked',
        'last_updated_by' => 'getLastUpdatedBy',
        'rate_usd' => 'getRateUsd',
        'traded' => 'getTraded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LAST_UPDATED_BY_INITIALIZATION = 'INITIALIZATION';
    public const LAST_UPDATED_BY_BALANCE_MANAGER = 'BALANCE_MANAGER';
    public const LAST_UPDATED_BY_EXCHANGE = 'EXCHANGE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLastUpdatedByAllowableValues()
    {
        return [
            self::LAST_UPDATED_BY_INITIALIZATION,
            self::LAST_UPDATED_BY_BALANCE_MANAGER,
            self::LAST_UPDATED_BY_EXCHANGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('asset_id_exchange', $data ?? [], null);
        $this->setIfExists('asset_id_coinapi', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('available', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('last_updated_by', $data ?? [], null);
        $this->setIfExists('rate_usd', $data ?? [], null);
        $this->setIfExists('traded', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLastUpdatedByAllowableValues();
        if (!is_null($this->container['last_updated_by']) && !in_array($this->container['last_updated_by'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'last_updated_by', must be one of '%s'",
                $this->container['last_updated_by'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset_id_exchange
     *
     * @return string|null
     */
    public function getAssetIdExchange()
    {
        return $this->container['asset_id_exchange'];
    }

    /**
     * Sets asset_id_exchange
     *
     * @param string|null $asset_id_exchange Exchange currency code.
     *
     * @return self
     */
    public function setAssetIdExchange($asset_id_exchange)
    {
        if (is_null($asset_id_exchange)) {
            throw new \InvalidArgumentException('non-nullable asset_id_exchange cannot be null');
        }
        $this->container['asset_id_exchange'] = $asset_id_exchange;

        return $this;
    }

    /**
     * Gets asset_id_coinapi
     *
     * @return string|null
     */
    public function getAssetIdCoinapi()
    {
        return $this->container['asset_id_coinapi'];
    }

    /**
     * Sets asset_id_coinapi
     *
     * @param string|null $asset_id_coinapi CoinAPI currency code.
     *
     * @return self
     */
    public function setAssetIdCoinapi($asset_id_coinapi)
    {
        if (is_null($asset_id_coinapi)) {
            throw new \InvalidArgumentException('non-nullable asset_id_coinapi cannot be null');
        }
        $this->container['asset_id_coinapi'] = $asset_id_coinapi;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance Value of the current total currency balance on the exchange.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets available
     *
     * @return float|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param float|null $available Value of the current available currency balance on the exchange that can be used as collateral.
     *
     * @return self
     */
    public function setAvailable($available)
    {
        if (is_null($available)) {
            throw new \InvalidArgumentException('non-nullable available cannot be null');
        }
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return float|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param float|null $locked Value of the current locked currency balance by the exchange.
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets last_updated_by
     *
     * @return string|null
     */
    public function getLastUpdatedBy()
    {
        return $this->container['last_updated_by'];
    }

    /**
     * Sets last_updated_by
     *
     * @param string|null $last_updated_by Source of the last modification.
     *
     * @return self
     */
    public function setLastUpdatedBy($last_updated_by)
    {
        if (is_null($last_updated_by)) {
            throw new \InvalidArgumentException('non-nullable last_updated_by cannot be null');
        }
        $allowedValues = $this->getLastUpdatedByAllowableValues();
        if (!in_array($last_updated_by, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'last_updated_by', must be one of '%s'",
                    $last_updated_by,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['last_updated_by'] = $last_updated_by;

        return $this;
    }

    /**
     * Gets rate_usd
     *
     * @return float|null
     */
    public function getRateUsd()
    {
        return $this->container['rate_usd'];
    }

    /**
     * Sets rate_usd
     *
     * @param float|null $rate_usd Current exchange rate to the USD for the single unit of the currency.
     *
     * @return self
     */
    public function setRateUsd($rate_usd)
    {
        if (is_null($rate_usd)) {
            throw new \InvalidArgumentException('non-nullable rate_usd cannot be null');
        }
        $this->container['rate_usd'] = $rate_usd;

        return $this;
    }

    /**
     * Gets traded
     *
     * @return float|null
     */
    public function getTraded()
    {
        return $this->container['traded'];
    }

    /**
     * Sets traded
     *
     * @param float|null $traded Value of the current total traded.
     *
     * @return self
     */
    public function setTraded($traded)
    {
        if (is_null($traded)) {
            throw new \InvalidArgumentException('non-nullable traded cannot be null');
        }
        $this->container['traded'] = $traded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


