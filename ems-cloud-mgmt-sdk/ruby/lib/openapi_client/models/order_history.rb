=begin
#EMS - REST API

#This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Managed Cloud</td>       <td>Sandbox</td>       <td><code>https://ems-gateway-aws-eu-central-1-dev.coinapi.io/</code></td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Sandbox</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside> 

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class OrderHistory
    # Apikey
    attr_accessor :apikey

    # Exchange id
    attr_accessor :exchange_id

    # Client order id
    attr_accessor :client_order_id

    # Symbol id exchange
    attr_accessor :symbol_id_exchange

    # Symbol id in coinapi
    attr_accessor :symbol_id_coinapi

    # Amount
    attr_accessor :amount_order

    # Price
    attr_accessor :price

    # 1-buy, 2-sell
    attr_accessor :side

    # Order type
    attr_accessor :order_type

    # Time in force
    attr_accessor :time_in_force

    # Expire time
    attr_accessor :expire_time

    # Exec inst
    attr_accessor :exec_inst

    # Client order id format
    attr_accessor :client_order_id_format_exchange

    # Exchange order id
    attr_accessor :exchange_order_id

    # Amount open
    attr_accessor :amount_open

    # Amount filled
    attr_accessor :amount_filled

    # Average price
    attr_accessor :avg_px

    # Status
    attr_accessor :status

    # History status
    attr_accessor :status_history_status

    # History status time
    attr_accessor :status_history_time

    # Error message
    attr_accessor :error_message_result

    # Error message reason
    attr_accessor :error_message_reason

    # Error message
    attr_accessor :error_message_message

    # Fills time
    attr_accessor :fills_time

    # Fills price
    attr_accessor :fills_price

    # Fills amount
    attr_accessor :fills_amount

    # Created time
    attr_accessor :created_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'apikey' => :'apikey',
        :'exchange_id' => :'exchangeId',
        :'client_order_id' => :'clientOrderId',
        :'symbol_id_exchange' => :'symbolIdExchange',
        :'symbol_id_coinapi' => :'symbolIdCoinapi',
        :'amount_order' => :'amountOrder',
        :'price' => :'price',
        :'side' => :'side',
        :'order_type' => :'orderType',
        :'time_in_force' => :'timeInForce',
        :'expire_time' => :'expireTime',
        :'exec_inst' => :'execInst',
        :'client_order_id_format_exchange' => :'clientOrderIdFormatExchange',
        :'exchange_order_id' => :'exchangeOrderId',
        :'amount_open' => :'amountOpen',
        :'amount_filled' => :'amountFilled',
        :'avg_px' => :'avgPx',
        :'status' => :'status',
        :'status_history_status' => :'statusHistoryStatus',
        :'status_history_time' => :'statusHistoryTime',
        :'error_message_result' => :'errorMessageResult',
        :'error_message_reason' => :'errorMessageReason',
        :'error_message_message' => :'errorMessageMessage',
        :'fills_time' => :'fillsTime',
        :'fills_price' => :'fillsPrice',
        :'fills_amount' => :'fillsAmount',
        :'created_time' => :'createdTime'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'apikey' => :'String',
        :'exchange_id' => :'String',
        :'client_order_id' => :'String',
        :'symbol_id_exchange' => :'String',
        :'symbol_id_coinapi' => :'String',
        :'amount_order' => :'Float',
        :'price' => :'Float',
        :'side' => :'Float',
        :'order_type' => :'String',
        :'time_in_force' => :'String',
        :'expire_time' => :'Date',
        :'exec_inst' => :'Array<String>',
        :'client_order_id_format_exchange' => :'String',
        :'exchange_order_id' => :'String',
        :'amount_open' => :'Float',
        :'amount_filled' => :'Float',
        :'avg_px' => :'Float',
        :'status' => :'String',
        :'status_history_status' => :'Array<String>',
        :'status_history_time' => :'Array<Date>',
        :'error_message_result' => :'String',
        :'error_message_reason' => :'String',
        :'error_message_message' => :'String',
        :'fills_time' => :'Array<Date>',
        :'fills_price' => :'Array<Float>',
        :'fills_amount' => :'Array<Float>',
        :'created_time' => :'Date'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderHistory` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderHistory`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'apikey')
        self.apikey = attributes[:'apikey']
      end

      if attributes.key?(:'exchange_id')
        self.exchange_id = attributes[:'exchange_id']
      end

      if attributes.key?(:'client_order_id')
        self.client_order_id = attributes[:'client_order_id']
      end

      if attributes.key?(:'symbol_id_exchange')
        self.symbol_id_exchange = attributes[:'symbol_id_exchange']
      end

      if attributes.key?(:'symbol_id_coinapi')
        self.symbol_id_coinapi = attributes[:'symbol_id_coinapi']
      end

      if attributes.key?(:'amount_order')
        self.amount_order = attributes[:'amount_order']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'side')
        self.side = attributes[:'side']
      end

      if attributes.key?(:'order_type')
        self.order_type = attributes[:'order_type']
      end

      if attributes.key?(:'time_in_force')
        self.time_in_force = attributes[:'time_in_force']
      end

      if attributes.key?(:'expire_time')
        self.expire_time = attributes[:'expire_time']
      end

      if attributes.key?(:'exec_inst')
        if (value = attributes[:'exec_inst']).is_a?(Array)
          self.exec_inst = value
        end
      end

      if attributes.key?(:'client_order_id_format_exchange')
        self.client_order_id_format_exchange = attributes[:'client_order_id_format_exchange']
      end

      if attributes.key?(:'exchange_order_id')
        self.exchange_order_id = attributes[:'exchange_order_id']
      end

      if attributes.key?(:'amount_open')
        self.amount_open = attributes[:'amount_open']
      end

      if attributes.key?(:'amount_filled')
        self.amount_filled = attributes[:'amount_filled']
      end

      if attributes.key?(:'avg_px')
        self.avg_px = attributes[:'avg_px']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_history_status')
        if (value = attributes[:'status_history_status']).is_a?(Array)
          self.status_history_status = value
        end
      end

      if attributes.key?(:'status_history_time')
        if (value = attributes[:'status_history_time']).is_a?(Array)
          self.status_history_time = value
        end
      end

      if attributes.key?(:'error_message_result')
        self.error_message_result = attributes[:'error_message_result']
      end

      if attributes.key?(:'error_message_reason')
        self.error_message_reason = attributes[:'error_message_reason']
      end

      if attributes.key?(:'error_message_message')
        self.error_message_message = attributes[:'error_message_message']
      end

      if attributes.key?(:'fills_time')
        if (value = attributes[:'fills_time']).is_a?(Array)
          self.fills_time = value
        end
      end

      if attributes.key?(:'fills_price')
        if (value = attributes[:'fills_price']).is_a?(Array)
          self.fills_price = value
        end
      end

      if attributes.key?(:'fills_amount')
        if (value = attributes[:'fills_amount']).is_a?(Array)
          self.fills_amount = value
        end
      end

      if attributes.key?(:'created_time')
        self.created_time = attributes[:'created_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          apikey == o.apikey &&
          exchange_id == o.exchange_id &&
          client_order_id == o.client_order_id &&
          symbol_id_exchange == o.symbol_id_exchange &&
          symbol_id_coinapi == o.symbol_id_coinapi &&
          amount_order == o.amount_order &&
          price == o.price &&
          side == o.side &&
          order_type == o.order_type &&
          time_in_force == o.time_in_force &&
          expire_time == o.expire_time &&
          exec_inst == o.exec_inst &&
          client_order_id_format_exchange == o.client_order_id_format_exchange &&
          exchange_order_id == o.exchange_order_id &&
          amount_open == o.amount_open &&
          amount_filled == o.amount_filled &&
          avg_px == o.avg_px &&
          status == o.status &&
          status_history_status == o.status_history_status &&
          status_history_time == o.status_history_time &&
          error_message_result == o.error_message_result &&
          error_message_reason == o.error_message_reason &&
          error_message_message == o.error_message_message &&
          fills_time == o.fills_time &&
          fills_price == o.fills_price &&
          fills_amount == o.fills_amount &&
          created_time == o.created_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [apikey, exchange_id, client_order_id, symbol_id_exchange, symbol_id_coinapi, amount_order, price, side, order_type, time_in_force, expire_time, exec_inst, client_order_id_format_exchange, exchange_order_id, amount_open, amount_filled, avg_px, status, status_history_status, status_history_time, error_message_result, error_message_reason, error_message_message, fills_time, fills_price, fills_amount, created_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
