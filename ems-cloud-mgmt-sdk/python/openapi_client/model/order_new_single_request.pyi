# coding: utf-8

"""
    EMS - REST API

    This section will provide necessary information about the `CoinAPI EMS REST API` protocol. This API is also available in the Postman application: <a href=\"https://postman.coinapi.io/\" target=\"_blank\">https://postman.coinapi.io/</a>        Implemented Standards:    * [HTTP1.0](https://datatracker.ietf.org/doc/html/rfc1945)   * [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616)   * [HTTP2.0](https://datatracker.ietf.org/doc/html/rfc7540)     ### Endpoints  <table>   <thead>     <tr>       <th>Deployment method</th>       <th>Environment</th>       <th>Url</th>     </tr>   </thead>   <tbody>     <tr>       <td>Managed Cloud</td>       <td>Production</td>       <td>Use <a href=\"#ems-docs-sh\">Managed Cloud REST API /v1/locations</a> to get specific endpoints to each server site where your deployments span</td>     </tr>     <tr>       <td>Self Hosted</td>       <td>Production</td>       <td>IP Address of the <code>ems-gateway</code> container/excecutable in the closest server site to the caller location</td>     </tr>   </tbody> </table>  ### Authentication If the software is deployed as `Self-Hosted` then API do not require authentication as inside your infrastructure, your company is responsible for the security and access controls.  If the software is deployed in our `Managed Cloud`, there are 2 methods for authenticating with us, you only need to use one:   1. Custom authorization header named `X-CoinAPI-Key` with the API Key  2. Query string parameter named `apikey` with the API Key  3. <a href=\"#certificate\">TLS Client Certificate</a> from the `Managed Cloud REST API` (/v1/certificate/pem endpoint) while establishing a TLS session with us.  #### Custom authorization header You can authorize by providing additional custom header named `X-CoinAPI-Key` and API key as its value. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY`, then the authorization header you should send to us will look like: `X-CoinAPI-Key: 73034021-THIS-IS-SAMPLE-KEY` <aside class=\"success\">This method is recommended by us and you should use it in production environments.</aside> #### Query string authorization parameter You can authorize by providing an additional parameter named `apikey` with a value equal to your API key in the query string of your HTTP request. Assuming that your API key is `73034021-THIS-IS-SAMPLE-KEY` and that you want to request all balances, then your query string should look like this: `GET /v1/balances?apikey=73034021-THIS-IS-SAMPLE-KEY` <aside class=\"notice\">Query string method may be more practical for development activities.</aside>   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@coinapi.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class OrderNewSingleRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The new order message.
    """


    class MetaOapg:
        required = {
            "client_order_id",
            "exchange_id",
            "side",
            "time_in_force",
            "price",
            "amount_order",
            "order_type",
        }
        
        class properties:
            exchange_id = schemas.StrSchema
            client_order_id = schemas.StrSchema
            amount_order = schemas.NumberSchema
            price = schemas.NumberSchema
        
            @staticmethod
            def side() -> typing.Type['OrdSide']:
                return OrdSide
        
            @staticmethod
            def order_type() -> typing.Type['OrdType']:
                return OrdType
        
            @staticmethod
            def time_in_force() -> typing.Type['TimeInForce']:
                return TimeInForce
            symbol_id_exchange = schemas.StrSchema
            symbol_id_coinapi = schemas.StrSchema
            expire_time = schemas.Schema
        
            @staticmethod
            def exec_inst() -> typing.Type['ExecInst']:
                return ExecInst
            __annotations__ = {
                "exchange_id": exchange_id,
                "client_order_id": client_order_id,
                "amount_order": amount_order,
                "price": price,
                "side": side,
                "order_type": order_type,
                "time_in_force": time_in_force,
                "symbol_id_exchange": symbol_id_exchange,
                "symbol_id_coinapi": symbol_id_coinapi,
                "expire_time": expire_time,
                "exec_inst": exec_inst,
            }
    
    client_order_id: MetaOapg.properties.client_order_id
    exchange_id: MetaOapg.properties.exchange_id
    side: 'OrdSide'
    time_in_force: 'TimeInForce'
    price: MetaOapg.properties.price
    amount_order: MetaOapg.properties.amount_order
    order_type: 'OrdType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exchange_id"]) -> MetaOapg.properties.exchange_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_order_id"]) -> MetaOapg.properties.client_order_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount_order"]) -> MetaOapg.properties.amount_order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["side"]) -> 'OrdSide': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_type"]) -> 'OrdType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_in_force"]) -> 'TimeInForce': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol_id_exchange"]) -> MetaOapg.properties.symbol_id_exchange: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol_id_coinapi"]) -> MetaOapg.properties.symbol_id_coinapi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expire_time"]) -> MetaOapg.properties.expire_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exec_inst"]) -> 'ExecInst': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["exchange_id", "client_order_id", "amount_order", "price", "side", "order_type", "time_in_force", "symbol_id_exchange", "symbol_id_coinapi", "expire_time", "exec_inst", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exchange_id"]) -> MetaOapg.properties.exchange_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_order_id"]) -> MetaOapg.properties.client_order_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount_order"]) -> MetaOapg.properties.amount_order: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["side"]) -> 'OrdSide': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_type"]) -> 'OrdType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_in_force"]) -> 'TimeInForce': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol_id_exchange"]) -> typing.Union[MetaOapg.properties.symbol_id_exchange, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol_id_coinapi"]) -> typing.Union[MetaOapg.properties.symbol_id_coinapi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expire_time"]) -> typing.Union[MetaOapg.properties.expire_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exec_inst"]) -> typing.Union['ExecInst', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["exchange_id", "client_order_id", "amount_order", "price", "side", "order_type", "time_in_force", "symbol_id_exchange", "symbol_id_coinapi", "expire_time", "exec_inst", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        client_order_id: typing.Union[MetaOapg.properties.client_order_id, str, ],
        exchange_id: typing.Union[MetaOapg.properties.exchange_id, str, ],
        side: 'OrdSide',
        time_in_force: 'TimeInForce',
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        amount_order: typing.Union[MetaOapg.properties.amount_order, decimal.Decimal, int, float, ],
        order_type: 'OrdType',
        symbol_id_exchange: typing.Union[MetaOapg.properties.symbol_id_exchange, str, schemas.Unset] = schemas.unset,
        symbol_id_coinapi: typing.Union[MetaOapg.properties.symbol_id_coinapi, str, schemas.Unset] = schemas.unset,
        expire_time: typing.Union[MetaOapg.properties.expire_time, schemas.Unset] = schemas.unset,
        exec_inst: typing.Union['ExecInst', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderNewSingleRequest':
        return super().__new__(
            cls,
            *_args,
            client_order_id=client_order_id,
            exchange_id=exchange_id,
            side=side,
            time_in_force=time_in_force,
            price=price,
            amount_order=amount_order,
            order_type=order_type,
            symbol_id_exchange=symbol_id_exchange,
            symbol_id_coinapi=symbol_id_coinapi,
            expire_time=expire_time,
            exec_inst=exec_inst,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.exec_inst import ExecInst
from openapi_client.model.ord_side import OrdSide
from openapi_client.model.ord_type import OrdType
from openapi_client.model.time_in_force import TimeInForce
